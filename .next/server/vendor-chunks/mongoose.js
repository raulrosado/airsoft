/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mongoose";
exports.ids = ["vendor-chunks/mongoose"];
exports.modules = {

/***/ "(ssr)/./node_modules/mongoose/index.js":
/*!****************************************!*\
  !*** ./node_modules/mongoose/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Export lib/mongoose\n *\n */\n\n\n\nconst mongoose = __webpack_require__(/*! ./lib/ */ \"(ssr)/./node_modules/mongoose/lib/index.js\");\n\nmodule.exports = mongoose;\nmodule.exports[\"default\"] = mongoose;\nmodule.exports.mongoose = mongoose;\n\n// Re-export for ESM support\nmodule.exports.cast = mongoose.cast;\nmodule.exports.STATES = mongoose.STATES;\nmodule.exports.setDriver = mongoose.setDriver;\nmodule.exports.set = mongoose.set;\nmodule.exports.get = mongoose.get;\nmodule.exports.createConnection = mongoose.createConnection;\nmodule.exports.connect = mongoose.connect;\nmodule.exports.disconnect = mongoose.disconnect;\nmodule.exports.startSession = mongoose.startSession;\nmodule.exports.pluralize = mongoose.pluralize;\nmodule.exports.model = mongoose.model;\nmodule.exports.deleteModel = mongoose.deleteModel;\nmodule.exports.modelNames = mongoose.modelNames;\nmodule.exports.plugin = mongoose.plugin;\nmodule.exports.connections = mongoose.connections;\nmodule.exports.version = mongoose.version;\nmodule.exports.Mongoose = mongoose.Mongoose;\nmodule.exports.Schema = mongoose.Schema;\nmodule.exports.SchemaType = mongoose.SchemaType;\nmodule.exports.SchemaTypes = mongoose.SchemaTypes;\nmodule.exports.VirtualType = mongoose.VirtualType;\nmodule.exports.Types = mongoose.Types;\nmodule.exports.Query = mongoose.Query;\nmodule.exports.Model = mongoose.Model;\nmodule.exports.Document = mongoose.Document;\nmodule.exports.ObjectId = mongoose.ObjectId;\nmodule.exports.isValidObjectId = mongoose.isValidObjectId;\nmodule.exports.isObjectIdOrHexString = mongoose.isObjectIdOrHexString;\nmodule.exports.syncIndexes = mongoose.syncIndexes;\nmodule.exports.Decimal128 = mongoose.Decimal128;\nmodule.exports.Mixed = mongoose.Mixed;\nmodule.exports.Date = mongoose.Date;\nmodule.exports.Number = mongoose.Number;\nmodule.exports.Error = mongoose.Error;\nmodule.exports.MongooseError = mongoose.MongooseError;\nmodule.exports.now = mongoose.now;\nmodule.exports.CastError = mongoose.CastError;\nmodule.exports.SchemaTypeOptions = mongoose.SchemaTypeOptions;\nmodule.exports.mongo = mongoose.mongo;\nmodule.exports.mquery = mongoose.mquery;\nmodule.exports.sanitizeFilter = mongoose.sanitizeFilter;\nmodule.exports.trusted = mongoose.trusted;\nmodule.exports.skipMiddlewareFunction = mongoose.skipMiddlewareFunction;\nmodule.exports.overwriteMiddlewareResult = mongoose.overwriteMiddlewareResult;\n\n// The following properties are not exported using ESM because `setDriver()` can mutate these\n// module.exports.connection = mongoose.connection;\n// module.exports.Collection = mongoose.Collection;\n// module.exports.Connection = mongoose.Connection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWIsaUJBQWlCLG1CQUFPLENBQUMsMERBQVE7O0FBRWpDO0FBQ0EseUJBQXNCO0FBQ3RCLHVCQUF1Qjs7QUFFdkI7QUFDQSxtQkFBbUI7QUFDbkIscUJBQXFCO0FBQ3JCLHdCQUF3QjtBQUN4QixrQkFBa0I7QUFDbEIsa0JBQWtCO0FBQ2xCLCtCQUErQjtBQUMvQixzQkFBc0I7QUFDdEIseUJBQXlCO0FBQ3pCLDJCQUEyQjtBQUMzQix3QkFBd0I7QUFDeEIsb0JBQW9CO0FBQ3BCLDBCQUEwQjtBQUMxQix5QkFBeUI7QUFDekIscUJBQXFCO0FBQ3JCLDBCQUEwQjtBQUMxQixzQkFBc0I7QUFDdEIsdUJBQXVCO0FBQ3ZCLHFCQUFxQjtBQUNyQix5QkFBeUI7QUFDekIsMEJBQTBCO0FBQzFCLDBCQUEwQjtBQUMxQixvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQix1QkFBdUI7QUFDdkIsdUJBQXVCO0FBQ3ZCLDhCQUE4QjtBQUM5QixvQ0FBb0M7QUFDcEMsMEJBQTBCO0FBQzFCLHlCQUF5QjtBQUN6QixvQkFBb0I7QUFDcEIsbUJBQW1CO0FBQ25CLHFCQUFxQjtBQUNyQixvQkFBb0I7QUFDcEIsNEJBQTRCO0FBQzVCLGtCQUFrQjtBQUNsQix3QkFBd0I7QUFDeEIsZ0NBQWdDO0FBQ2hDLG9CQUFvQjtBQUNwQixxQkFBcUI7QUFDckIsNkJBQTZCO0FBQzdCLHNCQUFzQjtBQUN0QixxQ0FBcUM7QUFDckMsd0NBQXdDOztBQUV4QztBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvaW5kZXguanM/OWVjNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4cG9ydCBsaWIvbW9uZ29vc2VcbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBtb25nb29zZSA9IHJlcXVpcmUoJy4vbGliLycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1vbmdvb3NlO1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IG1vbmdvb3NlO1xubW9kdWxlLmV4cG9ydHMubW9uZ29vc2UgPSBtb25nb29zZTtcblxuLy8gUmUtZXhwb3J0IGZvciBFU00gc3VwcG9ydFxubW9kdWxlLmV4cG9ydHMuY2FzdCA9IG1vbmdvb3NlLmNhc3Q7XG5tb2R1bGUuZXhwb3J0cy5TVEFURVMgPSBtb25nb29zZS5TVEFURVM7XG5tb2R1bGUuZXhwb3J0cy5zZXREcml2ZXIgPSBtb25nb29zZS5zZXREcml2ZXI7XG5tb2R1bGUuZXhwb3J0cy5zZXQgPSBtb25nb29zZS5zZXQ7XG5tb2R1bGUuZXhwb3J0cy5nZXQgPSBtb25nb29zZS5nZXQ7XG5tb2R1bGUuZXhwb3J0cy5jcmVhdGVDb25uZWN0aW9uID0gbW9uZ29vc2UuY3JlYXRlQ29ubmVjdGlvbjtcbm1vZHVsZS5leHBvcnRzLmNvbm5lY3QgPSBtb25nb29zZS5jb25uZWN0O1xubW9kdWxlLmV4cG9ydHMuZGlzY29ubmVjdCA9IG1vbmdvb3NlLmRpc2Nvbm5lY3Q7XG5tb2R1bGUuZXhwb3J0cy5zdGFydFNlc3Npb24gPSBtb25nb29zZS5zdGFydFNlc3Npb247XG5tb2R1bGUuZXhwb3J0cy5wbHVyYWxpemUgPSBtb25nb29zZS5wbHVyYWxpemU7XG5tb2R1bGUuZXhwb3J0cy5tb2RlbCA9IG1vbmdvb3NlLm1vZGVsO1xubW9kdWxlLmV4cG9ydHMuZGVsZXRlTW9kZWwgPSBtb25nb29zZS5kZWxldGVNb2RlbDtcbm1vZHVsZS5leHBvcnRzLm1vZGVsTmFtZXMgPSBtb25nb29zZS5tb2RlbE5hbWVzO1xubW9kdWxlLmV4cG9ydHMucGx1Z2luID0gbW9uZ29vc2UucGx1Z2luO1xubW9kdWxlLmV4cG9ydHMuY29ubmVjdGlvbnMgPSBtb25nb29zZS5jb25uZWN0aW9ucztcbm1vZHVsZS5leHBvcnRzLnZlcnNpb24gPSBtb25nb29zZS52ZXJzaW9uO1xubW9kdWxlLmV4cG9ydHMuTW9uZ29vc2UgPSBtb25nb29zZS5Nb25nb29zZTtcbm1vZHVsZS5leHBvcnRzLlNjaGVtYSA9IG1vbmdvb3NlLlNjaGVtYTtcbm1vZHVsZS5leHBvcnRzLlNjaGVtYVR5cGUgPSBtb25nb29zZS5TY2hlbWFUeXBlO1xubW9kdWxlLmV4cG9ydHMuU2NoZW1hVHlwZXMgPSBtb25nb29zZS5TY2hlbWFUeXBlcztcbm1vZHVsZS5leHBvcnRzLlZpcnR1YWxUeXBlID0gbW9uZ29vc2UuVmlydHVhbFR5cGU7XG5tb2R1bGUuZXhwb3J0cy5UeXBlcyA9IG1vbmdvb3NlLlR5cGVzO1xubW9kdWxlLmV4cG9ydHMuUXVlcnkgPSBtb25nb29zZS5RdWVyeTtcbm1vZHVsZS5leHBvcnRzLk1vZGVsID0gbW9uZ29vc2UuTW9kZWw7XG5tb2R1bGUuZXhwb3J0cy5Eb2N1bWVudCA9IG1vbmdvb3NlLkRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMuT2JqZWN0SWQgPSBtb25nb29zZS5PYmplY3RJZDtcbm1vZHVsZS5leHBvcnRzLmlzVmFsaWRPYmplY3RJZCA9IG1vbmdvb3NlLmlzVmFsaWRPYmplY3RJZDtcbm1vZHVsZS5leHBvcnRzLmlzT2JqZWN0SWRPckhleFN0cmluZyA9IG1vbmdvb3NlLmlzT2JqZWN0SWRPckhleFN0cmluZztcbm1vZHVsZS5leHBvcnRzLnN5bmNJbmRleGVzID0gbW9uZ29vc2Uuc3luY0luZGV4ZXM7XG5tb2R1bGUuZXhwb3J0cy5EZWNpbWFsMTI4ID0gbW9uZ29vc2UuRGVjaW1hbDEyODtcbm1vZHVsZS5leHBvcnRzLk1peGVkID0gbW9uZ29vc2UuTWl4ZWQ7XG5tb2R1bGUuZXhwb3J0cy5EYXRlID0gbW9uZ29vc2UuRGF0ZTtcbm1vZHVsZS5leHBvcnRzLk51bWJlciA9IG1vbmdvb3NlLk51bWJlcjtcbm1vZHVsZS5leHBvcnRzLkVycm9yID0gbW9uZ29vc2UuRXJyb3I7XG5tb2R1bGUuZXhwb3J0cy5Nb25nb29zZUVycm9yID0gbW9uZ29vc2UuTW9uZ29vc2VFcnJvcjtcbm1vZHVsZS5leHBvcnRzLm5vdyA9IG1vbmdvb3NlLm5vdztcbm1vZHVsZS5leHBvcnRzLkNhc3RFcnJvciA9IG1vbmdvb3NlLkNhc3RFcnJvcjtcbm1vZHVsZS5leHBvcnRzLlNjaGVtYVR5cGVPcHRpb25zID0gbW9uZ29vc2UuU2NoZW1hVHlwZU9wdGlvbnM7XG5tb2R1bGUuZXhwb3J0cy5tb25nbyA9IG1vbmdvb3NlLm1vbmdvO1xubW9kdWxlLmV4cG9ydHMubXF1ZXJ5ID0gbW9uZ29vc2UubXF1ZXJ5O1xubW9kdWxlLmV4cG9ydHMuc2FuaXRpemVGaWx0ZXIgPSBtb25nb29zZS5zYW5pdGl6ZUZpbHRlcjtcbm1vZHVsZS5leHBvcnRzLnRydXN0ZWQgPSBtb25nb29zZS50cnVzdGVkO1xubW9kdWxlLmV4cG9ydHMuc2tpcE1pZGRsZXdhcmVGdW5jdGlvbiA9IG1vbmdvb3NlLnNraXBNaWRkbGV3YXJlRnVuY3Rpb247XG5tb2R1bGUuZXhwb3J0cy5vdmVyd3JpdGVNaWRkbGV3YXJlUmVzdWx0ID0gbW9uZ29vc2Uub3ZlcndyaXRlTWlkZGxld2FyZVJlc3VsdDtcblxuLy8gVGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzIGFyZSBub3QgZXhwb3J0ZWQgdXNpbmcgRVNNIGJlY2F1c2UgYHNldERyaXZlcigpYCBjYW4gbXV0YXRlIHRoZXNlXG4vLyBtb2R1bGUuZXhwb3J0cy5jb25uZWN0aW9uID0gbW9uZ29vc2UuY29ubmVjdGlvbjtcbi8vIG1vZHVsZS5leHBvcnRzLkNvbGxlY3Rpb24gPSBtb25nb29zZS5Db2xsZWN0aW9uO1xuLy8gbW9kdWxlLmV4cG9ydHMuQ29ubmVjdGlvbiA9IG1vbmdvb3NlLkNvbm5lY3Rpb247XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/aggregate.js":
/*!************************************************!*\
  !*** ./node_modules/mongoose/lib/aggregate.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies\n */\n\nconst AggregationCursor = __webpack_require__(/*! ./cursor/aggregationCursor */ \"(ssr)/./node_modules/mongoose/lib/cursor/aggregationCursor.js\");\nconst MongooseError = __webpack_require__(/*! ./error/mongooseError */ \"(ssr)/./node_modules/mongoose/lib/error/mongooseError.js\");\nconst Query = __webpack_require__(/*! ./query */ \"(ssr)/./node_modules/mongoose/lib/query.js\");\nconst { applyGlobalMaxTimeMS, applyGlobalDiskUse } = __webpack_require__(/*! ./helpers/query/applyGlobalOption */ \"(ssr)/./node_modules/mongoose/lib/helpers/query/applyGlobalOption.js\");\nconst clone = __webpack_require__(/*! ./helpers/clone */ \"(ssr)/./node_modules/mongoose/lib/helpers/clone.js\");\nconst getConstructorName = __webpack_require__(/*! ./helpers/getConstructorName */ \"(ssr)/./node_modules/mongoose/lib/helpers/getConstructorName.js\");\nconst prepareDiscriminatorPipeline = __webpack_require__(/*! ./helpers/aggregate/prepareDiscriminatorPipeline */ \"(ssr)/./node_modules/mongoose/lib/helpers/aggregate/prepareDiscriminatorPipeline.js\");\nconst stringifyFunctionOperators = __webpack_require__(/*! ./helpers/aggregate/stringifyFunctionOperators */ \"(ssr)/./node_modules/mongoose/lib/helpers/aggregate/stringifyFunctionOperators.js\");\nconst utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\nconst read = Query.prototype.read;\nconst readConcern = Query.prototype.readConcern;\n\nconst validRedactStringValues = new Set(['$$DESCEND', '$$PRUNE', '$$KEEP']);\n\n/**\n * Aggregate constructor used for building aggregation pipelines. Do not\n * instantiate this class directly, use [Model.aggregate()](https://mongoosejs.com/docs/api/model.html#Model.aggregate()) instead.\n *\n * #### Example:\n *\n *     const aggregate = Model.aggregate([\n *       { $project: { a: 1, b: 1 } },\n *       { $skip: 5 }\n *     ]);\n *\n *     Model.\n *       aggregate([{ $match: { age: { $gte: 21 }}}]).\n *       unwind('tags').\n *       exec();\n *\n * #### Note:\n *\n * - The documents returned are plain javascript objects, not mongoose documents (since any shape of document can be returned).\n * - Mongoose does **not** cast pipeline stages. The below will **not** work unless `_id` is a string in the database\n *\n *     new Aggregate([{ $match: { _id: '00000000000000000000000a' } }]);\n *     // Do this instead to cast to an ObjectId\n *     new Aggregate([{ $match: { _id: new mongoose.Types.ObjectId('00000000000000000000000a') } }]);\n *\n * @see MongoDB https://www.mongodb.com/docs/manual/applications/aggregation/\n * @see driver https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#aggregate\n * @param {Array} [pipeline] aggregation pipeline as an array of objects\n * @param {Model} [model] the model to use with this aggregate.\n * @api public\n */\n\nfunction Aggregate(pipeline, model) {\n  this._pipeline = [];\n  this._model = model;\n  this.options = {};\n\n  if (arguments.length === 1 && Array.isArray(pipeline)) {\n    this.append.apply(this, pipeline);\n  }\n}\n\n/**\n * Contains options passed down to the [aggregate command](https://www.mongodb.com/docs/manual/reference/command/aggregate/).\n * Supported options are:\n *\n * - [`allowDiskUse`](https://mongoosejs.com/docs/api/aggregate.html#Aggregate.prototype.allowDiskUse())\n * - `bypassDocumentValidation`\n * - [`collation`](https://mongoosejs.com/docs/api/aggregate.html#Aggregate.prototype.collation())\n * - `comment`\n * - [`cursor`](https://mongoosejs.com/docs/api/aggregate.html#Aggregate.prototype.cursor())\n * - [`explain`](https://mongoosejs.com/docs/api/aggregate.html#Aggregate.prototype.explain())\n * - `fieldsAsRaw`\n * - [`hint`](https://mongoosejs.com/docs/api/aggregate.html#Aggregate.prototype.hint())\n * - `let`\n * - `maxTimeMS`\n * - `raw`\n * - [`readConcern`](https://mongoosejs.com/docs/api/aggregate.html#Aggregate.prototype.readConcern())\n * - `readPreference`\n * - [`session`](https://mongoosejs.com/docs/api/aggregate.html#Aggregate.prototype.session())\n * - `writeConcern`\n *\n * @property options\n * @memberOf Aggregate\n * @api public\n */\n\nAggregate.prototype.options;\n\n/**\n * Get/set the model that this aggregation will execute on.\n *\n * #### Example:\n *\n *     const aggregate = MyModel.aggregate([{ $match: { answer: 42 } }]);\n *     aggregate.model() === MyModel; // true\n *\n *     // Change the model. There's rarely any reason to do this.\n *     aggregate.model(SomeOtherModel);\n *     aggregate.model() === SomeOtherModel; // true\n *\n * @param {Model} [model] Set the model associated with this aggregate. If not provided, returns the already stored model.\n * @return {Model}\n * @api public\n */\n\nAggregate.prototype.model = function(model) {\n  if (arguments.length === 0) {\n    return this._model;\n  }\n\n  this._model = model;\n  if (model.schema != null) {\n    if (this.options.readPreference == null &&\n      model.schema.options.read != null) {\n      this.options.readPreference = model.schema.options.read;\n    }\n    if (this.options.collation == null &&\n      model.schema.options.collation != null) {\n      this.options.collation = model.schema.options.collation;\n    }\n  }\n\n  return model;\n};\n\n/**\n * Appends new operators to this aggregate pipeline\n *\n * #### Example:\n *\n *     aggregate.append({ $project: { field: 1 }}, { $limit: 2 });\n *\n *     // or pass an array\n *     const pipeline = [{ $match: { daw: 'Logic Audio X' }} ];\n *     aggregate.append(pipeline);\n *\n * @param {...Object|Object[]} ops operator(s) to append. Can either be a spread of objects or a single parameter of a object array.\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.append = function() {\n  const args = (arguments.length === 1 && Array.isArray(arguments[0]))\n    ? arguments[0]\n    : [...arguments];\n\n  if (!args.every(isOperator)) {\n    throw new Error('Arguments must be aggregate pipeline operators');\n  }\n\n  this._pipeline = this._pipeline.concat(args);\n\n  return this;\n};\n\n/**\n * Appends a new $addFields operator to this aggregate pipeline.\n * Requires MongoDB v3.4+ to work\n *\n * #### Example:\n *\n *     // adding new fields based on existing fields\n *     aggregate.addFields({\n *         newField: '$b.nested'\n *       , plusTen: { $add: ['$val', 10]}\n *       , sub: {\n *            name: '$a'\n *         }\n *     })\n *\n *     // etc\n *     aggregate.addFields({ salary_k: { $divide: [ \"$salary\", 1000 ] } });\n *\n * @param {Object} arg field specification\n * @see $addFields https://www.mongodb.com/docs/manual/reference/operator/aggregation/addFields/\n * @return {Aggregate}\n * @api public\n */\nAggregate.prototype.addFields = function(arg) {\n  if (typeof arg !== 'object' || arg === null || Array.isArray(arg)) {\n    throw new Error('Invalid addFields() argument. Must be an object');\n  }\n  return this.append({ $addFields: Object.assign({}, arg) });\n};\n\n/**\n * Appends a new $project operator to this aggregate pipeline.\n *\n * Mongoose query [selection syntax](https://mongoosejs.com/docs/api/query.html#Query.prototype.select()) is also supported.\n *\n * #### Example:\n *\n *     // include a, include b, exclude _id\n *     aggregate.project(\"a b -_id\");\n *\n *     // or you may use object notation, useful when\n *     // you have keys already prefixed with a \"-\"\n *     aggregate.project({a: 1, b: 1, _id: 0});\n *\n *     // reshaping documents\n *     aggregate.project({\n *         newField: '$b.nested'\n *       , plusTen: { $add: ['$val', 10]}\n *       , sub: {\n *            name: '$a'\n *         }\n *     })\n *\n *     // etc\n *     aggregate.project({ salary_k: { $divide: [ \"$salary\", 1000 ] } });\n *\n * @param {Object|String} arg field specification\n * @see projection https://www.mongodb.com/docs/manual/reference/aggregation/project/\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.project = function(arg) {\n  const fields = {};\n\n  if (typeof arg === 'object' && !Array.isArray(arg)) {\n    Object.keys(arg).forEach(function(field) {\n      fields[field] = arg[field];\n    });\n  } else if (arguments.length === 1 && typeof arg === 'string') {\n    arg.split(/\\s+/).forEach(function(field) {\n      if (!field) {\n        return;\n      }\n      const include = field[0] === '-' ? 0 : 1;\n      if (include === 0) {\n        field = field.substring(1);\n      }\n      fields[field] = include;\n    });\n  } else {\n    throw new Error('Invalid project() argument. Must be string or object');\n  }\n\n  return this.append({ $project: fields });\n};\n\n/**\n * Appends a new custom $group operator to this aggregate pipeline.\n *\n * #### Example:\n *\n *     aggregate.group({ _id: \"$department\" });\n *\n * @see $group https://www.mongodb.com/docs/manual/reference/aggregation/group/\n * @method group\n * @memberOf Aggregate\n * @instance\n * @param {Object} arg $group operator contents\n * @return {Aggregate}\n * @api public\n */\n\n/**\n * Appends a new custom $match operator to this aggregate pipeline.\n *\n * #### Example:\n *\n *     aggregate.match({ department: { $in: [ \"sales\", \"engineering\" ] } });\n *\n * @see $match https://www.mongodb.com/docs/manual/reference/aggregation/match/\n * @method match\n * @memberOf Aggregate\n * @instance\n * @param {Object} arg $match operator contents\n * @return {Aggregate}\n * @api public\n */\n\n/**\n * Appends a new $skip operator to this aggregate pipeline.\n *\n * #### Example:\n *\n *     aggregate.skip(10);\n *\n * @see $skip https://www.mongodb.com/docs/manual/reference/aggregation/skip/\n * @method skip\n * @memberOf Aggregate\n * @instance\n * @param {Number} num number of records to skip before next stage\n * @return {Aggregate}\n * @api public\n */\n\n/**\n * Appends a new $limit operator to this aggregate pipeline.\n *\n * #### Example:\n *\n *     aggregate.limit(10);\n *\n * @see $limit https://www.mongodb.com/docs/manual/reference/aggregation/limit/\n * @method limit\n * @memberOf Aggregate\n * @instance\n * @param {Number} num maximum number of records to pass to the next stage\n * @return {Aggregate}\n * @api public\n */\n\n\n/**\n * Appends a new $densify operator to this aggregate pipeline.\n *\n * #### Example:\n *\n *      aggregate.densify({\n *        field: 'timestamp',\n *        range: {\n *          step: 1,\n *          unit: 'hour',\n *          bounds: [new Date('2021-05-18T00:00:00.000Z'), new Date('2021-05-18T08:00:00.000Z')]\n *        }\n *      });\n *\n * @see $densify https://www.mongodb.com/docs/manual/reference/operator/aggregation/densify/\n * @method densify\n * @memberOf Aggregate\n * @instance\n * @param {Object} arg $densify operator contents\n * @return {Aggregate}\n * @api public\n */\n\n/**\n * Appends a new $fill operator to this aggregate pipeline.\n *\n * #### Example:\n *\n *      aggregate.fill({\n *        output: {\n *          bootsSold: { value: 0 },\n *          sandalsSold: { value: 0 },\n *          sneakersSold: { value: 0 }\n *        }\n *      });\n *\n * @see $fill https://www.mongodb.com/docs/manual/reference/operator/aggregation/fill/\n * @method fill\n * @memberOf Aggregate\n * @instance\n * @param {Object} arg $fill operator contents\n * @return {Aggregate}\n * @api public\n */\n\n/**\n * Appends a new $geoNear operator to this aggregate pipeline.\n *\n * #### Note:\n *\n * **MUST** be used as the first operator in the pipeline.\n *\n * #### Example:\n *\n *     aggregate.near({\n *       near: { type: 'Point', coordinates: [40.724, -73.997] },\n *       distanceField: \"dist.calculated\", // required\n *       maxDistance: 0.008,\n *       query: { type: \"public\" },\n *       includeLocs: \"dist.location\",\n *       spherical: true,\n *     });\n *\n * @see $geoNear https://www.mongodb.com/docs/manual/reference/aggregation/geoNear/\n * @method near\n * @memberOf Aggregate\n * @instance\n * @param {Object} arg\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.near = function(arg) {\n  const op = {};\n  op.$geoNear = arg;\n  return this.append(op);\n};\n\n/*!\n * define methods\n */\n\n'group match skip limit out densify fill'.split(' ').forEach(function($operator) {\n  Aggregate.prototype[$operator] = function(arg) {\n    const op = {};\n    op['$' + $operator] = arg;\n    return this.append(op);\n  };\n});\n\n/**\n * Appends new custom $unwind operator(s) to this aggregate pipeline.\n *\n * Note that the `$unwind` operator requires the path name to start with '$'.\n * Mongoose will prepend '$' if the specified field doesn't start '$'.\n *\n * #### Example:\n *\n *     aggregate.unwind(\"tags\");\n *     aggregate.unwind(\"a\", \"b\", \"c\");\n *     aggregate.unwind({ path: '$tags', preserveNullAndEmptyArrays: true });\n *\n * @see $unwind https://www.mongodb.com/docs/manual/reference/aggregation/unwind/\n * @param {String|Object|String[]|Object[]} fields the field(s) to unwind, either as field names or as [objects with options](https://www.mongodb.com/docs/manual/reference/operator/aggregation/unwind/#document-operand-with-options). If passing a string, prefixing the field name with '$' is optional. If passing an object, `path` must start with '$'.\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.unwind = function() {\n  const args = [...arguments];\n\n  const res = [];\n  for (const arg of args) {\n    if (arg && typeof arg === 'object') {\n      res.push({ $unwind: arg });\n    } else if (typeof arg === 'string') {\n      res.push({\n        $unwind: (arg[0] === '$') ? arg : '$' + arg\n      });\n    } else {\n      throw new Error('Invalid arg \"' + arg + '\" to unwind(), ' +\n        'must be string or object');\n    }\n  }\n\n  return this.append.apply(this, res);\n};\n\n/**\n * Appends a new $replaceRoot operator to this aggregate pipeline.\n *\n * Note that the `$replaceRoot` operator requires field strings to start with '$'.\n * If you are passing in a string Mongoose will prepend '$' if the specified field doesn't start '$'.\n * If you are passing in an object the strings in your expression will not be altered.\n *\n * #### Example:\n *\n *     aggregate.replaceRoot(\"user\");\n *\n *     aggregate.replaceRoot({ x: { $concat: ['$this', '$that'] } });\n *\n * @see $replaceRoot https://www.mongodb.com/docs/manual/reference/operator/aggregation/replaceRoot\n * @param {String|Object} newRoot the field or document which will become the new root document\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.replaceRoot = function(newRoot) {\n  let ret;\n\n  if (typeof newRoot === 'string') {\n    ret = newRoot.startsWith('$') ? newRoot : '$' + newRoot;\n  } else {\n    ret = newRoot;\n  }\n\n  return this.append({\n    $replaceRoot: {\n      newRoot: ret\n    }\n  });\n};\n\n/**\n * Appends a new $count operator to this aggregate pipeline.\n *\n * #### Example:\n *\n *     aggregate.count(\"userCount\");\n *\n * @see $count https://www.mongodb.com/docs/manual/reference/operator/aggregation/count\n * @param {String} fieldName The name of the output field which has the count as its value. It must be a non-empty string, must not start with $ and must not contain the . character.\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.count = function(fieldName) {\n  return this.append({ $count: fieldName });\n};\n\n/**\n * Appends a new $sortByCount operator to this aggregate pipeline. Accepts either a string field name\n * or a pipeline object.\n *\n * Note that the `$sortByCount` operator requires the new root to start with '$'.\n * Mongoose will prepend '$' if the specified field name doesn't start with '$'.\n *\n * #### Example:\n *\n *     aggregate.sortByCount('users');\n *     aggregate.sortByCount({ $mergeObjects: [ \"$employee\", \"$business\" ] })\n *\n * @see $sortByCount https://www.mongodb.com/docs/manual/reference/operator/aggregation/sortByCount/\n * @param {Object|String} arg\n * @return {Aggregate} this\n * @api public\n */\n\nAggregate.prototype.sortByCount = function(arg) {\n  if (arg && typeof arg === 'object') {\n    return this.append({ $sortByCount: arg });\n  } else if (typeof arg === 'string') {\n    return this.append({\n      $sortByCount: (arg[0] === '$') ? arg : '$' + arg\n    });\n  } else {\n    throw new TypeError('Invalid arg \"' + arg + '\" to sortByCount(), ' +\n      'must be string or object');\n  }\n};\n\n/**\n * Appends new custom $lookup operator to this aggregate pipeline.\n *\n * #### Example:\n *\n *     aggregate.lookup({ from: 'users', localField: 'userId', foreignField: '_id', as: 'users' });\n *\n * @see $lookup https://www.mongodb.com/docs/manual/reference/operator/aggregation/lookup/#pipe._S_lookup\n * @param {Object} options to $lookup as described in the above link\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.lookup = function(options) {\n  return this.append({ $lookup: options });\n};\n\n/**\n * Appends new custom $graphLookup operator(s) to this aggregate pipeline, performing a recursive search on a collection.\n *\n * Note that graphLookup can only consume at most 100MB of memory, and does not allow disk use even if `{ allowDiskUse: true }` is specified.\n *\n * #### Example:\n *\n *      // Suppose we have a collection of courses, where a document might look like `{ _id: 0, name: 'Calculus', prerequisite: 'Trigonometry'}` and `{ _id: 0, name: 'Trigonometry', prerequisite: 'Algebra' }`\n *      aggregate.graphLookup({ from: 'courses', startWith: '$prerequisite', connectFromField: 'prerequisite', connectToField: 'name', as: 'prerequisites', maxDepth: 3 }) // this will recursively search the 'courses' collection up to 3 prerequisites\n *\n * @see $graphLookup https://www.mongodb.com/docs/manual/reference/operator/aggregation/graphLookup/#pipe._S_graphLookup\n * @param {Object} options to $graphLookup as described in the above link\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.graphLookup = function(options) {\n  const cloneOptions = {};\n  if (options) {\n    if (!utils.isObject(options)) {\n      throw new TypeError('Invalid graphLookup() argument. Must be an object.');\n    }\n\n    utils.mergeClone(cloneOptions, options);\n    const startWith = cloneOptions.startWith;\n\n    if (startWith && typeof startWith === 'string') {\n      cloneOptions.startWith = cloneOptions.startWith.startsWith('$') ?\n        cloneOptions.startWith :\n        '$' + cloneOptions.startWith;\n    }\n\n  }\n  return this.append({ $graphLookup: cloneOptions });\n};\n\n/**\n * Appends new custom $sample operator to this aggregate pipeline.\n *\n * #### Example:\n *\n *     aggregate.sample(3); // Add a pipeline that picks 3 random documents\n *\n * @see $sample https://www.mongodb.com/docs/manual/reference/operator/aggregation/sample/#pipe._S_sample\n * @param {Number} size number of random documents to pick\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.sample = function(size) {\n  return this.append({ $sample: { size: size } });\n};\n\n/**\n * Appends a new $sort operator to this aggregate pipeline.\n *\n * If an object is passed, values allowed are `asc`, `desc`, `ascending`, `descending`, `1`, and `-1`.\n *\n * If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with `-` which will be treated as descending.\n *\n * #### Example:\n *\n *     // these are equivalent\n *     aggregate.sort({ field: 'asc', test: -1 });\n *     aggregate.sort('field -test');\n *\n * @see $sort https://www.mongodb.com/docs/manual/reference/aggregation/sort/\n * @param {Object|String} arg\n * @return {Aggregate} this\n * @api public\n */\n\nAggregate.prototype.sort = function(arg) {\n  // TODO refactor to reuse the query builder logic\n\n  const sort = {};\n\n  if (getConstructorName(arg) === 'Object') {\n    const desc = ['desc', 'descending', -1];\n    Object.keys(arg).forEach(function(field) {\n      // If sorting by text score, skip coercing into 1/-1\n      if (arg[field] instanceof Object && arg[field].$meta) {\n        sort[field] = arg[field];\n        return;\n      }\n      sort[field] = desc.indexOf(arg[field]) === -1 ? 1 : -1;\n    });\n  } else if (arguments.length === 1 && typeof arg === 'string') {\n    arg.split(/\\s+/).forEach(function(field) {\n      if (!field) {\n        return;\n      }\n      const ascend = field[0] === '-' ? -1 : 1;\n      if (ascend === -1) {\n        field = field.substring(1);\n      }\n      sort[field] = ascend;\n    });\n  } else {\n    throw new TypeError('Invalid sort() argument. Must be a string or object.');\n  }\n\n  return this.append({ $sort: sort });\n};\n\n/**\n * Appends new $unionWith operator to this aggregate pipeline.\n *\n * #### Example:\n *\n *     aggregate.unionWith({ coll: 'users', pipeline: [ { $match: { _id: 1 } } ] });\n *\n * @see $unionWith https://www.mongodb.com/docs/manual/reference/operator/aggregation/unionWith\n * @param {Object} options to $unionWith query as described in the above link\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.unionWith = function(options) {\n  return this.append({ $unionWith: options });\n};\n\n\n/**\n * Sets the readPreference option for the aggregation query.\n *\n * #### Example:\n *\n *     await Model.aggregate(pipeline).read('primaryPreferred');\n *\n * @param {String|ReadPreference} pref one of the listed preference options or their aliases\n * @param {Array} [tags] optional tags for this query.\n * @return {Aggregate} this\n * @api public\n * @see mongodb https://www.mongodb.com/docs/manual/applications/replication/#read-preference\n */\n\nAggregate.prototype.read = function(pref, tags) {\n  read.call(this, pref, tags);\n  return this;\n};\n\n/**\n * Sets the readConcern level for the aggregation query.\n *\n * #### Example:\n *\n *     await Model.aggregate(pipeline).readConcern('majority');\n *\n * @param {String} level one of the listed read concern level or their aliases\n * @see mongodb https://www.mongodb.com/docs/manual/reference/read-concern/\n * @return {Aggregate} this\n * @api public\n */\n\nAggregate.prototype.readConcern = function(level) {\n  readConcern.call(this, level);\n  return this;\n};\n\n/**\n * Appends a new $redact operator to this aggregate pipeline.\n *\n * If 3 arguments are supplied, Mongoose will wrap them with if-then-else of $cond operator respectively\n * If `thenExpr` or `elseExpr` is string, make sure it starts with $$, like `$$DESCEND`, `$$PRUNE` or `$$KEEP`.\n *\n * #### Example:\n *\n *     await Model.aggregate(pipeline).redact({\n *       $cond: {\n *         if: { $eq: [ '$level', 5 ] },\n *         then: '$$PRUNE',\n *         else: '$$DESCEND'\n *       }\n *     });\n *\n *     // $redact often comes with $cond operator, you can also use the following syntax provided by mongoose\n *     await Model.aggregate(pipeline).redact({ $eq: [ '$level', 5 ] }, '$$PRUNE', '$$DESCEND');\n *\n * @param {Object} expression redact options or conditional expression\n * @param {String|Object} [thenExpr] true case for the condition\n * @param {String|Object} [elseExpr] false case for the condition\n * @return {Aggregate} this\n * @see $redact https://www.mongodb.com/docs/manual/reference/operator/aggregation/redact/\n * @api public\n */\n\nAggregate.prototype.redact = function(expression, thenExpr, elseExpr) {\n  if (arguments.length === 3) {\n    if ((typeof thenExpr === 'string' && !validRedactStringValues.has(thenExpr)) ||\n      (typeof elseExpr === 'string' && !validRedactStringValues.has(elseExpr))) {\n      throw new Error('If thenExpr or elseExpr is string, it must be either $$DESCEND, $$PRUNE or $$KEEP');\n    }\n\n    expression = {\n      $cond: {\n        if: expression,\n        then: thenExpr,\n        else: elseExpr\n      }\n    };\n  } else if (arguments.length !== 1) {\n    throw new TypeError('Invalid arguments');\n  }\n\n  return this.append({ $redact: expression });\n};\n\n/**\n * Execute the aggregation with explain\n *\n * #### Example:\n *\n *     Model.aggregate(..).explain()\n *\n * @param {String} [verbosity]\n * @return {Promise}\n */\n\nAggregate.prototype.explain = async function explain(verbosity) {\n  if (typeof verbosity === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Aggregate.prototype.explain() no longer accepts a callback');\n  }\n  const model = this._model;\n\n  if (!this._pipeline.length) {\n    throw new Error('Aggregate has empty pipeline');\n  }\n\n  prepareDiscriminatorPipeline(this._pipeline, this._model.schema);\n\n  await new Promise((resolve, reject) => {\n    model.hooks.execPre('aggregate', this, error => {\n      if (error) {\n        const _opts = { error: error };\n        return model.hooks.execPost('aggregate', this, [null], _opts, error => {\n          reject(error);\n        });\n      } else {\n        resolve();\n      }\n    });\n  });\n\n  const cursor = model.collection.aggregate(this._pipeline, this.options);\n\n  if (verbosity == null) {\n    verbosity = true;\n  }\n\n  let result = null;\n  try {\n    result = await cursor.explain(verbosity);\n  } catch (error) {\n    await new Promise((resolve, reject) => {\n      const _opts = { error: error };\n      model.hooks.execPost('aggregate', this, [null], _opts, error => {\n        if (error) {\n          return reject(error);\n        }\n        return resolve();\n      });\n    });\n  }\n\n  const _opts = { error: null };\n  await new Promise((resolve, reject) => {\n    model.hooks.execPost('aggregate', this, [result], _opts, error => {\n      if (error) {\n        return reject(error);\n      }\n      return resolve();\n    });\n  });\n\n  return result;\n};\n\n/**\n * Sets the allowDiskUse option for the aggregation query\n *\n * #### Example:\n *\n *     await Model.aggregate([{ $match: { foo: 'bar' } }]).allowDiskUse(true);\n *\n * @param {Boolean} value Should tell server it can use hard drive to store data during aggregation.\n * @return {Aggregate} this\n * @see mongodb https://www.mongodb.com/docs/manual/reference/command/aggregate/\n */\n\nAggregate.prototype.allowDiskUse = function(value) {\n  this.options.allowDiskUse = value;\n  return this;\n};\n\n/**\n * Sets the hint option for the aggregation query\n *\n * #### Example:\n *\n *     Model.aggregate(..).hint({ qty: 1, category: 1 }).exec();\n *\n * @param {Object|String} value a hint object or the index name\n * @return {Aggregate} this\n * @see mongodb https://www.mongodb.com/docs/manual/reference/command/aggregate/\n */\n\nAggregate.prototype.hint = function(value) {\n  this.options.hint = value;\n  return this;\n};\n\n/**\n * Sets the session for this aggregation. Useful for [transactions](https://mongoosejs.com/docs/transactions.html).\n *\n * #### Example:\n *\n *     const session = await Model.startSession();\n *     await Model.aggregate(..).session(session);\n *\n * @param {ClientSession} session\n * @return {Aggregate} this\n * @see mongodb https://www.mongodb.com/docs/manual/reference/command/aggregate/\n */\n\nAggregate.prototype.session = function(session) {\n  if (session == null) {\n    delete this.options.session;\n  } else {\n    this.options.session = session;\n  }\n  return this;\n};\n\n/**\n * Lets you set arbitrary options, for middleware or plugins.\n *\n * #### Example:\n *\n *     const agg = Model.aggregate(..).option({ allowDiskUse: true }); // Set the `allowDiskUse` option\n *     agg.options; // `{ allowDiskUse: true }`\n *\n * @param {Object} options keys to merge into current options\n * @param {Number} [options.maxTimeMS] number limits the time this aggregation will run, see [MongoDB docs on `maxTimeMS`](https://www.mongodb.com/docs/manual/reference/operator/meta/maxTimeMS/)\n * @param {Boolean} [options.allowDiskUse] boolean if true, the MongoDB server will use the hard drive to store data during this aggregation\n * @param {Object} [options.collation] object see [`Aggregate.prototype.collation()`](https://mongoosejs.com/docs/api/aggregate.html#Aggregate.prototype.collation())\n * @param {ClientSession} [options.session] ClientSession see [`Aggregate.prototype.session()`](https://mongoosejs.com/docs/api/aggregate.html#Aggregate.prototype.session())\n * @see mongodb https://www.mongodb.com/docs/manual/reference/command/aggregate/\n * @return {Aggregate} this\n * @api public\n */\n\nAggregate.prototype.option = function(value) {\n  for (const key in value) {\n    this.options[key] = value[key];\n  }\n  return this;\n};\n\n/**\n * Sets the `cursor` option and executes this aggregation, returning an aggregation cursor.\n * Cursors are useful if you want to process the results of the aggregation one-at-a-time\n * because the aggregation result is too big to fit into memory.\n *\n * #### Example:\n *\n *     const cursor = Model.aggregate(..).cursor({ batchSize: 1000 });\n *     cursor.eachAsync(function(doc, i) {\n *       // use doc\n *     });\n *\n * @param {Object} options\n * @param {Number} [options.batchSize] set the cursor batch size\n * @param {Boolean} [options.useMongooseAggCursor] use experimental mongoose-specific aggregation cursor (for `eachAsync()` and other query cursor semantics)\n * @return {AggregationCursor} cursor representing this aggregation\n * @api public\n * @see mongodb https://mongodb.github.io/node-mongodb-native/4.9/classes/AggregationCursor.html\n */\n\nAggregate.prototype.cursor = function(options) {\n  this.options.cursor = options || {};\n  return new AggregationCursor(this); // return this;\n};\n\n/**\n * Adds a collation\n *\n * #### Example:\n *\n *     const res = await Model.aggregate(pipeline).collation({ locale: 'en_US', strength: 1 });\n *\n * @param {Object} collation options\n * @return {Aggregate} this\n * @api public\n * @see mongodb https://mongodb.github.io/node-mongodb-native/4.9/interfaces/CollationOptions.html\n */\n\nAggregate.prototype.collation = function(collation) {\n  this.options.collation = collation;\n  return this;\n};\n\n/**\n * Combines multiple aggregation pipelines.\n *\n * #### Example:\n *\n *     const res = await Model.aggregate().facet({\n *       books: [{ groupBy: '$author' }],\n *       price: [{ $bucketAuto: { groupBy: '$price', buckets: 2 } }]\n *     });\n *\n *     // Output: { books: [...], price: [{...}, {...}] }\n *\n * @param {Object} facet options\n * @return {Aggregate} this\n * @see $facet https://www.mongodb.com/docs/manual/reference/operator/aggregation/facet/\n * @api public\n */\n\nAggregate.prototype.facet = function(options) {\n  return this.append({ $facet: options });\n};\n\n/**\n * Helper for [Atlas Text Search](https://www.mongodb.com/docs/atlas/atlas-search/tutorial/)'s\n * `$search` stage.\n *\n * #### Example:\n *\n *     const res = await Model.aggregate().\n *      search({\n *        text: {\n *          query: 'baseball',\n *          path: 'plot'\n *        }\n *      });\n *\n *     // Output: [{ plot: '...', title: '...' }]\n *\n * @param {Object} $search options\n * @return {Aggregate} this\n * @see $search https://www.mongodb.com/docs/atlas/atlas-search/tutorial/\n * @api public\n */\n\nAggregate.prototype.search = function(options) {\n  return this.append({ $search: options });\n};\n\n/**\n * Returns the current pipeline\n *\n * #### Example:\n *\n *     MyModel.aggregate().match({ test: 1 }).pipeline(); // [{ $match: { test: 1 } }]\n *\n * @return {Array} The current pipeline similar to the operation that will be executed\n * @api public\n */\n\nAggregate.prototype.pipeline = function() {\n  return this._pipeline;\n};\n\n/**\n * Executes the aggregate pipeline on the currently bound Model.\n *\n * #### Example:\n *     const result = await aggregate.exec();\n *\n * @return {Promise}\n * @api public\n */\n\nAggregate.prototype.exec = async function exec() {\n  if (!this._model) {\n    throw new Error('Aggregate not bound to any Model');\n  }\n  if (typeof arguments[0] === 'function') {\n    throw new MongooseError('Aggregate.prototype.exec() no longer accepts a callback');\n  }\n  const model = this._model;\n  const collection = this._model.collection;\n\n  applyGlobalMaxTimeMS(this.options, model.db.options, model.base.options);\n  applyGlobalDiskUse(this.options, model.db.options, model.base.options);\n\n  if (this.options && this.options.cursor) {\n    return new AggregationCursor(this);\n  }\n\n  prepareDiscriminatorPipeline(this._pipeline, this._model.schema);\n  stringifyFunctionOperators(this._pipeline);\n\n  await new Promise((resolve, reject) => {\n    model.hooks.execPre('aggregate', this, error => {\n      if (error) {\n        const _opts = { error: error };\n        return model.hooks.execPost('aggregate', this, [null], _opts, error => {\n          reject(error);\n        });\n      } else {\n        resolve();\n      }\n    });\n  });\n\n  if (!this._pipeline.length) {\n    throw new MongooseError('Aggregate has empty pipeline');\n  }\n\n  const options = clone(this.options || {});\n  let result;\n  try {\n    const cursor = await collection.aggregate(this._pipeline, options);\n    result = await cursor.toArray();\n  } catch (error) {\n    await new Promise((resolve, reject) => {\n      const _opts = { error: error };\n      model.hooks.execPost('aggregate', this, [null], _opts, (error) => {\n        if (error) {\n          return reject(error);\n        }\n\n        resolve();\n      });\n    });\n  }\n\n  const _opts = { error: null };\n  await new Promise((resolve, reject) => {\n    model.hooks.execPost('aggregate', this, [result], _opts, error => {\n      if (error) {\n        return reject(error);\n      }\n      return resolve();\n    });\n  });\n\n  return result;\n};\n\n/**\n * Provides a Promise-like `then` function, which will call `.exec` without a callback\n * Compatible with `await`.\n *\n * #### Example:\n *\n *     Model.aggregate(..).then(successCallback, errorCallback);\n *\n * @param {Function} [resolve] successCallback\n * @param {Function} [reject]  errorCallback\n * @return {Promise}\n */\nAggregate.prototype.then = function(resolve, reject) {\n  return this.exec().then(resolve, reject);\n};\n\n/**\n * Executes the aggregation returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n * Like [`.then()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.then), but only takes a rejection handler.\n * Compatible with `await`.\n *\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\nAggregate.prototype.catch = function(reject) {\n  return this.exec().then(null, reject);\n};\n\n/**\n * Executes the aggregate returning a `Promise` which will be\n * resolved with `.finally()` chained.\n *\n * More about [Promise `finally()` in JavaScript](https://thecodebarbarian.com/using-promise-finally-in-node-js.html).\n *\n * @param {Function} [onFinally]\n * @return {Promise}\n * @api public\n */\n\nAggregate.prototype.finally = function(onFinally) {\n  return this.exec().finally(onFinally);\n};\n\n/**\n * Returns an asyncIterator for use with [`for/await/of` loops](https://thecodebarbarian.com/getting-started-with-async-iterators-in-node-js)\n * You do not need to call this function explicitly, the JavaScript runtime\n * will call it for you.\n *\n * #### Example:\n *\n *     const agg = Model.aggregate([{ $match: { age: { $gte: 25 } } }]);\n *     for await (const doc of agg) {\n *       console.log(doc.name);\n *     }\n *\n * Node.js 10.x supports async iterators natively without any flags. You can\n * enable async iterators in Node.js 8.x using the [`--harmony_async_iteration` flag](https://github.com/tc39/proposal-async-iteration/issues/117#issuecomment-346695187).\n *\n * **Note:** This function is not set if `Symbol.asyncIterator` is undefined. If\n * `Symbol.asyncIterator` is undefined, that means your Node.js version does not\n * support async iterators.\n *\n * @method [Symbol.asyncIterator]\n * @memberOf Aggregate\n * @instance\n * @api public\n */\n\nif (Symbol.asyncIterator != null) {\n  Aggregate.prototype[Symbol.asyncIterator] = function() {\n    return this.cursor({ useMongooseAggCursor: true }).transformNull()._transformForAsyncIterator();\n  };\n}\n\n/*!\n * Helpers\n */\n\n/**\n * Checks whether an object is likely a pipeline operator\n *\n * @param {Object} obj object to check\n * @return {Boolean}\n * @api private\n */\n\nfunction isOperator(obj) {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  const k = Object.keys(obj);\n\n  return k.length === 1 && k[0][0] === '$';\n}\n\n/**\n * Adds the appropriate `$match` pipeline step to the top of an aggregate's\n * pipeline, should it's model is a non-root discriminator type. This is\n * analogous to the `prepareDiscriminatorCriteria` function in `lib/query.js`.\n *\n * @param {Aggregate} aggregate Aggregate to prepare\n * @api private\n */\n\nAggregate._prepareDiscriminatorPipeline = prepareDiscriminatorPipeline;\n\n/*!\n * Exports\n */\n\nmodule.exports = Aggregate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/aggregate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/browserDocument.js":
/*!******************************************************!*\
  !*** ./node_modules/mongoose/lib/browserDocument.js ***!
  \******************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Module dependencies.\n */\n\n\n\nconst NodeJSDocument = __webpack_require__(/*! ./document */ \"(ssr)/./node_modules/mongoose/lib/document.js\");\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst MongooseError = __webpack_require__(/*! ./error/index */ \"(ssr)/./node_modules/mongoose/lib/error/index.js\");\nconst Schema = __webpack_require__(/*! ./schema */ \"(ssr)/./node_modules/mongoose/lib/schema.js\");\nconst ObjectId = __webpack_require__(/*! ./types/objectid */ \"(ssr)/./node_modules/mongoose/lib/types/objectid.js\");\nconst ValidationError = MongooseError.ValidationError;\nconst applyHooks = __webpack_require__(/*! ./helpers/model/applyHooks */ \"(ssr)/./node_modules/mongoose/lib/helpers/model/applyHooks.js\");\nconst isObject = __webpack_require__(/*! ./helpers/isObject */ \"(ssr)/./node_modules/mongoose/lib/helpers/isObject.js\");\n\n/**\n * Document constructor.\n *\n * @param {Object} obj the values to set\n * @param {Object} schema\n * @param {Object} [fields] optional object containing the fields which were selected in the query returning this document and any populated paths data\n * @param {Boolean} [skipId] bool, should we auto create an ObjectId _id\n * @inherits NodeJS EventEmitter https://nodejs.org/api/events.html#class-eventemitter\n * @event `init`: Emitted on a document after it has was retrieved from the db and fully hydrated by Mongoose.\n * @event `save`: Emitted when the document is successfully saved\n * @api private\n */\n\nfunction Document(obj, schema, fields, skipId, skipInit) {\n  if (!(this instanceof Document)) {\n    return new Document(obj, schema, fields, skipId, skipInit);\n  }\n\n  if (isObject(schema) && !schema.instanceOfSchema) {\n    schema = new Schema(schema);\n  }\n\n  // When creating EmbeddedDocument, it already has the schema and he doesn't need the _id\n  schema = this.schema || schema;\n\n  // Generate ObjectId if it is missing, but it requires a scheme\n  if (!this.schema && schema.options._id) {\n    obj = obj || {};\n\n    if (obj._id === undefined) {\n      obj._id = new ObjectId();\n    }\n  }\n\n  if (!schema) {\n    throw new MongooseError.MissingSchemaError();\n  }\n\n  this.$__setSchema(schema);\n\n  NodeJSDocument.call(this, obj, fields, skipId, skipInit);\n\n  applyHooks(this, schema, { decorateDoc: true });\n\n  // apply methods\n  for (const m in schema.methods) {\n    this[m] = schema.methods[m];\n  }\n  // apply statics\n  for (const s in schema.statics) {\n    this[s] = schema.statics[s];\n  }\n}\n\n/*!\n * Inherit from the NodeJS document\n */\n\nDocument.prototype = Object.create(NodeJSDocument.prototype);\nDocument.prototype.constructor = Document;\n\n/*!\n * ignore\n */\n\nDocument.events = new EventEmitter();\n\n/*!\n * Browser doc exposes the event emitter API\n */\n\nDocument.$emitter = new EventEmitter();\n\n['on', 'once', 'emit', 'listeners', 'removeListener', 'setMaxListeners',\n  'removeAllListeners', 'addListener'].forEach(function(emitterFn) {\n  Document[emitterFn] = function() {\n    return Document.$emitter[emitterFn].apply(Document.$emitter, arguments);\n  };\n});\n\n/*!\n * Module exports.\n */\n\nDocument.ValidationError = ValidationError;\nmodule.exports = exports = Document;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Jyb3dzZXJEb2N1bWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWIsdUJBQXVCLG1CQUFPLENBQUMsaUVBQVk7QUFDM0MscUJBQXFCLDBEQUE4QjtBQUNuRCxzQkFBc0IsbUJBQU8sQ0FBQyx1RUFBZTtBQUM3QyxlQUFlLG1CQUFPLENBQUMsNkRBQVU7QUFDakMsaUJBQWlCLG1CQUFPLENBQUMsNkVBQWtCO0FBQzNDO0FBQ0EsbUJBQW1CLG1CQUFPLENBQUMsaUdBQTRCO0FBQ3ZELGlCQUFpQixtQkFBTyxDQUFDLGlGQUFvQjs7QUFFN0M7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQSw2QkFBNkIsbUJBQW1COztBQUVoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Jyb3dzZXJEb2N1bWVudC5qcz85OGE3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IE5vZGVKU0RvY3VtZW50ID0gcmVxdWlyZSgnLi9kb2N1bWVudCcpO1xuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuY29uc3QgTW9uZ29vc2VFcnJvciA9IHJlcXVpcmUoJy4vZXJyb3IvaW5kZXgnKTtcbmNvbnN0IFNjaGVtYSA9IHJlcXVpcmUoJy4vc2NoZW1hJyk7XG5jb25zdCBPYmplY3RJZCA9IHJlcXVpcmUoJy4vdHlwZXMvb2JqZWN0aWQnKTtcbmNvbnN0IFZhbGlkYXRpb25FcnJvciA9IE1vbmdvb3NlRXJyb3IuVmFsaWRhdGlvbkVycm9yO1xuY29uc3QgYXBwbHlIb29rcyA9IHJlcXVpcmUoJy4vaGVscGVycy9tb2RlbC9hcHBseUhvb2tzJyk7XG5jb25zdCBpc09iamVjdCA9IHJlcXVpcmUoJy4vaGVscGVycy9pc09iamVjdCcpO1xuXG4vKipcbiAqIERvY3VtZW50IGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogdGhlIHZhbHVlcyB0byBzZXRcbiAqIEBwYXJhbSB7T2JqZWN0fSBzY2hlbWFcbiAqIEBwYXJhbSB7T2JqZWN0fSBbZmllbGRzXSBvcHRpb25hbCBvYmplY3QgY29udGFpbmluZyB0aGUgZmllbGRzIHdoaWNoIHdlcmUgc2VsZWN0ZWQgaW4gdGhlIHF1ZXJ5IHJldHVybmluZyB0aGlzIGRvY3VtZW50IGFuZCBhbnkgcG9wdWxhdGVkIHBhdGhzIGRhdGFcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW3NraXBJZF0gYm9vbCwgc2hvdWxkIHdlIGF1dG8gY3JlYXRlIGFuIE9iamVjdElkIF9pZFxuICogQGluaGVyaXRzIE5vZGVKUyBFdmVudEVtaXR0ZXIgaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9ldmVudHMuaHRtbCNjbGFzcy1ldmVudGVtaXR0ZXJcbiAqIEBldmVudCBgaW5pdGA6IEVtaXR0ZWQgb24gYSBkb2N1bWVudCBhZnRlciBpdCBoYXMgd2FzIHJldHJpZXZlZCBmcm9tIHRoZSBkYiBhbmQgZnVsbHkgaHlkcmF0ZWQgYnkgTW9uZ29vc2UuXG4gKiBAZXZlbnQgYHNhdmVgOiBFbWl0dGVkIHdoZW4gdGhlIGRvY3VtZW50IGlzIHN1Y2Nlc3NmdWxseSBzYXZlZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gRG9jdW1lbnQob2JqLCBzY2hlbWEsIGZpZWxkcywgc2tpcElkLCBza2lwSW5pdCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRG9jdW1lbnQpKSB7XG4gICAgcmV0dXJuIG5ldyBEb2N1bWVudChvYmosIHNjaGVtYSwgZmllbGRzLCBza2lwSWQsIHNraXBJbml0KTtcbiAgfVxuXG4gIGlmIChpc09iamVjdChzY2hlbWEpICYmICFzY2hlbWEuaW5zdGFuY2VPZlNjaGVtYSkge1xuICAgIHNjaGVtYSA9IG5ldyBTY2hlbWEoc2NoZW1hKTtcbiAgfVxuXG4gIC8vIFdoZW4gY3JlYXRpbmcgRW1iZWRkZWREb2N1bWVudCwgaXQgYWxyZWFkeSBoYXMgdGhlIHNjaGVtYSBhbmQgaGUgZG9lc24ndCBuZWVkIHRoZSBfaWRcbiAgc2NoZW1hID0gdGhpcy5zY2hlbWEgfHwgc2NoZW1hO1xuXG4gIC8vIEdlbmVyYXRlIE9iamVjdElkIGlmIGl0IGlzIG1pc3NpbmcsIGJ1dCBpdCByZXF1aXJlcyBhIHNjaGVtZVxuICBpZiAoIXRoaXMuc2NoZW1hICYmIHNjaGVtYS5vcHRpb25zLl9pZCkge1xuICAgIG9iaiA9IG9iaiB8fCB7fTtcblxuICAgIGlmIChvYmouX2lkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG9iai5faWQgPSBuZXcgT2JqZWN0SWQoKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIXNjaGVtYSkge1xuICAgIHRocm93IG5ldyBNb25nb29zZUVycm9yLk1pc3NpbmdTY2hlbWFFcnJvcigpO1xuICB9XG5cbiAgdGhpcy4kX19zZXRTY2hlbWEoc2NoZW1hKTtcblxuICBOb2RlSlNEb2N1bWVudC5jYWxsKHRoaXMsIG9iaiwgZmllbGRzLCBza2lwSWQsIHNraXBJbml0KTtcblxuICBhcHBseUhvb2tzKHRoaXMsIHNjaGVtYSwgeyBkZWNvcmF0ZURvYzogdHJ1ZSB9KTtcblxuICAvLyBhcHBseSBtZXRob2RzXG4gIGZvciAoY29uc3QgbSBpbiBzY2hlbWEubWV0aG9kcykge1xuICAgIHRoaXNbbV0gPSBzY2hlbWEubWV0aG9kc1ttXTtcbiAgfVxuICAvLyBhcHBseSBzdGF0aWNzXG4gIGZvciAoY29uc3QgcyBpbiBzY2hlbWEuc3RhdGljcykge1xuICAgIHRoaXNbc10gPSBzY2hlbWEuc3RhdGljc1tzXTtcbiAgfVxufVxuXG4vKiFcbiAqIEluaGVyaXQgZnJvbSB0aGUgTm9kZUpTIGRvY3VtZW50XG4gKi9cblxuRG9jdW1lbnQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShOb2RlSlNEb2N1bWVudC5wcm90b3R5cGUpO1xuRG9jdW1lbnQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRG9jdW1lbnQ7XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxuRG9jdW1lbnQuZXZlbnRzID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4vKiFcbiAqIEJyb3dzZXIgZG9jIGV4cG9zZXMgdGhlIGV2ZW50IGVtaXR0ZXIgQVBJXG4gKi9cblxuRG9jdW1lbnQuJGVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cblsnb24nLCAnb25jZScsICdlbWl0JywgJ2xpc3RlbmVycycsICdyZW1vdmVMaXN0ZW5lcicsICdzZXRNYXhMaXN0ZW5lcnMnLFxuICAncmVtb3ZlQWxsTGlzdGVuZXJzJywgJ2FkZExpc3RlbmVyJ10uZm9yRWFjaChmdW5jdGlvbihlbWl0dGVyRm4pIHtcbiAgRG9jdW1lbnRbZW1pdHRlckZuXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBEb2N1bWVudC4kZW1pdHRlcltlbWl0dGVyRm5dLmFwcGx5KERvY3VtZW50LiRlbWl0dGVyLCBhcmd1bWVudHMpO1xuICB9O1xufSk7XG5cbi8qIVxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxuRG9jdW1lbnQuVmFsaWRhdGlvbkVycm9yID0gVmFsaWRhdGlvbkVycm9yO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gRG9jdW1lbnQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/browserDocument.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/cast.js":
/*!*******************************************!*\
  !*** ./node_modules/mongoose/lib/cast.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\nconst CastError = __webpack_require__(/*! ./error/cast */ \"(ssr)/./node_modules/mongoose/lib/error/cast.js\");\nconst StrictModeError = __webpack_require__(/*! ./error/strict */ \"(ssr)/./node_modules/mongoose/lib/error/strict.js\");\nconst Types = __webpack_require__(/*! ./schema/index */ \"(ssr)/./node_modules/mongoose/lib/schema/index.js\");\nconst cast$expr = __webpack_require__(/*! ./helpers/query/cast$expr */ \"(ssr)/./node_modules/mongoose/lib/helpers/query/cast$expr.js\");\nconst castTextSearch = __webpack_require__(/*! ./schema/operators/text */ \"(ssr)/./node_modules/mongoose/lib/schema/operators/text.js\");\nconst get = __webpack_require__(/*! ./helpers/get */ \"(ssr)/./node_modules/mongoose/lib/helpers/get.js\");\nconst getSchemaDiscriminatorByValue = __webpack_require__(/*! ./helpers/discriminator/getSchemaDiscriminatorByValue */ \"(ssr)/./node_modules/mongoose/lib/helpers/discriminator/getSchemaDiscriminatorByValue.js\");\nconst isOperator = __webpack_require__(/*! ./helpers/query/isOperator */ \"(ssr)/./node_modules/mongoose/lib/helpers/query/isOperator.js\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst isObject = __webpack_require__(/*! ./helpers/isObject */ \"(ssr)/./node_modules/mongoose/lib/helpers/isObject.js\");\nconst isMongooseObject = __webpack_require__(/*! ./helpers/isMongooseObject */ \"(ssr)/./node_modules/mongoose/lib/helpers/isMongooseObject.js\");\nconst utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\n\nconst ALLOWED_GEOWITHIN_GEOJSON_TYPES = ['Polygon', 'MultiPolygon'];\n\n/**\n * Handles internal casting for query filters.\n *\n * @param {Schema} schema\n * @param {Object} obj Object to cast\n * @param {Object} [options] the query options\n * @param {Boolean|\"throw\"} [options.strict] Wheter to enable all strict options\n * @param {Boolean|\"throw\"} [options.strictQuery] Enable strict Queries\n * @param {Boolean} [options.upsert]\n * @param {Query} [context] passed to setters\n * @api private\n */\nmodule.exports = function cast(schema, obj, options, context) {\n  if (Array.isArray(obj)) {\n    throw new Error('Query filter must be an object, got an array ', util.inspect(obj));\n  }\n\n  if (obj == null) {\n    return obj;\n  }\n\n  if (schema != null && schema.discriminators != null && obj[schema.options.discriminatorKey] != null) {\n    schema = getSchemaDiscriminatorByValue(schema, obj[schema.options.discriminatorKey]) || schema;\n  }\n\n  const paths = Object.keys(obj);\n  let i = paths.length;\n  let _keys;\n  let any$conditionals;\n  let schematype;\n  let nested;\n  let path;\n  let type;\n  let val;\n\n  options = options || {};\n\n  while (i--) {\n    path = paths[i];\n    val = obj[path];\n\n    if (path === '$or' || path === '$nor' || path === '$and') {\n      if (!Array.isArray(val)) {\n        throw new CastError('Array', val, path);\n      }\n      for (let k = 0; k < val.length; ++k) {\n        if (val[k] == null || typeof val[k] !== 'object') {\n          throw new CastError('Object', val[k], path + '.' + k);\n        }\n        const discriminatorValue = val[k][schema.options.discriminatorKey];\n        if (discriminatorValue == null) {\n          val[k] = cast(schema, val[k], options, context);\n        } else {\n          const discriminatorSchema = getSchemaDiscriminatorByValue(context.schema, discriminatorValue);\n          val[k] = cast(discriminatorSchema ? discriminatorSchema : schema, val[k], options, context);\n        }\n      }\n    } else if (path === '$where') {\n      type = typeof val;\n\n      if (type !== 'string' && type !== 'function') {\n        throw new Error('Must have a string or function for $where');\n      }\n\n      if (type === 'function') {\n        obj[path] = val.toString();\n      }\n\n      continue;\n    } else if (path === '$expr') {\n      val = cast$expr(val, schema);\n      continue;\n    } else if (path === '$elemMatch') {\n      val = cast(schema, val, options, context);\n    } else if (path === '$text') {\n      val = castTextSearch(val, path);\n    } else {\n      if (!schema) {\n        // no casting for Mixed types\n        continue;\n      }\n\n      schematype = schema.path(path);\n\n      // Check for embedded discriminator paths\n      if (!schematype) {\n        const split = path.split('.');\n        let j = split.length;\n        while (j--) {\n          const pathFirstHalf = split.slice(0, j).join('.');\n          const pathLastHalf = split.slice(j).join('.');\n          const _schematype = schema.path(pathFirstHalf);\n          const discriminatorKey = _schematype &&\n            _schematype.schema &&\n            _schematype.schema.options &&\n            _schematype.schema.options.discriminatorKey;\n\n          // gh-6027: if we haven't found the schematype but this path is\n          // underneath an embedded discriminator and the embedded discriminator\n          // key is in the query, use the embedded discriminator schema\n          if (_schematype != null &&\n            (_schematype.schema && _schematype.schema.discriminators) != null &&\n            discriminatorKey != null &&\n            pathLastHalf !== discriminatorKey) {\n            const discriminatorVal = get(obj, pathFirstHalf + '.' + discriminatorKey);\n            const discriminators = _schematype.schema.discriminators;\n            if (typeof discriminatorVal === 'string' && discriminators[discriminatorVal] != null) {\n\n              schematype = discriminators[discriminatorVal].path(pathLastHalf);\n            } else if (discriminatorVal != null &&\n              Object.keys(discriminatorVal).length === 1 &&\n              Array.isArray(discriminatorVal.$in) &&\n              discriminatorVal.$in.length === 1 &&\n              typeof discriminatorVal.$in[0] === 'string' &&\n              discriminators[discriminatorVal.$in[0]] != null) {\n              schematype = discriminators[discriminatorVal.$in[0]].path(pathLastHalf);\n            }\n          }\n        }\n      }\n\n      if (!schematype) {\n        // Handle potential embedded array queries\n        const split = path.split('.');\n        let j = split.length;\n        let pathFirstHalf;\n        let pathLastHalf;\n        let remainingConds;\n\n        // Find the part of the var path that is a path of the Schema\n        while (j--) {\n          pathFirstHalf = split.slice(0, j).join('.');\n          schematype = schema.path(pathFirstHalf);\n          if (schematype) {\n            break;\n          }\n        }\n\n        // If a substring of the input path resolves to an actual real path...\n        if (schematype) {\n          // Apply the casting; similar code for $elemMatch in schema/array.js\n          if (schematype.caster && schematype.caster.schema) {\n            remainingConds = {};\n            pathLastHalf = split.slice(j).join('.');\n            remainingConds[pathLastHalf] = val;\n\n            const ret = cast(schematype.caster.schema, remainingConds, options, context)[pathLastHalf];\n            if (ret === void 0) {\n              delete obj[path];\n            } else {\n              obj[path] = ret;\n            }\n          } else {\n            obj[path] = val;\n          }\n          continue;\n        }\n\n        if (isObject(val)) {\n          // handle geo schemas that use object notation\n          // { loc: { long: Number, lat: Number }\n\n          let geo = '';\n          if (val.$near) {\n            geo = '$near';\n          } else if (val.$nearSphere) {\n            geo = '$nearSphere';\n          } else if (val.$within) {\n            geo = '$within';\n          } else if (val.$geoIntersects) {\n            geo = '$geoIntersects';\n          } else if (val.$geoWithin) {\n            geo = '$geoWithin';\n          }\n\n          if (geo) {\n            const numbertype = new Types.Number('__QueryCasting__');\n            let value = val[geo];\n\n            if (val.$maxDistance != null) {\n              val.$maxDistance = numbertype.castForQuery(\n                null,\n                val.$maxDistance,\n                context\n              );\n            }\n            if (val.$minDistance != null) {\n              val.$minDistance = numbertype.castForQuery(\n                null,\n                val.$minDistance,\n                context\n              );\n            }\n\n            if (geo === '$within') {\n              const withinType = value.$center\n                  || value.$centerSphere\n                  || value.$box\n                  || value.$polygon;\n\n              if (!withinType) {\n                throw new Error('Bad $within parameter: ' + JSON.stringify(val));\n              }\n\n              value = withinType;\n            } else if (geo === '$near' &&\n                typeof value.type === 'string' && Array.isArray(value.coordinates)) {\n              // geojson; cast the coordinates\n              value = value.coordinates;\n            } else if ((geo === '$near' || geo === '$nearSphere' || geo === '$geoIntersects') &&\n                value.$geometry && typeof value.$geometry.type === 'string' &&\n                Array.isArray(value.$geometry.coordinates)) {\n              if (value.$maxDistance != null) {\n                value.$maxDistance = numbertype.castForQuery(\n                  null,\n                  value.$maxDistance,\n                  context\n                );\n              }\n              if (value.$minDistance != null) {\n                value.$minDistance = numbertype.castForQuery(\n                  null,\n                  value.$minDistance,\n                  context\n                );\n              }\n              if (isMongooseObject(value.$geometry)) {\n                value.$geometry = value.$geometry.toObject({\n                  transform: false,\n                  virtuals: false\n                });\n              }\n              value = value.$geometry.coordinates;\n            } else if (geo === '$geoWithin') {\n              if (value.$geometry) {\n                if (isMongooseObject(value.$geometry)) {\n                  value.$geometry = value.$geometry.toObject({ virtuals: false });\n                }\n                const geoWithinType = value.$geometry.type;\n                if (ALLOWED_GEOWITHIN_GEOJSON_TYPES.indexOf(geoWithinType) === -1) {\n                  throw new Error('Invalid geoJSON type for $geoWithin \"' +\n                    geoWithinType + '\", must be \"Polygon\" or \"MultiPolygon\"');\n                }\n                value = value.$geometry.coordinates;\n              } else {\n                value = value.$box || value.$polygon || value.$center ||\n                  value.$centerSphere;\n                if (isMongooseObject(value)) {\n                  value = value.toObject({ virtuals: false });\n                }\n              }\n            }\n\n            _cast(value, numbertype, context);\n            continue;\n          }\n        }\n\n        if (schema.nested[path]) {\n          continue;\n        }\n\n        const strict = 'strict' in options ? options.strict : schema.options.strict;\n        const strictQuery = getStrictQuery(options, schema._userProvidedOptions, schema.options, context);\n        if (options.upsert && strict) {\n          if (strict === 'throw') {\n            throw new StrictModeError(path);\n          }\n          throw new StrictModeError(path, 'Path \"' + path + '\" is not in ' +\n            'schema, strict mode is `true`, and upsert is `true`.');\n        } if (strictQuery === 'throw') {\n          throw new StrictModeError(path, 'Path \"' + path + '\" is not in ' +\n            'schema and strictQuery is \\'throw\\'.');\n        } else if (strictQuery) {\n          delete obj[path];\n        }\n      } else if (val == null) {\n        continue;\n      } else if (utils.isPOJO(val)) {\n        any$conditionals = Object.keys(val).some(isOperator);\n\n        if (!any$conditionals) {\n          obj[path] = schematype.castForQuery(\n            null,\n            val,\n            context\n          );\n        } else {\n          const ks = Object.keys(val);\n          let $cond;\n          let k = ks.length;\n\n          while (k--) {\n            $cond = ks[k];\n            nested = val[$cond];\n            if ($cond === '$elemMatch') {\n              if (nested && schematype != null && schematype.schema != null) {\n                cast(schematype.schema, nested, options, context);\n              } else if (nested && schematype != null && schematype.$isMongooseArray) {\n                if (utils.isPOJO(nested) && nested.$not != null) {\n                  cast(schema, nested, options, context);\n                } else {\n                  val[$cond] = schematype.castForQuery(\n                    $cond,\n                    nested,\n                    context\n                  );\n                }\n              }\n            } else if ($cond === '$not') {\n              if (nested && schematype) {\n                _keys = Object.keys(nested);\n                if (_keys.length && isOperator(_keys[0])) {\n                  for (const key in nested) {\n                    nested[key] = schematype.castForQuery(\n                      key,\n                      nested[key],\n                      context\n                    );\n                  }\n                } else {\n                  val[$cond] = schematype.castForQuery(\n                    $cond,\n                    nested,\n                    context\n                  );\n                }\n                continue;\n              }\n            } else {\n              val[$cond] = schematype.castForQuery(\n                $cond,\n                nested,\n                context\n              );\n            }\n\n          }\n        }\n      } else if (Array.isArray(val) && ['Buffer', 'Array'].indexOf(schematype.instance) === -1) {\n        const casted = [];\n        const valuesArray = val;\n\n        for (const _val of valuesArray) {\n          casted.push(schematype.castForQuery(\n            null,\n            _val,\n            context\n          ));\n        }\n\n        obj[path] = { $in: casted };\n      } else {\n        obj[path] = schematype.castForQuery(\n          null,\n          val,\n          context\n        );\n      }\n    }\n  }\n\n  return obj;\n};\n\nfunction _cast(val, numbertype, context) {\n  if (Array.isArray(val)) {\n    val.forEach(function(item, i) {\n      if (Array.isArray(item) || isObject(item)) {\n        return _cast(item, numbertype, context);\n      }\n      val[i] = numbertype.castForQuery(null, item, context);\n    });\n  } else {\n    const nearKeys = Object.keys(val);\n    let nearLen = nearKeys.length;\n    while (nearLen--) {\n      const nkey = nearKeys[nearLen];\n      const item = val[nkey];\n      if (Array.isArray(item) || isObject(item)) {\n        _cast(item, numbertype, context);\n        val[nkey] = item;\n      } else {\n        val[nkey] = numbertype.castForQuery({ val: item, context: context });\n      }\n    }\n  }\n}\n\nfunction getStrictQuery(queryOptions, schemaUserProvidedOptions, schemaOptions, context) {\n  if ('strictQuery' in queryOptions) {\n    return queryOptions.strictQuery;\n  }\n  if ('strictQuery' in schemaUserProvidedOptions) {\n    return schemaUserProvidedOptions.strictQuery;\n  }\n  const mongooseOptions = context &&\n    context.mongooseCollection &&\n    context.mongooseCollection.conn &&\n    context.mongooseCollection.conn.base &&\n    context.mongooseCollection.conn.base.options;\n  if (mongooseOptions) {\n    if ('strictQuery' in mongooseOptions) {\n      return mongooseOptions.strictQuery;\n    }\n  }\n  return schemaOptions.strictQuery;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/cast.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/cast/bigint.js":
/*!**************************************************!*\
  !*** ./node_modules/mongoose/lib/cast/bigint.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst { Long } = __webpack_require__(/*! bson */ \"(ssr)/./node_modules/bson/lib/bson.cjs\");\n\n/**\n * Given a value, cast it to a BigInt, or throw an `Error` if the value\n * cannot be casted. `null` and `undefined` are considered valid.\n *\n * @param {Any} value\n * @return {Number}\n * @throws {Error} if `value` is not one of the allowed values\n * @api private\n */\n\nmodule.exports = function castBigInt(val) {\n  if (val == null) {\n    return val;\n  }\n  if (val === '') {\n    return null;\n  }\n  if (typeof val === 'bigint') {\n    return val;\n  }\n\n  if (val instanceof Long) {\n    return val.toBigInt();\n  }\n\n  if (typeof val === 'string' || typeof val === 'number') {\n    return BigInt(val);\n  }\n\n  assert.ok(false);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Nhc3QvYmlnaW50LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGVBQWUsbUJBQU8sQ0FBQyxzQkFBUTtBQUMvQixRQUFRLE9BQU8sRUFBRSxtQkFBTyxDQUFDLG9EQUFNOztBQUUvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixZQUFZO0FBQ1osWUFBWSxPQUFPO0FBQ25CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvY2FzdC9iaWdpbnQuanM/NmQ5YSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuY29uc3QgeyBMb25nIH0gPSByZXF1aXJlKCdic29uJyk7XG5cbi8qKlxuICogR2l2ZW4gYSB2YWx1ZSwgY2FzdCBpdCB0byBhIEJpZ0ludCwgb3IgdGhyb3cgYW4gYEVycm9yYCBpZiB0aGUgdmFsdWVcbiAqIGNhbm5vdCBiZSBjYXN0ZWQuIGBudWxsYCBhbmQgYHVuZGVmaW5lZGAgYXJlIGNvbnNpZGVyZWQgdmFsaWQuXG4gKlxuICogQHBhcmFtIHtBbnl9IHZhbHVlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgYHZhbHVlYCBpcyBub3Qgb25lIG9mIHRoZSBhbGxvd2VkIHZhbHVlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjYXN0QmlnSW50KHZhbCkge1xuICBpZiAodmFsID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsO1xuICB9XG4gIGlmICh2YWwgPT09ICcnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdiaWdpbnQnKSB7XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuXG4gIGlmICh2YWwgaW5zdGFuY2VvZiBMb25nKSB7XG4gICAgcmV0dXJuIHZhbC50b0JpZ0ludCgpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIEJpZ0ludCh2YWwpO1xuICB9XG5cbiAgYXNzZXJ0Lm9rKGZhbHNlKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/cast/bigint.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/cast/boolean.js":
/*!***************************************************!*\
  !*** ./node_modules/mongoose/lib/cast/boolean.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst CastError = __webpack_require__(/*! ../error/cast */ \"(ssr)/./node_modules/mongoose/lib/error/cast.js\");\n\n/**\n * Given a value, cast it to a boolean, or throw a `CastError` if the value\n * cannot be casted. `null` and `undefined` are considered valid.\n *\n * @param {Any} value\n * @param {String} [path] optional the path to set on the CastError\n * @return {Boolean|null|undefined}\n * @throws {CastError} if `value` is not one of the allowed values\n * @api private\n */\n\nmodule.exports = function castBoolean(value, path) {\n  if (module.exports.convertToTrue.has(value)) {\n    return true;\n  }\n  if (module.exports.convertToFalse.has(value)) {\n    return false;\n  }\n\n  if (value == null) {\n    return value;\n  }\n\n  throw new CastError('boolean', value, path);\n};\n\nmodule.exports.convertToTrue = new Set([true, 'true', 1, '1', 'yes']);\nmodule.exports.convertToFalse = new Set([false, 'false', 0, '0', 'no']);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Nhc3QvYm9vbGVhbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixrQkFBa0IsbUJBQU8sQ0FBQyxzRUFBZTs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWixZQUFZLFdBQVc7QUFDdkI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSw0QkFBNEI7QUFDNUIsNkJBQTZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvY2FzdC9ib29sZWFuLmpzPzUzY2IiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBDYXN0RXJyb3IgPSByZXF1aXJlKCcuLi9lcnJvci9jYXN0Jyk7XG5cbi8qKlxuICogR2l2ZW4gYSB2YWx1ZSwgY2FzdCBpdCB0byBhIGJvb2xlYW4sIG9yIHRocm93IGEgYENhc3RFcnJvcmAgaWYgdGhlIHZhbHVlXG4gKiBjYW5ub3QgYmUgY2FzdGVkLiBgbnVsbGAgYW5kIGB1bmRlZmluZWRgIGFyZSBjb25zaWRlcmVkIHZhbGlkLlxuICpcbiAqIEBwYXJhbSB7QW55fSB2YWx1ZVxuICogQHBhcmFtIHtTdHJpbmd9IFtwYXRoXSBvcHRpb25hbCB0aGUgcGF0aCB0byBzZXQgb24gdGhlIENhc3RFcnJvclxuICogQHJldHVybiB7Qm9vbGVhbnxudWxsfHVuZGVmaW5lZH1cbiAqIEB0aHJvd3Mge0Nhc3RFcnJvcn0gaWYgYHZhbHVlYCBpcyBub3Qgb25lIG9mIHRoZSBhbGxvd2VkIHZhbHVlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjYXN0Qm9vbGVhbih2YWx1ZSwgcGF0aCkge1xuICBpZiAobW9kdWxlLmV4cG9ydHMuY29udmVydFRvVHJ1ZS5oYXModmFsdWUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKG1vZHVsZS5leHBvcnRzLmNvbnZlcnRUb0ZhbHNlLmhhcyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHRocm93IG5ldyBDYXN0RXJyb3IoJ2Jvb2xlYW4nLCB2YWx1ZSwgcGF0aCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5jb252ZXJ0VG9UcnVlID0gbmV3IFNldChbdHJ1ZSwgJ3RydWUnLCAxLCAnMScsICd5ZXMnXSk7XG5tb2R1bGUuZXhwb3J0cy5jb252ZXJ0VG9GYWxzZSA9IG5ldyBTZXQoW2ZhbHNlLCAnZmFsc2UnLCAwLCAnMCcsICdubyddKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/cast/boolean.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/cast/date.js":
/*!************************************************!*\
  !*** ./node_modules/mongoose/lib/cast/date.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst assert = __webpack_require__(/*! assert */ \"assert\");\n\nmodule.exports = function castDate(value) {\n  // Support empty string because of empty form values. Originally introduced\n  // in https://github.com/Automattic/mongoose/commit/efc72a1898fc3c33a319d915b8c5463a22938dfe\n  if (value == null || value === '') {\n    return null;\n  }\n\n  if (value instanceof Date) {\n    assert.ok(!isNaN(value.valueOf()));\n\n    return value;\n  }\n\n  let date;\n\n  assert.ok(typeof value !== 'boolean');\n\n  if (value instanceof Number || typeof value === 'number') {\n    date = new Date(value);\n  } else if (typeof value === 'string' && !isNaN(Number(value)) && (Number(value) >= 275761 || Number(value) < -271820)) {\n    // string representation of milliseconds take this path\n    date = new Date(Number(value));\n  } else if (typeof value.valueOf === 'function') {\n    // support for moment.js. This is also the path strings will take because\n    // strings have a `valueOf()`\n    date = new Date(value.valueOf());\n  } else {\n    // fallback\n    date = new Date(value);\n  }\n\n  if (!isNaN(date.valueOf())) {\n    return date;\n  }\n\n  assert.ok(false);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Nhc3QvZGF0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixlQUFlLG1CQUFPLENBQUMsc0JBQVE7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9jYXN0L2RhdGUuanM/ZDhjMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhc3REYXRlKHZhbHVlKSB7XG4gIC8vIFN1cHBvcnQgZW1wdHkgc3RyaW5nIGJlY2F1c2Ugb2YgZW1wdHkgZm9ybSB2YWx1ZXMuIE9yaWdpbmFsbHkgaW50cm9kdWNlZFxuICAvLyBpbiBodHRwczovL2dpdGh1Yi5jb20vQXV0b21hdHRpYy9tb25nb29zZS9jb21taXQvZWZjNzJhMTg5OGZjM2MzM2EzMTlkOTE1YjhjNTQ2M2EyMjkzOGRmZVxuICBpZiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA9PT0gJycpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICBhc3NlcnQub2soIWlzTmFOKHZhbHVlLnZhbHVlT2YoKSkpO1xuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgbGV0IGRhdGU7XG5cbiAgYXNzZXJ0Lm9rKHR5cGVvZiB2YWx1ZSAhPT0gJ2Jvb2xlYW4nKTtcblxuICBpZiAodmFsdWUgaW5zdGFuY2VvZiBOdW1iZXIgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIGRhdGUgPSBuZXcgRGF0ZSh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAhaXNOYU4oTnVtYmVyKHZhbHVlKSkgJiYgKE51bWJlcih2YWx1ZSkgPj0gMjc1NzYxIHx8IE51bWJlcih2YWx1ZSkgPCAtMjcxODIwKSkge1xuICAgIC8vIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBtaWxsaXNlY29uZHMgdGFrZSB0aGlzIHBhdGhcbiAgICBkYXRlID0gbmV3IERhdGUoTnVtYmVyKHZhbHVlKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlLnZhbHVlT2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBzdXBwb3J0IGZvciBtb21lbnQuanMuIFRoaXMgaXMgYWxzbyB0aGUgcGF0aCBzdHJpbmdzIHdpbGwgdGFrZSBiZWNhdXNlXG4gICAgLy8gc3RyaW5ncyBoYXZlIGEgYHZhbHVlT2YoKWBcbiAgICBkYXRlID0gbmV3IERhdGUodmFsdWUudmFsdWVPZigpKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBmYWxsYmFja1xuICAgIGRhdGUgPSBuZXcgRGF0ZSh2YWx1ZSk7XG4gIH1cblxuICBpZiAoIWlzTmFOKGRhdGUudmFsdWVPZigpKSkge1xuICAgIHJldHVybiBkYXRlO1xuICB9XG5cbiAgYXNzZXJ0Lm9rKGZhbHNlKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/cast/date.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/cast/decimal128.js":
/*!******************************************************!*\
  !*** ./node_modules/mongoose/lib/cast/decimal128.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst Decimal128Type = __webpack_require__(/*! ../types/decimal128 */ \"(ssr)/./node_modules/mongoose/lib/types/decimal128.js\");\nconst assert = __webpack_require__(/*! assert */ \"assert\");\n\nmodule.exports = function castDecimal128(value) {\n  if (value == null) {\n    return value;\n  }\n\n  if (typeof value === 'object' && typeof value.$numberDecimal === 'string') {\n    return Decimal128Type.fromString(value.$numberDecimal);\n  }\n\n  if (value instanceof Decimal128Type) {\n    return value;\n  }\n\n  if (typeof value === 'string') {\n    return Decimal128Type.fromString(value);\n  }\n\n  if (typeof Buffer === 'function' && Buffer.isBuffer(value)) {\n    return new Decimal128Type(value);\n  }\n  if (typeof Uint8Array === 'function' && value instanceof Uint8Array) {\n    return new Decimal128Type(value);\n  }\n\n  if (typeof value === 'number') {\n    return Decimal128Type.fromString(String(value));\n  }\n\n  if (typeof value.valueOf === 'function' && typeof value.valueOf() === 'string') {\n    return Decimal128Type.fromString(value.valueOf());\n  }\n\n  assert.ok(false);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Nhc3QvZGVjaW1hbDEyOC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYix1QkFBdUIsbUJBQU8sQ0FBQyxrRkFBcUI7QUFDcEQsZUFBZSxtQkFBTyxDQUFDLHNCQUFROztBQUUvQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvY2FzdC9kZWNpbWFsMTI4LmpzP2U1YmQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBEZWNpbWFsMTI4VHlwZSA9IHJlcXVpcmUoJy4uL3R5cGVzL2RlY2ltYWwxMjgnKTtcbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhc3REZWNpbWFsMTI4KHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlLiRudW1iZXJEZWNpbWFsID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBEZWNpbWFsMTI4VHlwZS5mcm9tU3RyaW5nKHZhbHVlLiRudW1iZXJEZWNpbWFsKTtcbiAgfVxuXG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERlY2ltYWwxMjhUeXBlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gRGVjaW1hbDEyOFR5cGUuZnJvbVN0cmluZyh2YWx1ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIEJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBCdWZmZXIuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgcmV0dXJuIG5ldyBEZWNpbWFsMTI4VHlwZSh2YWx1ZSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBVaW50OEFycmF5ID09PSAnZnVuY3Rpb24nICYmIHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgIHJldHVybiBuZXcgRGVjaW1hbDEyOFR5cGUodmFsdWUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gRGVjaW1hbDEyOFR5cGUuZnJvbVN0cmluZyhTdHJpbmcodmFsdWUpKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUudmFsdWVPZiA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUudmFsdWVPZigpID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBEZWNpbWFsMTI4VHlwZS5mcm9tU3RyaW5nKHZhbHVlLnZhbHVlT2YoKSk7XG4gIH1cblxuICBhc3NlcnQub2soZmFsc2UpO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/cast/decimal128.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/cast/number.js":
/*!**************************************************!*\
  !*** ./node_modules/mongoose/lib/cast/number.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst assert = __webpack_require__(/*! assert */ \"assert\");\n\n/**\n * Given a value, cast it to a number, or throw an `Error` if the value\n * cannot be casted. `null` and `undefined` are considered valid.\n *\n * @param {Any} value\n * @return {Number}\n * @throws {Error} if `value` is not one of the allowed values\n * @api private\n */\n\nmodule.exports = function castNumber(val) {\n  if (val == null) {\n    return val;\n  }\n  if (val === '') {\n    return null;\n  }\n\n  if (typeof val === 'string' || typeof val === 'boolean') {\n    val = Number(val);\n  }\n\n  assert.ok(!isNaN(val));\n  if (val instanceof Number) {\n    return val.valueOf();\n  }\n  if (typeof val === 'number') {\n    return val;\n  }\n  if (!Array.isArray(val) && typeof val.valueOf === 'function') {\n    return Number(val.valueOf());\n  }\n  if (val.toString && !Array.isArray(val) && val.toString() == Number(val)) {\n    return Number(val);\n  }\n\n  assert.ok(false);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Nhc3QvbnVtYmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGVBQWUsbUJBQU8sQ0FBQyxzQkFBUTs7QUFFL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsWUFBWTtBQUNaLFlBQVksT0FBTztBQUNuQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvY2FzdC9udW1iZXIuanM/YjI2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuXG4vKipcbiAqIEdpdmVuIGEgdmFsdWUsIGNhc3QgaXQgdG8gYSBudW1iZXIsIG9yIHRocm93IGFuIGBFcnJvcmAgaWYgdGhlIHZhbHVlXG4gKiBjYW5ub3QgYmUgY2FzdGVkLiBgbnVsbGAgYW5kIGB1bmRlZmluZWRgIGFyZSBjb25zaWRlcmVkIHZhbGlkLlxuICpcbiAqIEBwYXJhbSB7QW55fSB2YWx1ZVxuICogQHJldHVybiB7TnVtYmVyfVxuICogQHRocm93cyB7RXJyb3J9IGlmIGB2YWx1ZWAgaXMgbm90IG9uZSBvZiB0aGUgYWxsb3dlZCB2YWx1ZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY2FzdE51bWJlcih2YWwpIHtcbiAgaWYgKHZhbCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuICBpZiAodmFsID09PSAnJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWwgPT09ICdib29sZWFuJykge1xuICAgIHZhbCA9IE51bWJlcih2YWwpO1xuICB9XG5cbiAgYXNzZXJ0Lm9rKCFpc05hTih2YWwpKTtcbiAgaWYgKHZhbCBpbnN0YW5jZW9mIE51bWJlcikge1xuICAgIHJldHVybiB2YWwudmFsdWVPZigpO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWw7XG4gIH1cbiAgaWYgKCFBcnJheS5pc0FycmF5KHZhbCkgJiYgdHlwZW9mIHZhbC52YWx1ZU9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIE51bWJlcih2YWwudmFsdWVPZigpKTtcbiAgfVxuICBpZiAodmFsLnRvU3RyaW5nICYmICFBcnJheS5pc0FycmF5KHZhbCkgJiYgdmFsLnRvU3RyaW5nKCkgPT0gTnVtYmVyKHZhbCkpIHtcbiAgICByZXR1cm4gTnVtYmVyKHZhbCk7XG4gIH1cblxuICBhc3NlcnQub2soZmFsc2UpO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/cast/number.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/cast/objectid.js":
/*!****************************************************!*\
  !*** ./node_modules/mongoose/lib/cast/objectid.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst isBsonType = __webpack_require__(/*! ../helpers/isBsonType */ \"(ssr)/./node_modules/mongoose/lib/helpers/isBsonType.js\");\nconst ObjectId = __webpack_require__(/*! ../types/objectid */ \"(ssr)/./node_modules/mongoose/lib/types/objectid.js\");\n\nmodule.exports = function castObjectId(value) {\n  if (value == null) {\n    return value;\n  }\n\n  if (isBsonType(value, 'ObjectId')) {\n    return value;\n  }\n\n  if (value._id) {\n    if (isBsonType(value._id, 'ObjectId')) {\n      return value._id;\n    }\n    if (value._id.toString instanceof Function) {\n      return new ObjectId(value._id.toString());\n    }\n  }\n\n  if (value.toString instanceof Function) {\n    return new ObjectId(value.toString());\n  }\n\n  return new ObjectId(value);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Nhc3Qvb2JqZWN0aWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsbUJBQW1CLG1CQUFPLENBQUMsc0ZBQXVCO0FBQ2xELGlCQUFpQixtQkFBTyxDQUFDLDhFQUFtQjs7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9jYXN0L29iamVjdGlkLmpzPzhjZWQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBpc0Jzb25UeXBlID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc0Jzb25UeXBlJyk7XG5jb25zdCBPYmplY3RJZCA9IHJlcXVpcmUoJy4uL3R5cGVzL29iamVjdGlkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY2FzdE9iamVjdElkKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgaWYgKGlzQnNvblR5cGUodmFsdWUsICdPYmplY3RJZCcpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgaWYgKHZhbHVlLl9pZCkge1xuICAgIGlmIChpc0Jzb25UeXBlKHZhbHVlLl9pZCwgJ09iamVjdElkJykpIHtcbiAgICAgIHJldHVybiB2YWx1ZS5faWQ7XG4gICAgfVxuICAgIGlmICh2YWx1ZS5faWQudG9TdHJpbmcgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgICAgcmV0dXJuIG5ldyBPYmplY3RJZCh2YWx1ZS5faWQudG9TdHJpbmcoKSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHZhbHVlLnRvU3RyaW5nIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICByZXR1cm4gbmV3IE9iamVjdElkKHZhbHVlLnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBPYmplY3RJZCh2YWx1ZSk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/cast/objectid.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/cast/string.js":
/*!**************************************************!*\
  !*** ./node_modules/mongoose/lib/cast/string.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst CastError = __webpack_require__(/*! ../error/cast */ \"(ssr)/./node_modules/mongoose/lib/error/cast.js\");\n\n/**\n * Given a value, cast it to a string, or throw a `CastError` if the value\n * cannot be casted. `null` and `undefined` are considered valid.\n *\n * @param {Any} value\n * @param {String} [path] optional the path to set on the CastError\n * @return {string|null|undefined}\n * @throws {CastError}\n * @api private\n */\n\nmodule.exports = function castString(value, path) {\n  // If null or undefined\n  if (value == null) {\n    return value;\n  }\n\n  // handle documents being passed\n  if (value._id && typeof value._id === 'string') {\n    return value._id;\n  }\n\n  // Re: gh-647 and gh-3030, we're ok with casting using `toString()`\n  // **unless** its the default Object.toString, because \"[object Object]\"\n  // doesn't really qualify as useful data\n  if (value.toString &&\n      value.toString !== Object.prototype.toString &&\n      !Array.isArray(value)) {\n    return value.toString();\n  }\n\n  throw new CastError('string', value, path);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Nhc3Qvc3RyaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGtCQUFrQixtQkFBTyxDQUFDLHNFQUFlOztBQUV6QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvY2FzdC9zdHJpbmcuanM/NzA4OCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IENhc3RFcnJvciA9IHJlcXVpcmUoJy4uL2Vycm9yL2Nhc3QnKTtcblxuLyoqXG4gKiBHaXZlbiBhIHZhbHVlLCBjYXN0IGl0IHRvIGEgc3RyaW5nLCBvciB0aHJvdyBhIGBDYXN0RXJyb3JgIGlmIHRoZSB2YWx1ZVxuICogY2Fubm90IGJlIGNhc3RlZC4gYG51bGxgIGFuZCBgdW5kZWZpbmVkYCBhcmUgY29uc2lkZXJlZCB2YWxpZC5cbiAqXG4gKiBAcGFyYW0ge0FueX0gdmFsdWVcbiAqIEBwYXJhbSB7U3RyaW5nfSBbcGF0aF0gb3B0aW9uYWwgdGhlIHBhdGggdG8gc2V0IG9uIHRoZSBDYXN0RXJyb3JcbiAqIEByZXR1cm4ge3N0cmluZ3xudWxsfHVuZGVmaW5lZH1cbiAqIEB0aHJvd3Mge0Nhc3RFcnJvcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY2FzdFN0cmluZyh2YWx1ZSwgcGF0aCkge1xuICAvLyBJZiBudWxsIG9yIHVuZGVmaW5lZFxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8vIGhhbmRsZSBkb2N1bWVudHMgYmVpbmcgcGFzc2VkXG4gIGlmICh2YWx1ZS5faWQgJiYgdHlwZW9mIHZhbHVlLl9pZCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUuX2lkO1xuICB9XG5cbiAgLy8gUmU6IGdoLTY0NyBhbmQgZ2gtMzAzMCwgd2UncmUgb2sgd2l0aCBjYXN0aW5nIHVzaW5nIGB0b1N0cmluZygpYFxuICAvLyAqKnVubGVzcyoqIGl0cyB0aGUgZGVmYXVsdCBPYmplY3QudG9TdHJpbmcsIGJlY2F1c2UgXCJbb2JqZWN0IE9iamVjdF1cIlxuICAvLyBkb2Vzbid0IHJlYWxseSBxdWFsaWZ5IGFzIHVzZWZ1bCBkYXRhXG4gIGlmICh2YWx1ZS50b1N0cmluZyAmJlxuICAgICAgdmFsdWUudG9TdHJpbmcgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcgJiZcbiAgICAgICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICB9XG5cbiAgdGhyb3cgbmV3IENhc3RFcnJvcignc3RyaW5nJywgdmFsdWUsIHBhdGgpO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/cast/string.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/collection.js":
/*!*************************************************!*\
  !*** ./node_modules/mongoose/lib/collection.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst STATES = __webpack_require__(/*! ./connectionState */ \"(ssr)/./node_modules/mongoose/lib/connectionState.js\");\nconst immediate = __webpack_require__(/*! ./helpers/immediate */ \"(ssr)/./node_modules/mongoose/lib/helpers/immediate.js\");\n\n/**\n * Abstract Collection constructor\n *\n * This is the base class that drivers inherit from and implement.\n *\n * @param {String} name name of the collection\n * @param {Connection} conn A MongooseConnection instance\n * @param {Object} [opts] optional collection options\n * @api public\n */\n\nfunction Collection(name, conn, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  this.opts = opts;\n  this.name = name;\n  this.collectionName = name;\n  this.conn = conn;\n  this.queue = [];\n  this.buffer = true;\n  this.emitter = new EventEmitter();\n\n  if (STATES.connected === this.conn.readyState) {\n    this.onOpen();\n  }\n}\n\n/**\n * The collection name\n *\n * @api public\n * @property name\n */\n\nCollection.prototype.name;\n\n/**\n * The collection name\n *\n * @api public\n * @property collectionName\n */\n\nCollection.prototype.collectionName;\n\n/**\n * The Connection instance\n *\n * @api public\n * @property conn\n */\n\nCollection.prototype.conn;\n\n/**\n * Called when the database connects\n *\n * @api private\n */\n\nCollection.prototype.onOpen = function() {\n  this.buffer = false;\n  immediate(() => this.doQueue());\n};\n\n/**\n * Called when the database disconnects\n *\n * @api private\n */\n\nCollection.prototype.onClose = function() {};\n\n/**\n * Queues a method for later execution when its\n * database connection opens.\n *\n * @param {String} name name of the method to queue\n * @param {Array} args arguments to pass to the method when executed\n * @api private\n */\n\nCollection.prototype.addQueue = function(name, args) {\n  this.queue.push([name, args]);\n  return this;\n};\n\n/**\n * Removes a queued method\n *\n * @param {String} name name of the method to queue\n * @param {Array} args arguments to pass to the method when executed\n * @api private\n */\n\nCollection.prototype.removeQueue = function(name, args) {\n  const index = this.queue.findIndex(v => v[0] === name && v[1] === args);\n  if (index === -1) {\n    return false;\n  }\n  this.queue.splice(index, 1);\n  return true;\n};\n\n/**\n * Executes all queued methods and clears the queue.\n *\n * @api private\n */\n\nCollection.prototype.doQueue = function() {\n  for (const method of this.queue) {\n    if (typeof method[0] === 'function') {\n      method[0].apply(this, method[1]);\n    } else {\n      this[method[0]].apply(this, method[1]);\n    }\n  }\n  this.queue = [];\n  const _this = this;\n  immediate(function() {\n    _this.emitter.emit('queue');\n  });\n  return this;\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.ensureIndex = function() {\n  throw new Error('Collection#ensureIndex unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.createIndex = function() {\n  throw new Error('Collection#createIndex unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.findAndModify = function() {\n  throw new Error('Collection#findAndModify unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.findOneAndUpdate = function() {\n  throw new Error('Collection#findOneAndUpdate unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.findOneAndDelete = function() {\n  throw new Error('Collection#findOneAndDelete unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.findOneAndReplace = function() {\n  throw new Error('Collection#findOneAndReplace unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.findOne = function() {\n  throw new Error('Collection#findOne unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.find = function() {\n  throw new Error('Collection#find unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.insert = function() {\n  throw new Error('Collection#insert unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.insertOne = function() {\n  throw new Error('Collection#insertOne unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.insertMany = function() {\n  throw new Error('Collection#insertMany unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.save = function() {\n  throw new Error('Collection#save unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.updateOne = function() {\n  throw new Error('Collection#updateOne unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.updateMany = function() {\n  throw new Error('Collection#updateMany unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.deleteOne = function() {\n  throw new Error('Collection#deleteOne unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.deleteMany = function() {\n  throw new Error('Collection#deleteMany unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.getIndexes = function() {\n  throw new Error('Collection#getIndexes unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.watch = function() {\n  throw new Error('Collection#watch unimplemented by driver');\n};\n\n/*!\n * ignore\n */\n\nCollection.prototype._shouldBufferCommands = function _shouldBufferCommands() {\n  const opts = this.opts;\n\n  if (opts.bufferCommands != null) {\n    return opts.bufferCommands;\n  }\n  if (opts && opts.schemaUserProvidedOptions != null && opts.schemaUserProvidedOptions.bufferCommands != null) {\n    return opts.schemaUserProvidedOptions.bufferCommands;\n  }\n\n  return this.conn._shouldBufferCommands();\n};\n\n/*!\n * ignore\n */\n\nCollection.prototype._getBufferTimeoutMS = function _getBufferTimeoutMS() {\n  const conn = this.conn;\n  const opts = this.opts;\n\n  if (opts.bufferTimeoutMS != null) {\n    return opts.bufferTimeoutMS;\n  }\n  if (opts && opts.schemaUserProvidedOptions != null && opts.schemaUserProvidedOptions.bufferTimeoutMS != null) {\n    return opts.schemaUserProvidedOptions.bufferTimeoutMS;\n  }\n  if (conn.config.bufferTimeoutMS != null) {\n    return conn.config.bufferTimeoutMS;\n  }\n  if (conn.base != null && conn.base.get('bufferTimeoutMS') != null) {\n    return conn.base.get('bufferTimeoutMS');\n  }\n  return 10000;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = Collection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/collection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/connection.js":
/*!*************************************************!*\
  !*** ./node_modules/mongoose/lib/connection.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\nconst ChangeStream = __webpack_require__(/*! ./cursor/changeStream */ \"(ssr)/./node_modules/mongoose/lib/cursor/changeStream.js\");\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst Schema = __webpack_require__(/*! ./schema */ \"(ssr)/./node_modules/mongoose/lib/schema.js\");\nconst STATES = __webpack_require__(/*! ./connectionState */ \"(ssr)/./node_modules/mongoose/lib/connectionState.js\");\nconst MongooseError = __webpack_require__(/*! ./error/index */ \"(ssr)/./node_modules/mongoose/lib/error/index.js\");\nconst ServerSelectionError = __webpack_require__(/*! ./error/serverSelection */ \"(ssr)/./node_modules/mongoose/lib/error/serverSelection.js\");\nconst SyncIndexesError = __webpack_require__(/*! ./error/syncIndexes */ \"(ssr)/./node_modules/mongoose/lib/error/syncIndexes.js\");\nconst applyPlugins = __webpack_require__(/*! ./helpers/schema/applyPlugins */ \"(ssr)/./node_modules/mongoose/lib/helpers/schema/applyPlugins.js\");\nconst clone = __webpack_require__(/*! ./helpers/clone */ \"(ssr)/./node_modules/mongoose/lib/helpers/clone.js\");\nconst driver = __webpack_require__(/*! ./driver */ \"(ssr)/./node_modules/mongoose/lib/driver.js\");\nconst get = __webpack_require__(/*! ./helpers/get */ \"(ssr)/./node_modules/mongoose/lib/helpers/get.js\");\nconst immediate = __webpack_require__(/*! ./helpers/immediate */ \"(ssr)/./node_modules/mongoose/lib/helpers/immediate.js\");\nconst utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\nconst CreateCollectionsError = __webpack_require__(/*! ./error/createCollectionsError */ \"(ssr)/./node_modules/mongoose/lib/error/createCollectionsError.js\");\n\nconst arrayAtomicsSymbol = (__webpack_require__(/*! ./helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").arrayAtomicsSymbol);\nconst sessionNewDocuments = (__webpack_require__(/*! ./helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").sessionNewDocuments);\n\n/**\n * A list of authentication mechanisms that don't require a password for authentication.\n * This is used by the authMechanismDoesNotRequirePassword method.\n *\n * @api private\n */\nconst noPasswordAuthMechanisms = [\n  'MONGODB-X509'\n];\n\n/**\n * Connection constructor\n *\n * For practical reasons, a Connection equals a Db.\n *\n * @param {Mongoose} base a mongoose instance\n * @inherits NodeJS EventEmitter https://nodejs.org/api/events.html#class-eventemitter\n * @event `connecting`: Emitted when `connection.openUri()` is executed on this connection.\n * @event `connected`: Emitted when this connection successfully connects to the db. May be emitted _multiple_ times in `reconnected` scenarios.\n * @event `open`: Emitted after we `connected` and `onOpen` is executed on all of this connection's models.\n * @event `disconnecting`: Emitted when `connection.close()` was executed.\n * @event `disconnected`: Emitted after getting disconnected from the db.\n * @event `close`: Emitted after we `disconnected` and `onClose` executed on all of this connection's models.\n * @event `reconnected`: Emitted after we `connected` and subsequently `disconnected`, followed by successfully another successful connection.\n * @event `error`: Emitted when an error occurs on this connection.\n * @event `fullsetup`: Emitted after the driver has connected to primary and all secondaries if specified in the connection string.\n * @api public\n */\n\nfunction Connection(base) {\n  this.base = base;\n  this.collections = {};\n  this.models = {};\n  this.config = {};\n  this.replica = false;\n  this.options = null;\n  this.otherDbs = []; // FIXME: To be replaced with relatedDbs\n  this.relatedDbs = {}; // Hashmap of other dbs that share underlying connection\n  this.states = STATES;\n  this._readyState = STATES.disconnected;\n  this._closeCalled = false;\n  this._hasOpened = false;\n  this.plugins = [];\n  if (typeof base === 'undefined' || !base.connections.length) {\n    this.id = 0;\n  } else {\n    this.id = base.nextConnectionId;\n  }\n  this._queue = [];\n}\n\n/*!\n * Inherit from EventEmitter\n */\n\nObject.setPrototypeOf(Connection.prototype, EventEmitter.prototype);\n\n/**\n * Connection ready state\n *\n * - 0 = disconnected\n * - 1 = connected\n * - 2 = connecting\n * - 3 = disconnecting\n *\n * Each state change emits its associated event name.\n *\n * #### Example:\n *\n *     conn.on('connected', callback);\n *     conn.on('disconnected', callback);\n *\n * @property readyState\n * @memberOf Connection\n * @instance\n * @api public\n */\n\nObject.defineProperty(Connection.prototype, 'readyState', {\n  get: function() {\n    return this._readyState;\n  },\n  set: function(val) {\n    if (!(val in STATES)) {\n      throw new Error('Invalid connection state: ' + val);\n    }\n\n    if (this._readyState !== val) {\n      this._readyState = val;\n      // [legacy] loop over the otherDbs on this connection and change their state\n      for (const db of this.otherDbs) {\n        db.readyState = val;\n      }\n\n      if (STATES.connected === val) {\n        this._hasOpened = true;\n      }\n\n      this.emit(STATES[val]);\n    }\n  }\n});\n\n/**\n * Gets the value of the option `key`. Equivalent to `conn.options[key]`\n *\n * #### Example:\n *\n *     conn.get('test'); // returns the 'test' value\n *\n * @param {String} key\n * @method get\n * @api public\n */\n\nConnection.prototype.get = function(key) {\n  if (this.config.hasOwnProperty(key)) {\n    return this.config[key];\n  }\n\n  return get(this.options, key);\n};\n\n/**\n * Sets the value of the option `key`. Equivalent to `conn.options[key] = val`\n *\n * Supported options include:\n *\n * - `maxTimeMS`: Set [`maxTimeMS`](https://mongoosejs.com/docs/api/query.html#Query.prototype.maxTimeMS()) for all queries on this connection.\n * - 'debug': If `true`, prints the operations mongoose sends to MongoDB to the console. If a writable stream is passed, it will log to that stream, without colorization. If a callback function is passed, it will receive the collection name, the method name, then all arugments passed to the method. For example, if you wanted to replicate the default logging, you could output from the callback `Mongoose: ${collectionName}.${methodName}(${methodArgs.join(', ')})`.\n *\n * #### Example:\n *\n *     conn.set('test', 'foo');\n *     conn.get('test'); // 'foo'\n *     conn.options.test; // 'foo'\n *\n * @param {String} key\n * @param {Any} val\n * @method set\n * @api public\n */\n\nConnection.prototype.set = function(key, val) {\n  if (this.config.hasOwnProperty(key)) {\n    this.config[key] = val;\n    return val;\n  }\n\n  this.options = this.options || {};\n  this.options[key] = val;\n  return val;\n};\n\n/**\n * A hash of the collections associated with this connection\n *\n * @property collections\n * @memberOf Connection\n * @instance\n * @api public\n */\n\nConnection.prototype.collections;\n\n/**\n * The name of the database this connection points to.\n *\n * #### Example:\n *\n *     mongoose.createConnection('mongodb://127.0.0.1:27017/mydb').name; // \"mydb\"\n *\n * @property name\n * @memberOf Connection\n * @instance\n * @api public\n */\n\nConnection.prototype.name;\n\n/**\n * A [POJO](https://masteringjs.io/tutorials/fundamentals/pojo) containing\n * a map from model names to models. Contains all models that have been\n * added to this connection using [`Connection#model()`](https://mongoosejs.com/docs/api/connection.html#Connection.prototype.model()).\n *\n * #### Example:\n *\n *     const conn = mongoose.createConnection();\n *     const Test = conn.model('Test', mongoose.Schema({ name: String }));\n *\n *     Object.keys(conn.models).length; // 1\n *     conn.models.Test === Test; // true\n *\n * @property models\n * @memberOf Connection\n * @instance\n * @api public\n */\n\nConnection.prototype.models;\n\n/**\n * A number identifier for this connection. Used for debugging when\n * you have [multiple connections](https://mongoosejs.com/docs/connections.html#multiple_connections).\n *\n * #### Example:\n *\n *     // The default connection has `id = 0`\n *     mongoose.connection.id; // 0\n *\n *     // If you create a new connection, Mongoose increments id\n *     const conn = mongoose.createConnection();\n *     conn.id; // 1\n *\n * @property id\n * @memberOf Connection\n * @instance\n * @api public\n */\n\nConnection.prototype.id;\n\n/**\n * The plugins that will be applied to all models created on this connection.\n *\n * #### Example:\n *\n *     const db = mongoose.createConnection('mongodb://127.0.0.1:27017/mydb');\n *     db.plugin(() => console.log('Applied'));\n *     db.plugins.length; // 1\n *\n *     db.model('Test', new Schema({})); // Prints \"Applied\"\n *\n * @property plugins\n * @memberOf Connection\n * @instance\n * @api public\n */\n\nObject.defineProperty(Connection.prototype, 'plugins', {\n  configurable: false,\n  enumerable: true,\n  writable: true\n});\n\n/**\n * The host name portion of the URI. If multiple hosts, such as a replica set,\n * this will contain the first host name in the URI\n *\n * #### Example:\n *\n *     mongoose.createConnection('mongodb://127.0.0.1:27017/mydb').host; // \"127.0.0.1\"\n *\n * @property host\n * @memberOf Connection\n * @instance\n * @api public\n */\n\nObject.defineProperty(Connection.prototype, 'host', {\n  configurable: true,\n  enumerable: true,\n  writable: true\n});\n\n/**\n * The port portion of the URI. If multiple hosts, such as a replica set,\n * this will contain the port from the first host name in the URI.\n *\n * #### Example:\n *\n *     mongoose.createConnection('mongodb://127.0.0.1:27017/mydb').port; // 27017\n *\n * @property port\n * @memberOf Connection\n * @instance\n * @api public\n */\n\nObject.defineProperty(Connection.prototype, 'port', {\n  configurable: true,\n  enumerable: true,\n  writable: true\n});\n\n/**\n * The username specified in the URI\n *\n * #### Example:\n *\n *     mongoose.createConnection('mongodb://val:psw@127.0.0.1:27017/mydb').user; // \"val\"\n *\n * @property user\n * @memberOf Connection\n * @instance\n * @api public\n */\n\nObject.defineProperty(Connection.prototype, 'user', {\n  configurable: true,\n  enumerable: true,\n  writable: true\n});\n\n/**\n * The password specified in the URI\n *\n * #### Example:\n *\n *     mongoose.createConnection('mongodb://val:psw@127.0.0.1:27017/mydb').pass; // \"psw\"\n *\n * @property pass\n * @memberOf Connection\n * @instance\n * @api public\n */\n\nObject.defineProperty(Connection.prototype, 'pass', {\n  configurable: true,\n  enumerable: true,\n  writable: true\n});\n\n/**\n * The mongodb.Db instance, set when the connection is opened\n *\n * @property db\n * @memberOf Connection\n * @instance\n * @api public\n */\n\nConnection.prototype.db;\n\n/**\n * The MongoClient instance this connection uses to talk to MongoDB. Mongoose automatically sets this property\n * when the connection is opened.\n *\n * @property client\n * @memberOf Connection\n * @instance\n * @api public\n */\n\nConnection.prototype.client;\n\n/**\n * A hash of the global options that are associated with this connection\n *\n * @property config\n * @memberOf Connection\n * @instance\n * @api public\n */\n\nConnection.prototype.config;\n\n/**\n * Helper for `createCollection()`. Will explicitly create the given collection\n * with specified options. Used to create [capped collections](https://www.mongodb.com/docs/manual/core/capped-collections/)\n * and [views](https://www.mongodb.com/docs/manual/core/views/) from mongoose.\n *\n * Options are passed down without modification to the [MongoDB driver's `createCollection()` function](https://mongodb.github.io/node-mongodb-native/4.9/classes/Db.html#createCollection)\n *\n * @method createCollection\n * @param {string} collection The collection to create\n * @param {Object} [options] see [MongoDB driver docs](https://mongodb.github.io/node-mongodb-native/4.9/classes/Db.html#createCollection)\n * @return {Promise}\n * @api public\n */\n\nConnection.prototype.createCollection = async function createCollection(collection, options) {\n  if (typeof options === 'function' || (arguments.length >= 3 && typeof arguments[2] === 'function')) {\n    throw new MongooseError('Connection.prototype.createCollection() no longer accepts a callback');\n  }\n\n  if ((this.readyState === STATES.connecting || this.readyState === STATES.disconnected) && this._shouldBufferCommands()) {\n    await new Promise(resolve => {\n      this._queue.push({ fn: resolve });\n    });\n  }\n\n  return this.db.createCollection(collection, options);\n};\n\n/**\n * Calls `createCollection()` on a models in a series.\n *\n * @method createCollections\n * @param {Boolean} continueOnError When true, will continue to create collections and create a new error class for the collections that errored.\n * @returns {Promise}\n * @api public\n */\n\nConnection.prototype.createCollections = async function createCollections(options = {}) {\n  const result = {};\n  const errorsMap = { };\n\n  const { continueOnError } = options;\n  delete options.continueOnError;\n  for (const model of Object.values(this.models)) {\n    try {\n      result[model.modelName] = await model.createCollection({});\n    } catch (err) {\n      if (!continueOnError) {\n        errorsMap[model.modelName] = err;\n        break;\n      } else {\n        result[model.modelName] = err;\n      }\n    }\n  }\n\n  if (!continueOnError && Object.keys(errorsMap).length) {\n    const message = Object.entries(errorsMap).map(([modelName, err]) => `${modelName}: ${err.message}`).join(', ');\n    const createCollectionsError = new CreateCollectionsError(message, errorsMap);\n    throw createCollectionsError;\n  }\n  return result;\n};\n\n/**\n * A convenience wrapper for `connection.client.withSession()`.\n *\n * #### Example:\n *\n *     await conn.withSession(async session => {\n *       const doc = await TestModel.findOne().session(session);\n *     });\n *\n * @method withSession\n * @param {Function} executor called with 1 argument: a `ClientSession` instance\n * @return {Promise} resolves to the return value of the executor function\n * @api public\n */\n\nConnection.prototype.withSession = async function withSession(executor) {\n  if (arguments.length === 0) {\n    throw new Error('Please provide an executor function');\n  }\n  return await this.client.withSession(executor);\n};\n\n/**\n * _Requires MongoDB >= 3.6.0._ Starts a [MongoDB session](https://www.mongodb.com/docs/manual/release-notes/3.6/#client-sessions)\n * for benefits like causal consistency, [retryable writes](https://www.mongodb.com/docs/manual/core/retryable-writes/),\n * and [transactions](https://thecodebarbarian.com/a-node-js-perspective-on-mongodb-4-transactions.html).\n *\n * #### Example:\n *\n *     const session = await conn.startSession();\n *     let doc = await Person.findOne({ name: 'Ned Stark' }, null, { session });\n *     await doc.remove();\n *     // `doc` will always be null, even if reading from a replica set\n *     // secondary. Without causal consistency, it is possible to\n *     // get a doc back from the below query if the query reads from a\n *     // secondary that is experiencing replication lag.\n *     doc = await Person.findOne({ name: 'Ned Stark' }, null, { session, readPreference: 'secondary' });\n *\n *\n * @method startSession\n * @param {Object} [options] see the [mongodb driver options](https://mongodb.github.io/node-mongodb-native/4.9/classes/MongoClient.html#startSession)\n * @param {Boolean} [options.causalConsistency=true] set to false to disable causal consistency\n * @return {Promise<ClientSession>} promise that resolves to a MongoDB driver `ClientSession`\n * @api public\n */\n\nConnection.prototype.startSession = async function startSession(options) {\n  if (arguments.length >= 2 && typeof arguments[1] === 'function') {\n    throw new MongooseError('Connection.prototype.startSession() no longer accepts a callback');\n  }\n\n  if ((this.readyState === STATES.connecting || this.readyState === STATES.disconnected) && this._shouldBufferCommands()) {\n    await new Promise(resolve => {\n      this._queue.push({ fn: resolve });\n    });\n  }\n\n  const session = this.client.startSession(options);\n  return session;\n};\n\n/**\n * _Requires MongoDB >= 3.6.0._ Executes the wrapped async function\n * in a transaction. Mongoose will commit the transaction if the\n * async function executes successfully and attempt to retry if\n * there was a retriable error.\n *\n * Calls the MongoDB driver's [`session.withTransaction()`](https://mongodb.github.io/node-mongodb-native/4.9/classes/ClientSession.html#withTransaction),\n * but also handles resetting Mongoose document state as shown below.\n *\n * #### Example:\n *\n *     const doc = new Person({ name: 'Will Riker' });\n *     await db.transaction(async function setRank(session) {\n *       doc.rank = 'Captain';\n *       await doc.save({ session });\n *       doc.isNew; // false\n *\n *       // Throw an error to abort the transaction\n *       throw new Error('Oops!');\n *     },{ readPreference: 'primary' }).catch(() => {});\n *\n *     // true, `transaction()` reset the document's state because the\n *     // transaction was aborted.\n *     doc.isNew;\n *\n * @method transaction\n * @param {Function} fn Function to execute in a transaction\n * @param {mongodb.TransactionOptions} [options] Optional settings for the transaction\n * @return {Promise<Any>} promise that is fulfilled if Mongoose successfully committed the transaction, or rejects if the transaction was aborted or if Mongoose failed to commit the transaction. If fulfilled, the promise resolves to a MongoDB command result.\n * @api public\n */\n\nConnection.prototype.transaction = function transaction(fn, options) {\n  return this.startSession().then(session => {\n    session[sessionNewDocuments] = new Map();\n    return session.withTransaction(() => _wrapUserTransaction(fn, session), options).\n      then(res => {\n        delete session[sessionNewDocuments];\n        return res;\n      }).\n      catch(err => {\n        delete session[sessionNewDocuments];\n        throw err;\n      }).\n      finally(() => {\n        session.endSession().catch(() => {});\n      });\n  });\n};\n\n/*!\n * Reset document state in between transaction retries re: gh-13698\n */\n\nasync function _wrapUserTransaction(fn, session) {\n  try {\n    const res = await fn(session);\n    return res;\n  } catch (err) {\n    _resetSessionDocuments(session);\n    throw err;\n  }\n}\n\n/*!\n * If transaction was aborted, we need to reset newly inserted documents' `isNew`.\n */\nfunction _resetSessionDocuments(session) {\n  for (const doc of session[sessionNewDocuments].keys()) {\n    const state = session[sessionNewDocuments].get(doc);\n    if (state.hasOwnProperty('isNew')) {\n      doc.$isNew = state.isNew;\n    }\n    if (state.hasOwnProperty('versionKey')) {\n      doc.set(doc.schema.options.versionKey, state.versionKey);\n    }\n\n    if (state.modifiedPaths.length > 0 && doc.$__.activePaths.states.modify == null) {\n      doc.$__.activePaths.states.modify = {};\n    }\n    for (const path of state.modifiedPaths) {\n      const currentState = doc.$__.activePaths.paths[path];\n      if (currentState != null) {\n        delete doc.$__.activePaths[currentState][path];\n      }\n      doc.$__.activePaths.paths[path] = 'modify';\n      doc.$__.activePaths.states.modify[path] = true;\n    }\n\n    for (const path of state.atomics.keys()) {\n      const val = doc.$__getValue(path);\n      if (val == null) {\n        continue;\n      }\n      val[arrayAtomicsSymbol] = state.atomics.get(path);\n    }\n  }\n}\n\n/**\n * Helper for `dropCollection()`. Will delete the given collection, including\n * all documents and indexes.\n *\n * @method dropCollection\n * @param {string} collection The collection to delete\n * @return {Promise}\n * @api public\n */\n\nConnection.prototype.dropCollection = async function dropCollection(collection) {\n  if (arguments.length >= 2 && typeof arguments[1] === 'function') {\n    throw new MongooseError('Connection.prototype.dropCollection() no longer accepts a callback');\n  }\n\n  if ((this.readyState === STATES.connecting || this.readyState === STATES.disconnected) && this._shouldBufferCommands()) {\n    await new Promise(resolve => {\n      this._queue.push({ fn: resolve });\n    });\n  }\n\n  return this.db.dropCollection(collection);\n};\n\n/**\n * Helper for MongoDB Node driver's `listCollections()`.\n * Returns an array of collection objects.\n *\n * @method listCollections\n * @return {Promise<Collection[]>}\n * @api public\n */\n\nConnection.prototype.listCollections = async function listCollections() {\n  if ((this.readyState === STATES.connecting || this.readyState === STATES.disconnected) && this._shouldBufferCommands()) {\n    await new Promise(resolve => {\n      this._queue.push({ fn: resolve });\n    });\n  }\n\n  const cursor = this.db.listCollections();\n  return await cursor.toArray();\n};\n\n/**\n * Helper for `dropDatabase()`. Deletes the given database, including all\n * collections, documents, and indexes.\n *\n * #### Example:\n *\n *     const conn = mongoose.createConnection('mongodb://127.0.0.1:27017/mydb');\n *     // Deletes the entire 'mydb' database\n *     await conn.dropDatabase();\n *\n * @method dropDatabase\n * @return {Promise}\n * @api public\n */\n\nConnection.prototype.dropDatabase = async function dropDatabase() {\n  if (arguments.length >= 1 && typeof arguments[0] === 'function') {\n    throw new MongooseError('Connection.prototype.dropDatabase() no longer accepts a callback');\n  }\n\n  if ((this.readyState === STATES.connecting || this.readyState === STATES.disconnected) && this._shouldBufferCommands()) {\n    await new Promise(resolve => {\n      this._queue.push({ fn: resolve });\n    });\n  }\n\n  // If `dropDatabase()` is called, this model's collection will not be\n  // init-ed. It is sufficiently common to call `dropDatabase()` after\n  // `mongoose.connect()` but before creating models that we want to\n  // support this. See gh-6796\n  for (const model of Object.values(this.models)) {\n    delete model.$init;\n  }\n\n  return this.db.dropDatabase();\n};\n\n/*!\n * ignore\n */\n\nConnection.prototype._shouldBufferCommands = function _shouldBufferCommands() {\n  if (this.config.bufferCommands != null) {\n    return this.config.bufferCommands;\n  }\n  if (this.base.get('bufferCommands') != null) {\n    return this.base.get('bufferCommands');\n  }\n  return true;\n};\n\n/**\n * error\n *\n * Graceful error handling, passes error to callback\n * if available, else emits error on the connection.\n *\n * @param {Error} err\n * @param {Function} callback optional\n * @emits \"error\" Emits the `error` event with the given `err`, unless a callback is specified\n * @returns {Promise|null} Returns a rejected Promise if no `callback` is given.\n * @api private\n */\n\nConnection.prototype.error = function(err, callback) {\n  if (callback) {\n    callback(err);\n    return null;\n  }\n  if (this.listeners('error').length > 0) {\n    this.emit('error', err);\n  }\n  return Promise.reject(err);\n};\n\n/**\n * Called when the connection is opened\n *\n * @api private\n */\n\nConnection.prototype.onOpen = function() {\n  this.readyState = STATES.connected;\n\n  for (const d of this._queue) {\n    d.fn.apply(d.ctx, d.args);\n  }\n  this._queue = [];\n\n  // avoid having the collection subscribe to our event emitter\n  // to prevent 0.3 warning\n  for (const i in this.collections) {\n    if (utils.object.hasOwnProperty(this.collections, i)) {\n      this.collections[i].onOpen();\n    }\n  }\n\n  this.emit('open');\n};\n\n/**\n * Opens the connection with a URI using `MongoClient.connect()`.\n *\n * @param {String} uri The URI to connect with.\n * @param {Object} [options] Passed on to [`MongoClient.connect`](https://mongodb.github.io/node-mongodb-native/4.9/classes/MongoClient.html#connect-1)\n * @param {Boolean} [options.bufferCommands=true] Mongoose specific option. Set to false to [disable buffering](https://mongoosejs.com/docs/faq.html#callback_never_executes) on all models associated with this connection.\n * @param {Number} [options.bufferTimeoutMS=10000] Mongoose specific option. If `bufferCommands` is true, Mongoose will throw an error after `bufferTimeoutMS` if the operation is still buffered.\n * @param {String} [options.dbName] The name of the database we want to use. If not provided, use database name from connection string.\n * @param {String} [options.user] username for authentication, equivalent to `options.auth.user`. Maintained for backwards compatibility.\n * @param {String} [options.pass] password for authentication, equivalent to `options.auth.password`. Maintained for backwards compatibility.\n * @param {Number} [options.maxPoolSize=100] The maximum number of sockets the MongoDB driver will keep open for this connection. Keep in mind that MongoDB only allows one operation per socket at a time, so you may want to increase this if you find you have a few slow queries that are blocking faster queries from proceeding. See [Slow Trains in MongoDB and Node.js](https://thecodebarbarian.com/slow-trains-in-mongodb-and-nodejs).\n * @param {Number} [options.minPoolSize=0] The minimum number of sockets the MongoDB driver will keep open for this connection. Keep in mind that MongoDB only allows one operation per socket at a time, so you may want to increase this if you find you have a few slow queries that are blocking faster queries from proceeding. See [Slow Trains in MongoDB and Node.js](https://thecodebarbarian.com/slow-trains-in-mongodb-and-nodejs).\n * @param {Number} [options.serverSelectionTimeoutMS] If `useUnifiedTopology = true`, the MongoDB driver will try to find a server to send any given operation to, and keep retrying for `serverSelectionTimeoutMS` milliseconds before erroring out. If not set, the MongoDB driver defaults to using `30000` (30 seconds).\n * @param {Number} [options.heartbeatFrequencyMS] If `useUnifiedTopology = true`, the MongoDB driver sends a heartbeat every `heartbeatFrequencyMS` to check on the status of the connection. A heartbeat is subject to `serverSelectionTimeoutMS`, so the MongoDB driver will retry failed heartbeats for up to 30 seconds by default. Mongoose only emits a `'disconnected'` event after a heartbeat has failed, so you may want to decrease this setting to reduce the time between when your server goes down and when Mongoose emits `'disconnected'`. We recommend you do **not** set this setting below 1000, too many heartbeats can lead to performance degradation.\n * @param {Boolean} [options.autoIndex=true] Mongoose-specific option. Set to false to disable automatic index creation for all models associated with this connection.\n * @param {Class} [options.promiseLibrary] Sets the [underlying driver's promise library](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/MongoClientOptions.html#promiseLibrary).\n * @param {Number} [options.socketTimeoutMS=0] How long the MongoDB driver will wait before killing a socket due to inactivity _after initial connection_. A socket may be inactive because of either no activity or a long-running operation. `socketTimeoutMS` defaults to 0, which means Node.js will not time out the socket due to inactivity. This option is passed to [Node.js `socket#setTimeout()` function](https://nodejs.org/api/net.html#net_socket_settimeout_timeout_callback) after the MongoDB driver successfully completes.\n * @param {Number} [options.family=0] Passed transparently to [Node.js' `dns.lookup()`](https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback) function. May be either `0, `4`, or `6`. `4` means use IPv4 only, `6` means use IPv6 only, `0` means try both.\n * @param {Boolean} [options.autoCreate=false] Set to `true` to make Mongoose automatically call `createCollection()` on every model created on this connection.\n * @returns {Promise<Connection>}\n * @api public\n */\n\nConnection.prototype.openUri = async function openUri(uri, options) {\n  if (this.readyState === STATES.connecting || this.readyState === STATES.connected) {\n    if (this._connectionString === uri) {\n      return this;\n    }\n  }\n\n  this._closeCalled = false;\n\n  // Internal option to skip `await this.$initialConnection` in\n  // this function for `createConnection()`. Because otherwise\n  // `createConnection()` would have an uncatchable error.\n  let _fireAndForget = false;\n  if (options && '_fireAndForget' in options) {\n    _fireAndForget = options._fireAndForget;\n    delete options._fireAndForget;\n  }\n\n  try {\n    _validateArgs.apply(arguments);\n  } catch (err) {\n    if (_fireAndForget) {\n      throw err;\n    }\n    this.$initialConnection = Promise.reject(err);\n    throw err;\n  }\n\n  this.$initialConnection = this.createClient(uri, options).\n    then(() => this).\n    catch(err => {\n      this.readyState = STATES.disconnected;\n      if (this.listeners('error').length > 0) {\n        immediate(() => this.emit('error', err));\n      }\n      throw err;\n    });\n\n  for (const model of Object.values(this.models)) {\n    // Errors handled internally, so safe to ignore error\n    model.init().catch(function $modelInitNoop() {});\n  }\n\n  // `createConnection()` calls this `openUri()` function without\n  // awaiting on the result, so we set this option to rely on\n  // `asPromise()` to handle any errors.\n  if (_fireAndForget) {\n    return this;\n  }\n\n  try {\n    await this.$initialConnection;\n  } catch (err) {\n    throw _handleConnectionErrors(err);\n  }\n\n  return this;\n};\n\n/*!\n * Treat `on('error')` handlers as handling the initialConnection promise\n * to avoid uncaught exceptions when using `on('error')`. See gh-14377.\n */\n\nConnection.prototype.on = function on(event, callback) {\n  if (event === 'error' && this.$initialConnection) {\n    this.$initialConnection.catch(() => {});\n  }\n  return EventEmitter.prototype.on.call(this, event, callback);\n};\n\n/*!\n * Treat `once('error')` handlers as handling the initialConnection promise\n * to avoid uncaught exceptions when using `on('error')`. See gh-14377.\n */\n\nConnection.prototype.once = function on(event, callback) {\n  if (event === 'error' && this.$initialConnection) {\n    this.$initialConnection.catch(() => {});\n  }\n  return EventEmitter.prototype.once.call(this, event, callback);\n};\n\n/*!\n * ignore\n */\n\nfunction _validateArgs(uri, options, callback) {\n  if (typeof options === 'function' && callback == null) {\n    throw new MongooseError('Connection.prototype.openUri() no longer accepts a callback');\n  } else if (typeof callback === 'function') {\n    throw new MongooseError('Connection.prototype.openUri() no longer accepts a callback');\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _handleConnectionErrors(err) {\n  if (err?.name === 'MongoServerSelectionError') {\n    const originalError = err;\n    err = new ServerSelectionError();\n    err.assimilateError(originalError);\n  }\n\n  return err;\n}\n\n/**\n * Destroy the connection. Similar to [`.close`](https://mongoosejs.com/docs/api/connection.html#Connection.prototype.close()),\n * but also removes the connection from Mongoose's `connections` list and prevents the\n * connection from ever being re-opened.\n *\n * @param {Boolean} [force]\n * @returns {Promise}\n */\n\nConnection.prototype.destroy = async function destroy(force) {\n  if (typeof force === 'function' || (arguments.length === 2 && typeof arguments[1] === 'function')) {\n    throw new MongooseError('Connection.prototype.destroy() no longer accepts a callback');\n  }\n\n  if (force != null && typeof force === 'object') {\n    this.$wasForceClosed = !!force.force;\n  } else {\n    this.$wasForceClosed = !!force;\n  }\n\n  return this._close(force, true);\n};\n\n/**\n * Closes the connection\n *\n * @param {Boolean} [force] optional\n * @return {Promise}\n * @api public\n */\n\nConnection.prototype.close = async function close(force) {\n  if (typeof force === 'function' || (arguments.length === 2 && typeof arguments[1] === 'function')) {\n    throw new MongooseError('Connection.prototype.close() no longer accepts a callback');\n  }\n\n  if (force != null && typeof force === 'object') {\n    this.$wasForceClosed = !!force.force;\n  } else {\n    this.$wasForceClosed = !!force;\n  }\n\n  for (const model of Object.values(this.models)) {\n    // If manually disconnecting, make sure to clear each model's `$init`\n    // promise, so Mongoose knows to re-run `init()` in case the\n    // connection is re-opened. See gh-12047.\n    delete model.$init;\n  }\n\n  return this._close(force, false);\n};\n\n/**\n * Handles closing the connection\n *\n * @param {Boolean} force\n * @param {Boolean} destroy\n * @returns {Connection} this\n * @api private\n */\nConnection.prototype._close = async function _close(force, destroy) {\n  const _this = this;\n  const closeCalled = this._closeCalled;\n  this._closeCalled = true;\n  this._destroyCalled = destroy;\n  if (this.client != null) {\n    this.client._closeCalled = true;\n    this.client._destroyCalled = destroy;\n  }\n\n  const conn = this;\n  switch (this.readyState) {\n    case STATES.disconnected:\n      if (destroy && this.base.connections.indexOf(conn) !== -1) {\n        this.base.connections.splice(this.base.connections.indexOf(conn), 1);\n      }\n      if (!closeCalled) {\n        await this.doClose(force);\n        this.onClose(force);\n      }\n      break;\n\n    case STATES.connected:\n      this.readyState = STATES.disconnecting;\n      await this.doClose(force);\n      if (destroy && _this.base.connections.indexOf(conn) !== -1) {\n        this.base.connections.splice(this.base.connections.indexOf(conn), 1);\n      }\n      this.onClose(force);\n\n      break;\n    case STATES.connecting:\n      return new Promise((resolve, reject) => {\n        const _rerunClose = () => {\n          this.removeListener('open', _rerunClose);\n          this.removeListener('error', _rerunClose);\n          if (destroy) {\n            this.destroy(force).then(resolve, reject);\n          } else {\n            this.close(force).then(resolve, reject);\n          }\n        };\n\n        this.once('open', _rerunClose);\n        this.once('error', _rerunClose);\n      });\n\n    case STATES.disconnecting:\n      return new Promise(resolve => {\n        this.once('close', () => {\n          if (destroy && this.base.connections.indexOf(conn) !== -1) {\n            this.base.connections.splice(this.base.connections.indexOf(conn), 1);\n          }\n          resolve();\n        });\n      });\n  }\n\n  return this;\n};\n\n/**\n * Abstract method that drivers must implement.\n *\n * @api private\n */\n\nConnection.prototype.doClose = function() {\n  throw new Error('Connection#doClose unimplemented by driver');\n};\n\n/**\n * Called when the connection closes\n *\n * @api private\n */\n\nConnection.prototype.onClose = function(force) {\n  this.readyState = STATES.disconnected;\n\n  // avoid having the collection subscribe to our event emitter\n  // to prevent 0.3 warning\n  for (const i in this.collections) {\n    if (utils.object.hasOwnProperty(this.collections, i)) {\n      this.collections[i].onClose(force);\n    }\n  }\n\n  this.emit('close', force);\n\n  for (const db of this.otherDbs) {\n    this._destroyCalled ? db.destroy({ force: force, skipCloseClient: true }) : db.close({ force: force, skipCloseClient: true });\n  }\n};\n\n/**\n * Retrieves a raw collection instance, creating it if not cached.\n * This method returns a thin wrapper around a [MongoDB Node.js driver collection]([MongoDB Node.js driver collection](https://mongodb.github.io/node-mongodb-native/Next/classes/Collection.html)).\n * Using a Collection bypasses Mongoose middleware, validation, and casting,\n * letting you use [MongoDB Node.js driver](https://mongodb.github.io/node-mongodb-native/) functionality directly.\n *\n * @param {String} name of the collection\n * @param {Object} [options] optional collection options\n * @return {Collection} collection instance\n * @api public\n */\n\nConnection.prototype.collection = function(name, options) {\n  const defaultOptions = {\n    autoIndex: this.config.autoIndex != null ? this.config.autoIndex : this.base.options.autoIndex,\n    autoCreate: this.config.autoCreate != null ? this.config.autoCreate : this.base.options.autoCreate,\n    autoSearchIndex: this.config.autoSearchIndex != null ? this.config.autoSearchIndex : this.base.options.autoSearchIndex\n  };\n  options = Object.assign({}, defaultOptions, options ? clone(options) : {});\n  options.$wasForceClosed = this.$wasForceClosed;\n  const Collection = this.base && this.base.__driver && this.base.__driver.Collection || driver.get().Collection;\n  if (!(name in this.collections)) {\n    this.collections[name] = new Collection(name, this, options);\n  }\n  return this.collections[name];\n};\n\n/**\n * Declares a plugin executed on all schemas you pass to `conn.model()`\n *\n * Equivalent to calling `.plugin(fn)` on each schema you create.\n *\n * #### Example:\n *\n *     const db = mongoose.createConnection('mongodb://127.0.0.1:27017/mydb');\n *     db.plugin(() => console.log('Applied'));\n *     db.plugins.length; // 1\n *\n *     db.model('Test', new Schema({})); // Prints \"Applied\"\n *\n * @param {Function} fn plugin callback\n * @param {Object} [opts] optional options\n * @return {Connection} this\n * @see plugins https://mongoosejs.com/docs/plugins.html\n * @api public\n */\n\nConnection.prototype.plugin = function(fn, opts) {\n  this.plugins.push([fn, opts]);\n  return this;\n};\n\n/**\n * Defines or retrieves a model.\n *\n *     const mongoose = require('mongoose');\n *     const db = mongoose.createConnection(..);\n *     db.model('Venue', new Schema(..));\n *     const Ticket = db.model('Ticket', new Schema(..));\n *     const Venue = db.model('Venue');\n *\n * _When no `collection` argument is passed, Mongoose produces a collection name by passing the model `name` to the `utils.toCollectionName` method. This method pluralizes the name. If you don't like this behavior, either pass a collection name or set your schemas collection name option._\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: String }, { collection: 'actor' });\n *\n *     // or\n *\n *     schema.set('collection', 'actor');\n *\n *     // or\n *\n *     const collectionName = 'actor'\n *     const M = conn.model('Actor', schema, collectionName)\n *\n * @param {String|Function} name the model name or class extending Model\n * @param {Schema} [schema] a schema. necessary when defining a model\n * @param {String} [collection] name of mongodb collection (optional) if not given it will be induced from model name\n * @param {Object} [options]\n * @param {Boolean} [options.overwriteModels=false] If true, overwrite existing models with the same name to avoid `OverwriteModelError`\n * @see Mongoose#model https://mongoosejs.com/docs/api/mongoose.html#Mongoose.prototype.model()\n * @return {Model} The compiled model\n * @api public\n */\n\nConnection.prototype.model = function(name, schema, collection, options) {\n  if (!(this instanceof Connection)) {\n    throw new MongooseError('`connection.model()` should not be run with ' +\n      '`new`. If you are doing `new db.model(foo)(bar)`, use ' +\n      '`db.model(foo)(bar)` instead');\n  }\n\n  let fn;\n  if (typeof name === 'function') {\n    fn = name;\n    name = fn.name;\n  }\n\n  // collection name discovery\n  if (typeof schema === 'string') {\n    collection = schema;\n    schema = false;\n  }\n\n  if (utils.isObject(schema)) {\n    if (!schema.instanceOfSchema) {\n      schema = new Schema(schema);\n    } else if (!(schema instanceof this.base.Schema)) {\n      schema = schema._clone(this.base.Schema);\n    }\n  }\n  if (schema && !schema.instanceOfSchema) {\n    throw new Error('The 2nd parameter to `mongoose.model()` should be a ' +\n      'schema or a POJO');\n  }\n\n  const defaultOptions = { cache: false, overwriteModels: this.base.options.overwriteModels };\n  const opts = Object.assign(defaultOptions, options, { connection: this });\n  if (this.models[name] && !collection && opts.overwriteModels !== true) {\n    // model exists but we are not subclassing with custom collection\n    if (schema && schema.instanceOfSchema && schema !== this.models[name].schema) {\n      throw new MongooseError.OverwriteModelError(name);\n    }\n    return this.models[name];\n  }\n\n  let model;\n\n  if (schema && schema.instanceOfSchema) {\n    applyPlugins(schema, this.plugins, null, '$connectionPluginsApplied');\n\n    // compile a model\n    model = this.base._model(fn || name, schema, collection, opts);\n\n    // only the first model with this name is cached to allow\n    // for one-offs with custom collection names etc.\n    if (!this.models[name]) {\n      this.models[name] = model;\n    }\n\n    // Errors handled internally, so safe to ignore error\n    model.init().catch(function $modelInitNoop() {});\n\n    return model;\n  }\n\n  if (this.models[name] && collection) {\n    // subclassing current model with alternate collection\n    model = this.models[name];\n    schema = model.prototype.schema;\n    const sub = model.__subclass(this, schema, collection);\n    // do not cache the sub model\n    return sub;\n  }\n\n  if (arguments.length === 1) {\n    model = this.models[name];\n    if (!model) {\n      throw new MongooseError.MissingSchemaError(name);\n    }\n    return model;\n  }\n\n  if (!model) {\n    throw new MongooseError.MissingSchemaError(name);\n  }\n\n  if (this === model.prototype.db\n      && (!collection || collection === model.collection.name)) {\n    // model already uses this connection.\n\n    // only the first model with this name is cached to allow\n    // for one-offs with custom collection names etc.\n    if (!this.models[name]) {\n      this.models[name] = model;\n    }\n\n    return model;\n  }\n  this.models[name] = model.__subclass(this, schema, collection);\n  return this.models[name];\n};\n\n/**\n * Removes the model named `name` from this connection, if it exists. You can\n * use this function to clean up any models you created in your tests to\n * prevent OverwriteModelErrors.\n *\n * #### Example:\n *\n *     conn.model('User', new Schema({ name: String }));\n *     console.log(conn.model('User')); // Model object\n *     conn.deleteModel('User');\n *     console.log(conn.model('User')); // undefined\n *\n *     // Usually useful in a Mocha `afterEach()` hook\n *     afterEach(function() {\n *       conn.deleteModel(/.+/); // Delete every model\n *     });\n *\n * @api public\n * @param {String|RegExp} name if string, the name of the model to remove. If regexp, removes all models whose name matches the regexp.\n * @return {Connection} this\n */\n\nConnection.prototype.deleteModel = function(name) {\n  if (typeof name === 'string') {\n    const model = this.model(name);\n    if (model == null) {\n      return this;\n    }\n    const collectionName = model.collection.name;\n    delete this.models[name];\n    delete this.collections[collectionName];\n\n    this.emit('deleteModel', model);\n  } else if (name instanceof RegExp) {\n    const pattern = name;\n    const names = this.modelNames();\n    for (const name of names) {\n      if (pattern.test(name)) {\n        this.deleteModel(name);\n      }\n    }\n  } else {\n    throw new Error('First parameter to `deleteModel()` must be a string ' +\n      'or regexp, got \"' + name + '\"');\n  }\n\n  return this;\n};\n\n/**\n * Watches the entire underlying database for changes. Similar to\n * [`Model.watch()`](https://mongoosejs.com/docs/api/model.html#Model.watch()).\n *\n * This function does **not** trigger any middleware. In particular, it\n * does **not** trigger aggregate middleware.\n *\n * The ChangeStream object is an event emitter that emits the following events:\n *\n * - 'change': A change occurred, see below example\n * - 'error': An unrecoverable error occurred. In particular, change streams currently error out if they lose connection to the replica set primary. Follow [this GitHub issue](https://github.com/Automattic/mongoose/issues/6799) for updates.\n * - 'end': Emitted if the underlying stream is closed\n * - 'close': Emitted if the underlying stream is closed\n *\n * #### Example:\n *\n *     const User = conn.model('User', new Schema({ name: String }));\n *\n *     const changeStream = conn.watch().on('change', data => console.log(data));\n *\n *     // Triggers a 'change' event on the change stream.\n *     await User.create({ name: 'test' });\n *\n * @api public\n * @param {Array} [pipeline]\n * @param {Object} [options] passed without changes to [the MongoDB driver's `Db#watch()` function](https://mongodb.github.io/node-mongodb-native/4.9/classes/Db.html#watch)\n * @return {ChangeStream} mongoose-specific change stream wrapper, inherits from EventEmitter\n */\n\nConnection.prototype.watch = function(pipeline, options) {\n  const changeStreamThunk = cb => {\n    immediate(() => {\n      if (this.readyState === STATES.connecting) {\n        this.once('open', function() {\n          const driverChangeStream = this.db.watch(pipeline, options);\n          cb(null, driverChangeStream);\n        });\n      } else {\n        const driverChangeStream = this.db.watch(pipeline, options);\n        cb(null, driverChangeStream);\n      }\n    });\n  };\n\n  const changeStream = new ChangeStream(changeStreamThunk, pipeline, options);\n  return changeStream;\n};\n\n/**\n * Returns a promise that resolves when this connection\n * successfully connects to MongoDB, or rejects if this connection failed\n * to connect.\n *\n * #### Example:\n *\n *     const conn = await mongoose.createConnection('mongodb://127.0.0.1:27017/test').\n *       asPromise();\n *     conn.readyState; // 1, means Mongoose is connected\n *\n * @api public\n * @return {Promise}\n */\n\nConnection.prototype.asPromise = async function asPromise() {\n  try {\n    await this.$initialConnection;\n    return this;\n  } catch (err) {\n    throw _handleConnectionErrors(err);\n  }\n};\n\n/**\n * Returns an array of model names created on this connection.\n * @api public\n * @return {String[]}\n */\n\nConnection.prototype.modelNames = function() {\n  return Object.keys(this.models);\n};\n\n/**\n * Returns if the connection requires authentication after it is opened. Generally if a\n * username and password are both provided than authentication is needed, but in some cases a\n * password is not required.\n *\n * @api private\n * @return {Boolean} true if the connection should be authenticated after it is opened, otherwise false.\n */\nConnection.prototype.shouldAuthenticate = function() {\n  return this.user != null &&\n    (this.pass != null || this.authMechanismDoesNotRequirePassword());\n};\n\n/**\n * Returns a boolean value that specifies if the current authentication mechanism needs a\n * password to authenticate according to the auth objects passed into the openUri methods.\n *\n * @api private\n * @return {Boolean} true if the authentication mechanism specified in the options object requires\n *  a password, otherwise false.\n */\nConnection.prototype.authMechanismDoesNotRequirePassword = function() {\n  if (this.options && this.options.auth) {\n    return noPasswordAuthMechanisms.indexOf(this.options.auth.authMechanism) >= 0;\n  }\n  return true;\n};\n\n/**\n * Returns a boolean value that specifies if the provided objects object provides enough\n * data to authenticate with. Generally this is true if the username and password are both specified\n * but in some authentication methods, a password is not required for authentication so only a username\n * is required.\n *\n * @param {Object} [options] the options object passed into the openUri methods.\n * @api private\n * @return {Boolean} true if the provided options object provides enough data to authenticate with,\n *   otherwise false.\n */\nConnection.prototype.optionsProvideAuthenticationData = function(options) {\n  return (options) &&\n      (options.user) &&\n      ((options.pass) || this.authMechanismDoesNotRequirePassword());\n};\n\n/**\n * Returns the [MongoDB driver `MongoClient`](https://mongodb.github.io/node-mongodb-native/4.9/classes/MongoClient.html) instance\n * that this connection uses to talk to MongoDB.\n *\n * #### Example:\n *\n *     const conn = await mongoose.createConnection('mongodb://127.0.0.1:27017/test').\n *       asPromise();\n *\n *     conn.getClient(); // MongoClient { ... }\n *\n * @api public\n * @return {MongoClient}\n */\n\nConnection.prototype.getClient = function getClient() {\n  return this.client;\n};\n\n/**\n * Set the [MongoDB driver `MongoClient`](https://mongodb.github.io/node-mongodb-native/4.9/classes/MongoClient.html) instance\n * that this connection uses to talk to MongoDB. This is useful if you already have a MongoClient instance, and want to\n * reuse it.\n *\n * #### Example:\n *\n *     const client = await mongodb.MongoClient.connect('mongodb://127.0.0.1:27017/test');\n *\n *     const conn = mongoose.createConnection().setClient(client);\n *\n *     conn.getClient(); // MongoClient { ... }\n *     conn.readyState; // 1, means 'CONNECTED'\n *\n * @api public\n * @param {MongClient} client The Client to set to be used.\n * @return {Connection} this\n */\n\nConnection.prototype.setClient = function setClient() {\n  throw new MongooseError('Connection#setClient not implemented by driver');\n};\n\n/*!\n * Called internally by `openUri()` to create a MongoClient instance.\n */\n\nConnection.prototype.createClient = function createClient() {\n  throw new MongooseError('Connection#createClient not implemented by driver');\n};\n\n/**\n * Syncs all the indexes for the models registered with this connection.\n *\n * @param {Object} [options]\n * @param {Boolean} [options.continueOnError] `false` by default. If set to `true`, mongoose will not throw an error if one model syncing failed, and will return an object where the keys are the names of the models, and the values are the results/errors for each model.\n * @return {Promise<Object>} Returns a Promise, when the Promise resolves the value is a list of the dropped indexes.\n */\nConnection.prototype.syncIndexes = async function syncIndexes(options = {}) {\n  const result = {};\n  const errorsMap = { };\n\n  const { continueOnError } = options;\n  delete options.continueOnError;\n\n  for (const model of Object.values(this.models)) {\n    try {\n      result[model.modelName] = await model.syncIndexes(options);\n    } catch (err) {\n      if (!continueOnError) {\n        errorsMap[model.modelName] = err;\n        break;\n      } else {\n        result[model.modelName] = err;\n      }\n    }\n  }\n\n  if (!continueOnError && Object.keys(errorsMap).length) {\n    const message = Object.entries(errorsMap).map(([modelName, err]) => `${modelName}: ${err.message}`).join(', ');\n    const syncIndexesError = new SyncIndexesError(message, errorsMap);\n    throw syncIndexesError;\n  }\n\n  return result;\n};\n\n/**\n * Switches to a different database using the same [connection pool](https://mongoosejs.com/docs/api/connectionshtml#connection_pools).\n *\n * Returns a new connection object, with the new db.\n *\n * #### Example:\n *\n *     // Connect to `initialdb` first\n *     const conn = await mongoose.createConnection('mongodb://127.0.0.1:27017/initialdb').asPromise();\n *\n *     // Creates an un-cached connection to `mydb`\n *     const db = conn.useDb('mydb');\n *     // Creates a cached connection to `mydb2`. All calls to `conn.useDb('mydb2', { useCache: true })` will return the same\n *     // connection instance as opposed to creating a new connection instance\n *     const db2 = conn.useDb('mydb2', { useCache: true });\n *\n * @method useDb\n * @memberOf Connection\n * @param {String} name The database name\n * @param {Object} [options]\n * @param {Boolean} [options.useCache=false] If true, cache results so calling `useDb()` multiple times with the same name only creates 1 connection object.\n * @param {Boolean} [options.noListener=false] If true, the connection object will not make the db listen to events on the original connection. See [issue #9961](https://github.com/Automattic/mongoose/issues/9961).\n * @return {Connection} New Connection Object\n * @api public\n */\n\n/**\n * Removes the database connection with the given name created with with `useDb()`.\n *\n * Throws an error if the database connection was not found.\n *\n * #### Example:\n *\n *     // Connect to `initialdb` first\n *     const conn = await mongoose.createConnection('mongodb://127.0.0.1:27017/initialdb').asPromise();\n *\n *     // Creates an un-cached connection to `mydb`\n *     const db = conn.useDb('mydb');\n *\n *     // Closes `db`, and removes `db` from `conn.relatedDbs` and `conn.otherDbs`\n *     await conn.removeDb('mydb');\n *\n * @method removeDb\n * @memberOf Connection\n * @param {String} name The database name\n * @return {Connection} this\n * @api public\n */\n\n/*!\n * Module exports.\n */\n\nConnection.STATES = STATES;\nmodule.exports = Connection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/connection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/connectionState.js":
/*!******************************************************!*\
  !*** ./node_modules/mongoose/lib/connectionState.js ***!
  \******************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\n/*!\n * Connection states\n */\n\n\n\nconst STATES = module.exports = exports = Object.create(null);\n\nconst disconnected = 'disconnected';\nconst connected = 'connected';\nconst connecting = 'connecting';\nconst disconnecting = 'disconnecting';\nconst uninitialized = 'uninitialized';\n\nSTATES[0] = disconnected;\nSTATES[1] = connected;\nSTATES[2] = connecting;\nSTATES[3] = disconnecting;\nSTATES[99] = uninitialized;\n\nSTATES[disconnected] = 0;\nSTATES[connected] = 1;\nSTATES[connecting] = 2;\nSTATES[disconnecting] = 3;\nSTATES[uninitialized] = 99;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Nvbm5lY3Rpb25TdGF0ZS5qcyIsIm1hcHBpbmdzIjoiO0FBQ0E7QUFDQTtBQUNBOztBQUVhOztBQUViOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvY29ubmVjdGlvblN0YXRlLmpzPzdhNjMiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vKiFcbiAqIENvbm5lY3Rpb24gc3RhdGVzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBTVEFURVMgPSBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5jb25zdCBkaXNjb25uZWN0ZWQgPSAnZGlzY29ubmVjdGVkJztcbmNvbnN0IGNvbm5lY3RlZCA9ICdjb25uZWN0ZWQnO1xuY29uc3QgY29ubmVjdGluZyA9ICdjb25uZWN0aW5nJztcbmNvbnN0IGRpc2Nvbm5lY3RpbmcgPSAnZGlzY29ubmVjdGluZyc7XG5jb25zdCB1bmluaXRpYWxpemVkID0gJ3VuaW5pdGlhbGl6ZWQnO1xuXG5TVEFURVNbMF0gPSBkaXNjb25uZWN0ZWQ7XG5TVEFURVNbMV0gPSBjb25uZWN0ZWQ7XG5TVEFURVNbMl0gPSBjb25uZWN0aW5nO1xuU1RBVEVTWzNdID0gZGlzY29ubmVjdGluZztcblNUQVRFU1s5OV0gPSB1bmluaXRpYWxpemVkO1xuXG5TVEFURVNbZGlzY29ubmVjdGVkXSA9IDA7XG5TVEFURVNbY29ubmVjdGVkXSA9IDE7XG5TVEFURVNbY29ubmVjdGluZ10gPSAyO1xuU1RBVEVTW2Rpc2Nvbm5lY3RpbmddID0gMztcblNUQVRFU1t1bmluaXRpYWxpemVkXSA9IDk5O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/connectionState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/constants.js":
/*!************************************************!*\
  !*** ./node_modules/mongoose/lib/constants.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\n/*!\n * ignore\n */\n\nconst queryOperations = Object.freeze([\n  // Read\n  'countDocuments',\n  'distinct',\n  'estimatedDocumentCount',\n  'find',\n  'findOne',\n  // Update\n  'findOneAndReplace',\n  'findOneAndUpdate',\n  'replaceOne',\n  'updateMany',\n  'updateOne',\n  // Delete\n  'deleteMany',\n  'deleteOne',\n  'findOneAndDelete'\n]);\n\nexports.queryOperations = queryOperations;\n\n/*!\n * ignore\n */\n\nconst queryMiddlewareFunctions = queryOperations.concat([\n  'validate'\n]);\n\nexports.queryMiddlewareFunctions = queryMiddlewareFunctions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVCQUF1Qjs7QUFFdkI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9jb25zdGFudHMuanM/Yjk4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxuY29uc3QgcXVlcnlPcGVyYXRpb25zID0gT2JqZWN0LmZyZWV6ZShbXG4gIC8vIFJlYWRcbiAgJ2NvdW50RG9jdW1lbnRzJyxcbiAgJ2Rpc3RpbmN0JyxcbiAgJ2VzdGltYXRlZERvY3VtZW50Q291bnQnLFxuICAnZmluZCcsXG4gICdmaW5kT25lJyxcbiAgLy8gVXBkYXRlXG4gICdmaW5kT25lQW5kUmVwbGFjZScsXG4gICdmaW5kT25lQW5kVXBkYXRlJyxcbiAgJ3JlcGxhY2VPbmUnLFxuICAndXBkYXRlTWFueScsXG4gICd1cGRhdGVPbmUnLFxuICAvLyBEZWxldGVcbiAgJ2RlbGV0ZU1hbnknLFxuICAnZGVsZXRlT25lJyxcbiAgJ2ZpbmRPbmVBbmREZWxldGUnXG5dKTtcblxuZXhwb3J0cy5xdWVyeU9wZXJhdGlvbnMgPSBxdWVyeU9wZXJhdGlvbnM7XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxuY29uc3QgcXVlcnlNaWRkbGV3YXJlRnVuY3Rpb25zID0gcXVlcnlPcGVyYXRpb25zLmNvbmNhdChbXG4gICd2YWxpZGF0ZSdcbl0pO1xuXG5leHBvcnRzLnF1ZXJ5TWlkZGxld2FyZUZ1bmN0aW9ucyA9IHF1ZXJ5TWlkZGxld2FyZUZ1bmN0aW9ucztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/cursor/aggregationCursor.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongoose/lib/cursor/aggregationCursor.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseError = __webpack_require__(/*! ../error/mongooseError */ \"(ssr)/./node_modules/mongoose/lib/error/mongooseError.js\");\nconst Readable = (__webpack_require__(/*! stream */ \"stream\").Readable);\nconst eachAsync = __webpack_require__(/*! ../helpers/cursor/eachAsync */ \"(ssr)/./node_modules/mongoose/lib/helpers/cursor/eachAsync.js\");\nconst immediate = __webpack_require__(/*! ../helpers/immediate */ \"(ssr)/./node_modules/mongoose/lib/helpers/immediate.js\");\nconst util = __webpack_require__(/*! util */ \"util\");\n\n/**\n * An AggregationCursor is a concurrency primitive for processing aggregation\n * results one document at a time. It is analogous to QueryCursor.\n *\n * An AggregationCursor fulfills the Node.js streams3 API,\n * in addition to several other mechanisms for loading documents from MongoDB\n * one at a time.\n *\n * Creating an AggregationCursor executes the model's pre aggregate hooks,\n * but **not** the model's post aggregate hooks.\n *\n * Unless you're an advanced user, do **not** instantiate this class directly.\n * Use [`Aggregate#cursor()`](https://mongoosejs.com/docs/api/aggregate.html#Aggregate.prototype.cursor()) instead.\n *\n * @param {Aggregate} agg\n * @inherits Readable https://nodejs.org/api/stream.html#class-streamreadable\n * @event `cursor`: Emitted when the cursor is created\n * @event `error`: Emitted when an error occurred\n * @event `data`: Emitted when the stream is flowing and the next doc is ready\n * @event `end`: Emitted when the stream is exhausted\n * @api public\n */\n\nfunction AggregationCursor(agg) {\n  // set autoDestroy=true because on node 12 it's by default false\n  // gh-10902 need autoDestroy to destroy correctly and emit 'close' event\n  Readable.call(this, { autoDestroy: true, objectMode: true });\n\n  this.cursor = null;\n  this.agg = agg;\n  this._transforms = [];\n  const model = agg._model;\n  delete agg.options.cursor.useMongooseAggCursor;\n  this._mongooseOptions = {};\n\n  _init(model, this, agg);\n}\n\nutil.inherits(AggregationCursor, Readable);\n\n/*!\n * ignore\n */\n\nfunction _init(model, c, agg) {\n  if (!model.collection.buffer) {\n    model.hooks.execPre('aggregate', agg, function() {\n      if (typeof agg.options?.cursor?.transform === 'function') {\n        c._transforms.push(agg.options.cursor.transform);\n      }\n\n      c.cursor = model.collection.aggregate(agg._pipeline, agg.options || {});\n      c.emit('cursor', c.cursor);\n    });\n  } else {\n    model.collection.emitter.once('queue', function() {\n      model.hooks.execPre('aggregate', agg, function() {\n        if (typeof agg.options?.cursor?.transform === 'function') {\n          c._transforms.push(agg.options.cursor.transform);\n        }\n\n        c.cursor = model.collection.aggregate(agg._pipeline, agg.options || {});\n        c.emit('cursor', c.cursor);\n      });\n    });\n  }\n}\n\n/**\n * Necessary to satisfy the Readable API\n * @method _read\n * @memberOf AggregationCursor\n * @instance\n * @api private\n */\n\nAggregationCursor.prototype._read = function() {\n  const _this = this;\n  _next(this, function(error, doc) {\n    if (error) {\n      return _this.emit('error', error);\n    }\n    if (!doc) {\n      _this.push(null);\n      _this.cursor.close(function(error) {\n        if (error) {\n          return _this.emit('error', error);\n        }\n      });\n      return;\n    }\n    _this.push(doc);\n  });\n};\n\nif (Symbol.asyncIterator != null) {\n  const msg = 'Mongoose does not support using async iterators with an ' +\n    'existing aggregation cursor. See https://bit.ly/mongoose-async-iterate-aggregation';\n\n  AggregationCursor.prototype[Symbol.asyncIterator] = function() {\n    throw new MongooseError(msg);\n  };\n}\n\n/**\n * Registers a transform function which subsequently maps documents retrieved\n * via the streams interface or `.next()`\n *\n * #### Example:\n *\n *     // Map documents returned by `data` events\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *        doc.foo = \"bar\";\n *        return doc;\n *       })\n *       on('data', function(doc) { console.log(doc.foo); });\n *\n *     // Or map documents returned by `.next()`\n *     const cursor = Thing.find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *         doc.foo = \"bar\";\n *         return doc;\n *       });\n *     cursor.next(function(error, doc) {\n *       console.log(doc.foo);\n *     });\n *\n * @param {Function} fn\n * @return {AggregationCursor}\n * @memberOf AggregationCursor\n * @api public\n * @method map\n */\n\nObject.defineProperty(AggregationCursor.prototype, 'map', {\n  value: function(fn) {\n    this._transforms.push(fn);\n    return this;\n  },\n  enumerable: true,\n  configurable: true,\n  writable: true\n});\n\n/**\n * Marks this cursor as errored\n * @method _markError\n * @instance\n * @memberOf AggregationCursor\n * @api private\n */\n\nAggregationCursor.prototype._markError = function(error) {\n  this._error = error;\n  return this;\n};\n\n/**\n * Marks this cursor as closed. Will stop streaming and subsequent calls to\n * `next()` will error.\n *\n * @param {Function} callback\n * @return {Promise}\n * @api public\n * @method close\n * @emits close\n * @see AggregationCursor.close https://mongodb.github.io/node-mongodb-native/4.9/classes/AggregationCursor.html#close\n */\n\nAggregationCursor.prototype.close = async function close() {\n  if (typeof arguments[0] === 'function') {\n    throw new MongooseError('AggregationCursor.prototype.close() no longer accepts a callback');\n  }\n  try {\n    await this.cursor.close();\n  } catch (error) {\n    this.listeners('error').length > 0 && this.emit('error', error);\n    throw error;\n  }\n  this.emit('close');\n};\n\n/**\n * Get the next document from this cursor. Will return `null` when there are\n * no documents left.\n *\n * @return {Promise}\n * @api public\n * @method next\n */\n\nAggregationCursor.prototype.next = async function next() {\n  if (typeof arguments[0] === 'function') {\n    throw new MongooseError('AggregationCursor.prototype.next() no longer accepts a callback');\n  }\n  return new Promise((resolve, reject) => {\n    _next(this, (err, res) => {\n      if (err != null) {\n        return reject(err);\n      }\n      resolve(res);\n    });\n  });\n};\n\n/**\n * Execute `fn` for every document in the cursor. If `fn` returns a promise,\n * will wait for the promise to resolve before iterating on to the next one.\n * Returns a promise that resolves when done.\n *\n * @param {Function} fn\n * @param {Object} [options]\n * @param {Number} [options.parallel] the number of promises to execute in parallel. Defaults to 1.\n * @param {Number} [options.batchSize=null] if set, Mongoose will call `fn` with an array of at most `batchSize` documents, instead of a single document\n * @param {Boolean} [options.continueOnError=false] if true, `eachAsync()` iterates through all docs even if `fn` throws an error. If false, `eachAsync()` throws an error immediately if the given function `fn()` throws an error.\n * @return {Promise}\n * @api public\n * @method eachAsync\n */\n\nAggregationCursor.prototype.eachAsync = function(fn, opts) {\n  if (typeof arguments[2] === 'function') {\n    throw new MongooseError('AggregationCursor.prototype.eachAsync() no longer accepts a callback');\n  }\n  const _this = this;\n  if (typeof opts === 'function') {\n    opts = {};\n  }\n  opts = opts || {};\n\n  return eachAsync(function(cb) { return _next(_this, cb); }, fn, opts);\n};\n\n/**\n * Returns an asyncIterator for use with [`for/await/of` loops](https://thecodebarbarian.com/getting-started-with-async-iterators-in-node-js)\n * You do not need to call this function explicitly, the JavaScript runtime\n * will call it for you.\n *\n * #### Example:\n *\n *     // Async iterator without explicitly calling `cursor()`. Mongoose still\n *     // creates an AggregationCursor instance internally.\n *     const agg = Model.aggregate([{ $match: { age: { $gte: 25 } } }]);\n *     for await (const doc of agg) {\n *       console.log(doc.name);\n *     }\n *\n *     // You can also use an AggregationCursor instance for async iteration\n *     const cursor = Model.aggregate([{ $match: { age: { $gte: 25 } } }]).cursor();\n *     for await (const doc of cursor) {\n *       console.log(doc.name);\n *     }\n *\n * Node.js 10.x supports async iterators natively without any flags. You can\n * enable async iterators in Node.js 8.x using the [`--harmony_async_iteration` flag](https://github.com/tc39/proposal-async-iteration/issues/117#issuecomment-346695187).\n *\n * **Note:** This function is not set if `Symbol.asyncIterator` is undefined. If\n * `Symbol.asyncIterator` is undefined, that means your Node.js version does not\n * support async iterators.\n *\n * @method [Symbol.asyncIterator]\n * @memberOf AggregationCursor\n * @instance\n * @api public\n */\n\nif (Symbol.asyncIterator != null) {\n  AggregationCursor.prototype[Symbol.asyncIterator] = function() {\n    return this.transformNull()._transformForAsyncIterator();\n  };\n}\n\n/*!\n * ignore\n */\n\nAggregationCursor.prototype._transformForAsyncIterator = function() {\n  if (this._transforms.indexOf(_transformForAsyncIterator) === -1) {\n    this.map(_transformForAsyncIterator);\n  }\n  return this;\n};\n\n/*!\n * ignore\n */\n\nAggregationCursor.prototype.transformNull = function(val) {\n  if (arguments.length === 0) {\n    val = true;\n  }\n  this._mongooseOptions.transformNull = val;\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _transformForAsyncIterator(doc) {\n  return doc == null ? { done: true } : { value: doc, done: false };\n}\n\n/**\n * Adds a [cursor flag](https://mongodb.github.io/node-mongodb-native/4.9/classes/AggregationCursor.html#addCursorFlag).\n * Useful for setting the `noCursorTimeout` and `tailable` flags.\n *\n * @param {String} flag\n * @param {Boolean} value\n * @return {AggregationCursor} this\n * @api public\n * @method addCursorFlag\n */\n\nAggregationCursor.prototype.addCursorFlag = function(flag, value) {\n  const _this = this;\n  _waitForCursor(this, function() {\n    _this.cursor.addCursorFlag(flag, value);\n  });\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _waitForCursor(ctx, cb) {\n  if (ctx.cursor) {\n    return cb();\n  }\n  ctx.once('cursor', function() {\n    cb();\n  });\n}\n\n/**\n * Get the next doc from the underlying cursor and mongooseify it\n * (populate, etc.)\n * @param {Any} ctx\n * @param {Function} cb\n * @api private\n */\n\nfunction _next(ctx, cb) {\n  let callback = cb;\n  if (ctx._transforms.length) {\n    callback = function(err, doc) {\n      if (err || (doc === null && !ctx._mongooseOptions.transformNull)) {\n        return cb(err, doc);\n      }\n      cb(err, ctx._transforms.reduce(function(doc, fn) {\n        return fn(doc);\n      }, doc));\n    };\n  }\n\n  if (ctx._error) {\n    return immediate(function() {\n      callback(ctx._error);\n    });\n  }\n\n  if (ctx.cursor) {\n    return ctx.cursor.next().then(\n      doc => {\n        if (!doc) {\n          return callback(null, null);\n        }\n\n        callback(null, doc);\n      },\n      err => callback(err)\n    );\n  } else {\n    ctx.once('cursor', function() {\n      _next(ctx, cb);\n    });\n  }\n}\n\nmodule.exports = AggregationCursor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/cursor/aggregationCursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/cursor/changeStream.js":
/*!**********************************************************!*\
  !*** ./node_modules/mongoose/lib/cursor/changeStream.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\n\n/*!\n * ignore\n */\n\nconst driverChangeStreamEvents = ['close', 'change', 'end', 'error', 'resumeTokenChanged'];\n\n/*!\n * ignore\n */\n\nclass ChangeStream extends EventEmitter {\n  constructor(changeStreamThunk, pipeline, options) {\n    super();\n\n    this.driverChangeStream = null;\n    this.closed = false;\n    this.bindedEvents = false;\n    this.pipeline = pipeline;\n    this.options = options;\n\n    if (options && options.hydrate && !options.model) {\n      throw new Error(\n        'Cannot create change stream with `hydrate: true` ' +\n        'unless calling `Model.watch()`'\n      );\n    }\n\n    // This wrapper is necessary because of buffering.\n    changeStreamThunk((err, driverChangeStream) => {\n      if (err != null) {\n        this.emit('error', err);\n        return;\n      }\n\n      this.driverChangeStream = driverChangeStream;\n      this.emit('ready');\n    });\n  }\n\n  _bindEvents() {\n    if (this.bindedEvents) {\n      return;\n    }\n\n    this.bindedEvents = true;\n\n    if (this.driverChangeStream == null) {\n      this.once('ready', () => {\n        this.driverChangeStream.on('close', () => {\n          this.closed = true;\n        });\n\n        driverChangeStreamEvents.forEach(ev => {\n          this.driverChangeStream.on(ev, data => {\n            if (data != null && data.fullDocument != null && this.options && this.options.hydrate) {\n              data.fullDocument = this.options.model.hydrate(data.fullDocument);\n            }\n            this.emit(ev, data);\n          });\n        });\n      });\n\n      return;\n    }\n\n    this.driverChangeStream.on('close', () => {\n      this.closed = true;\n    });\n\n    driverChangeStreamEvents.forEach(ev => {\n      this.driverChangeStream.on(ev, data => {\n        if (data != null && data.fullDocument != null && this.options && this.options.hydrate) {\n          data.fullDocument = this.options.model.hydrate(data.fullDocument);\n        }\n        this.emit(ev, data);\n      });\n    });\n  }\n\n  hasNext(cb) {\n    return this.driverChangeStream.hasNext(cb);\n  }\n\n  next(cb) {\n    if (this.options && this.options.hydrate) {\n      if (cb != null) {\n        const originalCb = cb;\n        cb = (err, data) => {\n          if (err != null) {\n            return originalCb(err);\n          }\n          if (data.fullDocument != null) {\n            data.fullDocument = this.options.model.hydrate(data.fullDocument);\n          }\n          return originalCb(null, data);\n        };\n      }\n\n      let maybePromise = this.driverChangeStream.next(cb);\n      if (maybePromise && typeof maybePromise.then === 'function') {\n        maybePromise = maybePromise.then(data => {\n          if (data.fullDocument != null) {\n            data.fullDocument = this.options.model.hydrate(data.fullDocument);\n          }\n          return data;\n        });\n      }\n      return maybePromise;\n    }\n\n    return this.driverChangeStream.next(cb);\n  }\n\n  addListener(event, handler) {\n    this._bindEvents();\n    return super.addListener(event, handler);\n  }\n\n  on(event, handler) {\n    this._bindEvents();\n    return super.on(event, handler);\n  }\n\n  once(event, handler) {\n    this._bindEvents();\n    return super.once(event, handler);\n  }\n\n  _queue(cb) {\n    this.once('ready', () => cb());\n  }\n\n  close() {\n    this.closed = true;\n    if (this.driverChangeStream) {\n      this.driverChangeStream.close();\n    }\n  }\n}\n\n/*!\n * ignore\n */\n\nmodule.exports = ChangeStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2N1cnNvci9jaGFuZ2VTdHJlYW0uanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBLHFCQUFxQiwwREFBOEI7O0FBRW5EO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNULE9BQU87O0FBRVA7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9jdXJzb3IvY2hhbmdlU3RyZWFtLmpzPzExNDYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKiFcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuXG4vKiFcbiAqIGlnbm9yZVxuICovXG5cbmNvbnN0IGRyaXZlckNoYW5nZVN0cmVhbUV2ZW50cyA9IFsnY2xvc2UnLCAnY2hhbmdlJywgJ2VuZCcsICdlcnJvcicsICdyZXN1bWVUb2tlbkNoYW5nZWQnXTtcblxuLyohXG4gKiBpZ25vcmVcbiAqL1xuXG5jbGFzcyBDaGFuZ2VTdHJlYW0gZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvcihjaGFuZ2VTdHJlYW1UaHVuaywgcGlwZWxpbmUsIG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5kcml2ZXJDaGFuZ2VTdHJlYW0gPSBudWxsO1xuICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgdGhpcy5iaW5kZWRFdmVudHMgPSBmYWxzZTtcbiAgICB0aGlzLnBpcGVsaW5lID0gcGlwZWxpbmU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuaHlkcmF0ZSAmJiAhb3B0aW9ucy5tb2RlbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnQ2Fubm90IGNyZWF0ZSBjaGFuZ2Ugc3RyZWFtIHdpdGggYGh5ZHJhdGU6IHRydWVgICcgK1xuICAgICAgICAndW5sZXNzIGNhbGxpbmcgYE1vZGVsLndhdGNoKClgJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIHdyYXBwZXIgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugb2YgYnVmZmVyaW5nLlxuICAgIGNoYW5nZVN0cmVhbVRodW5rKChlcnIsIGRyaXZlckNoYW5nZVN0cmVhbSkgPT4ge1xuICAgICAgaWYgKGVyciAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZHJpdmVyQ2hhbmdlU3RyZWFtID0gZHJpdmVyQ2hhbmdlU3RyZWFtO1xuICAgICAgdGhpcy5lbWl0KCdyZWFkeScpO1xuICAgIH0pO1xuICB9XG5cbiAgX2JpbmRFdmVudHMoKSB7XG4gICAgaWYgKHRoaXMuYmluZGVkRXZlbnRzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5iaW5kZWRFdmVudHMgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMuZHJpdmVyQ2hhbmdlU3RyZWFtID09IG51bGwpIHtcbiAgICAgIHRoaXMub25jZSgncmVhZHknLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuZHJpdmVyQ2hhbmdlU3RyZWFtLm9uKCdjbG9zZScsICgpID0+IHtcbiAgICAgICAgICB0aGlzLmNsb3NlZCA9IHRydWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRyaXZlckNoYW5nZVN0cmVhbUV2ZW50cy5mb3JFYWNoKGV2ID0+IHtcbiAgICAgICAgICB0aGlzLmRyaXZlckNoYW5nZVN0cmVhbS5vbihldiwgZGF0YSA9PiB7XG4gICAgICAgICAgICBpZiAoZGF0YSAhPSBudWxsICYmIGRhdGEuZnVsbERvY3VtZW50ICE9IG51bGwgJiYgdGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5oeWRyYXRlKSB7XG4gICAgICAgICAgICAgIGRhdGEuZnVsbERvY3VtZW50ID0gdGhpcy5vcHRpb25zLm1vZGVsLmh5ZHJhdGUoZGF0YS5mdWxsRG9jdW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lbWl0KGV2LCBkYXRhKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZHJpdmVyQ2hhbmdlU3RyZWFtLm9uKCdjbG9zZScsICgpID0+IHtcbiAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIGRyaXZlckNoYW5nZVN0cmVhbUV2ZW50cy5mb3JFYWNoKGV2ID0+IHtcbiAgICAgIHRoaXMuZHJpdmVyQ2hhbmdlU3RyZWFtLm9uKGV2LCBkYXRhID0+IHtcbiAgICAgICAgaWYgKGRhdGEgIT0gbnVsbCAmJiBkYXRhLmZ1bGxEb2N1bWVudCAhPSBudWxsICYmIHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMuaHlkcmF0ZSkge1xuICAgICAgICAgIGRhdGEuZnVsbERvY3VtZW50ID0gdGhpcy5vcHRpb25zLm1vZGVsLmh5ZHJhdGUoZGF0YS5mdWxsRG9jdW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW1pdChldiwgZGF0YSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGhhc05leHQoY2IpIHtcbiAgICByZXR1cm4gdGhpcy5kcml2ZXJDaGFuZ2VTdHJlYW0uaGFzTmV4dChjYik7XG4gIH1cblxuICBuZXh0KGNiKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMuaHlkcmF0ZSkge1xuICAgICAgaWYgKGNiICE9IG51bGwpIHtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxDYiA9IGNiO1xuICAgICAgICBjYiA9IChlcnIsIGRhdGEpID0+IHtcbiAgICAgICAgICBpZiAoZXJyICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbENiKGVycik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChkYXRhLmZ1bGxEb2N1bWVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICBkYXRhLmZ1bGxEb2N1bWVudCA9IHRoaXMub3B0aW9ucy5tb2RlbC5oeWRyYXRlKGRhdGEuZnVsbERvY3VtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG9yaWdpbmFsQ2IobnVsbCwgZGF0YSk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGxldCBtYXliZVByb21pc2UgPSB0aGlzLmRyaXZlckNoYW5nZVN0cmVhbS5uZXh0KGNiKTtcbiAgICAgIGlmIChtYXliZVByb21pc2UgJiYgdHlwZW9mIG1heWJlUHJvbWlzZS50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG1heWJlUHJvbWlzZSA9IG1heWJlUHJvbWlzZS50aGVuKGRhdGEgPT4ge1xuICAgICAgICAgIGlmIChkYXRhLmZ1bGxEb2N1bWVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICBkYXRhLmZ1bGxEb2N1bWVudCA9IHRoaXMub3B0aW9ucy5tb2RlbC5oeWRyYXRlKGRhdGEuZnVsbERvY3VtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1heWJlUHJvbWlzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5kcml2ZXJDaGFuZ2VTdHJlYW0ubmV4dChjYik7XG4gIH1cblxuICBhZGRMaXN0ZW5lcihldmVudCwgaGFuZGxlcikge1xuICAgIHRoaXMuX2JpbmRFdmVudHMoKTtcbiAgICByZXR1cm4gc3VwZXIuYWRkTGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIpO1xuICB9XG5cbiAgb24oZXZlbnQsIGhhbmRsZXIpIHtcbiAgICB0aGlzLl9iaW5kRXZlbnRzKCk7XG4gICAgcmV0dXJuIHN1cGVyLm9uKGV2ZW50LCBoYW5kbGVyKTtcbiAgfVxuXG4gIG9uY2UoZXZlbnQsIGhhbmRsZXIpIHtcbiAgICB0aGlzLl9iaW5kRXZlbnRzKCk7XG4gICAgcmV0dXJuIHN1cGVyLm9uY2UoZXZlbnQsIGhhbmRsZXIpO1xuICB9XG5cbiAgX3F1ZXVlKGNiKSB7XG4gICAgdGhpcy5vbmNlKCdyZWFkeScsICgpID0+IGNiKCkpO1xuICB9XG5cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgIGlmICh0aGlzLmRyaXZlckNoYW5nZVN0cmVhbSkge1xuICAgICAgdGhpcy5kcml2ZXJDaGFuZ2VTdHJlYW0uY2xvc2UoKTtcbiAgICB9XG4gIH1cbn1cblxuLyohXG4gKiBpZ25vcmVcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IENoYW5nZVN0cmVhbTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/cursor/changeStream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/cursor/queryCursor.js":
/*!*********************************************************!*\
  !*** ./node_modules/mongoose/lib/cursor/queryCursor.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseError = __webpack_require__(/*! ../error/mongooseError */ \"(ssr)/./node_modules/mongoose/lib/error/mongooseError.js\");\nconst Readable = (__webpack_require__(/*! stream */ \"stream\").Readable);\nconst eachAsync = __webpack_require__(/*! ../helpers/cursor/eachAsync */ \"(ssr)/./node_modules/mongoose/lib/helpers/cursor/eachAsync.js\");\nconst helpers = __webpack_require__(/*! ../queryHelpers */ \"(ssr)/./node_modules/mongoose/lib/queryHelpers.js\");\nconst kareem = __webpack_require__(/*! kareem */ \"(ssr)/./node_modules/kareem/index.js\");\nconst immediate = __webpack_require__(/*! ../helpers/immediate */ \"(ssr)/./node_modules/mongoose/lib/helpers/immediate.js\");\nconst util = __webpack_require__(/*! util */ \"util\");\n\n/**\n * A QueryCursor is a concurrency primitive for processing query results\n * one document at a time. A QueryCursor fulfills the Node.js streams3 API,\n * in addition to several other mechanisms for loading documents from MongoDB\n * one at a time.\n *\n * QueryCursors execute the model's pre `find` hooks before loading any documents\n * from MongoDB, and the model's post `find` hooks after loading each document.\n *\n * Unless you're an advanced user, do **not** instantiate this class directly.\n * Use [`Query#cursor()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.cursor()) instead.\n *\n * @param {Query} query\n * @param {Object} options query options passed to `.find()`\n * @inherits Readable https://nodejs.org/api/stream.html#class-streamreadable\n * @event `cursor`: Emitted when the cursor is created\n * @event `error`: Emitted when an error occurred\n * @event `data`: Emitted when the stream is flowing and the next doc is ready\n * @event `end`: Emitted when the stream is exhausted\n * @api public\n */\n\nfunction QueryCursor(query) {\n  // set autoDestroy=true because on node 12 it's by default false\n  // gh-10902 need autoDestroy to destroy correctly and emit 'close' event\n  Readable.call(this, { autoDestroy: true, objectMode: true });\n\n  this.cursor = null;\n  this.skipped = false;\n  this.query = query;\n  const model = query.model;\n  this._mongooseOptions = {};\n  this._transforms = [];\n  this.model = model;\n  this.options = {};\n  model.hooks.execPre('find', query, (err) => {\n    if (err != null) {\n      if (err instanceof kareem.skipWrappedFunction) {\n        const resultValue = err.args[0];\n        if (resultValue != null && (!Array.isArray(resultValue) || resultValue.length)) {\n          const err = new MongooseError(\n            'Cannot `skipMiddlewareFunction()` with a value when using ' +\n            '`.find().cursor()`, value must be nullish or empty array, got \"' +\n            util.inspect(resultValue) +\n            '\".'\n          );\n          this._markError(err);\n          this.listeners('error').length > 0 && this.emit('error', err);\n          return;\n        }\n        this.skipped = true;\n        this.emit('cursor', null);\n        return;\n      }\n      this._markError(err);\n      this.listeners('error').length > 0 && this.emit('error', err);\n      return;\n    }\n    Object.assign(this.options, query._optionsForExec());\n    this._transforms = this._transforms.concat(query._transforms.slice());\n    if (this.options.transform) {\n      this._transforms.push(this.options.transform);\n    }\n    // Re: gh-8039, you need to set the `cursor.batchSize` option, top-level\n    // `batchSize` option doesn't work.\n    if (this.options.batchSize) {\n      // Max out the number of documents we'll populate in parallel at 5000.\n      this.options._populateBatchSize = Math.min(this.options.batchSize, 5000);\n    }\n\n    if (model.collection._shouldBufferCommands() && model.collection.buffer) {\n      model.collection.queue.push([\n        () => _getRawCursor(query, this)\n      ]);\n    } else {\n      _getRawCursor(query, this);\n    }\n  });\n}\n\nutil.inherits(QueryCursor, Readable);\n\n/*!\n * ignore\n */\n\nfunction _getRawCursor(query, queryCursor) {\n  try {\n    const cursor = query.model.collection.find(query._conditions, queryCursor.options);\n    queryCursor.cursor = cursor;\n    queryCursor.emit('cursor', cursor);\n  } catch (err) {\n    queryCursor._markError(err);\n    queryCursor.listeners('error').length > 0 && queryCursor.emit('error', queryCursor._error);\n  }\n}\n\n/**\n * Necessary to satisfy the Readable API\n * @method _read\n * @memberOf QueryCursor\n * @instance\n * @api private\n */\n\nQueryCursor.prototype._read = function() {\n  _next(this, (error, doc) => {\n    if (error) {\n      return this.emit('error', error);\n    }\n    if (!doc) {\n      this.push(null);\n      this.cursor.close(function(error) {\n        if (error) {\n          return this.emit('error', error);\n        }\n      });\n      return;\n    }\n    this.push(doc);\n  });\n};\n\n/**\n * Registers a transform function which subsequently maps documents retrieved\n * via the streams interface or `.next()`\n *\n * #### Example:\n *\n *     // Map documents returned by `data` events\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *        doc.foo = \"bar\";\n *        return doc;\n *       })\n *       on('data', function(doc) { console.log(doc.foo); });\n *\n *     // Or map documents returned by `.next()`\n *     const cursor = Thing.find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *         doc.foo = \"bar\";\n *         return doc;\n *       });\n *     cursor.next(function(error, doc) {\n *       console.log(doc.foo);\n *     });\n *\n * @param {Function} fn\n * @return {QueryCursor}\n * @memberOf QueryCursor\n * @api public\n * @method map\n */\n\nObject.defineProperty(QueryCursor.prototype, 'map', {\n  value: function(fn) {\n    this._transforms.push(fn);\n    return this;\n  },\n  enumerable: true,\n  configurable: true,\n  writable: true\n});\n\n/**\n * Marks this cursor as errored\n * @method _markError\n * @memberOf QueryCursor\n * @instance\n * @api private\n */\n\nQueryCursor.prototype._markError = function(error) {\n  this._error = error;\n  return this;\n};\n\n/**\n * Marks this cursor as closed. Will stop streaming and subsequent calls to\n * `next()` will error.\n *\n * @return {Promise}\n * @api public\n * @method close\n * @emits close\n * @see AggregationCursor.close https://mongodb.github.io/node-mongodb-native/4.9/classes/AggregationCursor.html#close\n */\n\nQueryCursor.prototype.close = async function close() {\n  if (typeof arguments[0] === 'function') {\n    throw new MongooseError('QueryCursor.prototype.close() no longer accepts a callback');\n  }\n  try {\n    await this.cursor.close();\n    this.emit('close');\n  } catch (error) {\n    this.listeners('error').length > 0 && this.emit('error', error);\n    throw error;\n  }\n};\n\n/**\n * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n * if the resultant data has already been retrieved by this cursor.\n *\n * @return {AggregationCursor} this\n * @api public\n * @method rewind\n */\n\nQueryCursor.prototype.rewind = function() {\n  _waitForCursor(this, () => {\n    this.cursor.rewind();\n  });\n  return this;\n};\n\n/**\n * Get the next document from this cursor. Will return `null` when there are\n * no documents left.\n *\n * @return {Promise}\n * @api public\n * @method next\n */\n\nQueryCursor.prototype.next = async function next() {\n  if (typeof arguments[0] === 'function') {\n    throw new MongooseError('QueryCursor.prototype.next() no longer accepts a callback');\n  }\n  return new Promise((resolve, reject) => {\n    _next(this, function(error, doc) {\n      if (error) {\n        return reject(error);\n      }\n      resolve(doc);\n    });\n  });\n};\n\n/**\n * Execute `fn` for every document in the cursor. If `fn` returns a promise,\n * will wait for the promise to resolve before iterating on to the next one.\n * Returns a promise that resolves when done.\n *\n * #### Example:\n *\n *     // Iterate over documents asynchronously\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       eachAsync(async function (doc, i) {\n *         doc.foo = doc.bar + i;\n *         await doc.save();\n *       })\n *\n * @param {Function} fn\n * @param {Object} [options]\n * @param {Number} [options.parallel] the number of promises to execute in parallel. Defaults to 1.\n * @param {Number} [options.batchSize] if set, will call `fn()` with arrays of documents with length at most `batchSize`\n * @param {Boolean} [options.continueOnError=false] if true, `eachAsync()` iterates through all docs even if `fn` throws an error. If false, `eachAsync()` throws an error immediately if the given function `fn()` throws an error.\n * @return {Promise}\n * @api public\n * @method eachAsync\n */\n\nQueryCursor.prototype.eachAsync = function(fn, opts) {\n  if (typeof arguments[2] === 'function') {\n    throw new MongooseError('QueryCursor.prototype.eachAsync() no longer accepts a callback');\n  }\n  if (typeof opts === 'function') {\n    opts = {};\n  }\n  opts = opts || {};\n\n  return eachAsync((cb) => _next(this, cb), fn, opts);\n};\n\n/**\n * The `options` passed in to the `QueryCursor` constructor.\n *\n * @api public\n * @property options\n */\n\nQueryCursor.prototype.options;\n\n/**\n * Adds a [cursor flag](https://mongodb.github.io/node-mongodb-native/4.9/classes/FindCursor.html#addCursorFlag).\n * Useful for setting the `noCursorTimeout` and `tailable` flags.\n *\n * @param {String} flag\n * @param {Boolean} value\n * @return {AggregationCursor} this\n * @api public\n * @method addCursorFlag\n */\n\nQueryCursor.prototype.addCursorFlag = function(flag, value) {\n  _waitForCursor(this, () => {\n    this.cursor.addCursorFlag(flag, value);\n  });\n  return this;\n};\n\n/*!\n * ignore\n */\n\nQueryCursor.prototype.transformNull = function(val) {\n  if (arguments.length === 0) {\n    val = true;\n  }\n  this._mongooseOptions.transformNull = val;\n  return this;\n};\n\n/*!\n * ignore\n */\n\nQueryCursor.prototype._transformForAsyncIterator = function() {\n  if (this._transforms.indexOf(_transformForAsyncIterator) === -1) {\n    this.map(_transformForAsyncIterator);\n  }\n  return this;\n};\n\n/**\n * Returns an asyncIterator for use with [`for/await/of` loops](https://thecodebarbarian.com/getting-started-with-async-iterators-in-node-js).\n * You do not need to call this function explicitly, the JavaScript runtime\n * will call it for you.\n *\n * #### Example:\n *\n *     // Works without using `cursor()`\n *     for await (const doc of Model.find([{ $sort: { name: 1 } }])) {\n *       console.log(doc.name);\n *     }\n *\n *     // Can also use `cursor()`\n *     for await (const doc of Model.find([{ $sort: { name: 1 } }]).cursor()) {\n *       console.log(doc.name);\n *     }\n *\n * Node.js 10.x supports async iterators natively without any flags. You can\n * enable async iterators in Node.js 8.x using the [`--harmony_async_iteration` flag](https://github.com/tc39/proposal-async-iteration/issues/117#issuecomment-346695187).\n *\n * **Note:** This function is not if `Symbol.asyncIterator` is undefined. If\n * `Symbol.asyncIterator` is undefined, that means your Node.js version does not\n * support async iterators.\n *\n * @method [Symbol.asyncIterator]\n * @memberOf QueryCursor\n * @instance\n * @api public\n */\n\nif (Symbol.asyncIterator != null) {\n  QueryCursor.prototype[Symbol.asyncIterator] = function() {\n    return this.transformNull()._transformForAsyncIterator();\n  };\n}\n\n/*!\n * ignore\n */\n\nfunction _transformForAsyncIterator(doc) {\n  return doc == null ? { done: true } : { value: doc, done: false };\n}\n\n/**\n * Get the next doc from the underlying cursor and mongooseify it\n * (populate, etc.)\n * @param {Any} ctx\n * @param {Function} cb\n * @api private\n */\n\nfunction _next(ctx, cb) {\n  let callback = cb;\n  if (ctx._transforms.length) {\n    callback = function(err, doc) {\n      if (err || (doc === null && !ctx._mongooseOptions.transformNull)) {\n        return cb(err, doc);\n      }\n      cb(err, ctx._transforms.reduce(function(doc, fn) {\n        return fn.call(ctx, doc);\n      }, doc));\n    };\n  }\n\n  if (ctx._error) {\n    return immediate(function() {\n      callback(ctx._error);\n    });\n  }\n  if (ctx.skipped) {\n    return immediate(() => callback(null, null));\n  }\n\n  if (ctx.cursor) {\n    if (ctx.query._mongooseOptions.populate && !ctx._pop) {\n      ctx._pop = helpers.preparePopulationOptionsMQ(ctx.query,\n        ctx.query._mongooseOptions);\n      ctx._pop.__noPromise = true;\n    }\n    if (ctx.query._mongooseOptions.populate && ctx.options._populateBatchSize > 1) {\n      if (ctx._batchDocs && ctx._batchDocs.length) {\n        // Return a cached populated doc\n        return _nextDoc(ctx, ctx._batchDocs.shift(), ctx._pop, callback);\n      } else if (ctx._batchExhausted) {\n        // Internal cursor reported no more docs. Act the same here\n        return callback(null, null);\n      } else {\n        // Request as many docs as batchSize, to populate them also in batch\n        ctx._batchDocs = [];\n        ctx.cursor.next().then(\n          res => { _onNext.call({ ctx, callback }, null, res); },\n          err => { _onNext.call({ ctx, callback }, err); }\n        );\n        return;\n      }\n    } else {\n      return ctx.cursor.next().then(\n        doc => {\n          if (!doc) {\n            callback(null, null);\n            return;\n          }\n\n          if (!ctx.query._mongooseOptions.populate) {\n            return _nextDoc(ctx, doc, null, callback);\n          }\n\n          ctx.query.model.populate(doc, ctx._pop).then(\n            doc => {\n              _nextDoc(ctx, doc, ctx._pop, callback);\n            },\n            err => {\n              callback(err);\n            }\n          );\n        },\n        error => {\n          callback(error);\n        }\n      );\n    }\n  } else {\n    ctx.once('error', cb);\n\n    ctx.once('cursor', function(cursor) {\n      ctx.removeListener('error', cb);\n      if (cursor == null) {\n        if (ctx.skipped) {\n          return cb(null, null);\n        }\n        return;\n      }\n      _next(ctx, cb);\n    });\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _onNext(error, doc) {\n  if (error) {\n    return this.callback(error);\n  }\n  if (!doc) {\n    this.ctx._batchExhausted = true;\n    return _populateBatch.call(this);\n  }\n\n  this.ctx._batchDocs.push(doc);\n\n  if (this.ctx._batchDocs.length < this.ctx.options._populateBatchSize) {\n    // If both `batchSize` and `_populateBatchSize` are huge, calling `next()` repeatedly may\n    // cause a stack overflow. So make sure we clear the stack regularly.\n    if (this.ctx._batchDocs.length > 0 && this.ctx._batchDocs.length % 1000 === 0) {\n      return immediate(() => this.ctx.cursor.next().then(\n        res => { _onNext.call(this, null, res); },\n        err => { _onNext.call(this, err); }\n      ));\n    }\n    this.ctx.cursor.next().then(\n      res => { _onNext.call(this, null, res); },\n      err => { _onNext.call(this, err); }\n    );\n  } else {\n    _populateBatch.call(this);\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _populateBatch() {\n  if (!this.ctx._batchDocs.length) {\n    return this.callback(null, null);\n  }\n  this.ctx.query.model.populate(this.ctx._batchDocs, this.ctx._pop).then(\n    () => {\n      _nextDoc(this.ctx, this.ctx._batchDocs.shift(), this.ctx._pop, this.callback);\n    },\n    err => {\n      this.callback(err);\n    }\n  );\n}\n\n/*!\n * ignore\n */\n\nfunction _nextDoc(ctx, doc, pop, callback) {\n  if (ctx.query._mongooseOptions.lean) {\n    return ctx.model.hooks.execPost('find', ctx.query, [[doc]], err => {\n      if (err != null) {\n        return callback(err);\n      }\n      callback(null, doc);\n    });\n  }\n\n  const { model, _fields, _userProvidedFields, options } = ctx.query;\n  helpers.createModelAndInit(model, doc, _fields, _userProvidedFields, options, pop, (err, doc) => {\n    if (err != null) {\n      return callback(err);\n    }\n    ctx.model.hooks.execPost('find', ctx.query, [[doc]], err => {\n      if (err != null) {\n        return callback(err);\n      }\n      callback(null, doc);\n    });\n  });\n}\n\n/*!\n * ignore\n */\n\nfunction _waitForCursor(ctx, cb) {\n  if (ctx.cursor) {\n    return cb();\n  }\n  ctx.once('cursor', function(cursor) {\n    if (cursor == null) {\n      return;\n    }\n    cb();\n  });\n}\n\nmodule.exports = QueryCursor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/cursor/queryCursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/document.js":
/*!***********************************************!*\
  !*** ./node_modules/mongoose/lib/document.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst InternalCache = __webpack_require__(/*! ./internal */ \"(ssr)/./node_modules/mongoose/lib/internal.js\");\nconst MongooseError = __webpack_require__(/*! ./error/index */ \"(ssr)/./node_modules/mongoose/lib/error/index.js\");\nconst MixedSchema = __webpack_require__(/*! ./schema/mixed */ \"(ssr)/./node_modules/mongoose/lib/schema/mixed.js\");\nconst ObjectExpectedError = __webpack_require__(/*! ./error/objectExpected */ \"(ssr)/./node_modules/mongoose/lib/error/objectExpected.js\");\nconst ObjectParameterError = __webpack_require__(/*! ./error/objectParameter */ \"(ssr)/./node_modules/mongoose/lib/error/objectParameter.js\");\nconst ParallelValidateError = __webpack_require__(/*! ./error/parallelValidate */ \"(ssr)/./node_modules/mongoose/lib/error/parallelValidate.js\");\nconst Schema = __webpack_require__(/*! ./schema */ \"(ssr)/./node_modules/mongoose/lib/schema.js\");\nconst StrictModeError = __webpack_require__(/*! ./error/strict */ \"(ssr)/./node_modules/mongoose/lib/error/strict.js\");\nconst ValidationError = __webpack_require__(/*! ./error/validation */ \"(ssr)/./node_modules/mongoose/lib/error/validation.js\");\nconst ValidatorError = __webpack_require__(/*! ./error/validator */ \"(ssr)/./node_modules/mongoose/lib/error/validator.js\");\nconst $__hasIncludedChildren = __webpack_require__(/*! ./helpers/projection/hasIncludedChildren */ \"(ssr)/./node_modules/mongoose/lib/helpers/projection/hasIncludedChildren.js\");\nconst applyDefaults = __webpack_require__(/*! ./helpers/document/applyDefaults */ \"(ssr)/./node_modules/mongoose/lib/helpers/document/applyDefaults.js\");\nconst cleanModifiedSubpaths = __webpack_require__(/*! ./helpers/document/cleanModifiedSubpaths */ \"(ssr)/./node_modules/mongoose/lib/helpers/document/cleanModifiedSubpaths.js\");\nconst clone = __webpack_require__(/*! ./helpers/clone */ \"(ssr)/./node_modules/mongoose/lib/helpers/clone.js\");\nconst compile = (__webpack_require__(/*! ./helpers/document/compile */ \"(ssr)/./node_modules/mongoose/lib/helpers/document/compile.js\").compile);\nconst defineKey = (__webpack_require__(/*! ./helpers/document/compile */ \"(ssr)/./node_modules/mongoose/lib/helpers/document/compile.js\").defineKey);\nconst flatten = (__webpack_require__(/*! ./helpers/common */ \"(ssr)/./node_modules/mongoose/lib/helpers/common.js\").flatten);\nconst get = __webpack_require__(/*! ./helpers/get */ \"(ssr)/./node_modules/mongoose/lib/helpers/get.js\");\nconst getEmbeddedDiscriminatorPath = __webpack_require__(/*! ./helpers/document/getEmbeddedDiscriminatorPath */ \"(ssr)/./node_modules/mongoose/lib/helpers/document/getEmbeddedDiscriminatorPath.js\");\nconst getKeysInSchemaOrder = __webpack_require__(/*! ./helpers/schema/getKeysInSchemaOrder */ \"(ssr)/./node_modules/mongoose/lib/helpers/schema/getKeysInSchemaOrder.js\");\nconst getSubdocumentStrictValue = __webpack_require__(/*! ./helpers/schema/getSubdocumentStrictValue */ \"(ssr)/./node_modules/mongoose/lib/helpers/schema/getSubdocumentStrictValue.js\");\nconst handleSpreadDoc = __webpack_require__(/*! ./helpers/document/handleSpreadDoc */ \"(ssr)/./node_modules/mongoose/lib/helpers/document/handleSpreadDoc.js\");\nconst immediate = __webpack_require__(/*! ./helpers/immediate */ \"(ssr)/./node_modules/mongoose/lib/helpers/immediate.js\");\nconst isDefiningProjection = __webpack_require__(/*! ./helpers/projection/isDefiningProjection */ \"(ssr)/./node_modules/mongoose/lib/helpers/projection/isDefiningProjection.js\");\nconst isExclusive = __webpack_require__(/*! ./helpers/projection/isExclusive */ \"(ssr)/./node_modules/mongoose/lib/helpers/projection/isExclusive.js\");\nconst inspect = (__webpack_require__(/*! util */ \"util\").inspect);\nconst internalToObjectOptions = (__webpack_require__(/*! ./options */ \"(ssr)/./node_modules/mongoose/lib/options.js\").internalToObjectOptions);\nconst markArraySubdocsPopulated = __webpack_require__(/*! ./helpers/populate/markArraySubdocsPopulated */ \"(ssr)/./node_modules/mongoose/lib/helpers/populate/markArraySubdocsPopulated.js\");\nconst minimize = __webpack_require__(/*! ./helpers/minimize */ \"(ssr)/./node_modules/mongoose/lib/helpers/minimize.js\");\nconst mpath = __webpack_require__(/*! mpath */ \"(ssr)/./node_modules/mpath/index.js\");\nconst queryhelpers = __webpack_require__(/*! ./queryHelpers */ \"(ssr)/./node_modules/mongoose/lib/queryHelpers.js\");\nconst utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\nconst isPromise = __webpack_require__(/*! ./helpers/isPromise */ \"(ssr)/./node_modules/mongoose/lib/helpers/isPromise.js\");\n\nconst deepEqual = utils.deepEqual;\nconst isMongooseObject = utils.isMongooseObject;\n\nconst arrayAtomicsBackupSymbol = (__webpack_require__(/*! ./helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").arrayAtomicsBackupSymbol);\nconst arrayAtomicsSymbol = (__webpack_require__(/*! ./helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").arrayAtomicsSymbol);\nconst documentArrayParent = (__webpack_require__(/*! ./helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").documentArrayParent);\nconst documentIsModified = (__webpack_require__(/*! ./helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").documentIsModified);\nconst documentModifiedPaths = (__webpack_require__(/*! ./helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").documentModifiedPaths);\nconst documentSchemaSymbol = (__webpack_require__(/*! ./helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").documentSchemaSymbol);\nconst getSymbol = (__webpack_require__(/*! ./helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").getSymbol);\nconst populateModelSymbol = (__webpack_require__(/*! ./helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").populateModelSymbol);\nconst scopeSymbol = (__webpack_require__(/*! ./helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").scopeSymbol);\nconst schemaMixedSymbol = (__webpack_require__(/*! ./schema/symbols */ \"(ssr)/./node_modules/mongoose/lib/schema/symbols.js\").schemaMixedSymbol);\nconst parentPaths = __webpack_require__(/*! ./helpers/path/parentPaths */ \"(ssr)/./node_modules/mongoose/lib/helpers/path/parentPaths.js\");\nconst getDeepestSubdocumentForPath = __webpack_require__(/*! ./helpers/document/getDeepestSubdocumentForPath */ \"(ssr)/./node_modules/mongoose/lib/helpers/document/getDeepestSubdocumentForPath.js\");\nconst sessionNewDocuments = (__webpack_require__(/*! ./helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").sessionNewDocuments);\n\nlet DocumentArray;\nlet MongooseArray;\nlet Embedded;\n\nconst specialProperties = utils.specialProperties;\n\n/**\n * The core Mongoose document constructor. You should not call this directly,\n * the Mongoose [Model constructor](./api/model.html#Model) calls this for you.\n *\n * @param {Object} obj the values to set\n * @param {Object} [fields] optional object containing the fields which were selected in the query returning this document and any populated paths data\n * @param {Object} [options] various configuration options for the document\n * @param {Boolean} [options.defaults=true] if `false`, skip applying default values to this document.\n * @inherits NodeJS EventEmitter https://nodejs.org/api/events.html#class-eventemitter\n * @event `init`: Emitted on a document after it has been retrieved from the db and fully hydrated by Mongoose.\n * @event `save`: Emitted when the document is successfully saved\n * @api private\n */\n\nfunction Document(obj, fields, skipId, options) {\n  if (typeof skipId === 'object' && skipId != null) {\n    options = skipId;\n    skipId = options.skipId;\n  }\n  options = Object.assign({}, options);\n\n  // Support `browserDocument.js` syntax\n  if (this.$__schema == null) {\n    const _schema = utils.isObject(fields) && !fields.instanceOfSchema ?\n      new Schema(fields) :\n      fields;\n    this.$__setSchema(_schema);\n    fields = skipId;\n    skipId = options;\n    options = arguments[4] || {};\n  }\n\n  this.$__ = new InternalCache();\n\n  // Avoid setting `isNew` to `true`, because it is `true` by default\n  if (options.isNew != null && options.isNew !== true) {\n    this.$isNew = options.isNew;\n  }\n\n  if (options.priorDoc != null) {\n    this.$__.priorDoc = options.priorDoc;\n  }\n\n  if (skipId) {\n    this.$__.skipId = skipId;\n  }\n\n  if (obj != null && typeof obj !== 'object') {\n    throw new ObjectParameterError(obj, 'obj', 'Document');\n  }\n\n  let defaults = true;\n  if (options.defaults !== undefined) {\n    this.$__.defaults = options.defaults;\n    defaults = options.defaults;\n  }\n\n  const schema = this.$__schema;\n\n  if (typeof fields === 'boolean' || fields === 'throw') {\n    if (fields !== true) {\n      this.$__.strictMode = fields;\n    }\n    fields = undefined;\n  } else if (schema.options.strict !== true) {\n    this.$__.strictMode = schema.options.strict;\n  }\n\n  const requiredPaths = schema.requiredPaths(true);\n  for (const path of requiredPaths) {\n    this.$__.activePaths.require(path);\n  }\n\n  let exclude = null;\n\n  // determine if this doc is a result of a query with\n  // excluded fields\n  if (utils.isPOJO(fields) && Object.keys(fields).length > 0) {\n    exclude = isExclusive(fields);\n    this.$__.selected = fields;\n    this.$__.exclude = exclude;\n  }\n\n  const hasIncludedChildren = exclude === false && fields ?\n    $__hasIncludedChildren(fields) :\n    null;\n\n  if (this._doc == null) {\n    this.$__buildDoc(obj, fields, skipId, exclude, hasIncludedChildren, false);\n\n    // By default, defaults get applied **before** setting initial values\n    // Re: gh-6155\n    if (defaults) {\n      applyDefaults(this, fields, exclude, hasIncludedChildren, true, null);\n    }\n  }\n  if (obj) {\n    // Skip set hooks\n    if (this.$__original_set) {\n      this.$__original_set(obj, undefined, true, options);\n    } else {\n      this.$set(obj, undefined, true, options);\n    }\n\n    if (obj instanceof Document) {\n      this.$isNew = obj.$isNew;\n    }\n  }\n\n  // Function defaults get applied **after** setting initial values so they\n  // see the full doc rather than an empty one, unless they opt out.\n  // Re: gh-3781, gh-6155\n  if (options.willInit && defaults) {\n    if (options.skipDefaults) {\n      this.$__.skipDefaults = options.skipDefaults;\n    }\n  } else if (defaults) {\n    applyDefaults(this, fields, exclude, hasIncludedChildren, false, options.skipDefaults);\n  }\n\n  if (!this.$__.strictMode && obj) {\n    const _this = this;\n    const keys = Object.keys(this._doc);\n\n    keys.forEach(function(key) {\n      // Avoid methods, virtuals, existing fields, and `$` keys. The latter is to avoid overwriting\n      // Mongoose internals.\n      if (!(key in schema.tree) && !(key in schema.methods) && !(key in schema.virtuals) && !key.startsWith('$')) {\n        defineKey({ prop: key, subprops: null, prototype: _this });\n      }\n    });\n  }\n\n  applyQueue(this);\n}\n\nDocument.prototype.$isMongooseDocumentPrototype = true;\n\n/**\n * Boolean flag specifying if the document is new. If you create a document\n * using `new`, this document will be considered \"new\". `$isNew` is how\n * Mongoose determines whether `save()` should use `insertOne()` to create\n * a new document or `updateOne()` to update an existing document.\n *\n * #### Example:\n *\n *     const user = new User({ name: 'John Smith' });\n *     user.$isNew; // true\n *\n *     await user.save(); // Sends an `insertOne` to MongoDB\n *\n * On the other hand, if you load an existing document from the database\n * using `findOne()` or another [query operation](https://mongoosejs.com/docs/queries.html),\n * `$isNew` will be false.\n *\n * #### Example:\n *\n *     const user = await User.findOne({ name: 'John Smith' });\n *     user.$isNew; // false\n *\n * Mongoose sets `$isNew` to `false` immediately after `save()` succeeds.\n * That means Mongoose sets `$isNew` to false **before** `post('save')` hooks run.\n * In `post('save')` hooks, `$isNew` will be `false` if `save()` succeeded.\n *\n * #### Example:\n *\n *     userSchema.post('save', function() {\n *       this.$isNew; // false\n *     });\n *     await User.create({ name: 'John Smith' });\n *\n * For subdocuments, `$isNew` is true if either the parent has `$isNew` set,\n * or if you create a new subdocument.\n *\n * #### Example:\n *\n *     // Assume `Group` has a document array `users`\n *     const group = await Group.findOne();\n *     group.users[0].$isNew; // false\n *\n *     group.users.push({ name: 'John Smith' });\n *     group.users[1].$isNew; // true\n *\n * @api public\n * @property $isNew\n * @memberOf Document\n * @instance\n */\n\nObject.defineProperty(Document.prototype, 'isNew', {\n  get: function() {\n    return this.$isNew;\n  },\n  set: function(value) {\n    this.$isNew = value;\n  }\n});\n\n/**\n * Hash containing current validation errors.\n *\n * @api public\n * @property errors\n * @memberOf Document\n * @instance\n */\n\nObject.defineProperty(Document.prototype, 'errors', {\n  get: function() {\n    return this.$errors;\n  },\n  set: function(value) {\n    this.$errors = value;\n  }\n});\n\n/*!\n * ignore\n */\n\nDocument.prototype.$isNew = true;\n\n/*!\n * Document exposes the NodeJS event emitter API, so you can use\n * `on`, `once`, etc.\n */\nutils.each(\n  ['on', 'once', 'emit', 'listeners', 'removeListener', 'setMaxListeners',\n    'removeAllListeners', 'addListener'],\n  function(emitterFn) {\n    Document.prototype[emitterFn] = function() {\n      // Delay creating emitter until necessary because emitters take up a lot of memory,\n      // especially for subdocuments.\n      if (!this.$__.emitter) {\n        if (emitterFn === 'emit') {\n          return;\n        }\n        this.$__.emitter = new EventEmitter();\n        this.$__.emitter.setMaxListeners(0);\n      }\n      return this.$__.emitter[emitterFn].apply(this.$__.emitter, arguments);\n    };\n    Document.prototype[`$${emitterFn}`] = Document.prototype[emitterFn];\n  });\n\nDocument.prototype.constructor = Document;\n\nfor (const i in EventEmitter.prototype) {\n  Document[i] = EventEmitter.prototype[i];\n}\n\n/**\n * The document's internal schema.\n *\n * @api private\n * @property schema\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__schema;\n\n/**\n * The document's schema.\n *\n * @api public\n * @property schema\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.schema;\n\n/**\n * Empty object that you can use for storing properties on the document. This\n * is handy for passing data to middleware without conflicting with Mongoose\n * internals.\n *\n * #### Example:\n *\n *     schema.pre('save', function() {\n *       // Mongoose will set `isNew` to `false` if `save()` succeeds\n *       this.$locals.wasNew = this.isNew;\n *     });\n *\n *     schema.post('save', function() {\n *       // Prints true if `isNew` was set before `save()`\n *       console.log(this.$locals.wasNew);\n *     });\n *\n * @api public\n * @property $locals\n * @memberOf Document\n * @instance\n */\n\nObject.defineProperty(Document.prototype, '$locals', {\n  configurable: false,\n  enumerable: false,\n  get: function() {\n    if (this.$__.locals == null) {\n      this.$__.locals = {};\n    }\n    return this.$__.locals;\n  },\n  set: function(v) {\n    this.$__.locals = v;\n  }\n});\n\n/**\n * Legacy alias for `$isNew`.\n *\n * @api public\n * @property isNew\n * @memberOf Document\n * @see $isNew https://mongoosejs.com/docs/api/document.html#Document.prototype.$isNew\n * @instance\n */\n\nDocument.prototype.isNew;\n\n/**\n * Set this property to add additional query filters when Mongoose saves this document and `isNew` is false.\n *\n * #### Example:\n *\n *     // Make sure `save()` never updates a soft deleted document.\n *     schema.pre('save', function() {\n *       this.$where = { isDeleted: false };\n *     });\n *\n * @api public\n * @property $where\n * @memberOf Document\n * @instance\n */\n\nObject.defineProperty(Document.prototype, '$where', {\n  configurable: false,\n  enumerable: false,\n  writable: true\n});\n\n/**\n * The string version of this documents _id.\n *\n * #### Note:\n *\n * This getter exists on all documents by default. The getter can be disabled by setting the `id` [option](https://mongoosejs.com/docs/guide.html#id) of its `Schema` to false at construction time.\n *\n *     new Schema({ name: String }, { id: false });\n *\n * @api public\n * @see Schema options https://mongoosejs.com/docs/guide.html#options\n * @property id\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.id;\n\n/**\n * Hash containing current validation $errors.\n *\n * @api public\n * @property $errors\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$errors;\n\n/**\n * A string containing the current operation that Mongoose is executing\n * on this document. May be `null`, `'save'`, `'validate'`, or `'remove'`.\n *\n * #### Example:\n *\n *     const doc = new Model({ name: 'test' });\n *     doc.$op; // null\n *\n *     const promise = doc.save();\n *     doc.$op; // 'save'\n *\n *     await promise;\n *     doc.$op; // null\n *\n * @api public\n * @property $op\n * @memberOf Document\n * @instance\n */\n\nObject.defineProperty(Document.prototype, '$op', {\n  get: function() {\n    return this.$__.op || null;\n  },\n  set: function(value) {\n    this.$__.op = value;\n  }\n});\n\n/*!\n * ignore\n */\n\nfunction $applyDefaultsToNested(val, path, doc) {\n  if (val == null) {\n    return;\n  }\n\n  const paths = Object.keys(doc.$__schema.paths);\n  const plen = paths.length;\n\n  const pathPieces = path.indexOf('.') === -1 ? [path] : path.split('.');\n\n  for (let i = 0; i < plen; ++i) {\n    let curPath = '';\n    const p = paths[i];\n\n    if (!p.startsWith(path + '.')) {\n      continue;\n    }\n\n    const type = doc.$__schema.paths[p];\n    const pieces = type.splitPath().slice(pathPieces.length);\n    const len = pieces.length;\n\n    if (type.defaultValue === void 0) {\n      continue;\n    }\n\n    let cur = val;\n\n    for (let j = 0; j < len; ++j) {\n      if (cur == null) {\n        break;\n      }\n\n      const piece = pieces[j];\n\n      if (j === len - 1) {\n        if (cur[piece] !== void 0) {\n          break;\n        }\n\n        try {\n          const def = type.getDefault(doc, false);\n          if (def !== void 0) {\n            cur[piece] = def;\n          }\n        } catch (err) {\n          doc.invalidate(path + '.' + curPath, err);\n          break;\n        }\n\n        break;\n      }\n\n      curPath += (!curPath.length ? '' : '.') + piece;\n\n      cur[piece] = cur[piece] || {};\n      cur = cur[piece];\n    }\n  }\n}\n\n/**\n * Builds the default doc structure\n *\n * @param {Object} obj\n * @param {Object} [fields]\n * @param {Boolean} [skipId]\n * @param {Boolean} [exclude]\n * @param {Object} [hasIncludedChildren]\n * @api private\n * @method $__buildDoc\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__buildDoc = function(obj, fields, skipId, exclude, hasIncludedChildren) {\n  const doc = {};\n\n  const paths = Object.keys(this.$__schema.paths).\n    // Don't build up any paths that are underneath a map, we don't know\n    // what the keys will be\n    filter(p => !p.includes('$*'));\n  const plen = paths.length;\n  let ii = 0;\n\n  for (; ii < plen; ++ii) {\n    const p = paths[ii];\n\n    if (p === '_id') {\n      if (skipId) {\n        continue;\n      }\n      if (obj && '_id' in obj) {\n        continue;\n      }\n    }\n\n    const path = this.$__schema.paths[p].splitPath();\n    const len = path.length;\n    const last = len - 1;\n    let curPath = '';\n    let doc_ = doc;\n    let included = false;\n\n    for (let i = 0; i < len; ++i) {\n      const piece = path[i];\n\n      if (!curPath.length) {\n        curPath = piece;\n      } else {\n        curPath += '.' + piece;\n      }\n\n      // support excluding intermediary levels\n      if (exclude === true) {\n        if (curPath in fields) {\n          break;\n        }\n      } else if (exclude === false && fields && !included) {\n        if (curPath in fields) {\n          included = true;\n        } else if (!hasIncludedChildren[curPath]) {\n          break;\n        }\n      }\n\n      if (i < last) {\n        doc_ = doc_[piece] || (doc_[piece] = {});\n      }\n    }\n  }\n\n  this._doc = doc;\n};\n\n/*!\n * Converts to POJO when you use the document for querying\n */\n\nDocument.prototype.toBSON = function() {\n  return this.toObject(internalToObjectOptions);\n};\n\n/**\n * Initializes the document without setters or marking anything modified.\n *\n * Called internally after a document is returned from mongodb. Normally,\n * you do **not** need to call this function on your own.\n *\n * This function triggers `init` [middleware](https://mongoosejs.com/docs/middleware.html).\n * Note that `init` hooks are [synchronous](https://mongoosejs.com/docs/middleware.html#synchronous).\n *\n * @param {Object} doc document returned by mongo\n * @param {Object} [opts]\n * @param {Function} [fn]\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.init = function(doc, opts, fn) {\n  if (typeof opts === 'function') {\n    fn = opts;\n    opts = null;\n  }\n\n  this.$__init(doc, opts);\n\n  if (fn) {\n    fn(null, this);\n  }\n\n  return this;\n};\n\n/**\n * Alias for [`.init`](https://mongoosejs.com/docs/api/document.html#Document.prototype.init())\n *\n * @api public\n */\n\nDocument.prototype.$init = function() {\n  return this.constructor.prototype.init.apply(this, arguments);\n};\n\n/**\n * Internal \"init\" function\n *\n * @param {Document} doc\n * @param {Object} [opts]\n * @returns {Document} this\n * @api private\n */\n\nDocument.prototype.$__init = function(doc, opts) {\n  this.$isNew = false;\n  opts = opts || {};\n\n  // handle docs with populated paths\n  // If doc._id is not null or undefined\n  if (doc._id != null && opts.populated && opts.populated.length) {\n    const id = String(doc._id);\n    for (const item of opts.populated) {\n      if (item.isVirtual) {\n        this.$populated(item.path, utils.getValue(item.path, doc), item);\n      } else {\n        this.$populated(item.path, item._docs[id], item);\n      }\n\n      if (item._childDocs == null) {\n        continue;\n      }\n      for (const child of item._childDocs) {\n        if (child == null || child.$__ == null) {\n          continue;\n        }\n        child.$__.parent = this;\n      }\n      item._childDocs = [];\n    }\n  }\n\n  init(this, doc, this._doc, opts);\n\n  markArraySubdocsPopulated(this, opts.populated);\n  this.$emit('init', this);\n  this.constructor.emit('init', this);\n\n  const hasIncludedChildren = this.$__.exclude === false && this.$__.selected ?\n    $__hasIncludedChildren(this.$__.selected) :\n    null;\n\n  applyDefaults(this, this.$__.selected, this.$__.exclude, hasIncludedChildren, false, this.$__.skipDefaults);\n  return this;\n};\n\n/**\n * Init helper.\n *\n * @param {Object} self document instance\n * @param {Object} obj raw mongodb doc\n * @param {Object} doc object we are initializing\n * @param {Object} [opts] Optional Options\n * @param {Boolean} [opts.setters] Call `applySetters` instead of `cast`\n * @param {String} [prefix] Prefix to add to each path\n * @api private\n */\n\nfunction init(self, obj, doc, opts, prefix) {\n  prefix = prefix || '';\n\n  if (obj.$__ != null) {\n    obj = obj._doc;\n  }\n  const keys = Object.keys(obj);\n  const len = keys.length;\n  let schemaType;\n  let path;\n  let i;\n  let index = 0;\n  const strict = self.$__.strictMode;\n  const docSchema = self.$__schema;\n\n  while (index < len) {\n    _init(index++);\n  }\n\n  function _init(index) {\n    i = keys[index];\n    // avoid prototype pollution\n    if (i === '__proto__' || i === 'constructor') {\n      return;\n    }\n    path = prefix + i;\n    schemaType = docSchema.path(path);\n    // Should still work if not a model-level discriminator, but should not be\n    // necessary. This is *only* to catch the case where we queried using the\n    // base model and the discriminated model has a projection\n    if (docSchema.$isRootDiscriminator && !self.$__isSelected(path)) {\n      return;\n    }\n\n    if (!schemaType && utils.isPOJO(obj[i])) {\n      // assume nested object\n      if (!doc[i]) {\n        doc[i] = {};\n        if (!strict && !(i in docSchema.tree) && !(i in docSchema.methods) && !(i in docSchema.virtuals)) {\n          self[i] = doc[i];\n        }\n      }\n      init(self, obj[i], doc[i], opts, path + '.');\n    } else if (!schemaType) {\n      doc[i] = obj[i];\n      if (!strict && !prefix) {\n        self[i] = obj[i];\n      }\n    } else {\n      // Retain order when overwriting defaults\n      if (doc.hasOwnProperty(i) && obj[i] !== void 0 && !opts.hydratedPopulatedDocs) {\n        delete doc[i];\n      }\n      if (obj[i] === null) {\n        doc[i] = schemaType._castNullish(null);\n      } else if (obj[i] !== undefined) {\n        const wasPopulated = obj[i].$__ == null ? null : obj[i].$__.wasPopulated;\n        if ((schemaType && !wasPopulated) && !opts.hydratedPopulatedDocs) {\n          try {\n            if (opts && opts.setters) {\n              // Call applySetters with `init = false` because otherwise setters are a noop\n              const overrideInit = false;\n              doc[i] = schemaType.applySetters(obj[i], self, overrideInit);\n            } else {\n              doc[i] = schemaType.cast(obj[i], self, true);\n            }\n          } catch (e) {\n            self.invalidate(e.path, new ValidatorError({\n              path: e.path,\n              message: e.message,\n              type: 'cast',\n              value: e.value,\n              reason: e\n            }));\n          }\n        } else {\n          doc[i] = obj[i];\n        }\n      }\n      // mark as hydrated\n      if (!self.$isModified(path)) {\n        self.$__.activePaths.init(path);\n      }\n    }\n  }\n}\n\n/**\n * Sends an updateOne command with this document `_id` as the query selector.\n *\n * #### Example:\n *\n *     weirdCar.updateOne({$inc: {wheels:1}}, { w: 1 }, callback);\n *\n * #### Valid options:\n *\n *  - same as in [Model.updateOne](https://mongoosejs.com/docs/api/model.html#Model.updateOne)\n *\n * @see Model.updateOne https://mongoosejs.com/docs/api/model.html#Model.updateOne\n * @param {Object} doc\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.lean()) and the [Mongoose lean tutorial](https://mongoosejs.com/docs/tutorials/lean.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Function} [callback]\n * @return {Query}\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.updateOne = function updateOne(doc, options, callback) {\n  const query = this.constructor.updateOne({ _id: this._id }, doc, options);\n  const self = this;\n  query.pre(function queryPreUpdateOne(cb) {\n    self.constructor._middleware.execPre('updateOne', self, [self], cb);\n  });\n  query.post(function queryPostUpdateOne(cb) {\n    self.constructor._middleware.execPost('updateOne', self, [self], {}, cb);\n  });\n\n  if (this.$session() != null) {\n    if (!('session' in query.options)) {\n      query.options.session = this.$session();\n    }\n  }\n\n  if (callback != null) {\n    return query.exec(callback);\n  }\n\n  return query;\n};\n\n/**\n * Sends a replaceOne command with this document `_id` as the query selector.\n *\n * #### Valid options:\n *\n *  - same as in [Model.replaceOne](https://mongoosejs.com/docs/api/model.html#Model.replaceOne())\n *\n * @see Model.replaceOne https://mongoosejs.com/docs/api/model.html#Model.replaceOne()\n * @param {Object} doc\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query}\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.replaceOne = function replaceOne() {\n  const args = [...arguments];\n  args.unshift({ _id: this._id });\n  return this.constructor.replaceOne.apply(this.constructor, args);\n};\n\n/**\n * Getter/setter around the session associated with this document. Used to\n * automatically set `session` if you `save()` a doc that you got from a\n * query with an associated session.\n *\n * #### Example:\n *\n *     const session = MyModel.startSession();\n *     const doc = await MyModel.findOne().session(session);\n *     doc.$session() === session; // true\n *     doc.$session(null);\n *     doc.$session() === null; // true\n *\n * If this is a top-level document, setting the session propagates to all child\n * docs.\n *\n * @param {ClientSession} [session] overwrite the current session\n * @return {ClientSession}\n * @method $session\n * @api public\n * @memberOf Document\n */\n\nDocument.prototype.$session = function $session(session) {\n  if (arguments.length === 0) {\n    if (this.$__.session != null && this.$__.session.hasEnded) {\n      this.$__.session = null;\n      return null;\n    }\n    return this.$__.session;\n  }\n\n  if (session != null && session.hasEnded) {\n    throw new MongooseError('Cannot set a document\\'s session to a session that has ended. Make sure you haven\\'t ' +\n      'called `endSession()` on the session you are passing to `$session()`.');\n  }\n\n  if (session == null && this.$__.session == null) {\n    return;\n  }\n\n  this.$__.session = session;\n\n  if (!this.$isSubdocument) {\n    const subdocs = this.$getAllSubdocs();\n    for (const child of subdocs) {\n      child.$session(session);\n    }\n  }\n\n  return session;\n};\n\n/**\n * Getter/setter around whether this document will apply timestamps by\n * default when using `save()` and `bulkSave()`.\n *\n * #### Example:\n *\n *     const TestModel = mongoose.model('Test', new Schema({ name: String }, { timestamps: true }));\n *     const doc = new TestModel({ name: 'John Smith' });\n *\n *     doc.$timestamps(); // true\n *\n *     doc.$timestamps(false);\n *     await doc.save(); // Does **not** apply timestamps\n *\n * @param {Boolean} [value] overwrite the current session\n * @return {Document|boolean|undefined} When used as a getter (no argument), a boolean will be returned indicating the timestamps option state or if unset \"undefined\" will be used, otherwise will return \"this\"\n * @method $timestamps\n * @api public\n * @memberOf Document\n */\n\nDocument.prototype.$timestamps = function $timestamps(value) {\n  if (arguments.length === 0) {\n    if (this.$__.timestamps != null) {\n      return this.$__.timestamps;\n    }\n\n    if (this.$__schema) {\n      return this.$__schema.options.timestamps;\n    }\n\n    return undefined;\n  }\n\n  const currentValue = this.$timestamps();\n  if (value !== currentValue) {\n    this.$__.timestamps = value;\n  }\n\n  return this;\n};\n\n/**\n * Overwrite all values in this document with the values of `obj`, except\n * for immutable properties. Behaves similarly to `set()`, except for it\n * unsets all properties that aren't in `obj`.\n *\n * @param {Object} obj the object to overwrite this document with\n * @method overwrite\n * @memberOf Document\n * @instance\n * @api public\n * @return {Document} this\n */\n\nDocument.prototype.overwrite = function overwrite(obj) {\n  const keys = Array.from(new Set(Object.keys(this._doc).concat(Object.keys(obj))));\n\n  for (const key of keys) {\n    if (key === '_id') {\n      continue;\n    }\n    // Explicitly skip version key\n    if (this.$__schema.options.versionKey && key === this.$__schema.options.versionKey) {\n      continue;\n    }\n    if (this.$__schema.options.discriminatorKey && key === this.$__schema.options.discriminatorKey) {\n      continue;\n    }\n    this.$set(key, obj[key]);\n  }\n\n  return this;\n};\n\n/**\n * Alias for `set()`, used internally to avoid conflicts\n *\n * @param {String|Object} path path or object of key/vals to set\n * @param {Any} val the value to set\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for \"on-the-fly\" attributes\n * @param {Object} [options] optionally specify options that modify the behavior of the set\n * @param {Boolean} [options.merge=false] if true, setting a [nested path](https://mongoosejs.com/docs/subdocs.html#subdocuments-versus-nested-paths) will merge existing values rather than overwrite the whole object. So `doc.set('nested', { a: 1, b: 2 })` becomes `doc.set('nested.a', 1); doc.set('nested.b', 2);`\n * @return {Document} this\n * @method $set\n * @memberOf Document\n * @instance\n * @api public\n */\n\nDocument.prototype.$set = function $set(path, val, type, options) {\n  if (utils.isPOJO(type)) {\n    options = type;\n    type = undefined;\n  }\n\n  const merge = options && options.merge;\n  const adhoc = type && type !== true;\n  const constructing = type === true;\n  let adhocs;\n  let keys;\n  let i = 0;\n  let pathtype;\n  let key;\n  let prefix;\n\n  const userSpecifiedStrict = options && 'strict' in options;\n  let strict = userSpecifiedStrict\n    ? options.strict\n    : this.$__.strictMode;\n\n  if (adhoc) {\n    adhocs = this.$__.adhocPaths || (this.$__.adhocPaths = {});\n    adhocs[path] = this.$__schema.interpretAsType(path, type, this.$__schema.options);\n  }\n\n  if (path == null) {\n    [path, val] = [val, path];\n  } else if (typeof path !== 'string') {\n    // new Document({ key: val })\n    if (path instanceof Document) {\n      if (path.$__isNested) {\n        path = path.toObject();\n      } else {\n        path = path._doc;\n      }\n    }\n    if (path == null) {\n      [path, val] = [val, path];\n    }\n\n    prefix = val ? val + '.' : '';\n    keys = getKeysInSchemaOrder(this.$__schema, path);\n\n    const len = keys.length;\n\n    // `_skipMinimizeTopLevel` is because we may have deleted the top-level\n    // nested key to ensure key order.\n    const _skipMinimizeTopLevel = options && options._skipMinimizeTopLevel || false;\n    if (len === 0 && _skipMinimizeTopLevel) {\n      delete options._skipMinimizeTopLevel;\n      if (val) {\n        this.$set(val, {});\n      }\n      return this;\n    }\n\n    options = Object.assign({}, options, { _skipMinimizeTopLevel: false });\n\n    for (let i = 0; i < len; ++i) {\n      key = keys[i];\n      const pathName = prefix ? prefix + key : key;\n      pathtype = this.$__schema.pathType(pathName);\n      const valForKey = path[key];\n\n      // On initial set, delete any nested keys if we're going to overwrite\n      // them to ensure we keep the user's key order.\n      if (type === true &&\n          !prefix &&\n          valForKey != null &&\n          pathtype === 'nested' &&\n          this._doc[key] != null) {\n        delete this._doc[key];\n      }\n\n      if (utils.isNonBuiltinObject(valForKey) && pathtype === 'nested') {\n        this.$set(pathName, valForKey, constructing, Object.assign({}, options, { _skipMarkModified: true }));\n        $applyDefaultsToNested(this.$get(pathName), pathName, this);\n        continue;\n      } else if (strict) {\n        // Don't overwrite defaults with undefined keys (gh-3981) (gh-9039)\n        if (constructing && valForKey === void 0 &&\n            this.$get(pathName) !== void 0) {\n          continue;\n        }\n\n        if (pathtype === 'adhocOrUndefined') {\n          pathtype = getEmbeddedDiscriminatorPath(this, pathName, { typeOnly: true });\n        }\n\n        if (pathtype === 'real' || pathtype === 'virtual') {\n          this.$set(pathName, valForKey, constructing, options);\n        } else if (pathtype === 'nested' && valForKey instanceof Document) {\n          this.$set(pathName,\n            valForKey.toObject({ transform: false }), constructing, options);\n        } else if (strict === 'throw') {\n          if (pathtype === 'nested') {\n            throw new ObjectExpectedError(key, valForKey);\n          } else {\n            throw new StrictModeError(key);\n          }\n        } else if (pathtype === 'nested' && valForKey == null) {\n          this.$set(pathName, valForKey, constructing, options);\n        }\n      } else if (valForKey !== void 0) {\n        this.$set(pathName, valForKey, constructing, options);\n      }\n    }\n\n    // Ensure all properties are in correct order\n    const orderedDoc = {};\n    const orderedKeys = Object.keys(this.$__schema.tree);\n    for (let i = 0, len = orderedKeys.length; i < len; ++i) {\n      (key = orderedKeys[i]) &&\n      (this._doc.hasOwnProperty(key)) &&\n      (orderedDoc[key] = undefined);\n    }\n    this._doc = Object.assign(orderedDoc, this._doc);\n\n    return this;\n  }\n\n  let pathType = this.$__schema.pathType(path);\n  let parts = null;\n  if (pathType === 'adhocOrUndefined') {\n    parts = path.indexOf('.') === -1 ? [path] : path.split('.');\n    pathType = getEmbeddedDiscriminatorPath(this, parts, { typeOnly: true });\n  }\n  if (pathType === 'adhocOrUndefined' && !userSpecifiedStrict) {\n    // May be path underneath non-strict schema\n    if (parts == null) {\n      parts = path.indexOf('.') === -1 ? [path] : path.split('.');\n    }\n    const subdocStrict = getSubdocumentStrictValue(this.$__schema, parts);\n    if (subdocStrict !== undefined) {\n      strict = subdocStrict;\n    }\n  }\n\n  // Assume this is a Mongoose document that was copied into a POJO using\n  // `Object.assign()` or `{...doc}`\n  val = handleSpreadDoc(val, true);\n\n  // if this doc is being constructed we should not trigger getters\n  const priorVal = (() => {\n    if (this.$__.priorDoc != null) {\n      return this.$__.priorDoc.$__getValue(path);\n    }\n    if (constructing) {\n      return void 0;\n    }\n    return this.$__getValue(path);\n  })();\n\n  if (pathType === 'nested' && val) {\n    if (typeof val === 'object' && val != null) {\n      if (val.$__ != null) {\n        val = val.toObject(internalToObjectOptions);\n      }\n      if (val == null) {\n        this.invalidate(path, new MongooseError.CastError('Object', val, path));\n        return this;\n      }\n      const wasModified = this.$isModified(path);\n      const hasInitialVal = this.$__.savedState != null && this.$__.savedState.hasOwnProperty(path);\n      if (this.$__.savedState != null && !this.$isNew && !this.$__.savedState.hasOwnProperty(path)) {\n        const initialVal = this.$__getValue(path);\n        this.$__.savedState[path] = initialVal;\n\n        const keys = Object.keys(initialVal || {});\n        for (const key of keys) {\n          this.$__.savedState[path + '.' + key] = initialVal[key];\n        }\n      }\n\n      if (!merge) {\n        this.$__setValue(path, null);\n        cleanModifiedSubpaths(this, path);\n      } else {\n        return this.$set(val, path, constructing);\n      }\n\n      const keys = getKeysInSchemaOrder(this.$__schema, val, path);\n\n      this.$__setValue(path, {});\n      for (const key of keys) {\n        this.$set(path + '.' + key, val[key], constructing, { ...options, _skipMarkModified: true });\n      }\n      if (priorVal != null &&\n          (!wasModified || hasInitialVal) &&\n          utils.deepEqual(hasInitialVal ? this.$__.savedState[path] : priorVal, val)) {\n        this.unmarkModified(path);\n      } else {\n        this.markModified(path);\n      }\n      return this;\n    }\n    this.invalidate(path, new MongooseError.CastError('Object', val, path));\n    return this;\n  }\n\n  let schema;\n  if (parts == null) {\n    parts = path.indexOf('.') === -1 ? [path] : path.split('.');\n  }\n\n  // Might need to change path for top-level alias\n  if (typeof this.$__schema.aliases[parts[0]] === 'string') {\n    parts[0] = this.$__schema.aliases[parts[0]];\n  }\n\n  if (pathType === 'adhocOrUndefined' && strict) {\n    // check for roots that are Mixed types\n    let mixed;\n\n    for (i = 0; i < parts.length; ++i) {\n      const subpath = parts.slice(0, i + 1).join('.');\n\n      // If path is underneath a virtual, bypass everything and just set it.\n      if (i + 1 < parts.length && this.$__schema.pathType(subpath) === 'virtual') {\n        mpath.set(path, val, this);\n        return this;\n      }\n\n      schema = this.$__schema.path(subpath);\n      if (schema == null) {\n        continue;\n      }\n\n      if (schema instanceof MixedSchema) {\n        // allow changes to sub paths of mixed types\n        mixed = true;\n        break;\n      } else if (schema.$isSchemaMap && schema.$__schemaType instanceof MixedSchema && i < parts.length - 1) {\n        // Map of mixed and not the last element in the path resolves to mixed\n        mixed = true;\n        schema = schema.$__schemaType;\n        break;\n      }\n    }\n\n    if (schema == null) {\n      // Check for embedded discriminators\n      schema = getEmbeddedDiscriminatorPath(this, path);\n    }\n\n    if (!mixed && !schema) {\n      if (strict === 'throw') {\n        throw new StrictModeError(path);\n      }\n      return this;\n    }\n  } else if (pathType === 'virtual') {\n    schema = this.$__schema.virtualpath(path);\n    schema.applySetters(val, this);\n    return this;\n  } else {\n    schema = this.$__path(path);\n  }\n\n  // gh-4578, if setting a deeply nested path that doesn't exist yet, create it\n  let cur = this._doc;\n  let curPath = '';\n  for (i = 0; i < parts.length - 1; ++i) {\n    cur = cur[parts[i]];\n    curPath += (curPath.length !== 0 ? '.' : '') + parts[i];\n    if (!cur) {\n      this.$set(curPath, {});\n      // Hack re: gh-5800. If nested field is not selected, it probably exists\n      // so `MongoServerError: cannot use the part (nested of nested.num) to\n      // traverse the element ({nested: null})` is not likely. If user gets\n      // that error, its their fault for now. We should reconsider disallowing\n      // modifying not selected paths for 6.x\n      if (!this.$__isSelected(curPath)) {\n        this.unmarkModified(curPath);\n      }\n      cur = this.$__getValue(curPath);\n    }\n  }\n\n  let pathToMark;\n\n  // When using the $set operator the path to the field must already exist.\n  // Else mongodb throws: \"LEFT_SUBFIELD only supports Object\"\n\n  if (parts.length <= 1) {\n    pathToMark = path;\n  } else {\n    const len = parts.length;\n    for (i = 0; i < len; ++i) {\n      const subpath = parts.slice(0, i + 1).join('.');\n      if (this.$get(subpath, null, { getters: false }) === null) {\n        pathToMark = subpath;\n        break;\n      }\n    }\n\n    if (!pathToMark) {\n      pathToMark = path;\n    }\n  }\n\n  if (!schema) {\n    this.$__set(pathToMark, path, options, constructing, parts, schema, val, priorVal);\n\n    if (pathType === 'nested' && val == null) {\n      cleanModifiedSubpaths(this, path);\n    }\n    return this;\n  }\n\n  // If overwriting a subdocument path, make sure to clear out\n  // any errors _before_ setting, so new errors that happen\n  // get persisted. Re: #9080\n  if (schema.$isSingleNested || schema.$isMongooseArray) {\n    _markValidSubpaths(this, path);\n  }\n\n  if (val != null && merge && schema.$isSingleNested) {\n    if (val instanceof Document) {\n      val = val.toObject({ virtuals: false, transform: false });\n    }\n    const keys = Object.keys(val);\n    for (const key of keys) {\n      this.$set(path + '.' + key, val[key], constructing, options);\n    }\n\n    return this;\n  }\n\n  let shouldSet = true;\n  try {\n    // If the user is trying to set a ref path to a document with\n    // the correct model name, treat it as populated\n    const refMatches = (() => {\n      if (schema.options == null) {\n        return false;\n      }\n      if (!(val instanceof Document)) {\n        return false;\n      }\n      const model = val.constructor;\n\n      // Check ref\n      const ref = schema.options.ref;\n      if (ref != null && (ref === model.modelName || ref === model.baseModelName)) {\n        return true;\n      }\n\n      // Check refPath\n      const refPath = schema.options.refPath;\n      if (refPath == null) {\n        return false;\n      }\n      const modelName = val.get(refPath);\n      return modelName === model.modelName || modelName === model.baseModelName;\n    })();\n\n    let didPopulate = false;\n    if (refMatches && val instanceof Document && (!val.$__.wasPopulated || utils.deepEqual(val.$__.wasPopulated.value, val._id))) {\n      const unpopulatedValue = (schema && schema.$isSingleNested) ? schema.cast(val, this) : val._id;\n      this.$populated(path, unpopulatedValue, { [populateModelSymbol]: val.constructor });\n      val.$__.wasPopulated = { value: unpopulatedValue };\n      didPopulate = true;\n    }\n\n    let popOpts;\n    const typeKey = this.$__schema.options.typeKey;\n    if (schema.options &&\n        Array.isArray(schema.options[typeKey]) &&\n        schema.options[typeKey].length &&\n        schema.options[typeKey][0].ref &&\n        _isManuallyPopulatedArray(val, schema.options[typeKey][0].ref)) {\n      popOpts = { [populateModelSymbol]: val[0].constructor };\n      this.$populated(path, val.map(function(v) { return v._id; }), popOpts);\n\n      for (const doc of val) {\n        doc.$__.wasPopulated = { value: doc._id };\n      }\n      didPopulate = true;\n    }\n\n    if (!refMatches || !schema.$isSingleNested || !val.$__) {\n      // If this path is underneath a single nested schema, we'll call the setter\n      // later in `$__set()` because we don't take `_doc` when we iterate through\n      // a single nested doc. That's to make sure we get the correct context.\n      // Otherwise we would double-call the setter, see gh-7196.\n      let setterContext = this;\n      if (this.$__schema.singleNestedPaths[path] != null && parts.length > 1) {\n        setterContext = getDeepestSubdocumentForPath(this, parts, this.schema);\n      }\n      if (options != null && options.overwriteImmutable) {\n        val = schema.applySetters(val, setterContext, false, priorVal, { overwriteImmutable: true });\n      } else {\n        val = schema.applySetters(val, setterContext, false, priorVal);\n      }\n    }\n\n    if (Array.isArray(val) &&\n        !Array.isArray(schema) &&\n        schema.$isMongooseDocumentArray &&\n        val.length !== 0 &&\n        val[0] != null &&\n        val[0].$__ != null &&\n        val[0].$__.populated != null) {\n      const populatedPaths = Object.keys(val[0].$__.populated);\n      for (const populatedPath of populatedPaths) {\n        this.$populated(path + '.' + populatedPath,\n          val.map(v => v.$populated(populatedPath)),\n          val[0].$__.populated[populatedPath].options);\n      }\n      didPopulate = true;\n    }\n\n    if (!didPopulate && this.$__.populated) {\n      // If this array partially contains populated documents, convert them\n      // all to ObjectIds re: #8443\n      if (Array.isArray(val) && this.$__.populated[path]) {\n        for (let i = 0; i < val.length; ++i) {\n          if (val[i] instanceof Document) {\n            val.set(i, val[i]._id, true);\n          }\n        }\n      }\n      delete this.$__.populated[path];\n    }\n\n    if (val != null && schema.$isSingleNested) {\n      _checkImmutableSubpaths(val, schema, priorVal);\n    }\n\n    this.$markValid(path);\n  } catch (e) {\n    if (e instanceof MongooseError.StrictModeError && e.isImmutableError) {\n      this.invalidate(path, e);\n    } else if (e instanceof MongooseError.CastError) {\n      this.invalidate(e.path, e);\n      if (e.$originalErrorPath) {\n        this.invalidate(path,\n          new MongooseError.CastError(schema.instance, val, path, e.$originalErrorPath));\n      }\n    } else {\n      this.invalidate(path,\n        new MongooseError.CastError(schema.instance, val, path, e));\n    }\n    shouldSet = false;\n  }\n\n  if (shouldSet) {\n    let savedState = null;\n    let savedStatePath = null;\n    if (!constructing) {\n      const doc = this.$isSubdocument ? this.ownerDocument() : this;\n      savedState = doc.$__.savedState;\n      savedStatePath = this.$isSubdocument ? this.$__.fullPath + '.' + path : path;\n      doc.$__saveInitialState(savedStatePath);\n    }\n\n    this.$__set(pathToMark, path, options, constructing, parts, schema, val, priorVal);\n\n    const isInTransaction = !!this.$__.session?.transaction;\n    const isModifiedWithinTransaction = this.$__.session &&\n      this.$__.session[sessionNewDocuments] &&\n      this.$__.session[sessionNewDocuments].has(this) &&\n      this.$__.session[sessionNewDocuments].get(this).modifiedPaths &&\n      !this.$__.session[sessionNewDocuments].get(this).modifiedPaths.has(savedStatePath);\n    if (savedState != null &&\n        savedState.hasOwnProperty(savedStatePath) &&\n        (!isInTransaction || isModifiedWithinTransaction) &&\n        utils.deepEqual(val, savedState[savedStatePath])) {\n      this.unmarkModified(path);\n    }\n  }\n\n  if (schema.$isSingleNested && (this.isDirectModified(path) || val == null)) {\n    cleanModifiedSubpaths(this, path);\n  }\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _isManuallyPopulatedArray(val, ref) {\n  if (!Array.isArray(val)) {\n    return false;\n  }\n  if (val.length === 0) {\n    return false;\n  }\n\n  for (const el of val) {\n    if (!(el instanceof Document)) {\n      return false;\n    }\n    const modelName = el.constructor.modelName;\n    if (modelName == null) {\n      return false;\n    }\n    if (el.constructor.modelName != ref && el.constructor.baseModelName != ref) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Sets the value of a path, or many paths.\n * Alias for [`.$set`](https://mongoosejs.com/docs/api/document.html#Document.prototype.$set()).\n *\n * #### Example:\n *\n *     // path, value\n *     doc.set(path, value)\n *\n *     // object\n *     doc.set({\n *         path  : value\n *       , path2 : {\n *            path  : value\n *         }\n *     })\n *\n *     // on-the-fly cast to number\n *     doc.set(path, value, Number)\n *\n *     // on-the-fly cast to string\n *     doc.set(path, value, String)\n *\n *     // changing strict mode behavior\n *     doc.set(path, value, { strict: false });\n *\n * @param {String|Object} path path or object of key/vals to set\n * @param {Any} val the value to set\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for \"on-the-fly\" attributes\n * @param {Object} [options] optionally specify options that modify the behavior of the set\n * @return {Document} this\n * @api public\n * @method set\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.set = Document.prototype.$set;\n\n/**\n * Determine if we should mark this change as modified.\n *\n * @param {never} pathToMark UNUSED\n * @param {String|Symbol} path\n * @param {Object} options\n * @param {Any} constructing\n * @param {never} parts UNUSED\n * @param {Schema} schema\n * @param {Any} val\n * @param {Any} priorVal\n * @return {Boolean}\n * @api private\n * @method $__shouldModify\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__shouldModify = function(pathToMark, path, options, constructing, parts, schema, val, priorVal) {\n  if (options && options._skipMarkModified) {\n    return false;\n  }\n  if (this.$isNew) {\n    return true;\n  }\n  // Is path already modified? If so, always modify. We may unmark modified later.\n  if (path in this.$__.activePaths.getStatePaths('modify')) {\n    return true;\n  }\n\n  if (val === void 0 && !this.$__isSelected(path)) {\n    // when a path is not selected in a query, its initial\n    // value will be undefined.\n    return true;\n  }\n\n  if (val === void 0 && path in this.$__.activePaths.getStatePaths('default')) {\n    // we're just unsetting the default value which was never saved\n    return false;\n  }\n\n  // gh-3992: if setting a populated field to a doc, don't mark modified\n  // if they have the same _id\n  if (this.$populated(path) &&\n      val instanceof Document &&\n      deepEqual(val._id, priorVal)) {\n    return false;\n  }\n\n  if (!deepEqual(val, priorVal !== undefined ? priorVal : utils.getValue(path, this))) {\n    return true;\n  }\n\n  if (!constructing &&\n      val !== null &&\n      val !== undefined &&\n      path in this.$__.activePaths.getStatePaths('default') &&\n      deepEqual(val, schema.getDefault(this, constructing))) {\n    // a path with a default was $unset on the server\n    // and the user is setting it to the same value again\n    return true;\n  }\n  return false;\n};\n\n/**\n * Handles the actual setting of the value and marking the path modified if appropriate.\n *\n * @param {String} pathToMark\n * @param {String|Symbol} path\n * @param {Object} options\n * @param {Any} constructing\n * @param {Array} parts\n * @param {Schema} schema\n * @param {Any} val\n * @param {Any} priorVal\n * @api private\n * @method $__set\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__set = function(pathToMark, path, options, constructing, parts, schema, val, priorVal) {\n  Embedded = Embedded || __webpack_require__(/*! ./types/arraySubdocument */ \"(ssr)/./node_modules/mongoose/lib/types/arraySubdocument.js\");\n\n  const shouldModify = this.$__shouldModify(pathToMark, path, options, constructing, parts,\n    schema, val, priorVal);\n\n  if (shouldModify) {\n    if (this.$__.primitiveAtomics && this.$__.primitiveAtomics[path]) {\n      delete this.$__.primitiveAtomics[path];\n      if (Object.keys(this.$__.primitiveAtomics).length === 0) {\n        delete this.$__.primitiveAtomics;\n      }\n    }\n    this.markModified(pathToMark);\n\n    // handle directly setting arrays (gh-1126)\n    MongooseArray || (MongooseArray = __webpack_require__(/*! ./types/array */ \"(ssr)/./node_modules/mongoose/lib/types/array/index.js\"));\n    if (val && utils.isMongooseArray(val)) {\n      val._registerAtomic('$set', val);\n\n      // Update embedded document parent references (gh-5189)\n      if (utils.isMongooseDocumentArray(val)) {\n        val.forEach(function(item) {\n          item && item.__parentArray && (item.__parentArray = val);\n        });\n      }\n    }\n  } else if (Array.isArray(val) && Array.isArray(priorVal) && utils.isMongooseArray(val) && utils.isMongooseArray(priorVal)) {\n    val[arrayAtomicsSymbol] = priorVal[arrayAtomicsSymbol];\n    val[arrayAtomicsBackupSymbol] = priorVal[arrayAtomicsBackupSymbol];\n    if (utils.isMongooseDocumentArray(val)) {\n      val.forEach(doc => {\n        if (doc != null) {\n          doc.$isNew = false;\n        }\n      });\n    }\n  }\n\n  let obj = this._doc;\n  let i = 0;\n  const l = parts.length;\n  let cur = '';\n\n  for (; i < l; i++) {\n    const next = i + 1;\n    const last = next === l;\n    cur += (cur ? '.' + parts[i] : parts[i]);\n    if (specialProperties.has(parts[i])) {\n      return;\n    }\n\n    if (last) {\n      if (obj instanceof Map) {\n        obj.set(parts[i], val);\n      } else if (obj.$isSingleNested) {\n        if (!(parts[i] in obj)) {\n          obj[parts[i]] = val;\n          obj._doc[parts[i]] = val;\n        } else {\n          obj._doc[parts[i]] = val;\n        }\n      } else {\n        obj[parts[i]] = val;\n      }\n    } else {\n      const isMap = obj instanceof Map;\n      let value = isMap ? obj.get(parts[i]) : obj[parts[i]];\n      if (utils.isPOJO(value)) {\n        obj = value;\n      } else if (value && value instanceof Embedded) {\n        obj = value;\n      } else if (value && !Array.isArray(value) && value.$isSingleNested) {\n        obj = value;\n      } else if (value && Array.isArray(value)) {\n        obj = value;\n      } else if (value == null) {\n        value = {};\n        if (isMap) {\n          obj.set(parts[i], value);\n        } else {\n          obj[parts[i]] = value;\n        }\n        obj = value;\n      } else {\n        obj = value;\n      }\n    }\n  }\n};\n\n/**\n * Gets a raw value from a path (no getters)\n *\n * @param {String} path\n * @return {Any} Returns the value from the given `path`.\n * @api private\n */\n\nDocument.prototype.$__getValue = function(path) {\n  return utils.getValue(path, this._doc);\n};\n\n/**\n * Increments the numeric value at `path` by the given `val`.\n * When you call `save()` on this document, Mongoose will send a\n * [`$inc`](https://www.mongodb.com/docs/manual/reference/operator/update/inc/)\n * as opposed to a `$set`.\n *\n * #### Example:\n *\n *     const schema = new Schema({ counter: Number });\n *     const Test = db.model('Test', schema);\n *\n *     const doc = await Test.create({ counter: 0 });\n *     doc.$inc('counter', 2);\n *     await doc.save(); // Sends a `{ $inc: { counter: 2 } }` to MongoDB\n *     doc.counter; // 2\n *\n *     doc.counter += 2;\n *     await doc.save(); // Sends a `{ $set: { counter: 2 } }` to MongoDB\n *\n * @param {String|Array} path path or paths to update\n * @param {Number} val increment `path` by this value\n * @return {Document} this\n */\n\nDocument.prototype.$inc = function $inc(path, val) {\n  if (val == null) {\n    val = 1;\n  }\n\n  if (Array.isArray(path)) {\n    path.forEach((p) => this.$inc(p, val));\n    return this;\n  }\n\n  const schemaType = this.$__path(path);\n  if (schemaType == null) {\n    if (this.$__.strictMode === 'throw') {\n      throw new StrictModeError(path);\n    } else if (this.$__.strictMode === true) {\n      return this;\n    }\n  } else if (schemaType.instance !== 'Number') {\n    this.invalidate(path, new MongooseError.CastError(schemaType.instance, val, path));\n    return this;\n  }\n\n  const currentValue = this.$__getValue(path) || 0;\n  let shouldSet = false;\n  let valToSet = null;\n  let valToInc = val;\n\n  try {\n    val = schemaType.cast(val);\n    valToSet = schemaType.applySetters(currentValue + val, this);\n    valToInc = valToSet - currentValue;\n    shouldSet = true;\n  } catch (err) {\n    this.invalidate(path, new MongooseError.CastError('number', val, path, err));\n  }\n\n  if (shouldSet) {\n    this.$__.primitiveAtomics = this.$__.primitiveAtomics || {};\n    if (this.$__.primitiveAtomics[path] == null) {\n      this.$__.primitiveAtomics[path] = { $inc: valToInc };\n    } else {\n      this.$__.primitiveAtomics[path].$inc += valToInc;\n    }\n    this.markModified(path);\n    this.$__setValue(path, valToSet);\n  }\n\n  return this;\n};\n\n/**\n * Sets a raw value for a path (no casting, setters, transformations)\n *\n * @param {String} path\n * @param {Object} value\n * @return {Document} this\n * @api private\n */\n\nDocument.prototype.$__setValue = function(path, val) {\n  utils.setValue(path, val, this._doc);\n  return this;\n};\n\n/**\n * Returns the value of a path.\n *\n * #### Example:\n *\n *     // path\n *     doc.get('age') // 47\n *\n *     // dynamic casting to a string\n *     doc.get('age', String) // \"47\"\n *\n * @param {String} path\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for on-the-fly attributes\n * @param {Object} [options]\n * @param {Boolean} [options.virtuals=false] Apply virtuals before getting this path\n * @param {Boolean} [options.getters=true] If false, skip applying getters and just get the raw value\n * @return {Any}\n * @api public\n */\n\nDocument.prototype.get = function(path, type, options) {\n  let adhoc;\n  if (options == null) {\n    options = {};\n  }\n  if (type) {\n    adhoc = this.$__schema.interpretAsType(path, type, this.$__schema.options);\n  }\n  const noDottedPath = options.noDottedPath;\n\n  // Fast path if we know we're just accessing top-level path on the document:\n  // just get the schema path, avoid `$__path()` because that does string manipulation\n  let schema = noDottedPath ? this.$__schema.paths[path] : this.$__path(path);\n  if (schema == null) {\n    schema = this.$__schema.virtualpath(path);\n\n    if (schema != null) {\n      return schema.applyGetters(void 0, this);\n    }\n  }\n\n  if (noDottedPath) {\n    let obj = this._doc[path];\n    if (adhoc) {\n      obj = adhoc.cast(obj);\n    }\n    if (schema != null && options.getters !== false) {\n      return schema.applyGetters(obj, this);\n    }\n    return obj;\n  }\n\n  if (schema != null && schema.instance === 'Mixed') {\n    const virtual = this.$__schema.virtualpath(path);\n    if (virtual != null) {\n      schema = virtual;\n    }\n  }\n\n  const hasDot = path.indexOf('.') !== -1;\n  let obj = this._doc;\n\n  const pieces = hasDot ? path.split('.') : [path];\n  // Might need to change path for top-level alias\n  if (typeof this.$__schema.aliases[pieces[0]] === 'string') {\n    pieces[0] = this.$__schema.aliases[pieces[0]];\n  }\n\n  for (let i = 0, l = pieces.length; i < l; i++) {\n    if (obj && obj._doc) {\n      obj = obj._doc;\n    }\n\n    if (obj == null) {\n      obj = void 0;\n    } else if (obj instanceof Map) {\n      obj = obj.get(pieces[i], { getters: false });\n    } else if (i === l - 1) {\n      obj = utils.getValue(pieces[i], obj);\n    } else {\n      obj = obj[pieces[i]];\n    }\n  }\n\n  if (adhoc) {\n    obj = adhoc.cast(obj);\n  }\n\n  if (schema != null && options.getters !== false) {\n    obj = schema.applyGetters(obj, this);\n  } else if (this.$__schema.nested[path] && options.virtuals) {\n    // Might need to apply virtuals if this is a nested path\n    return applyVirtuals(this, clone(obj) || {}, { path: path });\n  }\n\n  return obj;\n};\n\n/*!\n * ignore\n */\n\nDocument.prototype[getSymbol] = Document.prototype.get;\nDocument.prototype.$get = Document.prototype.get;\n\n/**\n * Returns the schematype for the given `path`.\n *\n * @param {String} path\n * @return {SchemaPath}\n * @api private\n * @method $__path\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__path = function(path) {\n  const adhocs = this.$__.adhocPaths;\n  const adhocType = adhocs && adhocs.hasOwnProperty(path) ? adhocs[path] : null;\n\n  if (adhocType) {\n    return adhocType;\n  }\n  return this.$__schema.path(path);\n};\n\n/**\n * Marks the path as having pending changes to write to the db.\n *\n * _Very helpful when using [Mixed](https://mongoosejs.com/docs/schematypes.html#mixed) types._\n *\n * #### Example:\n *\n *     doc.mixed.type = 'changed';\n *     doc.markModified('mixed.type');\n *     doc.save() // changes to mixed.type are now persisted\n *\n * @param {String} path the path to mark modified\n * @param {Document} [scope] the scope to run validators with\n * @api public\n */\n\nDocument.prototype.markModified = function(path, scope) {\n  this.$__saveInitialState(path);\n\n  this.$__.activePaths.modify(path);\n  if (scope != null && !this.$isSubdocument) {\n    this.$__.pathsToScopes = this.$__pathsToScopes || {};\n    this.$__.pathsToScopes[path] = scope;\n  }\n};\n\n/*!\n * ignore\n */\n\nDocument.prototype.$__saveInitialState = function $__saveInitialState(path) {\n  const savedState = this.$__.savedState;\n  const savedStatePath = path;\n  if (savedState != null) {\n    const firstDot = savedStatePath.indexOf('.');\n    const topLevelPath = firstDot === -1 ? savedStatePath : savedStatePath.slice(0, firstDot);\n    if (!savedState.hasOwnProperty(topLevelPath)) {\n      savedState[topLevelPath] = clone(this.$__getValue(topLevelPath));\n    }\n  }\n};\n\n/**\n * Clears the modified state on the specified path.\n *\n * #### Example:\n *\n *     doc.foo = 'bar';\n *     doc.unmarkModified('foo');\n *     doc.save(); // changes to foo will not be persisted\n *\n * @param {String} path the path to unmark modified\n * @api public\n */\n\nDocument.prototype.unmarkModified = function(path) {\n  this.$__.activePaths.init(path);\n  if (this.$__.pathsToScopes != null) {\n    delete this.$__.pathsToScopes[path];\n  }\n};\n\n/**\n * Don't run validation on this path or persist changes to this path.\n *\n * #### Example:\n *\n *     doc.foo = null;\n *     doc.$ignore('foo');\n *     doc.save(); // changes to foo will not be persisted and validators won't be run\n *\n * @memberOf Document\n * @instance\n * @method $ignore\n * @param {String} path the path to ignore\n * @api public\n */\n\nDocument.prototype.$ignore = function(path) {\n  this.$__.activePaths.ignore(path);\n};\n\n/**\n * Returns the list of paths that have been directly modified. A direct\n * modified path is a path that you explicitly set, whether via `doc.foo = 'bar'`,\n * `Object.assign(doc, { foo: 'bar' })`, or `doc.set('foo', 'bar')`.\n *\n * A path `a` may be in `modifiedPaths()` but not in `directModifiedPaths()`\n * because a child of `a` was directly modified.\n *\n * #### Example:\n *\n *     const schema = new Schema({ foo: String, nested: { bar: String } });\n *     const Model = mongoose.model('Test', schema);\n *     await Model.create({ foo: 'original', nested: { bar: 'original' } });\n *\n *     const doc = await Model.findOne();\n *     doc.nested.bar = 'modified';\n *     doc.directModifiedPaths(); // ['nested.bar']\n *     doc.modifiedPaths(); // ['nested', 'nested.bar']\n *\n * @return {String[]}\n * @api public\n */\n\nDocument.prototype.directModifiedPaths = function() {\n  return Object.keys(this.$__.activePaths.getStatePaths('modify'));\n};\n\n/**\n * Returns true if the given path is nullish or only contains empty objects.\n * Useful for determining whether this subdoc will get stripped out by the\n * [minimize option](https://mongoosejs.com/docs/guide.html#minimize).\n *\n * #### Example:\n *\n *     const schema = new Schema({ nested: { foo: String } });\n *     const Model = mongoose.model('Test', schema);\n *     const doc = new Model({});\n *     doc.$isEmpty('nested'); // true\n *     doc.nested.$isEmpty(); // true\n *\n *     doc.nested.foo = 'bar';\n *     doc.$isEmpty('nested'); // false\n *     doc.nested.$isEmpty(); // false\n *\n * @param {String} [path]\n * @memberOf Document\n * @instance\n * @api public\n * @method $isEmpty\n * @return {Boolean}\n */\n\nDocument.prototype.$isEmpty = function(path) {\n  const isEmptyOptions = {\n    minimize: true,\n    virtuals: false,\n    getters: false,\n    transform: false\n  };\n\n  if (arguments.length !== 0) {\n    const v = this.$get(path);\n    if (v == null) {\n      return true;\n    }\n    if (typeof v !== 'object') {\n      return false;\n    }\n    if (utils.isPOJO(v)) {\n      return _isEmpty(v);\n    }\n    return Object.keys(v.toObject(isEmptyOptions)).length === 0;\n  }\n\n  return Object.keys(this.toObject(isEmptyOptions)).length === 0;\n};\n\n/*!\n * ignore\n */\n\nfunction _isEmpty(v) {\n  if (v == null) {\n    return true;\n  }\n  if (typeof v !== 'object' || Array.isArray(v)) {\n    return false;\n  }\n  for (const key of Object.keys(v)) {\n    if (!_isEmpty(v[key])) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Returns the list of paths that have been modified.\n *\n * @param {Object} [options]\n * @param {Boolean} [options.includeChildren=false] if true, returns children of modified paths as well. For example, if false, the list of modified paths for `doc.colors = { primary: 'blue' };` will **not** contain `colors.primary`. If true, `modifiedPaths()` will return an array that contains `colors.primary`.\n * @return {String[]}\n * @api public\n */\n\nDocument.prototype.modifiedPaths = function(options) {\n  options = options || {};\n\n  const directModifiedPaths = Object.keys(this.$__.activePaths.getStatePaths('modify'));\n  const result = new Set();\n\n  let i = 0;\n  let j = 0;\n  const len = directModifiedPaths.length;\n\n  for (i = 0; i < len; ++i) {\n    const path = directModifiedPaths[i];\n    const parts = parentPaths(path);\n    const pLen = parts.length;\n\n    for (j = 0; j < pLen; ++j) {\n      result.add(parts[j]);\n    }\n\n    if (!options.includeChildren) {\n      continue;\n    }\n\n    let ii = 0;\n    let cur = this.$get(path);\n    if (typeof cur === 'object' && cur !== null) {\n      if (cur._doc) {\n        cur = cur._doc;\n      }\n      const len = cur.length;\n      if (Array.isArray(cur)) {\n        for (ii = 0; ii < len; ++ii) {\n          const subPath = path + '.' + ii;\n          if (!result.has(subPath)) {\n            result.add(subPath);\n            if (cur[ii] != null && cur[ii].$__) {\n              const modified = cur[ii].modifiedPaths();\n              let iii = 0;\n              const iiiLen = modified.length;\n              for (iii = 0; iii < iiiLen; ++iii) {\n                result.add(subPath + '.' + modified[iii]);\n              }\n            }\n          }\n        }\n      } else {\n        const keys = Object.keys(cur);\n        let ii = 0;\n        const len = keys.length;\n        for (ii = 0; ii < len; ++ii) {\n          result.add(path + '.' + keys[ii]);\n        }\n      }\n    }\n  }\n  return Array.from(result);\n};\n\nDocument.prototype[documentModifiedPaths] = Document.prototype.modifiedPaths;\n\n/**\n * Returns true if any of the given paths is modified, else false. If no arguments, returns `true` if any path\n * in this document is modified.\n *\n * If `path` is given, checks if a path or any full path containing `path` as part of its path chain has been modified.\n *\n * #### Example:\n *\n *     doc.set('documents.0.title', 'changed');\n *     doc.isModified()                      // true\n *     doc.isModified('documents')           // true\n *     doc.isModified('documents.0.title')   // true\n *     doc.isModified('documents otherProp') // true\n *     doc.isDirectModified('documents')     // false\n *\n * @param {String} [path] optional\n * @param {Object} [options]\n * @param {Boolean} [options.ignoreAtomics=false] If true, doesn't return true if path is underneath an array that was modified with atomic operations like `push()`\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isModified = function(paths, options, modifiedPaths) {\n  if (paths) {\n    const ignoreAtomics = options && options.ignoreAtomics;\n    const directModifiedPathsObj = this.$__.activePaths.states.modify;\n    if (directModifiedPathsObj == null) {\n      return false;\n    }\n\n    if (typeof paths === 'string') {\n      paths = paths.indexOf(' ') === -1 ? [paths] : paths.split(' ');\n    }\n\n    for (const path of paths) {\n      if (directModifiedPathsObj[path] != null) {\n        return true;\n      }\n    }\n\n    const modified = modifiedPaths || this[documentModifiedPaths]();\n    const isModifiedChild = paths.some(function(path) {\n      return !!~modified.indexOf(path);\n    });\n\n    let directModifiedPaths = Object.keys(directModifiedPathsObj);\n    if (ignoreAtomics) {\n      directModifiedPaths = directModifiedPaths.filter(path => {\n        const value = this.$__getValue(path);\n        if (value != null && value[arrayAtomicsSymbol] != null && value[arrayAtomicsSymbol].$set === undefined) {\n          return false;\n        }\n        return true;\n      });\n    }\n    return isModifiedChild || paths.some(function(path) {\n      return directModifiedPaths.some(function(mod) {\n        return mod === path || path.startsWith(mod + '.');\n      });\n    });\n  }\n\n  return this.$__.activePaths.some('modify');\n};\n\n/**\n * Alias of [`.isModified`](https://mongoosejs.com/docs/api/document.html#Document.prototype.isModified())\n *\n * @method $isModified\n * @memberOf Document\n * @api public\n */\n\nDocument.prototype.$isModified = Document.prototype.isModified;\n\nDocument.prototype[documentIsModified] = Document.prototype.isModified;\n\n/**\n * Checks if a path is set to its default.\n *\n * #### Example:\n *\n *     MyModel = mongoose.model('test', { name: { type: String, default: 'Val '} });\n *     const m = new MyModel();\n *     m.$isDefault('name'); // true\n *\n * @memberOf Document\n * @instance\n * @method $isDefault\n * @param {String} [path]\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.$isDefault = function(path) {\n  if (path == null) {\n    return this.$__.activePaths.some('default');\n  }\n\n  if (typeof path === 'string' && path.indexOf(' ') === -1) {\n    return this.$__.activePaths.getStatePaths('default').hasOwnProperty(path);\n  }\n\n  let paths = path;\n  if (!Array.isArray(paths)) {\n    paths = paths.split(' ');\n  }\n\n  return paths.some(path => this.$__.activePaths.getStatePaths('default').hasOwnProperty(path));\n};\n\n/**\n * Getter/setter, determines whether the document was removed or not.\n *\n * #### Example:\n *\n *     const product = await product.remove();\n *     product.$isDeleted(); // true\n *     product.remove(); // no-op, doesn't send anything to the db\n *\n *     product.$isDeleted(false);\n *     product.$isDeleted(); // false\n *     product.remove(); // will execute a remove against the db\n *\n *\n * @param {Boolean} [val] optional, overrides whether mongoose thinks the doc is deleted\n * @return {Boolean|Document} whether mongoose thinks this doc is deleted.\n * @method $isDeleted\n * @memberOf Document\n * @instance\n * @api public\n */\n\nDocument.prototype.$isDeleted = function(val) {\n  if (arguments.length === 0) {\n    return !!this.$__.isDeleted;\n  }\n\n  this.$__.isDeleted = !!val;\n  return this;\n};\n\n/**\n * Returns true if `path` was directly set and modified, else false.\n *\n * #### Example:\n *\n *     doc.set('documents.0.title', 'changed');\n *     doc.isDirectModified('documents.0.title') // true\n *     doc.isDirectModified('documents') // false\n *\n * @param {String|String[]} [path]\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isDirectModified = function(path) {\n  if (path == null) {\n    return this.$__.activePaths.some('modify');\n  }\n\n  if (typeof path === 'string' && path.indexOf(' ') === -1) {\n    return this.$__.activePaths.getStatePaths('modify').hasOwnProperty(path);\n  }\n\n  let paths = path;\n  if (!Array.isArray(paths)) {\n    paths = paths.split(' ');\n  }\n\n  return paths.some(path => this.$__.activePaths.getStatePaths('modify').hasOwnProperty(path));\n};\n\n/**\n * Checks if `path` is in the `init` state, that is, it was set by `Document#init()` and not modified since.\n *\n * @param {String} [path]\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isInit = function(path) {\n  if (path == null) {\n    return this.$__.activePaths.some('init');\n  }\n\n  if (typeof path === 'string' && path.indexOf(' ') === -1) {\n    return this.$__.activePaths.getStatePaths('init').hasOwnProperty(path);\n  }\n\n  let paths = path;\n  if (!Array.isArray(paths)) {\n    paths = paths.split(' ');\n  }\n\n  return paths.some(path => this.$__.activePaths.getStatePaths('init').hasOwnProperty(path));\n};\n\n/**\n * Checks if `path` was selected in the source query which initialized this document.\n *\n * #### Example:\n *\n *     const doc = await Thing.findOne().select('name');\n *     doc.isSelected('name') // true\n *     doc.isSelected('age')  // false\n *\n * @param {String|String[]} path\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isSelected = function isSelected(path) {\n  if (this.$__.selected == null) {\n    return true;\n  }\n  if (!path) {\n    return false;\n  }\n  if (path === '_id') {\n    return this.$__.selected._id !== 0;\n  }\n\n  if (path.indexOf(' ') !== -1) {\n    path = path.split(' ');\n  }\n  if (Array.isArray(path)) {\n    return path.some(p => this.$__isSelected(p));\n  }\n\n  const paths = Object.keys(this.$__.selected);\n  let inclusive = null;\n\n  if (paths.length === 1 && paths[0] === '_id') {\n    // only _id was selected.\n    return this.$__.selected._id === 0;\n  }\n\n  for (const cur of paths) {\n    if (cur === '_id') {\n      continue;\n    }\n    if (!isDefiningProjection(this.$__.selected[cur])) {\n      continue;\n    }\n    inclusive = !!this.$__.selected[cur];\n    break;\n  }\n\n  if (inclusive === null) {\n    return true;\n  }\n\n  if (path in this.$__.selected) {\n    return inclusive;\n  }\n\n  const pathDot = path + '.';\n\n  for (const cur of paths) {\n    if (cur === '_id') {\n      continue;\n    }\n\n    if (cur.startsWith(pathDot)) {\n      return inclusive || cur !== pathDot;\n    }\n\n    if (pathDot.startsWith(cur + '.')) {\n      return inclusive;\n    }\n  }\n  return !inclusive;\n};\n\nDocument.prototype.$__isSelected = Document.prototype.isSelected;\n\n/**\n * Checks if `path` was explicitly selected. If no projection, always returns\n * true.\n *\n * #### Example:\n *\n *     Thing.findOne().select('nested.name').exec(function (err, doc) {\n *        doc.isDirectSelected('nested.name') // true\n *        doc.isDirectSelected('nested.otherName') // false\n *        doc.isDirectSelected('nested')  // false\n *     })\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isDirectSelected = function isDirectSelected(path) {\n  if (this.$__.selected == null) {\n    return true;\n  }\n\n  if (path === '_id') {\n    return this.$__.selected._id !== 0;\n  }\n\n  if (path.indexOf(' ') !== -1) {\n    path = path.split(' ');\n  }\n  if (Array.isArray(path)) {\n    return path.some(p => this.isDirectSelected(p));\n  }\n\n  const paths = Object.keys(this.$__.selected);\n  let inclusive = null;\n\n  if (paths.length === 1 && paths[0] === '_id') {\n    // only _id was selected.\n    return this.$__.selected._id === 0;\n  }\n\n  for (const cur of paths) {\n    if (cur === '_id') {\n      continue;\n    }\n    if (!isDefiningProjection(this.$__.selected[cur])) {\n      continue;\n    }\n    inclusive = !!this.$__.selected[cur];\n    break;\n  }\n\n  if (inclusive === null) {\n    return true;\n  }\n\n  if (this.$__.selected.hasOwnProperty(path)) {\n    return inclusive;\n  }\n\n  return !inclusive;\n};\n\n/**\n * Executes registered validation rules for this document.\n *\n * #### Note:\n *\n * This method is called `pre` save and if a validation rule is violated, [save](https://mongoosejs.com/docs/api/model.html#Model.prototype.save()) is aborted and the error is thrown.\n *\n * #### Example:\n *\n *     await doc.validate({ validateModifiedOnly: false, pathsToSkip: ['name', 'email']});\n *\n * @param {Array|String} [pathsToValidate] list of paths to validate. If set, Mongoose will validate only the modified paths that are in the given list.\n * @param {Object} [options] internal options\n * @param {Boolean} [options.validateModifiedOnly=false] if `true` mongoose validates only modified paths.\n * @param {Array|string} [options.pathsToSkip] list of paths to skip. If set, Mongoose will validate every modified path that is not in this list.\n * @return {Promise} Returns a Promise.\n * @api public\n */\n\nDocument.prototype.validate = async function validate(pathsToValidate, options) {\n  if (typeof pathsToValidate === 'function' || typeof options === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Document.prototype.validate() no longer accepts a callback');\n  }\n  let parallelValidate;\n  this.$op = 'validate';\n\n  if (this.$isSubdocument != null) {\n    // Skip parallel validate check for subdocuments\n  } else if (this.$__.validating) {\n    parallelValidate = new ParallelValidateError(this, {\n      parentStack: options && options.parentStack,\n      conflictStack: this.$__.validating.stack\n    });\n  } else {\n    this.$__.validating = new ParallelValidateError(this, { parentStack: options && options.parentStack });\n  }\n\n  if (arguments.length === 1) {\n    if (typeof arguments[0] === 'object' && !Array.isArray(arguments[0])) {\n      options = arguments[0];\n      pathsToValidate = null;\n    }\n  }\n  if (options && typeof options.pathsToSkip === 'string') {\n    const isOnePathOnly = options.pathsToSkip.indexOf(' ') === -1;\n    options.pathsToSkip = isOnePathOnly ? [options.pathsToSkip] : options.pathsToSkip.split(' ');\n  }\n\n  if (parallelValidate != null) {\n    throw parallelValidate;\n  }\n\n  return new Promise((resolve, reject) => {\n    this.$__validate(pathsToValidate, options, (error) => {\n      this.$op = null;\n      this.$__.validating = null;\n      if (error != null) {\n        return reject(error);\n      }\n      resolve();\n    });\n  });\n};\n\n/**\n * Alias of [`.validate`](https://mongoosejs.com/docs/api/document.html#Document.prototype.validate())\n *\n * @method $validate\n * @memberOf Document\n * @api public\n */\n\nDocument.prototype.$validate = Document.prototype.validate;\n\n/*!\n * ignore\n */\n\nfunction _evaluateRequiredFunctions(doc) {\n  const requiredFields = Object.keys(doc.$__.activePaths.getStatePaths('require'));\n  let i = 0;\n  const len = requiredFields.length;\n  for (i = 0; i < len; ++i) {\n    const path = requiredFields[i];\n\n    const p = doc.$__schema.path(path);\n\n    if (p != null && typeof p.originalRequiredValue === 'function') {\n      doc.$__.cachedRequired = doc.$__.cachedRequired || {};\n      try {\n        doc.$__.cachedRequired[path] = p.originalRequiredValue.call(doc, doc);\n      } catch (err) {\n        doc.invalidate(path, err);\n      }\n    }\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _getPathsToValidate(doc, pathsToValidate, pathsToSkip) {\n  const doValidateOptions = {};\n\n  _evaluateRequiredFunctions(doc);\n  // only validate required fields when necessary\n  let paths = new Set(Object.keys(doc.$__.activePaths.getStatePaths('require')).filter(function(path) {\n    if (!doc.$__isSelected(path) && !doc.$isModified(path)) {\n      return false;\n    }\n    if (doc.$__.cachedRequired != null && path in doc.$__.cachedRequired) {\n      return doc.$__.cachedRequired[path];\n    }\n    return true;\n  }));\n\n  Object.keys(doc.$__.activePaths.getStatePaths('init')).forEach(addToPaths);\n  Object.keys(doc.$__.activePaths.getStatePaths('modify')).forEach(addToPaths);\n  Object.keys(doc.$__.activePaths.getStatePaths('default')).forEach(addToPaths);\n  function addToPaths(p) { paths.add(p); }\n\n  const subdocs = doc.$getAllSubdocs();\n  const modifiedPaths = doc.modifiedPaths();\n  for (const subdoc of subdocs) {\n    if (subdoc.$basePath) {\n      const fullPathToSubdoc = subdoc.$isSingleNested ? subdoc.$__pathRelativeToParent() : subdoc.$__fullPathWithIndexes();\n\n      // Remove child paths for now, because we'll be validating the whole\n      // subdoc.\n      // The following is a faster take on looping through every path in `paths`\n      // and checking if the path starts with `fullPathToSubdoc` re: gh-13191\n      for (const modifiedPath of subdoc.modifiedPaths()) {\n        paths.delete(fullPathToSubdoc + '.' + modifiedPath);\n      }\n\n      if (doc.$isModified(fullPathToSubdoc, null, modifiedPaths) &&\n            !doc.isDirectModified(fullPathToSubdoc) &&\n            !doc.$isDefault(fullPathToSubdoc)) {\n        paths.add(fullPathToSubdoc);\n        if (doc.$__.pathsToScopes == null) {\n          doc.$__.pathsToScopes = {};\n        }\n        doc.$__.pathsToScopes[fullPathToSubdoc] = subdoc.$isDocumentArrayElement ?\n          subdoc.__parentArray :\n          subdoc.$parent();\n\n        doValidateOptions[fullPathToSubdoc] = { skipSchemaValidators: true };\n        if (subdoc.$isDocumentArrayElement && subdoc.__index != null) {\n          doValidateOptions[fullPathToSubdoc].index = subdoc.__index;\n        }\n      }\n    }\n  }\n\n  for (const path of paths) {\n    const _pathType = doc.$__schema.path(path);\n    if (!_pathType) {\n      continue;\n    }\n\n    if (_pathType.$isMongooseDocumentArray) {\n      for (const p of paths) {\n        if (p == null || p.startsWith(_pathType.path + '.')) {\n          paths.delete(p);\n        }\n      }\n    }\n\n    // Optimization: if primitive path with no validators, or array of primitives\n    // with no validators, skip validating this path entirely.\n    if (!_pathType.caster && _pathType.validators.length === 0 && !_pathType.$parentSchemaDocArray) {\n      paths.delete(path);\n    } else if (_pathType.$isMongooseArray &&\n      !_pathType.$isMongooseDocumentArray && // Skip document arrays...\n      !_pathType.$embeddedSchemaType.$isMongooseArray && // and arrays of arrays\n      _pathType.validators.length === 0 && // and arrays with top-level validators\n      _pathType.$embeddedSchemaType.validators.length === 0) {\n      paths.delete(path);\n    }\n  }\n\n  for (const path of paths) {\n    // Single nested paths (paths embedded under single nested subdocs) will\n    // be validated on their own when we call `validate()` on the subdoc itself.\n    // Re: gh-8468\n    if (doc.$__schema.singleNestedPaths.hasOwnProperty(path)) {\n      paths.delete(path);\n      continue;\n    }\n  }\n\n  if (Array.isArray(pathsToValidate)) {\n    paths = _handlePathsToValidate(paths, pathsToValidate);\n  } else if (Array.isArray(pathsToSkip)) {\n    paths = _handlePathsToSkip(paths, pathsToSkip);\n  }\n\n  // from here on we're not removing items from paths\n\n  // gh-661: if a whole array is modified, make sure to run validation on all\n  // the children as well\n  for (const path of paths) {\n    const _pathType = doc.$__schema.path(path);\n    if (!_pathType) {\n      continue;\n    }\n\n    if (!_pathType.$isMongooseArray ||\n        // To avoid potential performance issues, skip doc arrays whose children\n        // are not required. `getPositionalPathType()` may be slow, so avoid\n        // it unless we have a case of #6364\n        (!Array.isArray(_pathType) &&\n          _pathType.$isMongooseDocumentArray &&\n          !(_pathType && _pathType.schemaOptions && _pathType.schemaOptions.required))) {\n      continue;\n    }\n\n    // gh-11380: optimization. If the array isn't a document array and there's no validators\n    // on the array type, there's no need to run validation on the individual array elements.\n    if (_pathType.$isMongooseArray &&\n        !_pathType.$isMongooseDocumentArray && // Skip document arrays...\n        !_pathType.$embeddedSchemaType.$isMongooseArray && // and arrays of arrays\n        _pathType.$embeddedSchemaType.validators.length === 0) {\n      continue;\n    }\n\n    const val = doc.$__getValue(path);\n    _pushNestedArrayPaths(val, paths, path);\n  }\n\n  function _pushNestedArrayPaths(val, paths, path) {\n    if (val != null) {\n      const numElements = val.length;\n      for (let j = 0; j < numElements; ++j) {\n        if (Array.isArray(val[j])) {\n          _pushNestedArrayPaths(val[j], paths, path + '.' + j);\n        } else {\n          paths.add(path + '.' + j);\n        }\n      }\n    }\n  }\n\n  const flattenOptions = { skipArrays: true };\n  for (const pathToCheck of paths) {\n    if (doc.$__schema.nested[pathToCheck]) {\n      let _v = doc.$__getValue(pathToCheck);\n      if (isMongooseObject(_v)) {\n        _v = _v.toObject({ transform: false });\n      }\n      const flat = flatten(_v, pathToCheck, flattenOptions, doc.$__schema);\n      Object.keys(flat).forEach(addToPaths);\n    }\n  }\n\n  for (const path of paths) {\n    const _pathType = doc.$__schema.path(path);\n\n    if (!_pathType) {\n      continue;\n    }\n\n    // If underneath a document array, may need to re-validate the parent\n    // array re: gh-6818. Do this _after_ adding subpaths, because\n    // we don't want to add every array subpath.\n    if (_pathType.$parentSchemaDocArray && typeof _pathType.$parentSchemaDocArray.path === 'string') {\n      paths.add(_pathType.$parentSchemaDocArray.path);\n    }\n\n    if (!_pathType.$isSchemaMap) {\n      continue;\n    }\n\n    const val = doc.$__getValue(path);\n    if (val == null) {\n      continue;\n    }\n    for (const key of val.keys()) {\n      paths.add(path + '.' + key);\n    }\n  }\n\n  paths = Array.from(paths);\n  return [paths, doValidateOptions];\n}\n\n/*!\n * ignore\n */\n\nDocument.prototype.$__validate = function(pathsToValidate, options, callback) {\n  if (typeof pathsToValidate === 'function') {\n    callback = pathsToValidate;\n    options = null;\n    pathsToValidate = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  const hasValidateModifiedOnlyOption = options &&\n      (typeof options === 'object') &&\n      ('validateModifiedOnly' in options);\n\n  const pathsToSkip = (options && options.pathsToSkip) || null;\n\n  let shouldValidateModifiedOnly;\n  if (hasValidateModifiedOnlyOption) {\n    shouldValidateModifiedOnly = !!options.validateModifiedOnly;\n  } else {\n    shouldValidateModifiedOnly = this.$__schema.options.validateModifiedOnly;\n  }\n\n  const _this = this;\n  const _complete = () => {\n    let validationError = this.$__.validationError;\n    this.$__.validationError = null;\n    this.$__.validating = null;\n\n    if (shouldValidateModifiedOnly && validationError != null) {\n      // Remove any validation errors that aren't from modified paths\n      const errors = Object.keys(validationError.errors);\n      for (const errPath of errors) {\n        if (!this.$isModified(errPath)) {\n          delete validationError.errors[errPath];\n        }\n      }\n      if (Object.keys(validationError.errors).length === 0) {\n        validationError = void 0;\n      }\n    }\n\n    this.$__.cachedRequired = {};\n    this.$emit('validate', _this);\n    this.constructor.emit('validate', _this);\n\n    if (validationError) {\n      for (const key in validationError.errors) {\n        // Make sure cast errors persist\n        if (!this[documentArrayParent] &&\n            validationError.errors[key] instanceof MongooseError.CastError) {\n          this.invalidate(key, validationError.errors[key]);\n        }\n      }\n\n      return validationError;\n    }\n  };\n\n  // only validate required fields when necessary\n  const pathDetails = _getPathsToValidate(this, pathsToValidate, pathsToSkip);\n  const paths = shouldValidateModifiedOnly ?\n    pathDetails[0].filter((path) => this.$isModified(path)) :\n    pathDetails[0];\n  const doValidateOptionsByPath = pathDetails[1];\n  if (typeof pathsToValidate === 'string') {\n    pathsToValidate = pathsToValidate.split(' ');\n  }\n\n  if (paths.length === 0) {\n    return immediate(function() {\n      const error = _complete();\n      if (error) {\n        return _this.$__schema.s.hooks.execPost('validate:error', _this, [_this], { error: error }, function(error) {\n          callback(error);\n        });\n      }\n      callback(null, _this);\n    });\n  }\n\n  const validated = {};\n  let total = 0;\n\n  for (const path of paths) {\n    validatePath(path);\n  }\n\n  function validatePath(path) {\n    if (path == null || validated[path]) {\n      return;\n    }\n\n    validated[path] = true;\n    total++;\n\n    immediate(function() {\n      const schemaType = _this.$__schema.path(path);\n\n      if (!schemaType) {\n        return --total || complete();\n      }\n\n      // If user marked as invalid or there was a cast error, don't validate\n      if (!_this.$isValid(path)) {\n        --total || complete();\n        return;\n      }\n\n      // If setting a path under a mixed path, avoid using the mixed path validator (gh-10141)\n      if (schemaType[schemaMixedSymbol] != null && path !== schemaType.path) {\n        return --total || complete();\n      }\n\n      let val = _this.$__getValue(path);\n\n      // If you `populate()` and get back a null value, required validators\n      // shouldn't fail (gh-8018). We should always fall back to the populated\n      // value.\n      let pop;\n      if ((pop = _this.$populated(path))) {\n        val = pop;\n      } else if (val != null && val.$__ != null && val.$__.wasPopulated) {\n        // Array paths, like `somearray.1`, do not show up as populated with `$populated()`,\n        // so in that case pull out the document's id\n        val = val._id;\n      }\n      const scope = _this.$__.pathsToScopes != null && path in _this.$__.pathsToScopes ?\n        _this.$__.pathsToScopes[path] :\n        _this;\n\n      const doValidateOptions = {\n        ...doValidateOptionsByPath[path],\n        path: path,\n        validateModifiedOnly: shouldValidateModifiedOnly\n      };\n\n      schemaType.doValidate(val, function(err) {\n        if (err) {\n          const isSubdoc = schemaType.$isSingleNested ||\n              schemaType.$isArraySubdocument ||\n              schemaType.$isMongooseDocumentArray;\n          if (isSubdoc && err instanceof ValidationError) {\n            return --total || complete();\n          }\n          _this.invalidate(path, err, undefined, true);\n        }\n        --total || complete();\n      }, scope, doValidateOptions);\n    });\n  }\n\n  function complete() {\n    const error = _complete();\n    if (error) {\n      return _this.$__schema.s.hooks.execPost('validate:error', _this, [_this], { error: error }, function(error) {\n        callback(error);\n      });\n    }\n    callback(null, _this);\n  }\n\n};\n\n/*!\n * ignore\n */\n\nfunction _handlePathsToValidate(paths, pathsToValidate) {\n  const _pathsToValidate = new Set(pathsToValidate);\n  const parentPaths = new Map([]);\n  for (const path of pathsToValidate) {\n    if (path.indexOf('.') === -1) {\n      continue;\n    }\n    const pieces = path.split('.');\n    let cur = pieces[0];\n    for (let i = 1; i < pieces.length; ++i) {\n      // Since we skip subpaths under single nested subdocs to\n      // avoid double validation, we need to add back the\n      // single nested subpath if the user asked for it (gh-8626)\n      parentPaths.set(cur, path);\n      cur = cur + '.' + pieces[i];\n    }\n  }\n\n  const ret = new Set();\n  for (const path of paths) {\n    if (_pathsToValidate.has(path)) {\n      ret.add(path);\n    } else if (parentPaths.has(path)) {\n      ret.add(parentPaths.get(path));\n    }\n  }\n  return ret;\n}\n\n/*!\n * ignore\n */\n\nfunction _handlePathsToSkip(paths, pathsToSkip) {\n  pathsToSkip = new Set(pathsToSkip);\n  paths = Array.from(paths).filter(p => !pathsToSkip.has(p));\n  return new Set(paths);\n}\n\n/**\n * Executes registered validation rules (skipping asynchronous validators) for this document.\n *\n * #### Note:\n *\n * This method is useful if you need synchronous validation.\n *\n * #### Example:\n *\n *     const err = doc.validateSync();\n *     if (err) {\n *       handleError(err);\n *     } else {\n *       // validation passed\n *     }\n *\n * @param {Array|string} [pathsToValidate] only validate the given paths\n * @param {Object} [options] options for validation\n * @param {Boolean} [options.validateModifiedOnly=false] If `true`, Mongoose will only validate modified paths, as opposed to modified paths and `required` paths.\n * @param {Array|string} [options.pathsToSkip] list of paths to skip. If set, Mongoose will validate every modified path that is not in this list.\n * @return {ValidationError|undefined} ValidationError if there are errors during validation, or undefined if there is no error.\n * @api public\n */\n\nDocument.prototype.validateSync = function(pathsToValidate, options) {\n  const _this = this;\n\n  if (arguments.length === 1 && typeof arguments[0] === 'object' && !Array.isArray(arguments[0])) {\n    options = arguments[0];\n    pathsToValidate = null;\n  }\n\n  const hasValidateModifiedOnlyOption = options &&\n      (typeof options === 'object') &&\n      ('validateModifiedOnly' in options);\n\n  let shouldValidateModifiedOnly;\n  if (hasValidateModifiedOnlyOption) {\n    shouldValidateModifiedOnly = !!options.validateModifiedOnly;\n  } else {\n    shouldValidateModifiedOnly = this.$__schema.options.validateModifiedOnly;\n  }\n\n  let pathsToSkip = options && options.pathsToSkip;\n\n  if (typeof pathsToValidate === 'string') {\n    const isOnePathOnly = pathsToValidate.indexOf(' ') === -1;\n    pathsToValidate = isOnePathOnly ? [pathsToValidate] : pathsToValidate.split(' ');\n  } else if (typeof pathsToSkip === 'string' && pathsToSkip.indexOf(' ') !== -1) {\n    pathsToSkip = pathsToSkip.split(' ');\n  }\n\n  // only validate required fields when necessary\n  const pathDetails = _getPathsToValidate(this, pathsToValidate, pathsToSkip);\n  const paths = shouldValidateModifiedOnly ?\n    pathDetails[0].filter((path) => this.$isModified(path)) :\n    pathDetails[0];\n  const skipSchemaValidators = pathDetails[1];\n\n  const validating = {};\n\n  for (let i = 0, len = paths.length; i < len; ++i) {\n    const path = paths[i];\n\n    if (validating[path]) {\n      continue;\n    }\n\n    validating[path] = true;\n\n    const p = _this.$__schema.path(path);\n    if (!p) {\n      continue;\n    }\n    if (!_this.$isValid(path)) {\n      continue;\n    }\n\n    const val = _this.$__getValue(path);\n    const err = p.doValidateSync(val, _this, {\n      skipSchemaValidators: skipSchemaValidators[path],\n      path: path,\n      validateModifiedOnly: shouldValidateModifiedOnly\n    });\n    if (err) {\n      const isSubdoc = p.$isSingleNested ||\n        p.$isArraySubdocument ||\n        p.$isMongooseDocumentArray;\n      if (isSubdoc && err instanceof ValidationError) {\n        continue;\n      }\n      _this.invalidate(path, err, undefined, true);\n    }\n  }\n\n  const err = _this.$__.validationError;\n  _this.$__.validationError = undefined;\n  _this.$emit('validate', _this);\n  _this.constructor.emit('validate', _this);\n\n  if (err) {\n    for (const key in err.errors) {\n      // Make sure cast errors persist\n      if (err.errors[key] instanceof MongooseError.CastError) {\n        _this.invalidate(key, err.errors[key]);\n      }\n    }\n  }\n\n  return err;\n};\n\n/**\n * Marks a path as invalid, causing validation to fail.\n *\n * The `errorMsg` argument will become the message of the `ValidationError`.\n *\n * The `value` argument (if passed) will be available through the `ValidationError.value` property.\n *\n *     doc.invalidate('size', 'must be less than 20', 14);\n *\n *     doc.validate(function (err) {\n *       console.log(err)\n *       // prints\n *       { message: 'Validation failed',\n *         name: 'ValidationError',\n *         errors:\n *          { size:\n *             { message: 'must be less than 20',\n *               name: 'ValidatorError',\n *               path: 'size',\n *               type: 'user defined',\n *               value: 14 } } }\n *     })\n *\n * @param {String} path the field to invalidate. For array elements, use the `array.i.field` syntax, where `i` is the 0-based index in the array.\n * @param {String|Error} err the error which states the reason `path` was invalid\n * @param {Object|String|Number|any} val optional invalid value\n * @param {String} [kind] optional `kind` property for the error\n * @return {ValidationError} the current ValidationError, with all currently invalidated paths\n * @api public\n */\n\nDocument.prototype.invalidate = function(path, err, val, kind) {\n  if (!this.$__.validationError) {\n    this.$__.validationError = new ValidationError(this);\n  }\n\n  if (this.$__.validationError.errors[path]) {\n    return;\n  }\n\n  if (!err || typeof err === 'string') {\n    err = new ValidatorError({\n      path: path,\n      message: err,\n      type: kind || 'user defined',\n      value: val\n    });\n  }\n\n  if (this.$__.validationError === err) {\n    return this.$__.validationError;\n  }\n\n  this.$__.validationError.addError(path, err);\n  return this.$__.validationError;\n};\n\n/**\n * Marks a path as valid, removing existing validation errors.\n *\n * @param {String} path the field to mark as valid\n * @api public\n * @memberOf Document\n * @instance\n * @method $markValid\n */\n\nDocument.prototype.$markValid = function(path) {\n  if (!this.$__.validationError || !this.$__.validationError.errors[path]) {\n    return;\n  }\n\n  delete this.$__.validationError.errors[path];\n  if (Object.keys(this.$__.validationError.errors).length === 0) {\n    this.$__.validationError = null;\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction _markValidSubpaths(doc, path) {\n  if (!doc.$__.validationError) {\n    return;\n  }\n\n  const keys = Object.keys(doc.$__.validationError.errors);\n  for (const key of keys) {\n    if (key.startsWith(path + '.')) {\n      delete doc.$__.validationError.errors[key];\n    }\n  }\n  if (Object.keys(doc.$__.validationError.errors).length === 0) {\n    doc.$__.validationError = null;\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _checkImmutableSubpaths(subdoc, schematype, priorVal) {\n  const schema = schematype.schema;\n  if (schema == null) {\n    return;\n  }\n\n  for (const key of Object.keys(schema.paths)) {\n    const path = schema.paths[key];\n    if (path.$immutableSetter == null) {\n      continue;\n    }\n    const oldVal = priorVal == null ? void 0 : priorVal.$__getValue(key);\n    // Calling immutableSetter with `oldVal` even though it expects `newVal`\n    // is intentional. That's because `$immutableSetter` compares its param\n    // to the current value.\n    path.$immutableSetter.call(subdoc, oldVal);\n  }\n}\n\n/**\n * Saves this document by inserting a new document into the database if [document.isNew](https://mongoosejs.com/docs/api/document.html#Document.prototype.isNew()) is `true`,\n * or sends an [updateOne](https://mongoosejs.com/docs/api/document.html#Document.prototype.updateOne()) operation **only** with the modifications to the database, it does not replace the whole document in the latter case.\n *\n * #### Example:\n *\n *     product.sold = Date.now();\n *     product = await product.save();\n *\n * If save is successful, the returned promise will fulfill with the document\n * saved.\n *\n * #### Example:\n *\n *     const newProduct = await product.save();\n *     newProduct === product; // true\n *\n * @param {Object} [options] options optional options\n * @param {Session} [options.session=null] the [session](https://www.mongodb.com/docs/manual/reference/server-sessions/) associated with this save operation. If not specified, defaults to the [document's associated session](https://mongoosejs.com/docs/api/document.html#Document.prototype.$session()).\n * @param {Object} [options.safe] (DEPRECATED) overrides [schema's safe option](https://mongoosejs.com/docs/guide.html#safe). Use the `w` option instead.\n * @param {Boolean} [options.validateBeforeSave] set to false to save without validating.\n * @param {Boolean} [options.validateModifiedOnly=false] If `true`, Mongoose will only validate modified paths, as opposed to modified paths and `required` paths.\n * @param {Number|String} [options.w] set the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/#w-option). Overrides the [schema-level `writeConcern` option](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Boolean} [options.j] set to true for MongoDB to wait until this `save()` has been [journaled before resolving the returned promise](https://www.mongodb.com/docs/manual/reference/write-concern/#j-option). Overrides the [schema-level `writeConcern` option](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Number} [options.wtimeout] sets a [timeout for the write concern](https://www.mongodb.com/docs/manual/reference/write-concern/#wtimeout). Overrides the [schema-level `writeConcern` option](https://mongoosejs.com/docs/guide.html#writeConcern).\n * @param {Boolean} [options.checkKeys=true] the MongoDB driver prevents you from saving keys that start with '$' or contain '.' by default. Set this option to `false` to skip that check. See [restrictions on field names](https://www.mongodb.com/docs/manual/reference/limits/#Restrictions-on-Field-Names)\n * @param {Boolean} [options.timestamps=true] if `false` and [timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this `save()`.\n * @param {Function} [fn] optional callback\n * @method save\n * @memberOf Document\n * @instance\n * @throws {DocumentNotFoundError} if this [save updates an existing document](https://mongoosejs.com/docs/api/document.html#Document.prototype.isNew()) but the document doesn't exist in the database. For example, you will get this error if the document is [deleted between when you retrieved the document and when you saved it](documents.html#updating).\n * @return {Promise|undefined} Returns undefined if used with callback or a Promise otherwise.\n * @api public\n * @see middleware https://mongoosejs.com/docs/middleware.html\n */\n\n/**\n * Checks if a path is invalid\n *\n * @param {String|String[]} [path] the field to check. If unset will always return \"false\"\n * @method $isValid\n * @memberOf Document\n * @instance\n * @api private\n */\n\nDocument.prototype.$isValid = function(path) {\n  if (this.$__.validationError == null || Object.keys(this.$__.validationError.errors).length === 0) {\n    return true;\n  }\n  if (path == null) {\n    return false;\n  }\n\n  if (path.indexOf(' ') !== -1) {\n    path = path.split(' ');\n  }\n  if (Array.isArray(path)) {\n    return path.some(p => this.$__.validationError.errors[p] == null);\n  }\n\n  return this.$__.validationError.errors[path] == null;\n};\n\n/**\n * Resets the internal modified state of this document.\n *\n * @api private\n * @return {Document} this\n * @method $__reset\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__reset = function reset() {\n  let _this = this;\n\n  // Skip for subdocuments\n  const subdocs = this.$parent() === this ? this.$getAllSubdocs() : [];\n  const resetArrays = new Set();\n  for (const subdoc of subdocs) {\n    const fullPathWithIndexes = subdoc.$__fullPathWithIndexes();\n    subdoc.$__reset();\n    if (this.isModified(fullPathWithIndexes) || isParentInit(fullPathWithIndexes)) {\n      if (subdoc.$isDocumentArrayElement) {\n        resetArrays.add(subdoc.parentArray());\n      } else {\n        const parent = subdoc.$parent();\n        if (parent === this) {\n          this.$__.activePaths.clearPath(subdoc.$basePath);\n        } else if (parent != null && parent.$isSubdocument) {\n          // If map path underneath subdocument, may end up with a case where\n          // map path is modified but parent still needs to be reset. See gh-10295\n          parent.$__reset();\n        }\n      }\n    }\n  }\n\n  for (const array of resetArrays) {\n    this.$__.activePaths.clearPath(array.$path());\n    array[arrayAtomicsBackupSymbol] = array[arrayAtomicsSymbol];\n    array[arrayAtomicsSymbol] = {};\n  }\n\n  function isParentInit(path) {\n    path = path.indexOf('.') === -1 ? [path] : path.split('.');\n    let cur = '';\n    for (let i = 0; i < path.length; ++i) {\n      cur += (cur.length ? '.' : '') + path[i];\n      if (_this.$__.activePaths[cur] === 'init') {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // clear atomics\n  this.$__dirty().forEach(function(dirt) {\n    const type = dirt.value;\n\n    if (type && type[arrayAtomicsSymbol]) {\n      type[arrayAtomicsBackupSymbol] = type[arrayAtomicsSymbol];\n      type[arrayAtomicsSymbol] = {};\n    }\n  });\n\n  this.$__.backup = {};\n  this.$__.backup.activePaths = {\n    modify: Object.assign({}, this.$__.activePaths.getStatePaths('modify')),\n    default: Object.assign({}, this.$__.activePaths.getStatePaths('default'))\n  };\n  this.$__.backup.validationError = this.$__.validationError;\n  this.$__.backup.errors = this.$errors;\n\n  // Clear 'dirty' cache\n  this.$__.activePaths.clear('modify');\n  this.$__.activePaths.clear('default');\n  this.$__.validationError = undefined;\n  this.$errors = undefined;\n  _this = this;\n  this.$__schema.requiredPaths().forEach(function(path) {\n    _this.$__.activePaths.require(path);\n  });\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nDocument.prototype.$__undoReset = function $__undoReset() {\n  if (this.$__.backup == null || this.$__.backup.activePaths == null) {\n    return;\n  }\n\n  this.$__.activePaths.states.modify = this.$__.backup.activePaths.modify;\n  this.$__.activePaths.states.default = this.$__.backup.activePaths.default;\n\n  this.$__.validationError = this.$__.backup.validationError;\n  this.$errors = this.$__.backup.errors;\n\n  for (const dirt of this.$__dirty()) {\n    const type = dirt.value;\n\n    if (type && type[arrayAtomicsSymbol] && type[arrayAtomicsBackupSymbol]) {\n      type[arrayAtomicsSymbol] = type[arrayAtomicsBackupSymbol];\n    }\n  }\n\n  for (const subdoc of this.$getAllSubdocs()) {\n    subdoc.$__undoReset();\n  }\n};\n\n/**\n * Returns this documents dirty paths / vals.\n *\n * @return {Array}\n * @api private\n * @method $__dirty\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__dirty = function() {\n  const _this = this;\n  let all = this.$__.activePaths.map('modify', function(path) {\n    return {\n      path: path,\n      value: _this.$__getValue(path),\n      schema: _this.$__path(path)\n    };\n  });\n\n  // gh-2558: if we had to set a default and the value is not undefined,\n  // we have to save as well\n  all = all.concat(this.$__.activePaths.map('default', function(path) {\n    if (path === '_id' || _this.$__getValue(path) == null) {\n      return;\n    }\n    return {\n      path: path,\n      value: _this.$__getValue(path),\n      schema: _this.$__path(path)\n    };\n  }));\n\n  const allPaths = new Map(all.filter((el) => el != null).map((el) => [el.path, el.value]));\n  // Ignore \"foo.a\" if \"foo\" is dirty already.\n  const minimal = [];\n\n  all.forEach(function(item) {\n    if (!item) {\n      return;\n    }\n\n    let top = null;\n\n    const array = parentPaths(item.path);\n    for (let i = 0; i < array.length - 1; i++) {\n      if (allPaths.has(array[i])) {\n        top = allPaths.get(array[i]);\n        break;\n      }\n    }\n    if (top == null) {\n      minimal.push(item);\n    } else if (top != null &&\n        top[arrayAtomicsSymbol] != null &&\n        top.hasAtomics()) {\n      // special case for top level MongooseArrays\n      // the `top` array itself and a sub path of `top` are being set.\n      // the only way to honor all of both modifications is through a $set\n      // of entire array.\n      top[arrayAtomicsSymbol] = {};\n      top[arrayAtomicsSymbol].$set = top;\n    }\n  });\n  return minimal;\n};\n\n/**\n * Assigns/compiles `schema` into this documents prototype.\n *\n * @param {Schema} schema\n * @api private\n * @method $__setSchema\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__setSchema = function(schema) {\n  compile(schema.tree, this, undefined, schema.options);\n\n  // Apply default getters if virtual doesn't have any (gh-6262)\n  for (const key of Object.keys(schema.virtuals)) {\n    schema.virtuals[key]._applyDefaultGetters();\n  }\n  if (schema.path('schema') == null) {\n    this.schema = schema;\n  }\n  this.$__schema = schema;\n  this[documentSchemaSymbol] = schema;\n};\n\n\n/**\n * Get active path that were changed and are arrays\n *\n * @return {Array}\n * @api private\n * @method $__getArrayPathsToValidate\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__getArrayPathsToValidate = function() {\n  DocumentArray || (DocumentArray = __webpack_require__(/*! ./types/documentArray */ \"(ssr)/./node_modules/mongoose/lib/types/documentArray/index.js\"));\n\n  // validate all document arrays.\n  return this.$__.activePaths\n    .map('init', 'modify', function(i) {\n      return this.$__getValue(i);\n    }.bind(this))\n    .filter(function(val) {\n      return val && Array.isArray(val) && utils.isMongooseDocumentArray(val) && val.length;\n    }).reduce(function(seed, array) {\n      return seed.concat(array);\n    }, [])\n    .filter(function(doc) {\n      return doc;\n    });\n};\n\n\n/**\n * Get all subdocs (by bfs)\n *\n * @return {Array}\n * @api public\n * @method $getAllSubdocs\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$getAllSubdocs = function() {\n  DocumentArray || (DocumentArray = __webpack_require__(/*! ./types/documentArray */ \"(ssr)/./node_modules/mongoose/lib/types/documentArray/index.js\"));\n  Embedded = Embedded || __webpack_require__(/*! ./types/arraySubdocument */ \"(ssr)/./node_modules/mongoose/lib/types/arraySubdocument.js\");\n\n  function docReducer(doc, seed, path) {\n    let val = doc;\n    let isNested = false;\n    if (path) {\n      if (doc instanceof Document && doc[documentSchemaSymbol].paths[path]) {\n        val = doc._doc[path];\n      } else if (doc instanceof Document && doc[documentSchemaSymbol].nested[path]) {\n        val = doc._doc[path];\n        isNested = true;\n      } else {\n        val = doc[path];\n      }\n    }\n    if (val instanceof Embedded) {\n      seed.push(val);\n    } else if (val instanceof Map) {\n      seed = Array.from(val.keys()).reduce(function(seed, path) {\n        return docReducer(val.get(path), seed, null);\n      }, seed);\n    } else if (val && !Array.isArray(val) && val.$isSingleNested) {\n      seed = Object.keys(val._doc).reduce(function(seed, path) {\n        return docReducer(val, seed, path);\n      }, seed);\n      seed.push(val);\n    } else if (val && utils.isMongooseDocumentArray(val)) {\n      val.forEach(function _docReduce(doc) {\n        if (!doc || !doc._doc) {\n          return;\n        }\n        seed = Object.keys(doc._doc).reduce(function(seed, path) {\n          return docReducer(doc._doc, seed, path);\n        }, seed);\n        if (doc instanceof Embedded) {\n          seed.push(doc);\n        }\n      });\n    } else if (isNested && val != null) {\n      for (const path of Object.keys(val)) {\n        docReducer(val, seed, path);\n      }\n    }\n    return seed;\n  }\n\n  const subDocs = [];\n  for (const path of Object.keys(this._doc)) {\n    docReducer(this, subDocs, path);\n  }\n\n  return subDocs;\n};\n\n/*!\n * Runs queued functions\n */\n\nfunction applyQueue(doc) {\n  const q = doc.$__schema && doc.$__schema.callQueue;\n  if (!q.length) {\n    return;\n  }\n\n  for (const pair of q) {\n    if (pair[0] !== 'pre' && pair[0] !== 'post' && pair[0] !== 'on') {\n      doc[pair[0]].apply(doc, pair[1]);\n    }\n  }\n}\n\n/*!\n * ignore\n */\n\nDocument.prototype.$__handleReject = function handleReject(err) {\n  // emit on the Model if listening\n  if (this.$listeners('error').length) {\n    this.$emit('error', err);\n  } else if (this.constructor.listeners && this.constructor.listeners('error').length) {\n    this.constructor.emit('error', err);\n  }\n};\n\n/**\n * Internal helper for toObject() and toJSON() that doesn't manipulate options\n *\n * @return {Object}\n * @api private\n * @method $toObject\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$toObject = function(options, json) {\n  let defaultOptions = {\n    transform: true,\n    flattenDecimals: true\n  };\n\n  const path = json ? 'toJSON' : 'toObject';\n  const baseOptions = this.constructor &&\n    this.constructor.base &&\n    this.constructor.base.options &&\n    get(this.constructor.base.options, path) || {};\n  const schemaOptions = this.$__schema && this.$__schema.options || {};\n  // merge base default options with Schema's set default options if available.\n  // `clone` is necessary here because `utils.options` directly modifies the second input.\n  defaultOptions = { ...defaultOptions, ...baseOptions, ...schemaOptions[path] };\n\n  // If options do not exist or is not an object, set it to empty object\n  options = utils.isPOJO(options) ? { ...options } : {};\n  options._calledWithOptions = options._calledWithOptions || { ...options };\n\n  let _minimize;\n  if (options._calledWithOptions.minimize != null) {\n    _minimize = options.minimize;\n  } else if (defaultOptions.minimize != null) {\n    _minimize = defaultOptions.minimize;\n  } else {\n    _minimize = schemaOptions.minimize;\n  }\n\n  let flattenMaps;\n  if (options._calledWithOptions.flattenMaps != null) {\n    flattenMaps = options.flattenMaps;\n  } else if (defaultOptions.flattenMaps != null) {\n    flattenMaps = defaultOptions.flattenMaps;\n  } else {\n    flattenMaps = schemaOptions.flattenMaps;\n  }\n\n  let flattenObjectIds;\n  if (options._calledWithOptions.flattenObjectIds != null) {\n    flattenObjectIds = options.flattenObjectIds;\n  } else if (defaultOptions.flattenObjectIds != null) {\n    flattenObjectIds = defaultOptions.flattenObjectIds;\n  } else {\n    flattenObjectIds = schemaOptions.flattenObjectIds;\n  }\n\n  // The original options that will be passed to `clone()`. Important because\n  // `clone()` will recursively call `$toObject()` on embedded docs, so we\n  // need the original options the user passed in, plus `_isNested` and\n  // `_parentOptions` for checking whether we need to depopulate.\n  const cloneOptions = Object.assign({}, options, {\n    _isNested: true,\n    json: json,\n    minimize: _minimize,\n    flattenMaps: flattenMaps,\n    flattenObjectIds: flattenObjectIds,\n    _seen: (options && options._seen) || new Map()\n  });\n\n  if (utils.hasUserDefinedProperty(options, 'getters')) {\n    cloneOptions.getters = options.getters;\n  }\n  if (utils.hasUserDefinedProperty(options, 'virtuals')) {\n    cloneOptions.virtuals = options.virtuals;\n  }\n\n  const depopulate = options.depopulate ||\n    (options._parentOptions && options._parentOptions.depopulate || false);\n  // _isNested will only be true if this is not the top level document, we\n  // should never depopulate the top-level document\n  if (depopulate && options._isNested && this.$__.wasPopulated) {\n    return clone(this.$__.wasPopulated.value || this._id, cloneOptions);\n  }\n\n  // merge default options with input options.\n  options = { ...defaultOptions, ...options };\n  options._isNested = true;\n  options.json = json;\n  options.minimize = _minimize;\n\n  cloneOptions._parentOptions = options;\n  cloneOptions._skipSingleNestedGetters = false;\n\n  const gettersOptions = Object.assign({}, cloneOptions);\n  gettersOptions._skipSingleNestedGetters = true;\n\n  // remember the root transform function\n  // to save it from being overwritten by sub-transform functions\n  const originalTransform = options.transform;\n\n  let ret = clone(this._doc, cloneOptions) || {};\n\n  if (options.getters) {\n    applyGetters(this, ret, gettersOptions);\n\n    if (options.minimize) {\n      ret = minimize(ret) || {};\n    }\n  }\n\n  if (options.virtuals || (options.getters && options.virtuals !== false)) {\n    applyVirtuals(this, ret, gettersOptions, options);\n  }\n\n  if (options.versionKey === false && this.$__schema.options.versionKey) {\n    delete ret[this.$__schema.options.versionKey];\n  }\n\n  let transform = options.transform;\n\n  // In the case where a subdocument has its own transform function, we need to\n  // check and see if the parent has a transform (options.transform) and if the\n  // child schema has a transform (this.schema.options.toObject) In this case,\n  // we need to adjust options.transform to be the child schema's transform and\n  // not the parent schema's\n  if (transform) {\n    applySchemaTypeTransforms(this, ret);\n  }\n\n  if (options.useProjection) {\n    omitDeselectedFields(this, ret);\n  }\n\n  if (transform === true || (schemaOptions.toObject && transform)) {\n    const opts = options.json ? schemaOptions.toJSON : schemaOptions.toObject;\n\n    if (opts) {\n      transform = (typeof options.transform === 'function' ? options.transform : opts.transform);\n    }\n  } else {\n    options.transform = originalTransform;\n  }\n\n  if (typeof transform === 'function') {\n    const xformed = transform(this, ret, options);\n    if (typeof xformed !== 'undefined') {\n      ret = xformed;\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Converts this document into a plain-old JavaScript object ([POJO](https://masteringjs.io/tutorials/fundamentals/pojo)).\n *\n * Buffers are converted to instances of [mongodb.Binary](https://mongodb.github.io/node-mongodb-native/4.9/classes/Binary.html) for proper storage.\n *\n * #### Getters/Virtuals\n *\n * Example of only applying path getters\n *\n *     doc.toObject({ getters: true, virtuals: false })\n *\n * Example of only applying virtual getters\n *\n *     doc.toObject({ virtuals: true })\n *\n * Example of applying both path and virtual getters\n *\n *     doc.toObject({ getters: true })\n *\n * To apply these options to every document of your schema by default, set your [schemas](https://mongoosejs.com/docs/api/schema.html#Schema()) `toObject` option to the same argument.\n *\n *     schema.set('toObject', { virtuals: true })\n *\n * #### Transform:\n *\n * We may need to perform a transformation of the resulting object based on some criteria, say to remove some sensitive information or return a custom object. In this case we set the optional `transform` function.\n *\n * Transform functions receive three arguments\n *\n *     function (doc, ret, options) {}\n *\n * - `doc` The mongoose document which is being converted\n * - `ret` The plain object representation which has been converted\n * - `options` The options in use (either schema options or the options passed inline)\n *\n * #### Example:\n *\n *     // specify the transform schema option\n *     if (!schema.options.toObject) schema.options.toObject = {};\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       // remove the _id of every document before returning the result\n *       delete ret._id;\n *       return ret;\n *     }\n *\n *     // without the transformation in the schema\n *     doc.toObject(); // { _id: 'anId', name: 'Wreck-it Ralph' }\n *\n *     // with the transformation\n *     doc.toObject(); // { name: 'Wreck-it Ralph' }\n *\n * With transformations we can do a lot more than remove properties. We can even return completely new customized objects:\n *\n *     if (!schema.options.toObject) schema.options.toObject = {};\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       return { movie: ret.name }\n *     }\n *\n *     // without the transformation in the schema\n *     doc.toObject(); // { _id: 'anId', name: 'Wreck-it Ralph' }\n *\n *     // with the transformation\n *     doc.toObject(); // { movie: 'Wreck-it Ralph' }\n *\n * _Note: if a transform function returns `undefined`, the return value will be ignored._\n *\n * Transformations may also be applied inline, overridding any transform set in the schema options.\n * Any transform function specified in `toObject` options also propagates to any subdocuments.\n *\n *     function deleteId(doc, ret, options) {\n *       delete ret._id;\n *       return ret;\n *     }\n *\n *     const schema = mongoose.Schema({ name: String, docArr: [{ name: String }] });\n *     const TestModel = mongoose.model('Test', schema);\n *\n *     const doc = new TestModel({ name: 'test', docArr: [{ name: 'test' }] });\n *\n *     // pass the transform as an inline option. Deletes `_id` property\n *     // from both the top-level document and the subdocument.\n *     const obj = doc.toObject({ transform: deleteId });\n *     obj._id; // undefined\n *     obj.docArr[0]._id; // undefined\n *\n * If you want to skip transformations, use `transform: false`:\n *\n *     schema.options.toObject.hide = '_id';\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       if (options.hide) {\n *         options.hide.split(' ').forEach(function (prop) {\n *           delete ret[prop];\n *         });\n *       }\n *       return ret;\n *     }\n *\n *     const doc = new Doc({ _id: 'anId', secret: 47, name: 'Wreck-it Ralph' });\n *     doc.toObject();                                        // { secret: 47, name: 'Wreck-it Ralph' }\n *     doc.toObject({ hide: 'secret _id', transform: false });// { _id: 'anId', secret: 47, name: 'Wreck-it Ralph' }\n *     doc.toObject({ hide: 'secret _id', transform: true }); // { name: 'Wreck-it Ralph' }\n *\n * If you pass a transform in `toObject()` options, Mongoose will apply the transform\n * to [subdocuments](https://mongoosejs.com/docs/subdocs.html) in addition to the top-level document.\n * Similarly, `transform: false` skips transforms for all subdocuments.\n * Note that this behavior is different for transforms defined in the schema:\n * if you define a transform in `schema.options.toObject.transform`, that transform\n * will **not** apply to subdocuments.\n *\n *     const memberSchema = new Schema({ name: String, email: String });\n *     const groupSchema = new Schema({ members: [memberSchema], name: String, email });\n *     const Group = mongoose.model('Group', groupSchema);\n *\n *     const doc = new Group({\n *       name: 'Engineering',\n *       email: 'dev@mongoosejs.io',\n *       members: [{ name: 'Val', email: 'val@mongoosejs.io' }]\n *     });\n *\n *     // Removes `email` from both top-level document **and** array elements\n *     // { name: 'Engineering', members: [{ name: 'Val' }] }\n *     doc.toObject({ transform: (doc, ret) => { delete ret.email; return ret; } });\n *\n * Transforms, like all of these options, are also available for `toJSON`. See [this guide to `JSON.stringify()`](https://thecodebarbarian.com/the-80-20-guide-to-json-stringify-in-javascript.html) to learn why `toJSON()` and `toObject()` are separate functions.\n *\n * See [schema options](https://mongoosejs.com/docs/guide.html#toObject) for some more details.\n *\n * _During save, no custom options are applied to the document before being sent to the database._\n *\n * @param {Object} [options]\n * @param {Boolean} [options.getters=false] if true, apply all getters, including virtuals\n * @param {Boolean|Object} [options.virtuals=false] if true, apply virtuals, including aliases. Use `{ getters: true, virtuals: false }` to just apply getters, not virtuals. An object of the form `{ pathsToSkip: ['someVirtual'] }` may also be used to omit specific virtuals.\n * @param {Boolean} [options.aliases=true] if `options.virtuals = true`, you can set `options.aliases = false` to skip applying aliases. This option is a no-op if `options.virtuals = false`.\n * @param {Boolean} [options.minimize=true] if true, omit any empty objects from the output\n * @param {Function|null} [options.transform=null] if set, mongoose will call this function to allow you to transform the returned object\n * @param {Boolean} [options.depopulate=false] if true, replace any conventionally populated paths with the original id in the output. Has no affect on virtual populated paths.\n * @param {Boolean} [options.versionKey=true] if false, exclude the version key (`__v` by default) from the output\n * @param {Boolean} [options.flattenMaps=false] if true, convert Maps to POJOs. Useful if you want to `JSON.stringify()` the result of `toObject()`.\n * @param {Boolean} [options.flattenObjectIds=false] if true, convert any ObjectIds in the result to 24 character hex strings.\n * @param {Boolean} [options.useProjection=false] - If true, omits fields that are excluded in this document's projection. Unless you specified a projection, this will omit any field that has `select: false` in the schema.\n * @return {Object} js object (not a POJO)\n * @see mongodb.Binary https://mongodb.github.io/node-mongodb-native/4.9/classes/Binary.html\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.toObject = function(options) {\n  return this.$toObject(options);\n};\n\n/*!\n * Applies virtuals properties to `json`.\n */\n\nfunction applyVirtuals(self, json, options, toObjectOptions) {\n  const schema = self.$__schema;\n  const paths = Object.keys(schema.virtuals);\n  let i = paths.length;\n  const numPaths = i;\n  let path;\n  let assignPath;\n  let cur = self._doc;\n  let v;\n  const aliases = typeof (toObjectOptions && toObjectOptions.aliases) === 'boolean'\n    ? toObjectOptions.aliases\n    : true;\n\n  let virtualsToApply = null;\n  if (Array.isArray(options.virtuals)) {\n    virtualsToApply = new Set(options.virtuals);\n  } else if (options.virtuals && options.virtuals.pathsToSkip) {\n    virtualsToApply = new Set(paths);\n    for (let i = 0; i < options.virtuals.pathsToSkip.length; i++) {\n      if (virtualsToApply.has(options.virtuals.pathsToSkip[i])) {\n        virtualsToApply.delete(options.virtuals.pathsToSkip[i]);\n      }\n    }\n  }\n\n  if (!cur) {\n    return json;\n  }\n\n  options = options || {};\n  for (i = 0; i < numPaths; ++i) {\n    path = paths[i];\n\n    if (virtualsToApply != null && !virtualsToApply.has(path)) {\n      continue;\n    }\n\n    // Allow skipping aliases with `toObject({ virtuals: true, aliases: false })`\n    if (!aliases && schema.aliases.hasOwnProperty(path)) {\n      continue;\n    }\n\n    // We may be applying virtuals to a nested object, for example if calling\n    // `doc.nestedProp.toJSON()`. If so, the path we assign to, `assignPath`,\n    // will be a trailing substring of the `path`.\n    assignPath = path;\n    if (options.path != null) {\n      if (!path.startsWith(options.path + '.')) {\n        continue;\n      }\n      assignPath = path.substring(options.path.length + 1);\n    }\n    const parts = assignPath.split('.');\n    v = clone(self.get(path), options);\n    if (v === void 0) {\n      continue;\n    }\n    const plen = parts.length;\n    cur = json;\n    for (let j = 0; j < plen - 1; ++j) {\n      cur[parts[j]] = cur[parts[j]] || {};\n      cur = cur[parts[j]];\n    }\n    cur[parts[plen - 1]] = v;\n  }\n\n  return json;\n}\n\n\n/**\n * Applies virtuals properties to `json`.\n *\n * @param {Document} self\n * @param {Object} json\n * @param {Object} [options]\n * @return {Object} `json`\n * @api private\n */\n\nfunction applyGetters(self, json, options) {\n  const schema = self.$__schema;\n  const paths = Object.keys(schema.paths);\n  let i = paths.length;\n  let path;\n  let cur = self._doc;\n  let v;\n\n  if (!cur) {\n    return json;\n  }\n\n  while (i--) {\n    path = paths[i];\n\n    const parts = path.split('.');\n\n    const plen = parts.length;\n    const last = plen - 1;\n    let branch = json;\n    let part;\n    cur = self._doc;\n\n    if (!self.$__isSelected(path)) {\n      continue;\n    }\n\n    for (let ii = 0; ii < plen; ++ii) {\n      part = parts[ii];\n      v = cur[part];\n      if (ii === last) {\n        const val = self.$get(path);\n        branch[part] = clone(val, options);\n        if (Array.isArray(branch[part]) && schema.paths[path].$embeddedSchemaType) {\n          for (let i = 0; i < branch[part].length; ++i) {\n            branch[part][i] = schema.paths[path].$embeddedSchemaType.applyGetters(\n              branch[part][i],\n              self\n            );\n          }\n        }\n      } else if (v == null) {\n        if (part in cur) {\n          branch[part] = v;\n        }\n        break;\n      } else {\n        branch = branch[part] || (branch[part] = {});\n      }\n      cur = v;\n    }\n  }\n\n  return json;\n}\n\n/**\n * Applies schema type transforms to `json`.\n *\n * @param {Document} self\n * @param {Object} json\n * @return {Object} `json`\n * @api private\n */\n\nfunction applySchemaTypeTransforms(self, json) {\n  const schema = self.$__schema;\n  const paths = Object.keys(schema.paths || {});\n  const cur = self._doc;\n\n  if (!cur) {\n    return json;\n  }\n\n  for (const path of paths) {\n    const schematype = schema.paths[path];\n    if (typeof schematype.options.transform === 'function') {\n      const val = self.$get(path);\n      if (val === undefined) {\n        continue;\n      }\n      const transformedValue = schematype.options.transform.call(self, val);\n      throwErrorIfPromise(path, transformedValue);\n      utils.setValue(path, transformedValue, json);\n    } else if (schematype.$embeddedSchemaType != null &&\n        typeof schematype.$embeddedSchemaType.options.transform === 'function') {\n      const val = self.$get(path);\n      if (val === undefined) {\n        continue;\n      }\n      const vals = [].concat(val);\n      const transform = schematype.$embeddedSchemaType.options.transform;\n      for (let i = 0; i < vals.length; ++i) {\n        const transformedValue = transform.call(self, vals[i]);\n        vals[i] = transformedValue;\n        throwErrorIfPromise(path, transformedValue);\n      }\n\n      json[path] = vals;\n    }\n  }\n\n  return json;\n}\n\nfunction throwErrorIfPromise(path, transformedValue) {\n  if (isPromise(transformedValue)) {\n    throw new Error('`transform` function must be synchronous, but the transform on path `' + path + '` returned a promise.');\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction omitDeselectedFields(self, json) {\n  const schema = self.$__schema;\n  const paths = Object.keys(schema.paths || {});\n  const cur = self._doc;\n\n  if (!cur) {\n    return json;\n  }\n\n  let selected = self.$__.selected;\n  if (selected === void 0) {\n    selected = {};\n    queryhelpers.applyPaths(selected, schema);\n  }\n  if (selected == null || Object.keys(selected).length === 0) {\n    return json;\n  }\n\n  for (const path of paths) {\n    if (selected[path] != null && !selected[path]) {\n      delete json[path];\n    }\n  }\n\n  return json;\n}\n\n/**\n * The return value of this method is used in calls to [`JSON.stringify(doc)`](https://thecodebarbarian.com/the-80-20-guide-to-json-stringify-in-javascript#the-tojson-function).\n *\n * This method accepts the same options as [Document#toObject](https://mongoosejs.com/docs/api/document.html#Document.prototype.toObject()). To apply the options to every document of your schema by default, set your [schemas](https://mongoosejs.com/docs/api/schema.html#Schema()) `toJSON` option to the same argument.\n *\n *     schema.set('toJSON', { virtuals: true });\n *\n * There is one difference between `toJSON()` and `toObject()` options.\n * When you call `toJSON()`, the [`flattenMaps` option](https://mongoosejs.com/docs/api/document.html#Document.prototype.toObject()) defaults to `true`, because `JSON.stringify()` doesn't convert maps to objects by default.\n * When you call `toObject()`, the `flattenMaps` option is `false` by default.\n *\n * See [schema options](https://mongoosejs.com/docs/guide.html#toJSON) for more information on setting `toJSON` option defaults.\n *\n * @param {Object} options\n * @param {Boolean} [options.flattenMaps=true] if true, convert Maps to [POJOs](https://masteringjs.io/tutorials/fundamentals/pojo). Useful if you want to `JSON.stringify()` the result.\n * @param {Boolean} [options.flattenObjectIds=false] if true, convert any ObjectIds in the result to 24 character hex strings.\n * @return {Object}\n * @see Document#toObject https://mongoosejs.com/docs/api/document.html#Document.prototype.toObject()\n * @see JSON.stringify() in JavaScript https://thecodebarbarian.com/the-80-20-guide-to-json-stringify-in-javascript.html\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.toJSON = function(options) {\n  return this.$toObject(options, true);\n};\n\n/*!\n * ignore\n */\n\nDocument.prototype.ownerDocument = function() {\n  return this;\n};\n\n\n/**\n * If this document is a subdocument or populated document, returns the document's\n * parent. Returns the original document if there is no parent.\n *\n * @return {Document}\n * @api public\n * @method parent\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.parent = function() {\n  if (this.$isSubdocument || this.$__.wasPopulated) {\n    return this.$__.parent;\n  }\n  return this;\n};\n\n/**\n * Alias for [`parent()`](https://mongoosejs.com/docs/api/document.html#Document.prototype.parent()). If this document is a subdocument or populated\n * document, returns the document's parent. Returns `undefined` otherwise.\n *\n * @return {Document}\n * @api public\n * @method $parent\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$parent = Document.prototype.parent;\n\n/**\n * Helper for console.log\n *\n * @return {String}\n * @api public\n * @method inspect\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.inspect = function(options) {\n  const isPOJO = utils.isPOJO(options);\n  let opts;\n  if (isPOJO) {\n    opts = options;\n    opts.minimize = false;\n  }\n\n  const ret = arguments.length > 0 ? this.toObject(opts) : this.toObject();\n\n  if (ret == null) {\n    // If `toObject()` returns null, `this` is still an object, so if `inspect()`\n    // prints out null this can cause some serious confusion. See gh-7942.\n    return 'MongooseDocument { ' + ret + ' }';\n  }\n\n  return ret;\n};\n\nif (inspect.custom) {\n  // Avoid Node deprecation warning DEP0079\n  Document.prototype[inspect.custom] = Document.prototype.inspect;\n}\n\n/**\n * Helper for console.log\n *\n * @return {String}\n * @api public\n * @method toString\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.toString = function() {\n  const ret = this.inspect();\n  if (typeof ret === 'string') {\n    return ret;\n  }\n  return inspect(ret);\n};\n\n/**\n * Returns true if this document is equal to another document.\n *\n * Documents are considered equal when they have matching `_id`s, unless neither\n * document has an `_id`, in which case this function falls back to using\n * `deepEqual()`.\n *\n * @param {Document} [doc] a document to compare. If falsy, will always return \"false\".\n * @return {Boolean}\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.equals = function(doc) {\n  if (!doc) {\n    return false;\n  }\n\n  const tid = this.$__getValue('_id');\n  const docid = doc.$__ != null ? doc.$__getValue('_id') : doc;\n  if (!tid && !docid) {\n    return deepEqual(this, doc);\n  }\n  return tid && tid.equals\n    ? tid.equals(docid)\n    : tid === docid;\n};\n\n/**\n * Populates paths on an existing document.\n *\n * #### Example:\n *\n *     // Given a document, `populate()` lets you pull in referenced docs\n *     await doc.populate([\n *       'stories',\n *       { path: 'fans', sort: { name: -1 } }\n *     ]);\n *     doc.populated('stories'); // Array of ObjectIds\n *     doc.stories[0].title; // 'Casino Royale'\n *     doc.populated('fans'); // Array of ObjectIds\n *\n *     // If the referenced doc has been deleted, `populate()` will\n *     // remove that entry from the array.\n *     await Story.delete({ title: 'Casino Royale' });\n *     await doc.populate('stories'); // Empty array\n *\n *     // You can also pass additional query options to `populate()`,\n *     // like projections:\n *     await doc.populate('fans', '-email');\n *     doc.fans[0].email // undefined because of 2nd param `select`\n *\n * @param {String|Object|Array} path either the path to populate or an object specifying all parameters, or either an array of those\n * @param {Object|String} [select] Field selection for the population query\n * @param {Model} [model] The model you wish to use for population. If not specified, populate will look up the model by the name in the Schema's `ref` field.\n * @param {Object} [match] Conditions for the population query\n * @param {Object} [options] Options for the population query (sort, etc)\n * @param {String} [options.path=null] The path to populate.\n * @param {string|PopulateOptions} [options.populate=null] Recursively populate paths in the populated documents. See [deep populate docs](https://mongoosejs.com/docs/populate.html#deep-populate).\n * @param {boolean} [options.retainNullValues=false] by default, Mongoose removes null and undefined values from populated arrays. Use this option to make `populate()` retain `null` and `undefined` array entries.\n * @param {boolean} [options.getters=false] if true, Mongoose will call any getters defined on the `localField`. By default, Mongoose gets the raw value of `localField`. For example, you would need to set this option to `true` if you wanted to [add a `lowercase` getter to your `localField`](https://mongoosejs.com/docs/schematypes.html#schematype-options).\n * @param {boolean} [options.clone=false] When you do `BlogPost.find().populate('author')`, blog posts with the same author will share 1 copy of an `author` doc. Enable this option to make Mongoose clone populated docs before assigning them.\n * @param {Object|Function} [options.match=null] Add an additional filter to the populate query. Can be a filter object containing [MongoDB query syntax](https://www.mongodb.com/docs/manual/tutorial/query-documents/), or a function that returns a filter object.\n * @param {Function} [options.transform=null] Function that Mongoose will call on every populated document that allows you to transform the populated document.\n * @param {Object} [options.options=null] Additional options like `limit` and `lean`.\n * @param {Function} [callback] Callback\n * @see population https://mongoosejs.com/docs/populate.html\n * @see Query#select https://mongoosejs.com/docs/api/query.html#Query.prototype.select()\n * @see Model.populate https://mongoosejs.com/docs/api/model.html#Model.populate()\n * @memberOf Document\n * @instance\n * @return {Promise|null} Returns a Promise if no `callback` is given.\n * @api public\n */\n\nDocument.prototype.populate = async function populate() {\n  const pop = {};\n  const args = [...arguments];\n  if (typeof args[args.length - 1] === 'function') {\n    throw new MongooseError('Document.prototype.populate() no longer accepts a callback');\n  }\n\n  if (args.length !== 0) {\n    // use hash to remove duplicate paths\n    const res = utils.populate.apply(null, args);\n    for (const populateOptions of res) {\n      pop[populateOptions.path] = populateOptions;\n    }\n  }\n\n  const paths = utils.object.vals(pop);\n  let topLevelModel = this.constructor;\n  if (this.$__isNested) {\n    topLevelModel = this.$__[scopeSymbol].constructor;\n    const nestedPath = this.$__.nestedPath;\n    paths.forEach(function(populateOptions) {\n      populateOptions.path = nestedPath + '.' + populateOptions.path;\n    });\n  }\n\n  // Use `$session()` by default if the document has an associated session\n  // See gh-6754\n  if (this.$session() != null) {\n    const session = this.$session();\n    paths.forEach(path => {\n      if (path.options == null) {\n        path.options = { session: session };\n        return;\n      }\n      if (!('session' in path.options)) {\n        path.options.session = session;\n      }\n    });\n  }\n\n  paths.forEach(p => {\n    p._localModel = topLevelModel;\n  });\n\n  return topLevelModel.populate(this, paths);\n};\n\n/**\n * Gets all populated documents associated with this document.\n *\n * @api public\n * @return {Document[]} array of populated documents. Empty array if there are no populated documents associated with this document.\n * @memberOf Document\n * @method $getPopulatedDocs\n * @instance\n */\n\nDocument.prototype.$getPopulatedDocs = function $getPopulatedDocs() {\n  let keys = [];\n  if (this.$__.populated != null) {\n    keys = keys.concat(Object.keys(this.$__.populated));\n  }\n  let result = [];\n  for (const key of keys) {\n    const value = this.$get(key);\n    if (Array.isArray(value)) {\n      result = result.concat(value);\n    } else if (value instanceof Document) {\n      result.push(value);\n    }\n  }\n  return result;\n};\n\n/**\n * Gets _id(s) used during population of the given `path`.\n *\n * #### Example:\n *\n *     const doc = await Model.findOne().populate('author');\n *\n *     console.log(doc.author.name); // Dr.Seuss\n *     console.log(doc.populated('author')); // '5144cf8050f071d979c118a7'\n *\n * If the path was not populated, returns `undefined`.\n *\n * @param {String} path\n * @param {Any} [val]\n * @param {Object} [options]\n * @return {Array|ObjectId|Number|Buffer|String|undefined}\n * @memberOf Document\n * @instance\n * @api public\n */\n\nDocument.prototype.populated = function(path, val, options) {\n  // val and options are internal\n  if (val == null || val === true) {\n    if (!this.$__.populated) {\n      return undefined;\n    }\n    if (typeof path !== 'string') {\n      return undefined;\n    }\n\n    // Map paths can be populated with either `path.$*` or just `path`\n    const _path = path.endsWith('.$*') ? path.replace(/\\.\\$\\*$/, '') : path;\n\n    const v = this.$__.populated[_path];\n    if (v) {\n      return val === true ? v : v.value;\n    }\n    return undefined;\n  }\n\n  this.$__.populated || (this.$__.populated = {});\n  this.$__.populated[path] = { value: val, options: options };\n\n  // If this was a nested populate, make sure each populated doc knows\n  // about its populated children (gh-7685)\n  const pieces = path.split('.');\n  for (let i = 0; i < pieces.length - 1; ++i) {\n    const subpath = pieces.slice(0, i + 1).join('.');\n    const subdoc = this.$get(subpath);\n    if (subdoc != null && subdoc.$__ != null && this.$populated(subpath)) {\n      const rest = pieces.slice(i + 1).join('.');\n      subdoc.$populated(rest, val, options);\n      // No need to continue because the above recursion should take care of\n      // marking the rest of the docs as populated\n      break;\n    }\n  }\n\n  return val;\n};\n\n/**\n * Alias of [`.populated`](https://mongoosejs.com/docs/api/document.html#Document.prototype.populated()).\n *\n * @method $populated\n * @memberOf Document\n * @api public\n */\n\nDocument.prototype.$populated = Document.prototype.populated;\n\n/**\n * Throws an error if a given path is not populated\n *\n * #### Example:\n *\n *     const doc = await Model.findOne().populate('author');\n *\n *     doc.$assertPopulated('author'); // does not throw\n *     doc.$assertPopulated('other path'); // throws an error\n *\n *     // Manually populate and assert in one call. The following does\n *     // `doc.$set({ likes })` before asserting.\n *     doc.$assertPopulated('likes', { likes });\n *\n *\n * @param {String|String[]} path path or array of paths to check. `$assertPopulated` throws if any of the given paths is not populated.\n * @param {Object} [values] optional values to `$set()`. Convenient if you want to manually populate a path and assert that the path was populated in 1 call.\n * @return {Document} this\n * @memberOf Document\n * @method $assertPopulated\n * @instance\n * @api public\n */\n\nDocument.prototype.$assertPopulated = function $assertPopulated(path, values) {\n  if (Array.isArray(path)) {\n    path.forEach(p => this.$assertPopulated(p, values));\n    return this;\n  }\n\n  if (arguments.length > 1) {\n    this.$set(values);\n  }\n\n  if (!this.$populated(path)) {\n    throw new MongooseError(`Expected path \"${path}\" to be populated`);\n  }\n\n  return this;\n};\n\n/**\n * Takes a populated field and returns it to its unpopulated state.\n *\n * #### Example:\n *\n *     Model.findOne().populate('author').exec(function (err, doc) {\n *       console.log(doc.author.name); // Dr.Seuss\n *       console.log(doc.depopulate('author'));\n *       console.log(doc.author); // '5144cf8050f071d979c118a7'\n *     })\n *\n * If the path was not provided, then all populated fields are returned to their unpopulated state.\n *\n * @param {String|String[]} [path] Specific Path to depopulate. If unset, will depopulate all paths on the Document. Or multiple space-delimited paths.\n * @return {Document} this\n * @see Document.populate https://mongoosejs.com/docs/api/document.html#Document.prototype.populate()\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.depopulate = function(path) {\n  if (typeof path === 'string') {\n    path = path.indexOf(' ') === -1 ? [path] : path.split(' ');\n  }\n\n  let populatedIds;\n  const virtualKeys = this.$$populatedVirtuals ? Object.keys(this.$$populatedVirtuals) : [];\n  const populated = this.$__ && this.$__.populated || {};\n\n  if (arguments.length === 0) {\n    // Depopulate all\n    for (const virtualKey of virtualKeys) {\n      delete this.$$populatedVirtuals[virtualKey];\n      delete this._doc[virtualKey];\n      delete populated[virtualKey];\n    }\n\n    const keys = Object.keys(populated);\n\n    for (const key of keys) {\n      populatedIds = this.$populated(key);\n      if (!populatedIds) {\n        continue;\n      }\n      delete populated[key];\n      utils.setValue(key, populatedIds, this._doc);\n    }\n    return this;\n  }\n\n  for (const singlePath of path) {\n    populatedIds = this.$populated(singlePath);\n    delete populated[singlePath];\n\n    if (virtualKeys.indexOf(singlePath) !== -1) {\n      delete this.$$populatedVirtuals[singlePath];\n      delete this._doc[singlePath];\n    } else if (populatedIds) {\n      utils.setValue(singlePath, populatedIds, this._doc);\n    }\n  }\n  return this;\n};\n\n\n/**\n * Returns the full path to this document.\n *\n * @param {String} [path]\n * @return {String}\n * @api private\n * @method $__fullPath\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__fullPath = function(path) {\n  // overridden in SubDocuments\n  return path || '';\n};\n\n/**\n * Returns the changes that happened to the document\n * in the format that will be sent to MongoDB.\n *\n * #### Example:\n *\n *     const userSchema = new Schema({\n *       name: String,\n *       age: Number,\n *       country: String\n *     });\n *     const User = mongoose.model('User', userSchema);\n *     const user = await User.create({\n *       name: 'Hafez',\n *       age: 25,\n *       country: 'Egypt'\n *     });\n *\n *     // returns an empty object, no changes happened yet\n *     user.getChanges(); // { }\n *\n *     user.country = undefined;\n *     user.age = 26;\n *\n *     user.getChanges(); // { $set: { age: 26 }, { $unset: { country: 1 } } }\n *\n *     await user.save();\n *\n *     user.getChanges(); // { }\n *\n * Modifying the object that `getChanges()` returns does not affect the document's\n * change tracking state. Even if you `delete user.getChanges().$set`, Mongoose\n * will still send a `$set` to the server.\n *\n * @return {Object}\n * @api public\n * @method getChanges\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.getChanges = function() {\n  const delta = this.$__delta();\n  const changes = delta ? delta[1] : {};\n  return changes;\n};\n\n/**\n * Returns a copy of this document with a deep clone of `_doc` and `$__`.\n *\n * @return {Document} a copy of this document\n * @api public\n * @method $clone\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$clone = function() {\n  const Model = this.constructor;\n  const clonedDoc = new Model();\n  clonedDoc.$isNew = this.$isNew;\n  if (this._doc) {\n    clonedDoc._doc = clone(this._doc, { retainDocuments: true });\n  }\n  if (this.$__) {\n    const Cache = this.$__.constructor;\n    const clonedCache = new Cache();\n    for (const key of Object.getOwnPropertyNames(this.$__)) {\n      if (key === 'activePaths') {\n        continue;\n      }\n      clonedCache[key] = clone(this.$__[key]);\n    }\n    Object.assign(clonedCache.activePaths, clone({ ...this.$__.activePaths }));\n    clonedDoc.$__ = clonedCache;\n  }\n  return clonedDoc;\n};\n\n/*!\n * Module exports.\n */\n\nDocument.ValidationError = ValidationError;\nmodule.exports = exports = Document;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/document.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/documentProvider.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongoose/lib/documentProvider.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/* eslint-env browser */\n\n/*!\n * Module dependencies.\n */\nconst Document = __webpack_require__(/*! ./document.js */ \"(ssr)/./node_modules/mongoose/lib/document.js\");\nconst BrowserDocument = __webpack_require__(/*! ./browserDocument.js */ \"(ssr)/./node_modules/mongoose/lib/browserDocument.js\");\n\nlet isBrowser = false;\n\n/**\n * Returns the Document constructor for the current context\n *\n * @api private\n */\nmodule.exports = function documentProvider() {\n  if (isBrowser) {\n    return BrowserDocument;\n  }\n  return Document;\n};\n\n/*!\n * ignore\n */\nmodule.exports.setBrowser = function(flag) {\n  isBrowser = flag;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2RvY3VtZW50UHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLG1CQUFPLENBQUMsb0VBQWU7QUFDeEMsd0JBQXdCLG1CQUFPLENBQUMsa0ZBQXNCOztBQUV0RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvZG9jdW1lbnRQcm92aWRlci5qcz81NmU5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbi8qIVxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuY29uc3QgRG9jdW1lbnQgPSByZXF1aXJlKCcuL2RvY3VtZW50LmpzJyk7XG5jb25zdCBCcm93c2VyRG9jdW1lbnQgPSByZXF1aXJlKCcuL2Jyb3dzZXJEb2N1bWVudC5qcycpO1xuXG5sZXQgaXNCcm93c2VyID0gZmFsc2U7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgRG9jdW1lbnQgY29uc3RydWN0b3IgZm9yIHRoZSBjdXJyZW50IGNvbnRleHRcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkb2N1bWVudFByb3ZpZGVyKCkge1xuICBpZiAoaXNCcm93c2VyKSB7XG4gICAgcmV0dXJuIEJyb3dzZXJEb2N1bWVudDtcbiAgfVxuICByZXR1cm4gRG9jdW1lbnQ7XG59O1xuXG4vKiFcbiAqIGlnbm9yZVxuICovXG5tb2R1bGUuZXhwb3J0cy5zZXRCcm93c2VyID0gZnVuY3Rpb24oZmxhZykge1xuICBpc0Jyb3dzZXIgPSBmbGFnO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/documentProvider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/driver.js":
/*!*********************************************!*\
  !*** ./node_modules/mongoose/lib/driver.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/*!\n * ignore\n */\n\nlet driver = null;\n\nmodule.exports.get = function() {\n  return driver;\n};\n\nmodule.exports.set = function(v) {\n  driver = v;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2RyaXZlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUEsa0JBQWtCO0FBQ2xCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9kcml2ZXIuanM/NDVmMyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxubGV0IGRyaXZlciA9IG51bGw7XG5cbm1vZHVsZS5leHBvcnRzLmdldCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZHJpdmVyO1xufTtcblxubW9kdWxlLmV4cG9ydHMuc2V0ID0gZnVuY3Rpb24odikge1xuICBkcml2ZXIgPSB2O1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/driver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\nconst MongooseCollection = __webpack_require__(/*! ../../collection */ \"(ssr)/./node_modules/mongoose/lib/collection.js\");\nconst MongooseError = __webpack_require__(/*! ../../error/mongooseError */ \"(ssr)/./node_modules/mongoose/lib/error/mongooseError.js\");\nconst Collection = (__webpack_require__(/*! mongodb */ \"(ssr)/./node_modules/mongodb/lib/index.js\").Collection);\nconst ObjectId = __webpack_require__(/*! ../../types/objectid */ \"(ssr)/./node_modules/mongoose/lib/types/objectid.js\");\nconst getConstructorName = __webpack_require__(/*! ../../helpers/getConstructorName */ \"(ssr)/./node_modules/mongoose/lib/helpers/getConstructorName.js\");\nconst internalToObjectOptions = (__webpack_require__(/*! ../../options */ \"(ssr)/./node_modules/mongoose/lib/options.js\").internalToObjectOptions);\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst util = __webpack_require__(/*! util */ \"util\");\n\n/**\n * A [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) collection implementation.\n *\n * All methods methods from the [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) driver are copied and wrapped in queue management.\n *\n * @inherits Collection https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html\n * @api private\n */\n\nfunction NativeCollection(name, conn, options) {\n  this.collection = null;\n  this.Promise = options.Promise || Promise;\n  this.modelName = options.modelName;\n  delete options.modelName;\n  this._closed = false;\n  MongooseCollection.apply(this, arguments);\n}\n\n/*!\n * Inherit from abstract Collection.\n */\n\nObject.setPrototypeOf(NativeCollection.prototype, MongooseCollection.prototype);\n\n/**\n * Called when the connection opens.\n *\n * @api private\n */\n\nNativeCollection.prototype.onOpen = function() {\n  this.collection = this.conn.db.collection(this.name);\n  MongooseCollection.prototype.onOpen.call(this);\n  return this.collection;\n};\n\n/**\n * Called when the connection closes\n *\n * @api private\n */\n\nNativeCollection.prototype.onClose = function(force) {\n  MongooseCollection.prototype.onClose.call(this, force);\n};\n\n/**\n * Helper to get the collection, in case `this.collection` isn't set yet.\n * May happen if `bufferCommands` is false and created the model when\n * Mongoose was disconnected.\n *\n * @api private\n */\n\nNativeCollection.prototype._getCollection = function _getCollection() {\n  if (this.collection) {\n    return this.collection;\n  }\n  if (this.conn.db != null) {\n    this.collection = this.conn.db.collection(this.name);\n    return this.collection;\n  }\n  return null;\n};\n\n/*!\n * ignore\n */\n\nconst syncCollectionMethods = { watch: true, find: true, aggregate: true };\n\n/**\n * Copy the collection methods and make them subject to queues\n * @param {Number|String} I\n * @api private\n */\n\nfunction iter(i) {\n  NativeCollection.prototype[i] = function() {\n    const collection = this._getCollection();\n    const args = Array.from(arguments);\n    const _this = this;\n    const globalDebug = _this &&\n      _this.conn &&\n      _this.conn.base &&\n      _this.conn.base.options &&\n      _this.conn.base.options.debug;\n    const connectionDebug = _this &&\n      _this.conn &&\n      _this.conn.options &&\n      _this.conn.options.debug;\n    const debug = connectionDebug == null ? globalDebug : connectionDebug;\n    const lastArg = arguments[arguments.length - 1];\n    const opId = new ObjectId();\n\n    // If user force closed, queueing will hang forever. See #5664\n    if (this.conn.$wasForceClosed) {\n      const error = new MongooseError('Connection was force closed');\n      if (args.length > 0 &&\n        typeof args[args.length - 1] === 'function') {\n        args[args.length - 1](error);\n        return;\n      } else {\n        throw error;\n      }\n    }\n\n    let _args = args;\n    let callback = null;\n    if (this._shouldBufferCommands() && this.buffer) {\n      this.conn.emit('buffer', {\n        _id: opId,\n        modelName: _this.modelName,\n        collectionName: _this.name,\n        method: i,\n        args: args\n      });\n\n      let callback;\n      let _args = args;\n      let promise = null;\n      let timeout = null;\n      if (syncCollectionMethods[i] && typeof lastArg === 'function') {\n        this.addQueue(() => {\n          lastArg.call(this, null, this[i].apply(this, _args.slice(0, _args.length - 1)));\n        }, []);\n      } else if (syncCollectionMethods[i]) {\n        promise = new Promise((resolve, reject) => {\n          callback = function collectionOperationCallback(err, res) {\n            if (timeout != null) {\n              clearTimeout(timeout);\n            }\n            if (err != null) {\n              return reject(err);\n            }\n            resolve(res);\n          };\n          _args = args.concat([callback]);\n          this.addQueue(i, _args);\n        });\n      } else if (typeof lastArg === 'function') {\n        callback = function collectionOperationCallback() {\n          if (timeout != null) {\n            clearTimeout(timeout);\n          }\n          return lastArg.apply(this, arguments);\n        };\n        _args = args.slice(0, args.length - 1).concat([callback]);\n      } else {\n        promise = new Promise((resolve, reject) => {\n          callback = function collectionOperationCallback(err, res) {\n            if (timeout != null) {\n              clearTimeout(timeout);\n            }\n            if (err != null) {\n              return reject(err);\n            }\n            resolve(res);\n          };\n          _args = args.concat([callback]);\n          this.addQueue(i, _args);\n        });\n      }\n\n      const bufferTimeoutMS = this._getBufferTimeoutMS();\n      timeout = setTimeout(() => {\n        const removed = this.removeQueue(i, _args);\n        if (removed) {\n          const message = 'Operation `' + this.name + '.' + i + '()` buffering timed out after ' +\n            bufferTimeoutMS + 'ms';\n          const err = new MongooseError(message);\n          this.conn.emit('buffer-end', { _id: opId, modelName: _this.modelName, collectionName: _this.name, method: i, error: err });\n          callback(err);\n        }\n      }, bufferTimeoutMS);\n\n      if (!syncCollectionMethods[i] && typeof lastArg === 'function') {\n        this.addQueue(i, _args);\n        return;\n      }\n\n      return promise;\n    } else if (!syncCollectionMethods[i] && typeof lastArg === 'function') {\n      callback = function collectionOperationCallback(err, res) {\n        if (err != null) {\n          _this.conn.emit('operation-end', { _id: opId, modelName: _this.modelName, collectionName: _this.name, method: i, error: err });\n        } else {\n          _this.conn.emit('operation-end', { _id: opId, modelName: _this.modelName, collectionName: _this.name, method: i, result: res });\n        }\n        return lastArg.apply(this, arguments);\n      };\n      _args = args.slice(0, args.length - 1).concat([callback]);\n    }\n\n    if (debug) {\n      if (typeof debug === 'function') {\n        let argsToAdd = null;\n        if (typeof args[args.length - 1] == 'function') {\n          argsToAdd = args.slice(0, args.length - 1);\n        } else {\n          argsToAdd = args;\n        }\n        debug.apply(_this,\n          [_this.name, i].concat(argsToAdd));\n      } else if (debug instanceof stream.Writable) {\n        this.$printToStream(_this.name, i, args, debug);\n      } else {\n        const color = debug.color == null ? true : debug.color;\n        const shell = debug.shell == null ? false : debug.shell;\n        this.$print(_this.name, i, args, color, shell);\n      }\n    }\n\n    this.conn.emit('operation-start', { _id: opId, modelName: _this.modelName, collectionName: this.name, method: i, params: _args });\n\n    try {\n      if (collection == null) {\n        const message = 'Cannot call `' + this.name + '.' + i + '()` before initial connection ' +\n          'is complete if `bufferCommands = false`. Make sure you `await mongoose.connect()` if ' +\n          'you have `bufferCommands = false`.';\n        throw new MongooseError(message);\n      }\n\n      if (syncCollectionMethods[i] && typeof lastArg === 'function') {\n        const ret = collection[i].apply(collection, _args.slice(0, _args.length - 1));\n        return lastArg.call(this, null, ret);\n      }\n\n      const ret = collection[i].apply(collection, _args);\n      if (ret != null && typeof ret.then === 'function') {\n        return ret.then(\n          res => {\n            typeof lastArg === 'function' && lastArg(null, res);\n            return res;\n          },\n          err => {\n            if (typeof lastArg === 'function') {\n              lastArg(err);\n              return;\n            }\n            throw err;\n          }\n        );\n      }\n      return ret;\n    } catch (error) {\n      // Collection operation may throw because of max bson size, catch it here\n      // See gh-3906\n      if (typeof lastArg === 'function') {\n        return lastArg(error);\n      } else {\n        this.conn.emit('operation-end', { _id: opId, modelName: _this.modelName, collectionName: this.name, method: i, error: error });\n\n        throw error;\n      }\n    }\n  };\n}\n\nfor (const key of Object.getOwnPropertyNames(Collection.prototype)) {\n  // Janky hack to work around gh-3005 until we can get rid of the mongoose\n  // collection abstraction\n  const descriptor = Object.getOwnPropertyDescriptor(Collection.prototype, key);\n  // Skip properties with getters because they may throw errors (gh-8528)\n  if (descriptor.get !== undefined) {\n    continue;\n  }\n  if (typeof Collection.prototype[key] !== 'function') {\n    continue;\n  }\n\n  iter(key);\n}\n\n/**\n * Debug print helper\n *\n * @api public\n * @method $print\n */\n\nNativeCollection.prototype.$print = function(name, i, args, color, shell) {\n  const moduleName = color ? '\\x1B[0;36mMongoose:\\x1B[0m ' : 'Mongoose: ';\n  const functionCall = [name, i].join('.');\n  const _args = [];\n  for (let j = args.length - 1; j >= 0; --j) {\n    if (this.$format(args[j]) || _args.length) {\n      _args.unshift(this.$format(args[j], color, shell));\n    }\n  }\n  const params = '(' + _args.join(', ') + ')';\n\n  console.info(moduleName + functionCall + params);\n};\n\n/**\n * Debug print helper\n *\n * @api public\n * @method $print\n */\n\nNativeCollection.prototype.$printToStream = function(name, i, args, stream) {\n  const functionCall = [name, i].join('.');\n  const _args = [];\n  for (let j = args.length - 1; j >= 0; --j) {\n    if (this.$format(args[j]) || _args.length) {\n      _args.unshift(this.$format(args[j]));\n    }\n  }\n  const params = '(' + _args.join(', ') + ')';\n\n  stream.write(functionCall + params, 'utf8');\n};\n\n/**\n * Formatter for debug print args\n *\n * @api public\n * @method $format\n */\n\nNativeCollection.prototype.$format = function(arg, color, shell) {\n  const type = typeof arg;\n  if (type === 'function' || type === 'undefined') return '';\n  return format(arg, false, color, shell);\n};\n\n/**\n * Debug print helper\n * @param {Any} representation\n * @api private\n */\n\nfunction inspectable(representation) {\n  const ret = {\n    inspect: function() { return representation; }\n  };\n  if (util.inspect.custom) {\n    ret[util.inspect.custom] = ret.inspect;\n  }\n  return ret;\n}\nfunction map(o) {\n  return format(o, true);\n}\nfunction formatObjectId(x, key) {\n  x[key] = inspectable('ObjectId(\"' + x[key].toHexString() + '\")');\n}\nfunction formatDate(x, key, shell) {\n  if (shell) {\n    x[key] = inspectable('ISODate(\"' + x[key].toUTCString() + '\")');\n  } else {\n    x[key] = inspectable('new Date(\"' + x[key].toUTCString() + '\")');\n  }\n}\nfunction format(obj, sub, color, shell) {\n  if (obj && typeof obj.toBSON === 'function') {\n    obj = obj.toBSON();\n  }\n  if (obj == null) {\n    return obj;\n  }\n\n  const clone = __webpack_require__(/*! ../../helpers/clone */ \"(ssr)/./node_modules/mongoose/lib/helpers/clone.js\");\n  let x = clone(obj, internalToObjectOptions);\n  const constructorName = getConstructorName(x);\n\n  if (constructorName === 'Binary') {\n    x = 'BinData(' + x.sub_type + ', \"' + x.toString('base64') + '\")';\n  } else if (constructorName === 'ObjectId') {\n    x = inspectable('ObjectId(\"' + x.toHexString() + '\")');\n  } else if (constructorName === 'Date') {\n    x = inspectable('new Date(\"' + x.toUTCString() + '\")');\n  } else if (constructorName === 'Object') {\n    const keys = Object.keys(x);\n    const numKeys = keys.length;\n    let key;\n    for (let i = 0; i < numKeys; ++i) {\n      key = keys[i];\n      if (x[key]) {\n        let error;\n        if (typeof x[key].toBSON === 'function') {\n          try {\n            // `session.toBSON()` throws an error. This means we throw errors\n            // in debug mode when using transactions, see gh-6712. As a\n            // workaround, catch `toBSON()` errors, try to serialize without\n            // `toBSON()`, and rethrow if serialization still fails.\n            x[key] = x[key].toBSON();\n          } catch (_error) {\n            error = _error;\n          }\n        }\n        const _constructorName = getConstructorName(x[key]);\n        if (_constructorName === 'Binary') {\n          x[key] = 'BinData(' + x[key].sub_type + ', \"' +\n            x[key].buffer.toString('base64') + '\")';\n        } else if (_constructorName === 'Object') {\n          x[key] = format(x[key], true);\n        } else if (_constructorName === 'ObjectId') {\n          formatObjectId(x, key);\n        } else if (_constructorName === 'Date') {\n          formatDate(x, key, shell);\n        } else if (_constructorName === 'ClientSession') {\n          x[key] = inspectable('ClientSession(\"' +\n            (\n              x[key] &&\n              x[key].id &&\n              x[key].id.id &&\n              x[key].id.id.buffer || ''\n            ).toString('hex') + '\")');\n        } else if (Array.isArray(x[key])) {\n          x[key] = x[key].map(map);\n        } else if (error != null) {\n          // If there was an error with `toBSON()` and the object wasn't\n          // already converted to a string representation, rethrow it.\n          // Open to better ideas on how to handle this.\n          throw error;\n        }\n      }\n    }\n  }\n  if (sub) {\n    return x;\n  }\n\n  return util.\n    inspect(x, false, 10, color).\n    replace(/\\n/g, '').\n    replace(/\\s{2,}/g, ' ');\n}\n\n/**\n * Retrieves information about this collections indexes.\n *\n * @param {Function} callback\n * @method getIndexes\n * @api public\n */\n\nNativeCollection.prototype.getIndexes = NativeCollection.prototype.indexInformation;\n\n/*!\n * Module exports.\n */\n\nmodule.exports = NativeCollection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseConnection = __webpack_require__(/*! ../../connection */ \"(ssr)/./node_modules/mongoose/lib/connection.js\");\nconst MongooseError = __webpack_require__(/*! ../../error/index */ \"(ssr)/./node_modules/mongoose/lib/error/index.js\");\nconst STATES = __webpack_require__(/*! ../../connectionState */ \"(ssr)/./node_modules/mongoose/lib/connectionState.js\");\nconst mongodb = __webpack_require__(/*! mongodb */ \"(ssr)/./node_modules/mongodb/lib/index.js\");\nconst pkg = __webpack_require__(/*! ../../../package.json */ \"(ssr)/./node_modules/mongoose/package.json\");\nconst processConnectionOptions = __webpack_require__(/*! ../../helpers/processConnectionOptions */ \"(ssr)/./node_modules/mongoose/lib/helpers/processConnectionOptions.js\");\nconst setTimeout = (__webpack_require__(/*! ../../helpers/timers */ \"(ssr)/./node_modules/mongoose/lib/helpers/timers.js\").setTimeout);\nconst utils = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\n\n/**\n * A [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) connection implementation.\n *\n * @inherits Connection\n * @api private\n */\n\nfunction NativeConnection() {\n  MongooseConnection.apply(this, arguments);\n  this._listening = false;\n}\n\n/**\n * Expose the possible connection states.\n * @api public\n */\n\nNativeConnection.STATES = STATES;\n\n/*!\n * Inherits from Connection.\n */\n\nObject.setPrototypeOf(NativeConnection.prototype, MongooseConnection.prototype);\n\n/**\n * Switches to a different database using the same connection pool.\n *\n * Returns a new connection object, with the new db. If you set the `useCache`\n * option, `useDb()` will cache connections by `name`.\n *\n * **Note:** Calling `close()` on a `useDb()` connection will close the base connection as well.\n *\n * @param {String} name The database name\n * @param {Object} [options]\n * @param {Boolean} [options.useCache=false] If true, cache results so calling `useDb()` multiple times with the same name only creates 1 connection object.\n * @param {Boolean} [options.noListener=false] If true, the new connection object won't listen to any events on the base connection. This is better for memory usage in cases where you're calling `useDb()` for every request.\n * @return {Connection} New Connection Object\n * @api public\n */\n\nNativeConnection.prototype.useDb = function(name, options) {\n  // Return immediately if cached\n  options = options || {};\n  if (options.useCache && this.relatedDbs[name]) {\n    return this.relatedDbs[name];\n  }\n\n  // we have to manually copy all of the attributes...\n  const newConn = new this.constructor();\n  newConn.name = name;\n  newConn.base = this.base;\n  newConn.collections = {};\n  newConn.models = {};\n  newConn.replica = this.replica;\n  newConn.config = Object.assign({}, this.config, newConn.config);\n  newConn.name = this.name;\n  newConn.options = this.options;\n  newConn._readyState = this._readyState;\n  newConn._closeCalled = this._closeCalled;\n  newConn._hasOpened = this._hasOpened;\n  newConn._listening = false;\n  newConn._parent = this;\n\n  newConn.host = this.host;\n  newConn.port = this.port;\n  newConn.user = this.user;\n  newConn.pass = this.pass;\n\n  // First, when we create another db object, we are not guaranteed to have a\n  // db object to work with. So, in the case where we have a db object and it\n  // is connected, we can just proceed with setting everything up. However, if\n  // we do not have a db or the state is not connected, then we need to wait on\n  // the 'open' event of the connection before doing the rest of the setup\n  // the 'connected' event is the first time we'll have access to the db object\n\n  const _this = this;\n\n  newConn.client = _this.client;\n\n  if (this.db && this._readyState === STATES.connected) {\n    wireup();\n  } else {\n    this.once('connected', wireup);\n  }\n\n  function wireup() {\n    newConn.client = _this.client;\n    const _opts = {};\n    if (options.hasOwnProperty('noListener')) {\n      _opts.noListener = options.noListener;\n    }\n    newConn.db = _this.client.db(name, _opts);\n    newConn.onOpen();\n  }\n\n  newConn.name = name;\n\n  // push onto the otherDbs stack, this is used when state changes\n  if (options.noListener !== true) {\n    this.otherDbs.push(newConn);\n  }\n  newConn.otherDbs.push(this);\n\n  // push onto the relatedDbs cache, this is used when state changes\n  if (options && options.useCache) {\n    this.relatedDbs[newConn.name] = newConn;\n    newConn.relatedDbs = this.relatedDbs;\n  }\n\n  return newConn;\n};\n\n/**\n * Removes the database connection with the given name created with `useDb()`.\n *\n * Throws an error if the database connection was not found.\n *\n * #### Example:\n *\n *     // Connect to `initialdb` first\n *     const conn = await mongoose.createConnection('mongodb://127.0.0.1:27017/initialdb').asPromise();\n *\n *     // Creates an un-cached connection to `mydb`\n *     const db = conn.useDb('mydb');\n *\n *     // Closes `db`, and removes `db` from `conn.relatedDbs` and `conn.otherDbs`\n *     await conn.removeDb('mydb');\n *\n * @method removeDb\n * @memberOf Connection\n * @param {String} name The database name\n * @return {Connection} this\n */\n\nNativeConnection.prototype.removeDb = function removeDb(name) {\n  const dbs = this.otherDbs.filter(db => db.name === name);\n  if (!dbs.length) {\n    throw new MongooseError(`No connections to database \"${name}\" found`);\n  }\n\n  for (const db of dbs) {\n    db._closeCalled = true;\n    db._destroyCalled = true;\n    db._readyState = STATES.disconnected;\n    db.$wasForceClosed = true;\n  }\n  delete this.relatedDbs[name];\n  this.otherDbs = this.otherDbs.filter(db => db.name !== name);\n};\n\n/**\n * Closes the connection\n *\n * @param {Boolean} [force]\n * @return {Connection} this\n * @api private\n */\n\nNativeConnection.prototype.doClose = async function doClose(force) {\n  if (this.client == null) {\n    return this;\n  }\n\n  let skipCloseClient = false;\n  if (force != null && typeof force === 'object') {\n    skipCloseClient = force.skipCloseClient;\n    force = force.force;\n  }\n\n  if (skipCloseClient) {\n    return this;\n  }\n\n  await this.client.close(force);\n  // Defer because the driver will wait at least 1ms before finishing closing\n  // the pool, see https://github.com/mongodb-js/mongodb-core/blob/a8f8e4ce41936babc3b9112bf42d609779f03b39/lib/connection/pool.js#L1026-L1030.\n  // If there's queued operations, you may still get some background work\n  // after the callback is called.\n  await new Promise(resolve => setTimeout(resolve, 1));\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nNativeConnection.prototype.createClient = async function createClient(uri, options) {\n  if (typeof uri !== 'string') {\n    throw new MongooseError('The `uri` parameter to `openUri()` must be a ' +\n      `string, got \"${typeof uri}\". Make sure the first parameter to ` +\n      '`mongoose.connect()` or `mongoose.createConnection()` is a string.');\n  }\n\n  if (this._destroyCalled) {\n    throw new MongooseError(\n      'Connection has been closed and destroyed, and cannot be used for re-opening the connection. ' +\n      'Please create a new connection with `mongoose.createConnection()` or `mongoose.connect()`.'\n    );\n  }\n\n  if (this.readyState === STATES.connecting || this.readyState === STATES.connected) {\n    if (this._connectionString !== uri) {\n      throw new MongooseError('Can\\'t call `openUri()` on an active connection with ' +\n        'different connection strings. Make sure you aren\\'t calling `mongoose.connect()` ' +\n        'multiple times. See: https://mongoosejs.com/docs/connections.html#multiple_connections');\n    }\n  }\n\n  options = processConnectionOptions(uri, options);\n\n  if (options) {\n\n    const autoIndex = options.config && options.config.autoIndex != null ?\n      options.config.autoIndex :\n      options.autoIndex;\n    if (autoIndex != null) {\n      this.config.autoIndex = autoIndex !== false;\n      delete options.config;\n      delete options.autoIndex;\n    }\n\n    if ('autoCreate' in options) {\n      this.config.autoCreate = !!options.autoCreate;\n      delete options.autoCreate;\n    }\n\n    if ('sanitizeFilter' in options) {\n      this.config.sanitizeFilter = options.sanitizeFilter;\n      delete options.sanitizeFilter;\n    }\n\n    if ('autoSearchIndex' in options) {\n      this.config.autoSearchIndex = options.autoSearchIndex;\n      delete options.autoSearchIndex;\n    }\n\n    // Backwards compat\n    if (options.user || options.pass) {\n      options.auth = options.auth || {};\n      options.auth.username = options.user;\n      options.auth.password = options.pass;\n\n      this.user = options.user;\n      this.pass = options.pass;\n    }\n    delete options.user;\n    delete options.pass;\n\n    if (options.bufferCommands != null) {\n      this.config.bufferCommands = options.bufferCommands;\n      delete options.bufferCommands;\n    }\n  } else {\n    options = {};\n  }\n\n  this._connectionOptions = options;\n  const dbName = options.dbName;\n  if (dbName != null) {\n    this.$dbName = dbName;\n  }\n  delete options.dbName;\n\n  if (!utils.hasUserDefinedProperty(options, 'driverInfo')) {\n    options.driverInfo = {\n      name: 'Mongoose',\n      version: pkg.version\n    };\n  }\n\n  this.readyState = STATES.connecting;\n  this._connectionString = uri;\n\n  let client;\n  try {\n    client = new mongodb.MongoClient(uri, options);\n  } catch (error) {\n    this.readyState = STATES.disconnected;\n    throw error;\n  }\n  this.client = client;\n\n  client.setMaxListeners(0);\n  await client.connect();\n\n  _setClient(this, client, options, dbName);\n\n  for (const db of this.otherDbs) {\n    _setClient(db, client, {}, db.name);\n  }\n  return this;\n};\n\n/*!\n * ignore\n */\n\nNativeConnection.prototype.setClient = function setClient(client) {\n  if (!(client instanceof mongodb.MongoClient)) {\n    throw new MongooseError('Must call `setClient()` with an instance of MongoClient');\n  }\n  if (this.readyState !== STATES.disconnected) {\n    throw new MongooseError('Cannot call `setClient()` on a connection that is already connected.');\n  }\n  if (client.topology == null) {\n    throw new MongooseError('Cannot call `setClient()` with a MongoClient that you have not called `connect()` on yet.');\n  }\n\n  this._connectionString = client.s.url;\n  _setClient(this, client, {}, client.s.options.dbName);\n\n  for (const model of Object.values(this.models)) {\n    // Errors handled internally, so safe to ignore error\n    model.init().catch(function $modelInitNoop() {});\n  }\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _setClient(conn, client, options, dbName) {\n  const db = dbName != null ? client.db(dbName) : client.db();\n  conn.db = db;\n  conn.client = client;\n  conn.host = client &&\n    client.s &&\n    client.s.options &&\n    client.s.options.hosts &&\n    client.s.options.hosts[0] &&\n    client.s.options.hosts[0].host || void 0;\n  conn.port = client &&\n    client.s &&\n    client.s.options &&\n    client.s.options.hosts &&\n    client.s.options.hosts[0] &&\n    client.s.options.hosts[0].port || void 0;\n  conn.name = dbName != null ? dbName : db.databaseName;\n  conn._closeCalled = client._closeCalled;\n\n  const _handleReconnect = () => {\n    // If we aren't disconnected, we assume this reconnect is due to a\n    // socket timeout. If there's no activity on a socket for\n    // `socketTimeoutMS`, the driver will attempt to reconnect and emit\n    // this event.\n    if (conn.readyState !== STATES.connected) {\n      conn.readyState = STATES.connected;\n      conn.emit('reconnect');\n      conn.emit('reconnected');\n      conn.onOpen();\n    }\n  };\n\n  const type = client &&\n  client.topology &&\n  client.topology.description &&\n  client.topology.description.type || '';\n\n  if (type === 'Single') {\n    client.on('serverDescriptionChanged', ev => {\n      const newDescription = ev.newDescription;\n      if (newDescription.type === 'Unknown') {\n        conn.readyState = STATES.disconnected;\n      } else {\n        _handleReconnect();\n      }\n    });\n  } else if (type.startsWith('ReplicaSet')) {\n    client.on('topologyDescriptionChanged', ev => {\n      // Emit disconnected if we've lost connectivity to the primary\n      const description = ev.newDescription;\n      if (conn.readyState === STATES.connected && description.type !== 'ReplicaSetWithPrimary') {\n        // Implicitly emits 'disconnected'\n        conn.readyState = STATES.disconnected;\n      } else if (conn.readyState === STATES.disconnected && description.type === 'ReplicaSetWithPrimary') {\n        _handleReconnect();\n      }\n    });\n  }\n\n  conn.onOpen();\n\n  for (const i in conn.collections) {\n    if (utils.object.hasOwnProperty(conn.collections, i)) {\n      conn.collections[i].onOpen();\n    }\n  }\n}\n\n\n/*!\n * Module exports.\n */\n\nmodule.exports = NativeConnection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/drivers/node-mongodb-native/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/mongoose/lib/drivers/node-mongodb-native/index.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Module exports.\n */\n\n\n\nexports.Collection = __webpack_require__(/*! ./collection */ \"(ssr)/./node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js\");\nexports.Connection = __webpack_require__(/*! ./connection */ \"(ssr)/./node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2RyaXZlcnMvbm9kZS1tb25nb2RiLW5hdGl2ZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWIsMklBQTRDO0FBQzVDLDJJQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2RyaXZlcnMvbm9kZS1tb25nb2RiLW5hdGl2ZS9pbmRleC5qcz85NmRmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLkNvbGxlY3Rpb24gPSByZXF1aXJlKCcuL2NvbGxlY3Rpb24nKTtcbmV4cG9ydHMuQ29ubmVjdGlvbiA9IHJlcXVpcmUoJy4vY29ubmVjdGlvbicpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/drivers/node-mongodb-native/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/error/bulkWriteError.js":
/*!***********************************************************!*\
  !*** ./node_modules/mongoose/lib/error/bulkWriteError.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseError = __webpack_require__(/*! ./ */ \"(ssr)/./node_modules/mongoose/lib/error/index.js\");\n\n\n/**\n * If `bulkWrite()` or `insertMany()` has validation errors, but\n * all valid operations succeed, and 'throwOnValidationError' is true,\n * Mongoose will throw this error.\n *\n * @api private\n */\n\nclass MongooseBulkWriteError extends MongooseError {\n  constructor(validationErrors, results, rawResult, operation) {\n    let preview = validationErrors.map(e => e.message).join(', ');\n    if (preview.length > 200) {\n      preview = preview.slice(0, 200) + '...';\n    }\n    super(`${operation} failed with ${validationErrors.length} Mongoose validation errors: ${preview}`);\n\n    this.validationErrors = validationErrors;\n    this.results = results;\n    this.rawResult = rawResult;\n    this.operation = operation;\n  }\n}\n\nObject.defineProperty(MongooseBulkWriteError.prototype, 'name', {\n  value: 'MongooseBulkWriteError'\n});\n\n/*!\n * exports\n */\n\nmodule.exports = MongooseBulkWriteError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL2J1bGtXcml0ZUVycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYixzQkFBc0IsbUJBQU8sQ0FBQyw0REFBSTs7O0FBR2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsV0FBVyxjQUFjLHlCQUF5Qiw4QkFBOEIsUUFBUTs7QUFFckc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL2J1bGtXcml0ZUVycm9yLmpzP2VkNjkiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgTW9uZ29vc2VFcnJvciA9IHJlcXVpcmUoJy4vJyk7XG5cblxuLyoqXG4gKiBJZiBgYnVsa1dyaXRlKClgIG9yIGBpbnNlcnRNYW55KClgIGhhcyB2YWxpZGF0aW9uIGVycm9ycywgYnV0XG4gKiBhbGwgdmFsaWQgb3BlcmF0aW9ucyBzdWNjZWVkLCBhbmQgJ3Rocm93T25WYWxpZGF0aW9uRXJyb3InIGlzIHRydWUsXG4gKiBNb25nb29zZSB3aWxsIHRocm93IHRoaXMgZXJyb3IuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuY2xhc3MgTW9uZ29vc2VCdWxrV3JpdGVFcnJvciBleHRlbmRzIE1vbmdvb3NlRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcih2YWxpZGF0aW9uRXJyb3JzLCByZXN1bHRzLCByYXdSZXN1bHQsIG9wZXJhdGlvbikge1xuICAgIGxldCBwcmV2aWV3ID0gdmFsaWRhdGlvbkVycm9ycy5tYXAoZSA9PiBlLm1lc3NhZ2UpLmpvaW4oJywgJyk7XG4gICAgaWYgKHByZXZpZXcubGVuZ3RoID4gMjAwKSB7XG4gICAgICBwcmV2aWV3ID0gcHJldmlldy5zbGljZSgwLCAyMDApICsgJy4uLic7XG4gICAgfVxuICAgIHN1cGVyKGAke29wZXJhdGlvbn0gZmFpbGVkIHdpdGggJHt2YWxpZGF0aW9uRXJyb3JzLmxlbmd0aH0gTW9uZ29vc2UgdmFsaWRhdGlvbiBlcnJvcnM6ICR7cHJldmlld31gKTtcblxuICAgIHRoaXMudmFsaWRhdGlvbkVycm9ycyA9IHZhbGlkYXRpb25FcnJvcnM7XG4gICAgdGhpcy5yZXN1bHRzID0gcmVzdWx0cztcbiAgICB0aGlzLnJhd1Jlc3VsdCA9IHJhd1Jlc3VsdDtcbiAgICB0aGlzLm9wZXJhdGlvbiA9IG9wZXJhdGlvbjtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoTW9uZ29vc2VCdWxrV3JpdGVFcnJvci5wcm90b3R5cGUsICduYW1lJywge1xuICB2YWx1ZTogJ01vbmdvb3NlQnVsa1dyaXRlRXJyb3InXG59KTtcblxuLyohXG4gKiBleHBvcnRzXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBNb25nb29zZUJ1bGtXcml0ZUVycm9yO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/error/bulkWriteError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/error/cast.js":
/*!*************************************************!*\
  !*** ./node_modules/mongoose/lib/error/cast.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\nconst MongooseError = __webpack_require__(/*! ./mongooseError */ \"(ssr)/./node_modules/mongoose/lib/error/mongooseError.js\");\nconst util = __webpack_require__(/*! util */ \"util\");\n\n/**\n * Casting Error constructor.\n *\n * @param {String} type\n * @param {String} value\n * @inherits MongooseError\n * @api private\n */\n\nclass CastError extends MongooseError {\n  constructor(type, value, path, reason, schemaType) {\n    // If no args, assume we'll `init()` later.\n    if (arguments.length > 0) {\n      const valueType = getValueType(value);\n      const messageFormat = getMessageFormat(schemaType);\n      const msg = formatMessage(null, type, value, path, messageFormat, valueType, reason);\n      super(msg);\n      this.init(type, value, path, reason, schemaType);\n    } else {\n      super(formatMessage());\n    }\n  }\n\n  toJSON() {\n    return {\n      stringValue: this.stringValue,\n      valueType: this.valueType,\n      kind: this.kind,\n      value: this.value,\n      path: this.path,\n      reason: this.reason,\n      name: this.name,\n      message: this.message\n    };\n  }\n  /*!\n   * ignore\n   */\n  init(type, value, path, reason, schemaType) {\n    this.stringValue = getStringValue(value);\n    this.messageFormat = getMessageFormat(schemaType);\n    this.kind = type;\n    this.value = value;\n    this.path = path;\n    this.reason = reason;\n    this.valueType = getValueType(value);\n  }\n\n  /**\n   * ignore\n   * @param {Readonly<CastError>} other\n   * @api private\n   */\n  copy(other) {\n    this.messageFormat = other.messageFormat;\n    this.stringValue = other.stringValue;\n    this.kind = other.kind;\n    this.value = other.value;\n    this.path = other.path;\n    this.reason = other.reason;\n    this.message = other.message;\n    this.valueType = other.valueType;\n  }\n\n  /*!\n   * ignore\n   */\n  setModel(model) {\n    this.model = model;\n    this.message = formatMessage(model, this.kind, this.value, this.path,\n      this.messageFormat, this.valueType);\n  }\n}\n\nObject.defineProperty(CastError.prototype, 'name', {\n  value: 'CastError'\n});\n\nfunction getStringValue(value) {\n  let stringValue = util.inspect(value);\n  stringValue = stringValue.replace(/^'|'$/g, '\"');\n  if (!stringValue.startsWith('\"')) {\n    stringValue = '\"' + stringValue + '\"';\n  }\n  return stringValue;\n}\n\nfunction getValueType(value) {\n  if (value == null) {\n    return '' + value;\n  }\n\n  const t = typeof value;\n  if (t !== 'object') {\n    return t;\n  }\n  if (typeof value.constructor !== 'function') {\n    return t;\n  }\n  return value.constructor.name;\n}\n\nfunction getMessageFormat(schemaType) {\n  const messageFormat = schemaType && schemaType._castErrorMessage || null;\n  if (typeof messageFormat === 'string' || typeof messageFormat === 'function') {\n    return messageFormat;\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction formatMessage(model, kind, value, path, messageFormat, valueType, reason) {\n  if (typeof messageFormat === 'string') {\n    const stringValue = getStringValue(value);\n    let ret = messageFormat.\n      replace('{KIND}', kind).\n      replace('{VALUE}', stringValue).\n      replace('{PATH}', path);\n    if (model != null) {\n      ret = ret.replace('{MODEL}', model.modelName);\n    }\n\n    return ret;\n  } else if (typeof messageFormat === 'function') {\n    return messageFormat(value, path, model, kind);\n  } else {\n    const stringValue = getStringValue(value);\n    const valueTypeMsg = valueType ? ' (type ' + valueType + ')' : '';\n    let ret = 'Cast to ' + kind + ' failed for value ' +\n      stringValue + valueTypeMsg + ' at path \"' + path + '\"';\n    if (model != null) {\n      ret += ' for model \"' + model.modelName + '\"';\n    }\n    if (reason != null &&\n        typeof reason.constructor === 'function' &&\n        reason.constructor.name !== 'AssertionError' &&\n        reason.constructor.name !== 'Error') {\n      ret += ' because of \"' + reason.constructor.name + '\"';\n    }\n    return ret;\n  }\n}\n\n/*!\n * exports\n */\n\nmodule.exports = CastError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL2Nhc3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBLHNCQUFzQixtQkFBTyxDQUFDLGlGQUFpQjtBQUMvQyxhQUFhLG1CQUFPLENBQUMsa0JBQU07O0FBRTNCO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLHFCQUFxQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsS0FBSztBQUNyQixnQkFBZ0IsTUFBTTtBQUN0QixnQkFBZ0IsS0FBSztBQUNyQjtBQUNBLDBCQUEwQixNQUFNO0FBQ2hDOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL2Nhc3QuanM/MTZhZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qIVxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG5jb25zdCBNb25nb29zZUVycm9yID0gcmVxdWlyZSgnLi9tb25nb29zZUVycm9yJyk7XG5jb25zdCB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG4vKipcbiAqIENhc3RpbmcgRXJyb3IgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICogQGluaGVyaXRzIE1vbmdvb3NlRXJyb3JcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmNsYXNzIENhc3RFcnJvciBleHRlbmRzIE1vbmdvb3NlRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcih0eXBlLCB2YWx1ZSwgcGF0aCwgcmVhc29uLCBzY2hlbWFUeXBlKSB7XG4gICAgLy8gSWYgbm8gYXJncywgYXNzdW1lIHdlJ2xsIGBpbml0KClgIGxhdGVyLlxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgdmFsdWVUeXBlID0gZ2V0VmFsdWVUeXBlKHZhbHVlKTtcbiAgICAgIGNvbnN0IG1lc3NhZ2VGb3JtYXQgPSBnZXRNZXNzYWdlRm9ybWF0KHNjaGVtYVR5cGUpO1xuICAgICAgY29uc3QgbXNnID0gZm9ybWF0TWVzc2FnZShudWxsLCB0eXBlLCB2YWx1ZSwgcGF0aCwgbWVzc2FnZUZvcm1hdCwgdmFsdWVUeXBlLCByZWFzb24pO1xuICAgICAgc3VwZXIobXNnKTtcbiAgICAgIHRoaXMuaW5pdCh0eXBlLCB2YWx1ZSwgcGF0aCwgcmVhc29uLCBzY2hlbWFUeXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3VwZXIoZm9ybWF0TWVzc2FnZSgpKTtcbiAgICB9XG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0cmluZ1ZhbHVlOiB0aGlzLnN0cmluZ1ZhbHVlLFxuICAgICAgdmFsdWVUeXBlOiB0aGlzLnZhbHVlVHlwZSxcbiAgICAgIGtpbmQ6IHRoaXMua2luZCxcbiAgICAgIHZhbHVlOiB0aGlzLnZhbHVlLFxuICAgICAgcGF0aDogdGhpcy5wYXRoLFxuICAgICAgcmVhc29uOiB0aGlzLnJlYXNvbixcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZVxuICAgIH07XG4gIH1cbiAgLyohXG4gICAqIGlnbm9yZVxuICAgKi9cbiAgaW5pdCh0eXBlLCB2YWx1ZSwgcGF0aCwgcmVhc29uLCBzY2hlbWFUeXBlKSB7XG4gICAgdGhpcy5zdHJpbmdWYWx1ZSA9IGdldFN0cmluZ1ZhbHVlKHZhbHVlKTtcbiAgICB0aGlzLm1lc3NhZ2VGb3JtYXQgPSBnZXRNZXNzYWdlRm9ybWF0KHNjaGVtYVR5cGUpO1xuICAgIHRoaXMua2luZCA9IHR5cGU7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMucGF0aCA9IHBhdGg7XG4gICAgdGhpcy5yZWFzb24gPSByZWFzb247XG4gICAgdGhpcy52YWx1ZVR5cGUgPSBnZXRWYWx1ZVR5cGUodmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIGlnbm9yZVxuICAgKiBAcGFyYW0ge1JlYWRvbmx5PENhc3RFcnJvcj59IG90aGVyXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY29weShvdGhlcikge1xuICAgIHRoaXMubWVzc2FnZUZvcm1hdCA9IG90aGVyLm1lc3NhZ2VGb3JtYXQ7XG4gICAgdGhpcy5zdHJpbmdWYWx1ZSA9IG90aGVyLnN0cmluZ1ZhbHVlO1xuICAgIHRoaXMua2luZCA9IG90aGVyLmtpbmQ7XG4gICAgdGhpcy52YWx1ZSA9IG90aGVyLnZhbHVlO1xuICAgIHRoaXMucGF0aCA9IG90aGVyLnBhdGg7XG4gICAgdGhpcy5yZWFzb24gPSBvdGhlci5yZWFzb247XG4gICAgdGhpcy5tZXNzYWdlID0gb3RoZXIubWVzc2FnZTtcbiAgICB0aGlzLnZhbHVlVHlwZSA9IG90aGVyLnZhbHVlVHlwZTtcbiAgfVxuXG4gIC8qIVxuICAgKiBpZ25vcmVcbiAgICovXG4gIHNldE1vZGVsKG1vZGVsKSB7XG4gICAgdGhpcy5tb2RlbCA9IG1vZGVsO1xuICAgIHRoaXMubWVzc2FnZSA9IGZvcm1hdE1lc3NhZ2UobW9kZWwsIHRoaXMua2luZCwgdGhpcy52YWx1ZSwgdGhpcy5wYXRoLFxuICAgICAgdGhpcy5tZXNzYWdlRm9ybWF0LCB0aGlzLnZhbHVlVHlwZSk7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KENhc3RFcnJvci5wcm90b3R5cGUsICduYW1lJywge1xuICB2YWx1ZTogJ0Nhc3RFcnJvcidcbn0pO1xuXG5mdW5jdGlvbiBnZXRTdHJpbmdWYWx1ZSh2YWx1ZSkge1xuICBsZXQgc3RyaW5nVmFsdWUgPSB1dGlsLmluc3BlY3QodmFsdWUpO1xuICBzdHJpbmdWYWx1ZSA9IHN0cmluZ1ZhbHVlLnJlcGxhY2UoL14nfCckL2csICdcIicpO1xuICBpZiAoIXN0cmluZ1ZhbHVlLnN0YXJ0c1dpdGgoJ1wiJykpIHtcbiAgICBzdHJpbmdWYWx1ZSA9ICdcIicgKyBzdHJpbmdWYWx1ZSArICdcIic7XG4gIH1cbiAgcmV0dXJuIHN0cmluZ1ZhbHVlO1xufVxuXG5mdW5jdGlvbiBnZXRWYWx1ZVR5cGUodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gJycgKyB2YWx1ZTtcbiAgfVxuXG4gIGNvbnN0IHQgPSB0eXBlb2YgdmFsdWU7XG4gIGlmICh0ICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiB0O1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUuY29uc3RydWN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdDtcbiAgfVxuICByZXR1cm4gdmFsdWUuY29uc3RydWN0b3IubmFtZTtcbn1cblxuZnVuY3Rpb24gZ2V0TWVzc2FnZUZvcm1hdChzY2hlbWFUeXBlKSB7XG4gIGNvbnN0IG1lc3NhZ2VGb3JtYXQgPSBzY2hlbWFUeXBlICYmIHNjaGVtYVR5cGUuX2Nhc3RFcnJvck1lc3NhZ2UgfHwgbnVsbDtcbiAgaWYgKHR5cGVvZiBtZXNzYWdlRm9ybWF0ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgbWVzc2FnZUZvcm1hdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBtZXNzYWdlRm9ybWF0O1xuICB9XG59XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0TWVzc2FnZShtb2RlbCwga2luZCwgdmFsdWUsIHBhdGgsIG1lc3NhZ2VGb3JtYXQsIHZhbHVlVHlwZSwgcmVhc29uKSB7XG4gIGlmICh0eXBlb2YgbWVzc2FnZUZvcm1hdCA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25zdCBzdHJpbmdWYWx1ZSA9IGdldFN0cmluZ1ZhbHVlKHZhbHVlKTtcbiAgICBsZXQgcmV0ID0gbWVzc2FnZUZvcm1hdC5cbiAgICAgIHJlcGxhY2UoJ3tLSU5EfScsIGtpbmQpLlxuICAgICAgcmVwbGFjZSgne1ZBTFVFfScsIHN0cmluZ1ZhbHVlKS5cbiAgICAgIHJlcGxhY2UoJ3tQQVRIfScsIHBhdGgpO1xuICAgIGlmIChtb2RlbCAhPSBudWxsKSB7XG4gICAgICByZXQgPSByZXQucmVwbGFjZSgne01PREVMfScsIG1vZGVsLm1vZGVsTmFtZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgbWVzc2FnZUZvcm1hdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBtZXNzYWdlRm9ybWF0KHZhbHVlLCBwYXRoLCBtb2RlbCwga2luZCk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc3RyaW5nVmFsdWUgPSBnZXRTdHJpbmdWYWx1ZSh2YWx1ZSk7XG4gICAgY29uc3QgdmFsdWVUeXBlTXNnID0gdmFsdWVUeXBlID8gJyAodHlwZSAnICsgdmFsdWVUeXBlICsgJyknIDogJyc7XG4gICAgbGV0IHJldCA9ICdDYXN0IHRvICcgKyBraW5kICsgJyBmYWlsZWQgZm9yIHZhbHVlICcgK1xuICAgICAgc3RyaW5nVmFsdWUgKyB2YWx1ZVR5cGVNc2cgKyAnIGF0IHBhdGggXCInICsgcGF0aCArICdcIic7XG4gICAgaWYgKG1vZGVsICE9IG51bGwpIHtcbiAgICAgIHJldCArPSAnIGZvciBtb2RlbCBcIicgKyBtb2RlbC5tb2RlbE5hbWUgKyAnXCInO1xuICAgIH1cbiAgICBpZiAocmVhc29uICE9IG51bGwgJiZcbiAgICAgICAgdHlwZW9mIHJlYXNvbi5jb25zdHJ1Y3RvciA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICByZWFzb24uY29uc3RydWN0b3IubmFtZSAhPT0gJ0Fzc2VydGlvbkVycm9yJyAmJlxuICAgICAgICByZWFzb24uY29uc3RydWN0b3IubmFtZSAhPT0gJ0Vycm9yJykge1xuICAgICAgcmV0ICs9ICcgYmVjYXVzZSBvZiBcIicgKyByZWFzb24uY29uc3RydWN0b3IubmFtZSArICdcIic7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cbn1cblxuLyohXG4gKiBleHBvcnRzXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBDYXN0RXJyb3I7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/error/cast.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/error/createCollectionsError.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mongoose/lib/error/createCollectionsError.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst MongooseError = __webpack_require__(/*! ./mongooseError */ \"(ssr)/./node_modules/mongoose/lib/error/mongooseError.js\");\n\n/**\n * createCollections Error constructor\n *\n * @param {String} message\n * @param {String} errorsMap\n * @inherits MongooseError\n * @api private\n */\n\nclass CreateCollectionsError extends MongooseError {\n  constructor(message, errorsMap) {\n    super(message);\n    this.errors = errorsMap;\n  }\n}\n\nObject.defineProperty(CreateCollectionsError.prototype, 'name', {\n  value: 'CreateCollectionsError'\n});\n\nmodule.exports = CreateCollectionsError;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL2NyZWF0ZUNvbGxlY3Rpb25zRXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsc0JBQXNCLG1CQUFPLENBQUMsaUZBQWlCOztBQUUvQztBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9lcnJvci9jcmVhdGVDb2xsZWN0aW9uc0Vycm9yLmpzP2MxNTMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBNb25nb29zZUVycm9yID0gcmVxdWlyZSgnLi9tb25nb29zZUVycm9yJyk7XG5cbi8qKlxuICogY3JlYXRlQ29sbGVjdGlvbnMgRXJyb3IgY29uc3RydWN0b3JcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICogQHBhcmFtIHtTdHJpbmd9IGVycm9yc01hcFxuICogQGluaGVyaXRzIE1vbmdvb3NlRXJyb3JcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmNsYXNzIENyZWF0ZUNvbGxlY3Rpb25zRXJyb3IgZXh0ZW5kcyBNb25nb29zZUVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgZXJyb3JzTWFwKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5lcnJvcnMgPSBlcnJvcnNNYXA7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KENyZWF0ZUNvbGxlY3Rpb25zRXJyb3IucHJvdG90eXBlLCAnbmFtZScsIHtcbiAgdmFsdWU6ICdDcmVhdGVDb2xsZWN0aW9uc0Vycm9yJ1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ3JlYXRlQ29sbGVjdGlvbnNFcnJvcjtcblxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/error/createCollectionsError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/error/divergentArray.js":
/*!***********************************************************!*\
  !*** ./node_modules/mongoose/lib/error/divergentArray.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseError = __webpack_require__(/*! ./ */ \"(ssr)/./node_modules/mongoose/lib/error/index.js\");\n\nclass DivergentArrayError extends MongooseError {\n  /**\n   * DivergentArrayError constructor.\n   * @param {Array<String>} paths\n   * @api private\n   */\n  constructor(paths) {\n    const msg = 'For your own good, using `document.save()` to update an array '\n            + 'which was selected using an $elemMatch projection OR '\n            + 'populated using skip, limit, query conditions, or exclusion of '\n            + 'the _id field when the operation results in a $pop or $set of '\n            + 'the entire array is not supported. The following '\n            + 'path(s) would have been modified unsafely:\\n'\n            + '  ' + paths.join('\\n  ') + '\\n'\n            + 'Use Model.updateOne() to update these arrays instead.';\n    // TODO write up a docs page (FAQ) and link to it\n    super(msg);\n  }\n}\n\nObject.defineProperty(DivergentArrayError.prototype, 'name', {\n  value: 'DivergentArrayError'\n});\n\n/*!\n * exports\n */\n\nmodule.exports = DivergentArrayError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL2RpdmVyZ2VudEFycmF5LmpzIiwibWFwcGluZ3MiOiI7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWIsc0JBQXNCLG1CQUFPLENBQUMsNERBQUk7O0FBRWxDO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZUFBZTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvZXJyb3IvZGl2ZXJnZW50QXJyYXkuanM/MWMyNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qIVxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IE1vbmdvb3NlRXJyb3IgPSByZXF1aXJlKCcuLycpO1xuXG5jbGFzcyBEaXZlcmdlbnRBcnJheUVycm9yIGV4dGVuZHMgTW9uZ29vc2VFcnJvciB7XG4gIC8qKlxuICAgKiBEaXZlcmdlbnRBcnJheUVycm9yIGNvbnN0cnVjdG9yLlxuICAgKiBAcGFyYW0ge0FycmF5PFN0cmluZz59IHBhdGhzXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY29uc3RydWN0b3IocGF0aHMpIHtcbiAgICBjb25zdCBtc2cgPSAnRm9yIHlvdXIgb3duIGdvb2QsIHVzaW5nIGBkb2N1bWVudC5zYXZlKClgIHRvIHVwZGF0ZSBhbiBhcnJheSAnXG4gICAgICAgICAgICArICd3aGljaCB3YXMgc2VsZWN0ZWQgdXNpbmcgYW4gJGVsZW1NYXRjaCBwcm9qZWN0aW9uIE9SICdcbiAgICAgICAgICAgICsgJ3BvcHVsYXRlZCB1c2luZyBza2lwLCBsaW1pdCwgcXVlcnkgY29uZGl0aW9ucywgb3IgZXhjbHVzaW9uIG9mICdcbiAgICAgICAgICAgICsgJ3RoZSBfaWQgZmllbGQgd2hlbiB0aGUgb3BlcmF0aW9uIHJlc3VsdHMgaW4gYSAkcG9wIG9yICRzZXQgb2YgJ1xuICAgICAgICAgICAgKyAndGhlIGVudGlyZSBhcnJheSBpcyBub3Qgc3VwcG9ydGVkLiBUaGUgZm9sbG93aW5nICdcbiAgICAgICAgICAgICsgJ3BhdGgocykgd291bGQgaGF2ZSBiZWVuIG1vZGlmaWVkIHVuc2FmZWx5OlxcbidcbiAgICAgICAgICAgICsgJyAgJyArIHBhdGhzLmpvaW4oJ1xcbiAgJykgKyAnXFxuJ1xuICAgICAgICAgICAgKyAnVXNlIE1vZGVsLnVwZGF0ZU9uZSgpIHRvIHVwZGF0ZSB0aGVzZSBhcnJheXMgaW5zdGVhZC4nO1xuICAgIC8vIFRPRE8gd3JpdGUgdXAgYSBkb2NzIHBhZ2UgKEZBUSkgYW5kIGxpbmsgdG8gaXRcbiAgICBzdXBlcihtc2cpO1xuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEaXZlcmdlbnRBcnJheUVycm9yLnByb3RvdHlwZSwgJ25hbWUnLCB7XG4gIHZhbHVlOiAnRGl2ZXJnZW50QXJyYXlFcnJvcidcbn0pO1xuXG4vKiFcbiAqIGV4cG9ydHNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IERpdmVyZ2VudEFycmF5RXJyb3I7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/error/divergentArray.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/error/eachAsyncMultiError.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongoose/lib/error/eachAsyncMultiError.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseError = __webpack_require__(/*! ./ */ \"(ssr)/./node_modules/mongoose/lib/error/index.js\");\n\n\n/**\n * If `eachAsync()` is called with `continueOnError: true`, there can be\n * multiple errors. This error class contains an `errors` property, which\n * contains an array of all errors that occurred in `eachAsync()`.\n *\n * @api private\n */\n\nclass EachAsyncMultiError extends MongooseError {\n  /**\n   * @param {String} connectionString\n   */\n  constructor(errors) {\n    let preview = errors.map(e => e.message).join(', ');\n    if (preview.length > 50) {\n      preview = preview.slice(0, 50) + '...';\n    }\n    super(`eachAsync() finished with ${errors.length} errors: ${preview}`);\n\n    this.errors = errors;\n  }\n}\n\nObject.defineProperty(EachAsyncMultiError.prototype, 'name', {\n  value: 'EachAsyncMultiError'\n});\n\n/*!\n * exports\n */\n\nmodule.exports = EachAsyncMultiError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL2VhY2hBc3luY011bHRpRXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVhOztBQUViLHNCQUFzQixtQkFBTyxDQUFDLDREQUFJOzs7QUFHbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsZUFBZSxVQUFVLFFBQVE7O0FBRXhFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9lcnJvci9lYWNoQXN5bmNNdWx0aUVycm9yLmpzPzIzN2YiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgTW9uZ29vc2VFcnJvciA9IHJlcXVpcmUoJy4vJyk7XG5cblxuLyoqXG4gKiBJZiBgZWFjaEFzeW5jKClgIGlzIGNhbGxlZCB3aXRoIGBjb250aW51ZU9uRXJyb3I6IHRydWVgLCB0aGVyZSBjYW4gYmVcbiAqIG11bHRpcGxlIGVycm9ycy4gVGhpcyBlcnJvciBjbGFzcyBjb250YWlucyBhbiBgZXJyb3JzYCBwcm9wZXJ0eSwgd2hpY2hcbiAqIGNvbnRhaW5zIGFuIGFycmF5IG9mIGFsbCBlcnJvcnMgdGhhdCBvY2N1cnJlZCBpbiBgZWFjaEFzeW5jKClgLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmNsYXNzIEVhY2hBc3luY011bHRpRXJyb3IgZXh0ZW5kcyBNb25nb29zZUVycm9yIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjb25uZWN0aW9uU3RyaW5nXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlcnJvcnMpIHtcbiAgICBsZXQgcHJldmlldyA9IGVycm9ycy5tYXAoZSA9PiBlLm1lc3NhZ2UpLmpvaW4oJywgJyk7XG4gICAgaWYgKHByZXZpZXcubGVuZ3RoID4gNTApIHtcbiAgICAgIHByZXZpZXcgPSBwcmV2aWV3LnNsaWNlKDAsIDUwKSArICcuLi4nO1xuICAgIH1cbiAgICBzdXBlcihgZWFjaEFzeW5jKCkgZmluaXNoZWQgd2l0aCAke2Vycm9ycy5sZW5ndGh9IGVycm9yczogJHtwcmV2aWV3fWApO1xuXG4gICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEVhY2hBc3luY011bHRpRXJyb3IucHJvdG90eXBlLCAnbmFtZScsIHtcbiAgdmFsdWU6ICdFYWNoQXN5bmNNdWx0aUVycm9yJ1xufSk7XG5cbi8qIVxuICogZXhwb3J0c1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gRWFjaEFzeW5jTXVsdGlFcnJvcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/error/eachAsyncMultiError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/error/index.js":
/*!**************************************************!*\
  !*** ./node_modules/mongoose/lib/error/index.js ***!
  \**************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\n/**\n * MongooseError constructor. MongooseError is the base class for all\n * Mongoose-specific errors.\n *\n * #### Example:\n *\n *     const Model = mongoose.model('Test', new mongoose.Schema({ answer: Number }));\n *     const doc = new Model({ answer: 'not a number' });\n *     const err = doc.validateSync();\n *\n *     err instanceof mongoose.Error.ValidationError; // true\n *\n * @constructor Error\n * @param {String} msg Error message\n * @inherits Error https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error\n */\n\nconst MongooseError = __webpack_require__(/*! ./mongooseError */ \"(ssr)/./node_modules/mongoose/lib/error/mongooseError.js\");\n\n/**\n * The name of the error. The name uniquely identifies this Mongoose error. The\n * possible values are:\n *\n * - `MongooseError`: general Mongoose error\n * - `CastError`: Mongoose could not convert a value to the type defined in the schema path. May be in a `ValidationError` class' `errors` property.\n * - `DivergentArrayError`: You attempted to `save()` an array that was modified after you loaded it with a `$elemMatch` or similar projection\n * - `MissingSchemaError`: You tried to access a model with [`mongoose.model()`](https://mongoosejs.com/docs/api/mongoose.html#Mongoose.model()) that was not defined\n * - `DocumentNotFoundError`: The document you tried to [`save()`](https://mongoosejs.com/docs/api/document.html#Document.prototype.save()) was not found\n * - `ValidatorError`: error from an individual schema path's validator\n * - `ValidationError`: error returned from [`validate()`](https://mongoosejs.com/docs/api/document.html#Document.prototype.validate()) or [`validateSync()`](https://mongoosejs.com/docs/api/document.html#Document.prototype.validateSync()). Contains zero or more `ValidatorError` instances in `.errors` property.\n * - `MissingSchemaError`: You called `mongoose.Document()` without a schema\n * - `ObjectExpectedError`: Thrown when you set a nested path to a non-object value with [strict mode set](https://mongoosejs.com/docs/guide.html#strict).\n * - `ObjectParameterError`: Thrown when you pass a non-object value to a function which expects an object as a paramter\n * - `OverwriteModelError`: Thrown when you call [`mongoose.model()`](https://mongoosejs.com/docs/api/mongoose.html#Mongoose.model()) to re-define a model that was already defined.\n * - `ParallelSaveError`: Thrown when you call [`save()`](https://mongoosejs.com/docs/api/model.html#Model.prototype.save()) on a document when the same document instance is already saving.\n * - `StrictModeError`: Thrown when you set a path that isn't the schema and [strict mode](https://mongoosejs.com/docs/guide.html#strict) is set to `throw`.\n * - `VersionError`: Thrown when the [document is out of sync](https://mongoosejs.com/docs/guide.html#versionKey)\n *\n * @api public\n * @property {String} name\n * @memberOf Error\n * @instance\n */\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = MongooseError;\n\n/**\n * The default built-in validator error messages.\n *\n * @see Error.messages https://mongoosejs.com/docs/api/error.html#Error.messages\n * @api public\n * @memberOf Error\n * @static\n */\n\nMongooseError.messages = __webpack_require__(/*! ./messages */ \"(ssr)/./node_modules/mongoose/lib/error/messages.js\");\n\n// backward compat\nMongooseError.Messages = MongooseError.messages;\n\n/**\n * An instance of this error class will be returned when `save()` fails\n * because the underlying\n * document was not found. The constructor takes one parameter, the\n * conditions that mongoose passed to `updateOne()` when trying to update\n * the document.\n *\n * @api public\n * @memberOf Error\n * @static\n */\n\nMongooseError.DocumentNotFoundError = __webpack_require__(/*! ./notFound */ \"(ssr)/./node_modules/mongoose/lib/error/notFound.js\");\n\n/**\n * An instance of this error class will be returned when mongoose failed to\n * cast a value.\n *\n * @api public\n * @memberOf Error\n * @static\n */\n\nMongooseError.CastError = __webpack_require__(/*! ./cast */ \"(ssr)/./node_modules/mongoose/lib/error/cast.js\");\n\n/**\n * An instance of this error class will be returned when [validation](https://mongoosejs.com/docs/validation.html) failed.\n * The `errors` property contains an object whose keys are the paths that failed and whose values are\n * instances of CastError or ValidationError.\n *\n * @api public\n * @memberOf Error\n * @static\n */\n\nMongooseError.ValidationError = __webpack_require__(/*! ./validation */ \"(ssr)/./node_modules/mongoose/lib/error/validation.js\");\n\n/**\n * A `ValidationError` has a hash of `errors` that contain individual\n * `ValidatorError` instances.\n *\n * #### Example:\n *\n *     const schema = Schema({ name: { type: String, required: true } });\n *     const Model = mongoose.model('Test', schema);\n *     const doc = new Model({});\n *\n *     // Top-level error is a ValidationError, **not** a ValidatorError\n *     const err = doc.validateSync();\n *     err instanceof mongoose.Error.ValidationError; // true\n *\n *     // A ValidationError `err` has 0 or more ValidatorErrors keyed by the\n *     // path in the `err.errors` property.\n *     err.errors['name'] instanceof mongoose.Error.ValidatorError;\n *\n *     err.errors['name'].kind; // 'required'\n *     err.errors['name'].path; // 'name'\n *     err.errors['name'].value; // undefined\n *\n * Instances of `ValidatorError` have the following properties:\n *\n * - `kind`: The validator's `type`, like `'required'` or `'regexp'`\n * - `path`: The path that failed validation\n * - `value`: The value that failed validation\n *\n * @api public\n * @memberOf Error\n * @static\n */\n\nMongooseError.ValidatorError = __webpack_require__(/*! ./validator */ \"(ssr)/./node_modules/mongoose/lib/error/validator.js\");\n\n/**\n * An instance of this error class will be returned when you call `save()` after\n * the document in the database was changed in a potentially unsafe way. See\n * the [`versionKey` option](https://mongoosejs.com/docs/guide.html#versionKey) for more information.\n *\n * @api public\n * @memberOf Error\n * @static\n */\n\nMongooseError.VersionError = __webpack_require__(/*! ./version */ \"(ssr)/./node_modules/mongoose/lib/error/version.js\");\n\n/**\n * An instance of this error class will be returned when you call `save()` multiple\n * times on the same document in parallel. See the [FAQ](https://mongoosejs.com/docs/faq.html) for more\n * information.\n *\n * @api public\n * @memberOf Error\n * @static\n */\n\nMongooseError.ParallelSaveError = __webpack_require__(/*! ./parallelSave */ \"(ssr)/./node_modules/mongoose/lib/error/parallelSave.js\");\n\n/**\n * Thrown when a model with the given name was already registered on the connection.\n * See [the FAQ about `OverwriteModelError`](https://mongoosejs.com/docs/faq.html#overwrite-model-error).\n *\n * @api public\n * @memberOf Error\n * @static\n */\n\nMongooseError.OverwriteModelError = __webpack_require__(/*! ./overwriteModel */ \"(ssr)/./node_modules/mongoose/lib/error/overwriteModel.js\");\n\n/**\n * Thrown when you try to access a model that has not been registered yet\n *\n * @api public\n * @memberOf Error\n * @static\n */\n\nMongooseError.MissingSchemaError = __webpack_require__(/*! ./missingSchema */ \"(ssr)/./node_modules/mongoose/lib/error/missingSchema.js\");\n\n/**\n * Thrown when the MongoDB Node driver can't connect to a valid server\n * to send an operation to.\n *\n * @api public\n * @memberOf Error\n * @static\n */\n\nMongooseError.MongooseServerSelectionError = __webpack_require__(/*! ./serverSelection */ \"(ssr)/./node_modules/mongoose/lib/error/serverSelection.js\");\n\n/**\n * An instance of this error will be returned if you used an array projection\n * and then modified the array in an unsafe way.\n *\n * @api public\n * @memberOf Error\n * @static\n */\n\nMongooseError.DivergentArrayError = __webpack_require__(/*! ./divergentArray */ \"(ssr)/./node_modules/mongoose/lib/error/divergentArray.js\");\n\n/**\n * Thrown when your try to pass values to model constructor that\n * were not specified in schema or change immutable properties when\n * `strict` mode is `\"throw\"`\n *\n * @api public\n * @memberOf Error\n * @static\n */\n\nMongooseError.StrictModeError = __webpack_require__(/*! ./strict */ \"(ssr)/./node_modules/mongoose/lib/error/strict.js\");\n\n/**\n * An instance of this error class will be returned when mongoose failed to\n * populate with a path that is not existing.\n *\n * @api public\n * @memberOf Error\n * @static\n */\n\nMongooseError.StrictPopulateError = __webpack_require__(/*! ./strictPopulate */ \"(ssr)/./node_modules/mongoose/lib/error/strictPopulate.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/error/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/error/invalidSchemaOption.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongoose/lib/error/invalidSchemaOption.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseError = __webpack_require__(/*! ./ */ \"(ssr)/./node_modules/mongoose/lib/error/index.js\");\n\nclass InvalidSchemaOptionError extends MongooseError {\n  /**\n   * InvalidSchemaOption Error constructor.\n   * @param {String} name\n   * @api private\n   */\n  constructor(name, option) {\n    const msg = `Cannot create use schema for property \"${name}\" because the schema has the ${option} option enabled.`;\n    super(msg);\n  }\n}\n\nObject.defineProperty(InvalidSchemaOptionError.prototype, 'name', {\n  value: 'InvalidSchemaOptionError'\n});\n\n/*!\n * exports\n */\n\nmodule.exports = InvalidSchemaOptionError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL2ludmFsaWRTY2hlbWFPcHRpb24uanMiLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYixzQkFBc0IsbUJBQU8sQ0FBQyw0REFBSTs7QUFFbEM7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRCxLQUFLLCtCQUErQixRQUFRO0FBQ3RHO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9lcnJvci9pbnZhbGlkU2NoZW1hT3B0aW9uLmpzPzgyYmQiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vKiFcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBNb25nb29zZUVycm9yID0gcmVxdWlyZSgnLi8nKTtcblxuY2xhc3MgSW52YWxpZFNjaGVtYU9wdGlvbkVycm9yIGV4dGVuZHMgTW9uZ29vc2VFcnJvciB7XG4gIC8qKlxuICAgKiBJbnZhbGlkU2NoZW1hT3B0aW9uIEVycm9yIGNvbnN0cnVjdG9yLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGNvbnN0cnVjdG9yKG5hbWUsIG9wdGlvbikge1xuICAgIGNvbnN0IG1zZyA9IGBDYW5ub3QgY3JlYXRlIHVzZSBzY2hlbWEgZm9yIHByb3BlcnR5IFwiJHtuYW1lfVwiIGJlY2F1c2UgdGhlIHNjaGVtYSBoYXMgdGhlICR7b3B0aW9ufSBvcHRpb24gZW5hYmxlZC5gO1xuICAgIHN1cGVyKG1zZyk7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEludmFsaWRTY2hlbWFPcHRpb25FcnJvci5wcm90b3R5cGUsICduYW1lJywge1xuICB2YWx1ZTogJ0ludmFsaWRTY2hlbWFPcHRpb25FcnJvcidcbn0pO1xuXG4vKiFcbiAqIGV4cG9ydHNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludmFsaWRTY2hlbWFPcHRpb25FcnJvcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/error/invalidSchemaOption.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/error/messages.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongoose/lib/error/messages.js ***!
  \*****************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\n/**\n * The default built-in validator error messages. These may be customized.\n *\n *     // customize within each schema or globally like so\n *     const mongoose = require('mongoose');\n *     mongoose.Error.messages.String.enum  = \"Your custom message for {PATH}.\";\n *\n * Error messages support basic templating. Mongoose will replace the following strings with the corresponding value.\n *\n * - `{PATH}` is replaced with the invalid document path\n * - `{VALUE}` is replaced with the invalid value\n * - `{TYPE}` is replaced with the validator type such as \"regexp\", \"min\", or \"user defined\"\n * - `{MIN}` is replaced with the declared min value for the Number.min validator\n * - `{MAX}` is replaced with the declared max value for the Number.max validator\n *\n * Click the \"show code\" link below to see all defaults.\n *\n * @static\n * @memberOf MongooseError\n * @api public\n */\n\n\n\nconst msg = module.exports = exports = {};\n\nmsg.DocumentNotFoundError = null;\n\nmsg.general = {};\nmsg.general.default = 'Validator failed for path `{PATH}` with value `{VALUE}`';\nmsg.general.required = 'Path `{PATH}` is required.';\n\nmsg.Number = {};\nmsg.Number.min = 'Path `{PATH}` ({VALUE}) is less than minimum allowed value ({MIN}).';\nmsg.Number.max = 'Path `{PATH}` ({VALUE}) is more than maximum allowed value ({MAX}).';\nmsg.Number.enum = '`{VALUE}` is not a valid enum value for path `{PATH}`.';\n\nmsg.Date = {};\nmsg.Date.min = 'Path `{PATH}` ({VALUE}) is before minimum allowed value ({MIN}).';\nmsg.Date.max = 'Path `{PATH}` ({VALUE}) is after maximum allowed value ({MAX}).';\n\nmsg.String = {};\nmsg.String.enum = '`{VALUE}` is not a valid enum value for path `{PATH}`.';\nmsg.String.match = 'Path `{PATH}` is invalid ({VALUE}).';\nmsg.String.minlength = 'Path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).';\nmsg.String.maxlength = 'Path `{PATH}` (`{VALUE}`) is longer than the maximum allowed length ({MAXLENGTH}).';\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL21lc3NhZ2VzLmpzIiwibWFwcGluZ3MiOiI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFLEtBQUs7QUFDN0U7QUFDQTtBQUNBO0FBQ0EsT0FBTyxLQUFLO0FBQ1osT0FBTyxNQUFNO0FBQ2IsT0FBTyxLQUFLO0FBQ1osT0FBTyxJQUFJO0FBQ1gsT0FBTyxJQUFJO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWI7O0FBRUE7O0FBRUE7QUFDQSxtREFBbUQsS0FBSyxlQUFlLE1BQU07QUFDN0UsK0JBQStCLEtBQUs7O0FBRXBDO0FBQ0EseUJBQXlCLEtBQUssSUFBSSxNQUFNLHVDQUF1QyxJQUFJO0FBQ25GLHlCQUF5QixLQUFLLElBQUksTUFBTSx1Q0FBdUMsSUFBSTtBQUNuRixxQkFBcUIsTUFBTSx1Q0FBdUMsS0FBSzs7QUFFdkU7QUFDQSx1QkFBdUIsS0FBSyxJQUFJLE1BQU0sb0NBQW9DLElBQUk7QUFDOUUsdUJBQXVCLEtBQUssSUFBSSxNQUFNLG1DQUFtQyxJQUFJOztBQUU3RTtBQUNBLHFCQUFxQixNQUFNLHVDQUF1QyxLQUFLO0FBQ3ZFLDJCQUEyQixLQUFLLGVBQWUsTUFBTTtBQUNyRCwrQkFBK0IsS0FBSyxLQUFLLE1BQU0sZ0RBQWdELFVBQVU7QUFDekcsK0JBQStCLEtBQUssS0FBSyxNQUFNLCtDQUErQyxVQUFVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvZXJyb3IvbWVzc2FnZXMuanM/YzUyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogVGhlIGRlZmF1bHQgYnVpbHQtaW4gdmFsaWRhdG9yIGVycm9yIG1lc3NhZ2VzLiBUaGVzZSBtYXkgYmUgY3VzdG9taXplZC5cbiAqXG4gKiAgICAgLy8gY3VzdG9taXplIHdpdGhpbiBlYWNoIHNjaGVtYSBvciBnbG9iYWxseSBsaWtlIHNvXG4gKiAgICAgY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpO1xuICogICAgIG1vbmdvb3NlLkVycm9yLm1lc3NhZ2VzLlN0cmluZy5lbnVtICA9IFwiWW91ciBjdXN0b20gbWVzc2FnZSBmb3Ige1BBVEh9LlwiO1xuICpcbiAqIEVycm9yIG1lc3NhZ2VzIHN1cHBvcnQgYmFzaWMgdGVtcGxhdGluZy4gTW9uZ29vc2Ugd2lsbCByZXBsYWNlIHRoZSBmb2xsb3dpbmcgc3RyaW5ncyB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIHZhbHVlLlxuICpcbiAqIC0gYHtQQVRIfWAgaXMgcmVwbGFjZWQgd2l0aCB0aGUgaW52YWxpZCBkb2N1bWVudCBwYXRoXG4gKiAtIGB7VkFMVUV9YCBpcyByZXBsYWNlZCB3aXRoIHRoZSBpbnZhbGlkIHZhbHVlXG4gKiAtIGB7VFlQRX1gIGlzIHJlcGxhY2VkIHdpdGggdGhlIHZhbGlkYXRvciB0eXBlIHN1Y2ggYXMgXCJyZWdleHBcIiwgXCJtaW5cIiwgb3IgXCJ1c2VyIGRlZmluZWRcIlxuICogLSBge01JTn1gIGlzIHJlcGxhY2VkIHdpdGggdGhlIGRlY2xhcmVkIG1pbiB2YWx1ZSBmb3IgdGhlIE51bWJlci5taW4gdmFsaWRhdG9yXG4gKiAtIGB7TUFYfWAgaXMgcmVwbGFjZWQgd2l0aCB0aGUgZGVjbGFyZWQgbWF4IHZhbHVlIGZvciB0aGUgTnVtYmVyLm1heCB2YWxpZGF0b3JcbiAqXG4gKiBDbGljayB0aGUgXCJzaG93IGNvZGVcIiBsaW5rIGJlbG93IHRvIHNlZSBhbGwgZGVmYXVsdHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIE1vbmdvb3NlRXJyb3JcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBtc2cgPSBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSB7fTtcblxubXNnLkRvY3VtZW50Tm90Rm91bmRFcnJvciA9IG51bGw7XG5cbm1zZy5nZW5lcmFsID0ge307XG5tc2cuZ2VuZXJhbC5kZWZhdWx0ID0gJ1ZhbGlkYXRvciBmYWlsZWQgZm9yIHBhdGggYHtQQVRIfWAgd2l0aCB2YWx1ZSBge1ZBTFVFfWAnO1xubXNnLmdlbmVyYWwucmVxdWlyZWQgPSAnUGF0aCBge1BBVEh9YCBpcyByZXF1aXJlZC4nO1xuXG5tc2cuTnVtYmVyID0ge307XG5tc2cuTnVtYmVyLm1pbiA9ICdQYXRoIGB7UEFUSH1gICh7VkFMVUV9KSBpcyBsZXNzIHRoYW4gbWluaW11bSBhbGxvd2VkIHZhbHVlICh7TUlOfSkuJztcbm1zZy5OdW1iZXIubWF4ID0gJ1BhdGggYHtQQVRIfWAgKHtWQUxVRX0pIGlzIG1vcmUgdGhhbiBtYXhpbXVtIGFsbG93ZWQgdmFsdWUgKHtNQVh9KS4nO1xubXNnLk51bWJlci5lbnVtID0gJ2B7VkFMVUV9YCBpcyBub3QgYSB2YWxpZCBlbnVtIHZhbHVlIGZvciBwYXRoIGB7UEFUSH1gLic7XG5cbm1zZy5EYXRlID0ge307XG5tc2cuRGF0ZS5taW4gPSAnUGF0aCBge1BBVEh9YCAoe1ZBTFVFfSkgaXMgYmVmb3JlIG1pbmltdW0gYWxsb3dlZCB2YWx1ZSAoe01JTn0pLic7XG5tc2cuRGF0ZS5tYXggPSAnUGF0aCBge1BBVEh9YCAoe1ZBTFVFfSkgaXMgYWZ0ZXIgbWF4aW11bSBhbGxvd2VkIHZhbHVlICh7TUFYfSkuJztcblxubXNnLlN0cmluZyA9IHt9O1xubXNnLlN0cmluZy5lbnVtID0gJ2B7VkFMVUV9YCBpcyBub3QgYSB2YWxpZCBlbnVtIHZhbHVlIGZvciBwYXRoIGB7UEFUSH1gLic7XG5tc2cuU3RyaW5nLm1hdGNoID0gJ1BhdGggYHtQQVRIfWAgaXMgaW52YWxpZCAoe1ZBTFVFfSkuJztcbm1zZy5TdHJpbmcubWlubGVuZ3RoID0gJ1BhdGggYHtQQVRIfWAgKGB7VkFMVUV9YCkgaXMgc2hvcnRlciB0aGFuIHRoZSBtaW5pbXVtIGFsbG93ZWQgbGVuZ3RoICh7TUlOTEVOR1RIfSkuJztcbm1zZy5TdHJpbmcubWF4bGVuZ3RoID0gJ1BhdGggYHtQQVRIfWAgKGB7VkFMVUV9YCkgaXMgbG9uZ2VyIHRoYW4gdGhlIG1heGltdW0gYWxsb3dlZCBsZW5ndGggKHtNQVhMRU5HVEh9KS4nO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/error/messages.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/error/missingSchema.js":
/*!**********************************************************!*\
  !*** ./node_modules/mongoose/lib/error/missingSchema.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseError = __webpack_require__(/*! ./ */ \"(ssr)/./node_modules/mongoose/lib/error/index.js\");\n\nclass MissingSchemaError extends MongooseError {\n  /**\n   * MissingSchema Error constructor.\n   * @param {String} name\n   * @api private\n   */\n  constructor(name) {\n    const msg = 'Schema hasn\\'t been registered for model \"' + name + '\".\\n'\n            + 'Use mongoose.model(name, schema)';\n    super(msg);\n  }\n}\n\nObject.defineProperty(MissingSchemaError.prototype, 'name', {\n  value: 'MissingSchemaError'\n});\n\n/*!\n * exports\n */\n\nmodule.exports = MissingSchemaError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL21pc3NpbmdTY2hlbWEuanMiLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYixzQkFBc0IsbUJBQU8sQ0FBQyw0REFBSTs7QUFFbEM7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvZXJyb3IvbWlzc2luZ1NjaGVtYS5qcz9mY2M3Il0sInNvdXJjZXNDb250ZW50IjpbIlxuLyohXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgTW9uZ29vc2VFcnJvciA9IHJlcXVpcmUoJy4vJyk7XG5cbmNsYXNzIE1pc3NpbmdTY2hlbWFFcnJvciBleHRlbmRzIE1vbmdvb3NlRXJyb3Ige1xuICAvKipcbiAgICogTWlzc2luZ1NjaGVtYSBFcnJvciBjb25zdHJ1Y3Rvci5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihuYW1lKSB7XG4gICAgY29uc3QgbXNnID0gJ1NjaGVtYSBoYXNuXFwndCBiZWVuIHJlZ2lzdGVyZWQgZm9yIG1vZGVsIFwiJyArIG5hbWUgKyAnXCIuXFxuJ1xuICAgICAgICAgICAgKyAnVXNlIG1vbmdvb3NlLm1vZGVsKG5hbWUsIHNjaGVtYSknO1xuICAgIHN1cGVyKG1zZyk7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KE1pc3NpbmdTY2hlbWFFcnJvci5wcm90b3R5cGUsICduYW1lJywge1xuICB2YWx1ZTogJ01pc3NpbmdTY2hlbWFFcnJvcidcbn0pO1xuXG4vKiFcbiAqIGV4cG9ydHNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1pc3NpbmdTY2hlbWFFcnJvcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/error/missingSchema.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/error/mongooseError.js":
/*!**********************************************************!*\
  !*** ./node_modules/mongoose/lib/error/mongooseError.js ***!
  \**********************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/*!\n * ignore\n */\n\nclass MongooseError extends Error { }\n\nObject.defineProperty(MongooseError.prototype, 'name', {\n  value: 'MongooseError'\n});\n\nmodule.exports = MongooseError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL21vbmdvb3NlRXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvZXJyb3IvbW9uZ29vc2VFcnJvci5qcz9jMGYzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyohXG4gKiBpZ25vcmVcbiAqL1xuXG5jbGFzcyBNb25nb29zZUVycm9yIGV4dGVuZHMgRXJyb3IgeyB9XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb25nb29zZUVycm9yLnByb3RvdHlwZSwgJ25hbWUnLCB7XG4gIHZhbHVlOiAnTW9uZ29vc2VFcnJvcidcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1vbmdvb3NlRXJyb3I7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/error/mongooseError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/error/notFound.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongoose/lib/error/notFound.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\nconst MongooseError = __webpack_require__(/*! ./ */ \"(ssr)/./node_modules/mongoose/lib/error/index.js\");\nconst util = __webpack_require__(/*! util */ \"util\");\n\nclass DocumentNotFoundError extends MongooseError {\n  /**\n   * OverwriteModel Error constructor.\n   * @api private\n   */\n  constructor(filter, model, numAffected, result) {\n    let msg;\n    const messages = MongooseError.messages;\n    if (messages.DocumentNotFoundError != null) {\n      msg = typeof messages.DocumentNotFoundError === 'function' ?\n        messages.DocumentNotFoundError(filter, model) :\n        messages.DocumentNotFoundError;\n    } else {\n      msg = 'No document found for query \"' + util.inspect(filter) +\n        '\" on model \"' + model + '\"';\n    }\n\n    super(msg);\n\n    this.result = result;\n    this.numAffected = numAffected;\n    this.filter = filter;\n    // Backwards compat\n    this.query = filter;\n  }\n}\n\nObject.defineProperty(DocumentNotFoundError.prototype, 'name', {\n  value: 'DocumentNotFoundError'\n});\n\n/*!\n * exports\n */\n\nmodule.exports = DocumentNotFoundError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL25vdEZvdW5kLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTs7QUFFQSxzQkFBc0IsbUJBQU8sQ0FBQyw0REFBSTtBQUNsQyxhQUFhLG1CQUFPLENBQUMsa0JBQU07O0FBRTNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvZXJyb3Ivbm90Rm91bmQuanM/MmFmNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qIVxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG5jb25zdCBNb25nb29zZUVycm9yID0gcmVxdWlyZSgnLi8nKTtcbmNvbnN0IHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbmNsYXNzIERvY3VtZW50Tm90Rm91bmRFcnJvciBleHRlbmRzIE1vbmdvb3NlRXJyb3Ige1xuICAvKipcbiAgICogT3ZlcndyaXRlTW9kZWwgRXJyb3IgY29uc3RydWN0b3IuXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY29uc3RydWN0b3IoZmlsdGVyLCBtb2RlbCwgbnVtQWZmZWN0ZWQsIHJlc3VsdCkge1xuICAgIGxldCBtc2c7XG4gICAgY29uc3QgbWVzc2FnZXMgPSBNb25nb29zZUVycm9yLm1lc3NhZ2VzO1xuICAgIGlmIChtZXNzYWdlcy5Eb2N1bWVudE5vdEZvdW5kRXJyb3IgIT0gbnVsbCkge1xuICAgICAgbXNnID0gdHlwZW9mIG1lc3NhZ2VzLkRvY3VtZW50Tm90Rm91bmRFcnJvciA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgICAgIG1lc3NhZ2VzLkRvY3VtZW50Tm90Rm91bmRFcnJvcihmaWx0ZXIsIG1vZGVsKSA6XG4gICAgICAgIG1lc3NhZ2VzLkRvY3VtZW50Tm90Rm91bmRFcnJvcjtcbiAgICB9IGVsc2Uge1xuICAgICAgbXNnID0gJ05vIGRvY3VtZW50IGZvdW5kIGZvciBxdWVyeSBcIicgKyB1dGlsLmluc3BlY3QoZmlsdGVyKSArXG4gICAgICAgICdcIiBvbiBtb2RlbCBcIicgKyBtb2RlbCArICdcIic7XG4gICAgfVxuXG4gICAgc3VwZXIobXNnKTtcblxuICAgIHRoaXMucmVzdWx0ID0gcmVzdWx0O1xuICAgIHRoaXMubnVtQWZmZWN0ZWQgPSBudW1BZmZlY3RlZDtcbiAgICB0aGlzLmZpbHRlciA9IGZpbHRlcjtcbiAgICAvLyBCYWNrd2FyZHMgY29tcGF0XG4gICAgdGhpcy5xdWVyeSA9IGZpbHRlcjtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRG9jdW1lbnROb3RGb3VuZEVycm9yLnByb3RvdHlwZSwgJ25hbWUnLCB7XG4gIHZhbHVlOiAnRG9jdW1lbnROb3RGb3VuZEVycm9yJ1xufSk7XG5cbi8qIVxuICogZXhwb3J0c1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gRG9jdW1lbnROb3RGb3VuZEVycm9yO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/error/notFound.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/error/objectExpected.js":
/*!***********************************************************!*\
  !*** ./node_modules/mongoose/lib/error/objectExpected.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseError = __webpack_require__(/*! ./ */ \"(ssr)/./node_modules/mongoose/lib/error/index.js\");\n\n\nclass ObjectExpectedError extends MongooseError {\n  /**\n   * Strict mode error constructor\n   *\n   * @param {string} type\n   * @param {string} value\n   * @api private\n   */\n  constructor(path, val) {\n    const typeDescription = Array.isArray(val) ? 'array' : 'primitive value';\n    super('Tried to set nested object field `' + path +\n      `\\` to ${typeDescription} \\`` + val + '`');\n    this.path = path;\n  }\n}\n\nObject.defineProperty(ObjectExpectedError.prototype, 'name', {\n  value: 'ObjectExpectedError'\n});\n\nmodule.exports = ObjectExpectedError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL29iamVjdEV4cGVjdGVkLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYixzQkFBc0IsbUJBQU8sQ0FBQyw0REFBSTs7O0FBR2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxpQkFBaUI7QUFDaEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvZXJyb3Ivb2JqZWN0RXhwZWN0ZWQuanM/NzFkYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBNb25nb29zZUVycm9yID0gcmVxdWlyZSgnLi8nKTtcblxuXG5jbGFzcyBPYmplY3RFeHBlY3RlZEVycm9yIGV4dGVuZHMgTW9uZ29vc2VFcnJvciB7XG4gIC8qKlxuICAgKiBTdHJpY3QgbW9kZSBlcnJvciBjb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwYXRoLCB2YWwpIHtcbiAgICBjb25zdCB0eXBlRGVzY3JpcHRpb24gPSBBcnJheS5pc0FycmF5KHZhbCkgPyAnYXJyYXknIDogJ3ByaW1pdGl2ZSB2YWx1ZSc7XG4gICAgc3VwZXIoJ1RyaWVkIHRvIHNldCBuZXN0ZWQgb2JqZWN0IGZpZWxkIGAnICsgcGF0aCArXG4gICAgICBgXFxgIHRvICR7dHlwZURlc2NyaXB0aW9ufSBcXGBgICsgdmFsICsgJ2AnKTtcbiAgICB0aGlzLnBhdGggPSBwYXRoO1xuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYmplY3RFeHBlY3RlZEVycm9yLnByb3RvdHlwZSwgJ25hbWUnLCB7XG4gIHZhbHVlOiAnT2JqZWN0RXhwZWN0ZWRFcnJvcidcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdEV4cGVjdGVkRXJyb3I7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/error/objectExpected.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/error/objectParameter.js":
/*!************************************************************!*\
  !*** ./node_modules/mongoose/lib/error/objectParameter.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseError = __webpack_require__(/*! ./ */ \"(ssr)/./node_modules/mongoose/lib/error/index.js\");\n\nclass ObjectParameterError extends MongooseError {\n  /**\n   * Constructor for errors that happen when a parameter that's expected to be\n   * an object isn't an object\n   *\n   * @param {Any} value\n   * @param {String} paramName\n   * @param {String} fnName\n   * @api private\n   */\n  constructor(value, paramName, fnName) {\n    super('Parameter \"' + paramName + '\" to ' + fnName +\n      '() must be an object, got \"' + value.toString() + '\" (type ' + typeof value + ')');\n  }\n}\n\n\nObject.defineProperty(ObjectParameterError.prototype, 'name', {\n  value: 'ObjectParameterError'\n});\n\nmodule.exports = ObjectParameterError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL29iamVjdFBhcmFtZXRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWIsc0JBQXNCLG1CQUFPLENBQUMsNERBQUk7O0FBRWxDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLEtBQUs7QUFDbEIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9lcnJvci9vYmplY3RQYXJhbWV0ZXIuanM/MTVhYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBNb25nb29zZUVycm9yID0gcmVxdWlyZSgnLi8nKTtcblxuY2xhc3MgT2JqZWN0UGFyYW1ldGVyRXJyb3IgZXh0ZW5kcyBNb25nb29zZUVycm9yIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yIGZvciBlcnJvcnMgdGhhdCBoYXBwZW4gd2hlbiBhIHBhcmFtZXRlciB0aGF0J3MgZXhwZWN0ZWQgdG8gYmVcbiAgICogYW4gb2JqZWN0IGlzbid0IGFuIG9iamVjdFxuICAgKlxuICAgKiBAcGFyYW0ge0FueX0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhcmFtTmFtZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gZm5OYW1lXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY29uc3RydWN0b3IodmFsdWUsIHBhcmFtTmFtZSwgZm5OYW1lKSB7XG4gICAgc3VwZXIoJ1BhcmFtZXRlciBcIicgKyBwYXJhbU5hbWUgKyAnXCIgdG8gJyArIGZuTmFtZSArXG4gICAgICAnKCkgbXVzdCBiZSBhbiBvYmplY3QsIGdvdCBcIicgKyB2YWx1ZS50b1N0cmluZygpICsgJ1wiICh0eXBlICcgKyB0eXBlb2YgdmFsdWUgKyAnKScpO1xuICB9XG59XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdFBhcmFtZXRlckVycm9yLnByb3RvdHlwZSwgJ25hbWUnLCB7XG4gIHZhbHVlOiAnT2JqZWN0UGFyYW1ldGVyRXJyb3InXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3RQYXJhbWV0ZXJFcnJvcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/error/objectParameter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/error/overwriteModel.js":
/*!***********************************************************!*\
  !*** ./node_modules/mongoose/lib/error/overwriteModel.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseError = __webpack_require__(/*! ./ */ \"(ssr)/./node_modules/mongoose/lib/error/index.js\");\n\n\nclass OverwriteModelError extends MongooseError {\n  /**\n   * OverwriteModel Error constructor.\n   * @param {String} name\n   * @api private\n   */\n  constructor(name) {\n    super('Cannot overwrite `' + name + '` model once compiled.');\n  }\n}\n\nObject.defineProperty(OverwriteModelError.prototype, 'name', {\n  value: 'OverwriteModelError'\n});\n\n/*!\n * exports\n */\n\nmodule.exports = OverwriteModelError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL292ZXJ3cml0ZU1vZGVsLmpzIiwibWFwcGluZ3MiOiI7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWIsc0JBQXNCLG1CQUFPLENBQUMsNERBQUk7OztBQUdsQztBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL292ZXJ3cml0ZU1vZGVsLmpzPzE3NTgiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vKiFcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBNb25nb29zZUVycm9yID0gcmVxdWlyZSgnLi8nKTtcblxuXG5jbGFzcyBPdmVyd3JpdGVNb2RlbEVycm9yIGV4dGVuZHMgTW9uZ29vc2VFcnJvciB7XG4gIC8qKlxuICAgKiBPdmVyd3JpdGVNb2RlbCBFcnJvciBjb25zdHJ1Y3Rvci5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihuYW1lKSB7XG4gICAgc3VwZXIoJ0Nhbm5vdCBvdmVyd3JpdGUgYCcgKyBuYW1lICsgJ2AgbW9kZWwgb25jZSBjb21waWxlZC4nKTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoT3ZlcndyaXRlTW9kZWxFcnJvci5wcm90b3R5cGUsICduYW1lJywge1xuICB2YWx1ZTogJ092ZXJ3cml0ZU1vZGVsRXJyb3InXG59KTtcblxuLyohXG4gKiBleHBvcnRzXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBPdmVyd3JpdGVNb2RlbEVycm9yO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/error/overwriteModel.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/error/parallelSave.js":
/*!*********************************************************!*\
  !*** ./node_modules/mongoose/lib/error/parallelSave.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\nconst MongooseError = __webpack_require__(/*! ./ */ \"(ssr)/./node_modules/mongoose/lib/error/index.js\");\n\nclass ParallelSaveError extends MongooseError {\n  /**\n   * ParallelSave Error constructor.\n   *\n   * @param {Document} doc\n   * @api private\n   */\n  constructor(doc) {\n    const msg = 'Can\\'t save() the same doc multiple times in parallel. Document: ';\n    super(msg + doc._id);\n  }\n}\n\nObject.defineProperty(ParallelSaveError.prototype, 'name', {\n  value: 'ParallelSaveError'\n});\n\n/*!\n * exports\n */\n\nmodule.exports = ParallelSaveError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL3BhcmFsbGVsU2F2ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7O0FBRUEsc0JBQXNCLG1CQUFPLENBQUMsNERBQUk7O0FBRWxDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL3BhcmFsbGVsU2F2ZS5qcz9jNTc2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyohXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbmNvbnN0IE1vbmdvb3NlRXJyb3IgPSByZXF1aXJlKCcuLycpO1xuXG5jbGFzcyBQYXJhbGxlbFNhdmVFcnJvciBleHRlbmRzIE1vbmdvb3NlRXJyb3Ige1xuICAvKipcbiAgICogUGFyYWxsZWxTYXZlIEVycm9yIGNvbnN0cnVjdG9yLlxuICAgKlxuICAgKiBAcGFyYW0ge0RvY3VtZW50fSBkb2NcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihkb2MpIHtcbiAgICBjb25zdCBtc2cgPSAnQ2FuXFwndCBzYXZlKCkgdGhlIHNhbWUgZG9jIG11bHRpcGxlIHRpbWVzIGluIHBhcmFsbGVsLiBEb2N1bWVudDogJztcbiAgICBzdXBlcihtc2cgKyBkb2MuX2lkKTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUGFyYWxsZWxTYXZlRXJyb3IucHJvdG90eXBlLCAnbmFtZScsIHtcbiAgdmFsdWU6ICdQYXJhbGxlbFNhdmVFcnJvcidcbn0pO1xuXG4vKiFcbiAqIGV4cG9ydHNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhcmFsbGVsU2F2ZUVycm9yO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/error/parallelSave.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/error/parallelValidate.js":
/*!*************************************************************!*\
  !*** ./node_modules/mongoose/lib/error/parallelValidate.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\nconst MongooseError = __webpack_require__(/*! ./mongooseError */ \"(ssr)/./node_modules/mongoose/lib/error/mongooseError.js\");\n\n\nclass ParallelValidateError extends MongooseError {\n  /**\n   * ParallelValidate Error constructor.\n   *\n   * @param {Document} doc\n   * @api private\n   */\n  constructor(doc) {\n    const msg = 'Can\\'t validate() the same doc multiple times in parallel. Document: ';\n    super(msg + doc._id);\n  }\n}\n\nObject.defineProperty(ParallelValidateError.prototype, 'name', {\n  value: 'ParallelValidateError'\n});\n\n/*!\n * exports\n */\n\nmodule.exports = ParallelValidateError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL3BhcmFsbGVsVmFsaWRhdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBLHNCQUFzQixtQkFBTyxDQUFDLGlGQUFpQjs7O0FBRy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL3BhcmFsbGVsVmFsaWRhdGUuanM/MGI1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qIVxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG5jb25zdCBNb25nb29zZUVycm9yID0gcmVxdWlyZSgnLi9tb25nb29zZUVycm9yJyk7XG5cblxuY2xhc3MgUGFyYWxsZWxWYWxpZGF0ZUVycm9yIGV4dGVuZHMgTW9uZ29vc2VFcnJvciB7XG4gIC8qKlxuICAgKiBQYXJhbGxlbFZhbGlkYXRlIEVycm9yIGNvbnN0cnVjdG9yLlxuICAgKlxuICAgKiBAcGFyYW0ge0RvY3VtZW50fSBkb2NcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihkb2MpIHtcbiAgICBjb25zdCBtc2cgPSAnQ2FuXFwndCB2YWxpZGF0ZSgpIHRoZSBzYW1lIGRvYyBtdWx0aXBsZSB0aW1lcyBpbiBwYXJhbGxlbC4gRG9jdW1lbnQ6ICc7XG4gICAgc3VwZXIobXNnICsgZG9jLl9pZCk7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFBhcmFsbGVsVmFsaWRhdGVFcnJvci5wcm90b3R5cGUsICduYW1lJywge1xuICB2YWx1ZTogJ1BhcmFsbGVsVmFsaWRhdGVFcnJvcidcbn0pO1xuXG4vKiFcbiAqIGV4cG9ydHNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhcmFsbGVsVmFsaWRhdGVFcnJvcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/error/parallelValidate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/error/serverSelection.js":
/*!************************************************************!*\
  !*** ./node_modules/mongoose/lib/error/serverSelection.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseError = __webpack_require__(/*! ./mongooseError */ \"(ssr)/./node_modules/mongoose/lib/error/mongooseError.js\");\nconst allServersUnknown = __webpack_require__(/*! ../helpers/topology/allServersUnknown */ \"(ssr)/./node_modules/mongoose/lib/helpers/topology/allServersUnknown.js\");\nconst isAtlas = __webpack_require__(/*! ../helpers/topology/isAtlas */ \"(ssr)/./node_modules/mongoose/lib/helpers/topology/isAtlas.js\");\nconst isSSLError = __webpack_require__(/*! ../helpers/topology/isSSLError */ \"(ssr)/./node_modules/mongoose/lib/helpers/topology/isSSLError.js\");\n\n/*!\n * ignore\n */\n\nconst atlasMessage = 'Could not connect to any servers in your MongoDB Atlas cluster. ' +\n  'One common reason is that you\\'re trying to access the database from ' +\n  'an IP that isn\\'t whitelisted. Make sure your current IP address is on your Atlas ' +\n  'cluster\\'s IP whitelist: https://www.mongodb.com/docs/atlas/security-whitelist/';\n\nconst sslMessage = 'Mongoose is connecting with SSL enabled, but the server is ' +\n  'not accepting SSL connections. Please ensure that the MongoDB server you are ' +\n  'connecting to is configured to accept SSL connections. Learn more: ' +\n  'https://mongoosejs.com/docs/tutorials/ssl.html';\n\nclass MongooseServerSelectionError extends MongooseError {\n  /**\n   * MongooseServerSelectionError constructor\n   *\n   * @api private\n   */\n  assimilateError(err) {\n    const reason = err.reason;\n    // Special message for a case that is likely due to IP whitelisting issues.\n    const isAtlasWhitelistError = isAtlas(reason) &&\n      allServersUnknown(reason) &&\n      err.message.indexOf('bad auth') === -1 &&\n      err.message.indexOf('Authentication failed') === -1;\n\n    if (isAtlasWhitelistError) {\n      this.message = atlasMessage;\n    } else if (isSSLError(reason)) {\n      this.message = sslMessage;\n    } else {\n      this.message = err.message;\n    }\n    for (const key in err) {\n      if (key !== 'name') {\n        this[key] = err[key];\n      }\n    }\n\n    return this;\n  }\n}\n\nObject.defineProperty(MongooseServerSelectionError.prototype, 'name', {\n  value: 'MongooseServerSelectionError'\n});\n\nmodule.exports = MongooseServerSelectionError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL3NlcnZlclNlbGVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWIsc0JBQXNCLG1CQUFPLENBQUMsaUZBQWlCO0FBQy9DLDBCQUEwQixtQkFBTyxDQUFDLHNIQUF1QztBQUN6RSxnQkFBZ0IsbUJBQU8sQ0FBQyxrR0FBNkI7QUFDckQsbUJBQW1CLG1CQUFPLENBQUMsd0dBQWdDOztBQUUzRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9lcnJvci9zZXJ2ZXJTZWxlY3Rpb24uanM/ODMxNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBNb25nb29zZUVycm9yID0gcmVxdWlyZSgnLi9tb25nb29zZUVycm9yJyk7XG5jb25zdCBhbGxTZXJ2ZXJzVW5rbm93biA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvdG9wb2xvZ3kvYWxsU2VydmVyc1Vua25vd24nKTtcbmNvbnN0IGlzQXRsYXMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3RvcG9sb2d5L2lzQXRsYXMnKTtcbmNvbnN0IGlzU1NMRXJyb3IgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3RvcG9sb2d5L2lzU1NMRXJyb3InKTtcblxuLyohXG4gKiBpZ25vcmVcbiAqL1xuXG5jb25zdCBhdGxhc01lc3NhZ2UgPSAnQ291bGQgbm90IGNvbm5lY3QgdG8gYW55IHNlcnZlcnMgaW4geW91ciBNb25nb0RCIEF0bGFzIGNsdXN0ZXIuICcgK1xuICAnT25lIGNvbW1vbiByZWFzb24gaXMgdGhhdCB5b3VcXCdyZSB0cnlpbmcgdG8gYWNjZXNzIHRoZSBkYXRhYmFzZSBmcm9tICcgK1xuICAnYW4gSVAgdGhhdCBpc25cXCd0IHdoaXRlbGlzdGVkLiBNYWtlIHN1cmUgeW91ciBjdXJyZW50IElQIGFkZHJlc3MgaXMgb24geW91ciBBdGxhcyAnICtcbiAgJ2NsdXN0ZXJcXCdzIElQIHdoaXRlbGlzdDogaHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZG9jcy9hdGxhcy9zZWN1cml0eS13aGl0ZWxpc3QvJztcblxuY29uc3Qgc3NsTWVzc2FnZSA9ICdNb25nb29zZSBpcyBjb25uZWN0aW5nIHdpdGggU1NMIGVuYWJsZWQsIGJ1dCB0aGUgc2VydmVyIGlzICcgK1xuICAnbm90IGFjY2VwdGluZyBTU0wgY29ubmVjdGlvbnMuIFBsZWFzZSBlbnN1cmUgdGhhdCB0aGUgTW9uZ29EQiBzZXJ2ZXIgeW91IGFyZSAnICtcbiAgJ2Nvbm5lY3RpbmcgdG8gaXMgY29uZmlndXJlZCB0byBhY2NlcHQgU1NMIGNvbm5lY3Rpb25zLiBMZWFybiBtb3JlOiAnICtcbiAgJ2h0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy90dXRvcmlhbHMvc3NsLmh0bWwnO1xuXG5jbGFzcyBNb25nb29zZVNlcnZlclNlbGVjdGlvbkVycm9yIGV4dGVuZHMgTW9uZ29vc2VFcnJvciB7XG4gIC8qKlxuICAgKiBNb25nb29zZVNlcnZlclNlbGVjdGlvbkVycm9yIGNvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgYXNzaW1pbGF0ZUVycm9yKGVycikge1xuICAgIGNvbnN0IHJlYXNvbiA9IGVyci5yZWFzb247XG4gICAgLy8gU3BlY2lhbCBtZXNzYWdlIGZvciBhIGNhc2UgdGhhdCBpcyBsaWtlbHkgZHVlIHRvIElQIHdoaXRlbGlzdGluZyBpc3N1ZXMuXG4gICAgY29uc3QgaXNBdGxhc1doaXRlbGlzdEVycm9yID0gaXNBdGxhcyhyZWFzb24pICYmXG4gICAgICBhbGxTZXJ2ZXJzVW5rbm93bihyZWFzb24pICYmXG4gICAgICBlcnIubWVzc2FnZS5pbmRleE9mKCdiYWQgYXV0aCcpID09PSAtMSAmJlxuICAgICAgZXJyLm1lc3NhZ2UuaW5kZXhPZignQXV0aGVudGljYXRpb24gZmFpbGVkJykgPT09IC0xO1xuXG4gICAgaWYgKGlzQXRsYXNXaGl0ZWxpc3RFcnJvcikge1xuICAgICAgdGhpcy5tZXNzYWdlID0gYXRsYXNNZXNzYWdlO1xuICAgIH0gZWxzZSBpZiAoaXNTU0xFcnJvcihyZWFzb24pKSB7XG4gICAgICB0aGlzLm1lc3NhZ2UgPSBzc2xNZXNzYWdlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm1lc3NhZ2UgPSBlcnIubWVzc2FnZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gZXJyKSB7XG4gICAgICBpZiAoa2V5ICE9PSAnbmFtZScpIHtcbiAgICAgICAgdGhpc1trZXldID0gZXJyW2tleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vbmdvb3NlU2VydmVyU2VsZWN0aW9uRXJyb3IucHJvdG90eXBlLCAnbmFtZScsIHtcbiAgdmFsdWU6ICdNb25nb29zZVNlcnZlclNlbGVjdGlvbkVycm9yJ1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gTW9uZ29vc2VTZXJ2ZXJTZWxlY3Rpb25FcnJvcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/error/serverSelection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/error/setOptionError.js":
/*!***********************************************************!*\
  !*** ./node_modules/mongoose/lib/error/setOptionError.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Module requirements\n */\n\n\n\nconst MongooseError = __webpack_require__(/*! ./mongooseError */ \"(ssr)/./node_modules/mongoose/lib/error/mongooseError.js\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst combinePathErrors = __webpack_require__(/*! ../helpers/error/combinePathErrors */ \"(ssr)/./node_modules/mongoose/lib/helpers/error/combinePathErrors.js\");\n\nclass SetOptionError extends MongooseError {\n  /**\n   * Mongoose.set Error\n   *\n   * @api private\n   * @inherits MongooseError\n   */\n  constructor() {\n    super('');\n\n    this.errors = {};\n  }\n\n  /**\n   * Console.log helper\n   */\n  toString() {\n    return combinePathErrors(this);\n  }\n\n  /**\n   * inspect helper\n   * @api private\n   */\n  inspect() {\n    return Object.assign(new Error(this.message), this);\n  }\n\n  /**\n  * add message\n  * @param {String} key\n  * @param {String|Error} error\n  * @api private\n  */\n  addError(key, error) {\n    if (error instanceof SetOptionError) {\n      const { errors } = error;\n      for (const optionKey of Object.keys(errors)) {\n        this.addError(optionKey, errors[optionKey]);\n      }\n\n      return;\n    }\n\n    this.errors[key] = error;\n    this.message = combinePathErrors(this);\n  }\n}\n\n\nif (util.inspect.custom) {\n  // Avoid Node deprecation warning DEP0079\n  SetOptionError.prototype[util.inspect.custom] = SetOptionError.prototype.inspect;\n}\n\n/**\n * Helper for JSON.stringify\n * Ensure `name` and `message` show up in toJSON output re: gh-9847\n * @api private\n */\nObject.defineProperty(SetOptionError.prototype, 'toJSON', {\n  enumerable: false,\n  writable: false,\n  configurable: true,\n  value: function() {\n    return Object.assign({}, this, { name: this.name, message: this.message });\n  }\n});\n\n\nObject.defineProperty(SetOptionError.prototype, 'name', {\n  value: 'SetOptionError'\n});\n\nclass SetOptionInnerError extends MongooseError {\n  /**\n   * Error for the \"errors\" array in \"SetOptionError\" with consistent message\n   * @param {String} key\n   */\n  constructor(key) {\n    super(`\"${key}\" is not a valid option to set`);\n  }\n}\n\nSetOptionError.SetOptionInnerError = SetOptionInnerError;\n\n/*!\n * Module exports\n */\n\nmodule.exports = SetOptionError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL3NldE9wdGlvbkVycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYixzQkFBc0IsbUJBQU8sQ0FBQyxpRkFBaUI7QUFDL0MsYUFBYSxtQkFBTyxDQUFDLGtCQUFNO0FBQzNCLDBCQUEwQixtQkFBTyxDQUFDLGdIQUFvQzs7QUFFdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEIsWUFBWSxjQUFjO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxTQUFTO0FBQ3ZCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixVQUFVLHdDQUF3QztBQUM3RTtBQUNBLENBQUM7OztBQUdEO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0EsY0FBYyxJQUFJO0FBQ2xCO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvZXJyb3Ivc2V0T3B0aW9uRXJyb3IuanM/MWE2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIE1vZHVsZSByZXF1aXJlbWVudHNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IE1vbmdvb3NlRXJyb3IgPSByZXF1aXJlKCcuL21vbmdvb3NlRXJyb3InKTtcbmNvbnN0IHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5jb25zdCBjb21iaW5lUGF0aEVycm9ycyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvZXJyb3IvY29tYmluZVBhdGhFcnJvcnMnKTtcblxuY2xhc3MgU2V0T3B0aW9uRXJyb3IgZXh0ZW5kcyBNb25nb29zZUVycm9yIHtcbiAgLyoqXG4gICAqIE1vbmdvb3NlLnNldCBFcnJvclxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICogQGluaGVyaXRzIE1vbmdvb3NlRXJyb3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCcnKTtcblxuICAgIHRoaXMuZXJyb3JzID0ge307XG4gIH1cblxuICAvKipcbiAgICogQ29uc29sZS5sb2cgaGVscGVyXG4gICAqL1xuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gY29tYmluZVBhdGhFcnJvcnModGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogaW5zcGVjdCBoZWxwZXJcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBpbnNwZWN0KCkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBFcnJvcih0aGlzLm1lc3NhZ2UpLCB0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAqIGFkZCBtZXNzYWdlXG4gICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICAqIEBwYXJhbSB7U3RyaW5nfEVycm9yfSBlcnJvclxuICAqIEBhcGkgcHJpdmF0ZVxuICAqL1xuICBhZGRFcnJvcihrZXksIGVycm9yKSB7XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgU2V0T3B0aW9uRXJyb3IpIHtcbiAgICAgIGNvbnN0IHsgZXJyb3JzIH0gPSBlcnJvcjtcbiAgICAgIGZvciAoY29uc3Qgb3B0aW9uS2V5IG9mIE9iamVjdC5rZXlzKGVycm9ycykpIHtcbiAgICAgICAgdGhpcy5hZGRFcnJvcihvcHRpb25LZXksIGVycm9yc1tvcHRpb25LZXldKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZXJyb3JzW2tleV0gPSBlcnJvcjtcbiAgICB0aGlzLm1lc3NhZ2UgPSBjb21iaW5lUGF0aEVycm9ycyh0aGlzKTtcbiAgfVxufVxuXG5cbmlmICh1dGlsLmluc3BlY3QuY3VzdG9tKSB7XG4gIC8vIEF2b2lkIE5vZGUgZGVwcmVjYXRpb24gd2FybmluZyBERVAwMDc5XG4gIFNldE9wdGlvbkVycm9yLnByb3RvdHlwZVt1dGlsLmluc3BlY3QuY3VzdG9tXSA9IFNldE9wdGlvbkVycm9yLnByb3RvdHlwZS5pbnNwZWN0O1xufVxuXG4vKipcbiAqIEhlbHBlciBmb3IgSlNPTi5zdHJpbmdpZnlcbiAqIEVuc3VyZSBgbmFtZWAgYW5kIGBtZXNzYWdlYCBzaG93IHVwIGluIHRvSlNPTiBvdXRwdXQgcmU6IGdoLTk4NDdcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoU2V0T3B0aW9uRXJyb3IucHJvdG90eXBlLCAndG9KU09OJywge1xuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgd3JpdGFibGU6IGZhbHNlLFxuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgdGhpcywgeyBuYW1lOiB0aGlzLm5hbWUsIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSB9KTtcbiAgfVxufSk7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFNldE9wdGlvbkVycm9yLnByb3RvdHlwZSwgJ25hbWUnLCB7XG4gIHZhbHVlOiAnU2V0T3B0aW9uRXJyb3InXG59KTtcblxuY2xhc3MgU2V0T3B0aW9uSW5uZXJFcnJvciBleHRlbmRzIE1vbmdvb3NlRXJyb3Ige1xuICAvKipcbiAgICogRXJyb3IgZm9yIHRoZSBcImVycm9yc1wiIGFycmF5IGluIFwiU2V0T3B0aW9uRXJyb3JcIiB3aXRoIGNvbnNpc3RlbnQgbWVzc2FnZVxuICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gICAqL1xuICBjb25zdHJ1Y3RvcihrZXkpIHtcbiAgICBzdXBlcihgXCIke2tleX1cIiBpcyBub3QgYSB2YWxpZCBvcHRpb24gdG8gc2V0YCk7XG4gIH1cbn1cblxuU2V0T3B0aW9uRXJyb3IuU2V0T3B0aW9uSW5uZXJFcnJvciA9IFNldE9wdGlvbklubmVyRXJyb3I7XG5cbi8qIVxuICogTW9kdWxlIGV4cG9ydHNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNldE9wdGlvbkVycm9yO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/error/setOptionError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/error/strict.js":
/*!***************************************************!*\
  !*** ./node_modules/mongoose/lib/error/strict.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseError = __webpack_require__(/*! ./ */ \"(ssr)/./node_modules/mongoose/lib/error/index.js\");\n\n\nclass StrictModeError extends MongooseError {\n  /**\n   * Strict mode error constructor\n   *\n   * @param {String} path\n   * @param {String} [msg]\n   * @param {Boolean} [immutable]\n   * @inherits MongooseError\n   * @api private\n   */\n  constructor(path, msg, immutable) {\n    msg = msg || 'Field `' + path + '` is not in schema and strict ' +\n      'mode is set to throw.';\n    super(msg);\n    this.isImmutableError = !!immutable;\n    this.path = path;\n  }\n}\n\nObject.defineProperty(StrictModeError.prototype, 'name', {\n  value: 'StrictModeError'\n});\n\nmodule.exports = StrictModeError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL3N0cmljdC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWIsc0JBQXNCLG1CQUFPLENBQUMsNERBQUk7OztBQUdsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9lcnJvci9zdHJpY3QuanM/MDg4OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBNb25nb29zZUVycm9yID0gcmVxdWlyZSgnLi8nKTtcblxuXG5jbGFzcyBTdHJpY3RNb2RlRXJyb3IgZXh0ZW5kcyBNb25nb29zZUVycm9yIHtcbiAgLyoqXG4gICAqIFN0cmljdCBtb2RlIGVycm9yIGNvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbbXNnXVxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtpbW11dGFibGVdXG4gICAqIEBpbmhlcml0cyBNb25nb29zZUVycm9yXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY29uc3RydWN0b3IocGF0aCwgbXNnLCBpbW11dGFibGUpIHtcbiAgICBtc2cgPSBtc2cgfHwgJ0ZpZWxkIGAnICsgcGF0aCArICdgIGlzIG5vdCBpbiBzY2hlbWEgYW5kIHN0cmljdCAnICtcbiAgICAgICdtb2RlIGlzIHNldCB0byB0aHJvdy4nO1xuICAgIHN1cGVyKG1zZyk7XG4gICAgdGhpcy5pc0ltbXV0YWJsZUVycm9yID0gISFpbW11dGFibGU7XG4gICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoU3RyaWN0TW9kZUVycm9yLnByb3RvdHlwZSwgJ25hbWUnLCB7XG4gIHZhbHVlOiAnU3RyaWN0TW9kZUVycm9yJ1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RyaWN0TW9kZUVycm9yO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/error/strict.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/error/strictPopulate.js":
/*!***********************************************************!*\
  !*** ./node_modules/mongoose/lib/error/strictPopulate.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseError = __webpack_require__(/*! ./ */ \"(ssr)/./node_modules/mongoose/lib/error/index.js\");\n\nclass StrictPopulateError extends MongooseError {\n  /**\n   * Strict mode error constructor\n   *\n   * @param {String} path\n   * @param {String} [msg]\n   * @inherits MongooseError\n   * @api private\n   */\n  constructor(path, msg) {\n    msg = msg || 'Cannot populate path `' + path + '` because it is not in your schema. ' + 'Set the `strictPopulate` option to false to override.';\n    super(msg);\n    this.path = path;\n  }\n}\n\nObject.defineProperty(StrictPopulateError.prototype, 'name', {\n  value: 'StrictPopulateError'\n});\n\nmodule.exports = StrictPopulateError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL3N0cmljdFBvcHVsYXRlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYixzQkFBc0IsbUJBQU8sQ0FBQyw0REFBSTs7QUFFbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL3N0cmljdFBvcHVsYXRlLmpzPzc0ZGEiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgTW9uZ29vc2VFcnJvciA9IHJlcXVpcmUoJy4vJyk7XG5cbmNsYXNzIFN0cmljdFBvcHVsYXRlRXJyb3IgZXh0ZW5kcyBNb25nb29zZUVycm9yIHtcbiAgLyoqXG4gICAqIFN0cmljdCBtb2RlIGVycm9yIGNvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbbXNnXVxuICAgKiBAaW5oZXJpdHMgTW9uZ29vc2VFcnJvclxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGNvbnN0cnVjdG9yKHBhdGgsIG1zZykge1xuICAgIG1zZyA9IG1zZyB8fCAnQ2Fubm90IHBvcHVsYXRlIHBhdGggYCcgKyBwYXRoICsgJ2AgYmVjYXVzZSBpdCBpcyBub3QgaW4geW91ciBzY2hlbWEuICcgKyAnU2V0IHRoZSBgc3RyaWN0UG9wdWxhdGVgIG9wdGlvbiB0byBmYWxzZSB0byBvdmVycmlkZS4nO1xuICAgIHN1cGVyKG1zZyk7XG4gICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoU3RyaWN0UG9wdWxhdGVFcnJvci5wcm90b3R5cGUsICduYW1lJywge1xuICB2YWx1ZTogJ1N0cmljdFBvcHVsYXRlRXJyb3InXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBTdHJpY3RQb3B1bGF0ZUVycm9yO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/error/strictPopulate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/error/syncIndexes.js":
/*!********************************************************!*\
  !*** ./node_modules/mongoose/lib/error/syncIndexes.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\nconst MongooseError = __webpack_require__(/*! ./mongooseError */ \"(ssr)/./node_modules/mongoose/lib/error/mongooseError.js\");\n\n/**\n * SyncIndexes Error constructor.\n *\n * @param {String} message\n * @param {String} errorsMap\n * @inherits MongooseError\n * @api private\n */\n\nclass SyncIndexesError extends MongooseError {\n  constructor(message, errorsMap) {\n    super(message);\n    this.errors = errorsMap;\n  }\n}\n\nObject.defineProperty(SyncIndexesError.prototype, 'name', {\n  value: 'SyncIndexesError'\n});\n\n\nmodule.exports = SyncIndexesError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL3N5bmNJbmRleGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTs7QUFFQSxzQkFBc0IsbUJBQU8sQ0FBQyxpRkFBaUI7O0FBRS9DO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7O0FBR0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9lcnJvci9zeW5jSW5kZXhlcy5qcz8yNjMyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyohXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbmNvbnN0IE1vbmdvb3NlRXJyb3IgPSByZXF1aXJlKCcuL21vbmdvb3NlRXJyb3InKTtcblxuLyoqXG4gKiBTeW5jSW5kZXhlcyBFcnJvciBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICogQHBhcmFtIHtTdHJpbmd9IGVycm9yc01hcFxuICogQGluaGVyaXRzIE1vbmdvb3NlRXJyb3JcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmNsYXNzIFN5bmNJbmRleGVzRXJyb3IgZXh0ZW5kcyBNb25nb29zZUVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgZXJyb3JzTWFwKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5lcnJvcnMgPSBlcnJvcnNNYXA7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFN5bmNJbmRleGVzRXJyb3IucHJvdG90eXBlLCAnbmFtZScsIHtcbiAgdmFsdWU6ICdTeW5jSW5kZXhlc0Vycm9yJ1xufSk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBTeW5jSW5kZXhlc0Vycm9yO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/error/syncIndexes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/error/validation.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongoose/lib/error/validation.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Module requirements\n */\n\n\n\nconst MongooseError = __webpack_require__(/*! ./mongooseError */ \"(ssr)/./node_modules/mongoose/lib/error/mongooseError.js\");\nconst getConstructorName = __webpack_require__(/*! ../helpers/getConstructorName */ \"(ssr)/./node_modules/mongoose/lib/helpers/getConstructorName.js\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst combinePathErrors = __webpack_require__(/*! ../helpers/error/combinePathErrors */ \"(ssr)/./node_modules/mongoose/lib/helpers/error/combinePathErrors.js\");\n\nclass ValidationError extends MongooseError {\n  /**\n   * Document Validation Error\n   *\n   * @api private\n   * @param {Document} [instance]\n   * @inherits MongooseError\n   */\n  constructor(instance) {\n    let _message;\n    if (getConstructorName(instance) === 'model') {\n      _message = instance.constructor.modelName + ' validation failed';\n    } else {\n      _message = 'Validation failed';\n    }\n\n    super(_message);\n\n    this.errors = {};\n    this._message = _message;\n\n    if (instance) {\n      instance.$errors = this.errors;\n    }\n  }\n\n  /**\n   * Console.log helper\n   */\n  toString() {\n    return this.name + ': ' + combinePathErrors(this);\n  }\n\n  /**\n   * inspect helper\n   * @api private\n   */\n  inspect() {\n    return Object.assign(new Error(this.message), this);\n  }\n\n  /**\n  * add message\n  * @param {String} path\n  * @param {String|Error} error\n  * @api private\n  */\n  addError(path, error) {\n    if (error instanceof ValidationError) {\n      const { errors } = error;\n      for (const errorPath of Object.keys(errors)) {\n        this.addError(`${path}.${errorPath}`, errors[errorPath]);\n      }\n\n      return;\n    }\n\n    this.errors[path] = error;\n    this.message = this._message + ': ' + combinePathErrors(this);\n  }\n}\n\n\nif (util.inspect.custom) {\n  // Avoid Node deprecation warning DEP0079\n  ValidationError.prototype[util.inspect.custom] = ValidationError.prototype.inspect;\n}\n\n/**\n * Helper for JSON.stringify\n * Ensure `name` and `message` show up in toJSON output re: gh-9847\n * @api private\n */\nObject.defineProperty(ValidationError.prototype, 'toJSON', {\n  enumerable: false,\n  writable: false,\n  configurable: true,\n  value: function() {\n    return Object.assign({}, this, { name: this.name, message: this.message });\n  }\n});\n\n\nObject.defineProperty(ValidationError.prototype, 'name', {\n  value: 'ValidationError'\n});\n\n/*!\n * Module exports\n */\n\nmodule.exports = ValidationError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL3ZhbGlkYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVhOztBQUViLHNCQUFzQixtQkFBTyxDQUFDLGlGQUFpQjtBQUMvQywyQkFBMkIsbUJBQU8sQ0FBQyxzR0FBK0I7QUFDbEUsYUFBYSxtQkFBTyxDQUFDLGtCQUFNO0FBQzNCLDBCQUEwQixtQkFBTyxDQUFDLGdIQUFvQzs7QUFFdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsVUFBVTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCLFlBQVksY0FBYztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsU0FBUztBQUN2QjtBQUNBLHlCQUF5QixLQUFLLEdBQUcsVUFBVTtBQUMzQzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixVQUFVLHdDQUF3QztBQUM3RTtBQUNBLENBQUM7OztBQUdEO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL3ZhbGlkYXRpb24uanM/N2FhMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIE1vZHVsZSByZXF1aXJlbWVudHNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IE1vbmdvb3NlRXJyb3IgPSByZXF1aXJlKCcuL21vbmdvb3NlRXJyb3InKTtcbmNvbnN0IGdldENvbnN0cnVjdG9yTmFtZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvZ2V0Q29uc3RydWN0b3JOYW1lJyk7XG5jb25zdCB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuY29uc3QgY29tYmluZVBhdGhFcnJvcnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2Vycm9yL2NvbWJpbmVQYXRoRXJyb3JzJyk7XG5cbmNsYXNzIFZhbGlkYXRpb25FcnJvciBleHRlbmRzIE1vbmdvb3NlRXJyb3Ige1xuICAvKipcbiAgICogRG9jdW1lbnQgVmFsaWRhdGlvbiBFcnJvclxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICogQHBhcmFtIHtEb2N1bWVudH0gW2luc3RhbmNlXVxuICAgKiBAaW5oZXJpdHMgTW9uZ29vc2VFcnJvclxuICAgKi9cbiAgY29uc3RydWN0b3IoaW5zdGFuY2UpIHtcbiAgICBsZXQgX21lc3NhZ2U7XG4gICAgaWYgKGdldENvbnN0cnVjdG9yTmFtZShpbnN0YW5jZSkgPT09ICdtb2RlbCcpIHtcbiAgICAgIF9tZXNzYWdlID0gaW5zdGFuY2UuY29uc3RydWN0b3IubW9kZWxOYW1lICsgJyB2YWxpZGF0aW9uIGZhaWxlZCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9tZXNzYWdlID0gJ1ZhbGlkYXRpb24gZmFpbGVkJztcbiAgICB9XG5cbiAgICBzdXBlcihfbWVzc2FnZSk7XG5cbiAgICB0aGlzLmVycm9ycyA9IHt9O1xuICAgIHRoaXMuX21lc3NhZ2UgPSBfbWVzc2FnZTtcblxuICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgaW5zdGFuY2UuJGVycm9ycyA9IHRoaXMuZXJyb3JzO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDb25zb2xlLmxvZyBoZWxwZXJcbiAgICovXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm5hbWUgKyAnOiAnICsgY29tYmluZVBhdGhFcnJvcnModGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogaW5zcGVjdCBoZWxwZXJcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBpbnNwZWN0KCkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBFcnJvcih0aGlzLm1lc3NhZ2UpLCB0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAqIGFkZCBtZXNzYWdlXG4gICogQHBhcmFtIHtTdHJpbmd9IHBhdGhcbiAgKiBAcGFyYW0ge1N0cmluZ3xFcnJvcn0gZXJyb3JcbiAgKiBAYXBpIHByaXZhdGVcbiAgKi9cbiAgYWRkRXJyb3IocGF0aCwgZXJyb3IpIHtcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBWYWxpZGF0aW9uRXJyb3IpIHtcbiAgICAgIGNvbnN0IHsgZXJyb3JzIH0gPSBlcnJvcjtcbiAgICAgIGZvciAoY29uc3QgZXJyb3JQYXRoIG9mIE9iamVjdC5rZXlzKGVycm9ycykpIHtcbiAgICAgICAgdGhpcy5hZGRFcnJvcihgJHtwYXRofS4ke2Vycm9yUGF0aH1gLCBlcnJvcnNbZXJyb3JQYXRoXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmVycm9yc1twYXRoXSA9IGVycm9yO1xuICAgIHRoaXMubWVzc2FnZSA9IHRoaXMuX21lc3NhZ2UgKyAnOiAnICsgY29tYmluZVBhdGhFcnJvcnModGhpcyk7XG4gIH1cbn1cblxuXG5pZiAodXRpbC5pbnNwZWN0LmN1c3RvbSkge1xuICAvLyBBdm9pZCBOb2RlIGRlcHJlY2F0aW9uIHdhcm5pbmcgREVQMDA3OVxuICBWYWxpZGF0aW9uRXJyb3IucHJvdG90eXBlW3V0aWwuaW5zcGVjdC5jdXN0b21dID0gVmFsaWRhdGlvbkVycm9yLnByb3RvdHlwZS5pbnNwZWN0O1xufVxuXG4vKipcbiAqIEhlbHBlciBmb3IgSlNPTi5zdHJpbmdpZnlcbiAqIEVuc3VyZSBgbmFtZWAgYW5kIGBtZXNzYWdlYCBzaG93IHVwIGluIHRvSlNPTiBvdXRwdXQgcmU6IGdoLTk4NDdcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVmFsaWRhdGlvbkVycm9yLnByb3RvdHlwZSwgJ3RvSlNPTicsIHtcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIHdyaXRhYmxlOiBmYWxzZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHRoaXMsIHsgbmFtZTogdGhpcy5uYW1lLCBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UgfSk7XG4gIH1cbn0pO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWYWxpZGF0aW9uRXJyb3IucHJvdG90eXBlLCAnbmFtZScsIHtcbiAgdmFsdWU6ICdWYWxpZGF0aW9uRXJyb3InXG59KTtcblxuLyohXG4gKiBNb2R1bGUgZXhwb3J0c1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gVmFsaWRhdGlvbkVycm9yO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/error/validation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/error/validator.js":
/*!******************************************************!*\
  !*** ./node_modules/mongoose/lib/error/validator.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseError = __webpack_require__(/*! ./ */ \"(ssr)/./node_modules/mongoose/lib/error/index.js\");\n\n\nclass ValidatorError extends MongooseError {\n  /**\n   * Schema validator error\n   *\n   * @param {Object} properties\n   * @param {Document} doc\n   * @api private\n   */\n  constructor(properties, doc) {\n    let msg = properties.message;\n    if (!msg) {\n      msg = MongooseError.messages.general.default;\n    }\n\n    const message = formatMessage(msg, properties, doc);\n    super(message);\n\n    properties = Object.assign({}, properties, { message: message });\n    this.properties = properties;\n    this.kind = properties.type;\n    this.path = properties.path;\n    this.value = properties.value;\n    this.reason = properties.reason;\n  }\n\n  /**\n   * toString helper\n   * TODO remove? This defaults to `${this.name}: ${this.message}`\n   * @api private\n   */\n  toString() {\n    return this.message;\n  }\n\n  /**\n   * Ensure `name` and `message` show up in toJSON output re: gh-9296\n   * @api private\n   */\n\n  toJSON() {\n    return Object.assign({ name: this.name, message: this.message }, this);\n  }\n}\n\n\nObject.defineProperty(ValidatorError.prototype, 'name', {\n  value: 'ValidatorError'\n});\n\n/**\n * The object used to define this validator. Not enumerable to hide\n * it from `require('util').inspect()` output re: gh-3925\n * @api private\n */\n\nObject.defineProperty(ValidatorError.prototype, 'properties', {\n  enumerable: false,\n  writable: true,\n  value: null\n});\n\n// Exposed for testing\nValidatorError.prototype.formatMessage = formatMessage;\n\n/**\n * Formats error messages\n * @api private\n */\n\nfunction formatMessage(msg, properties, doc) {\n  if (typeof msg === 'function') {\n    return msg(properties, doc);\n  }\n\n  const propertyNames = Object.keys(properties);\n  for (const propertyName of propertyNames) {\n    if (propertyName === 'message') {\n      continue;\n    }\n    msg = msg.replace('{' + propertyName.toUpperCase() + '}', properties[propertyName]);\n  }\n\n  return msg;\n}\n\n/*!\n * exports\n */\n\nmodule.exports = ValidatorError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL3ZhbGlkYXRvci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWIsc0JBQXNCLG1CQUFPLENBQUMsNERBQUk7OztBQUdsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFVBQVU7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxpQ0FBaUMsZ0JBQWdCLGtCQUFrQjtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNDQUFzQyxVQUFVLElBQUksYUFBYTtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCLHdDQUF3QztBQUNuRTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsbUNBQW1DO0FBQzNEOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvZXJyb3IvdmFsaWRhdG9yLmpzPzc2NGUiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgTW9uZ29vc2VFcnJvciA9IHJlcXVpcmUoJy4vJyk7XG5cblxuY2xhc3MgVmFsaWRhdG9yRXJyb3IgZXh0ZW5kcyBNb25nb29zZUVycm9yIHtcbiAgLyoqXG4gICAqIFNjaGVtYSB2YWxpZGF0b3IgZXJyb3JcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXNcbiAgICogQHBhcmFtIHtEb2N1bWVudH0gZG9jXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY29uc3RydWN0b3IocHJvcGVydGllcywgZG9jKSB7XG4gICAgbGV0IG1zZyA9IHByb3BlcnRpZXMubWVzc2FnZTtcbiAgICBpZiAoIW1zZykge1xuICAgICAgbXNnID0gTW9uZ29vc2VFcnJvci5tZXNzYWdlcy5nZW5lcmFsLmRlZmF1bHQ7XG4gICAgfVxuXG4gICAgY29uc3QgbWVzc2FnZSA9IGZvcm1hdE1lc3NhZ2UobXNnLCBwcm9wZXJ0aWVzLCBkb2MpO1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuXG4gICAgcHJvcGVydGllcyA9IE9iamVjdC5hc3NpZ24oe30sIHByb3BlcnRpZXMsIHsgbWVzc2FnZTogbWVzc2FnZSB9KTtcbiAgICB0aGlzLnByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzO1xuICAgIHRoaXMua2luZCA9IHByb3BlcnRpZXMudHlwZTtcbiAgICB0aGlzLnBhdGggPSBwcm9wZXJ0aWVzLnBhdGg7XG4gICAgdGhpcy52YWx1ZSA9IHByb3BlcnRpZXMudmFsdWU7XG4gICAgdGhpcy5yZWFzb24gPSBwcm9wZXJ0aWVzLnJlYXNvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiB0b1N0cmluZyBoZWxwZXJcbiAgICogVE9ETyByZW1vdmU/IFRoaXMgZGVmYXVsdHMgdG8gYCR7dGhpcy5uYW1lfTogJHt0aGlzLm1lc3NhZ2V9YFxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2U7XG4gIH1cblxuICAvKipcbiAgICogRW5zdXJlIGBuYW1lYCBhbmQgYG1lc3NhZ2VgIHNob3cgdXAgaW4gdG9KU09OIG91dHB1dCByZTogZ2gtOTI5NlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG5cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHsgbmFtZTogdGhpcy5uYW1lLCBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UgfSwgdGhpcyk7XG4gIH1cbn1cblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVmFsaWRhdG9yRXJyb3IucHJvdG90eXBlLCAnbmFtZScsIHtcbiAgdmFsdWU6ICdWYWxpZGF0b3JFcnJvcidcbn0pO1xuXG4vKipcbiAqIFRoZSBvYmplY3QgdXNlZCB0byBkZWZpbmUgdGhpcyB2YWxpZGF0b3IuIE5vdCBlbnVtZXJhYmxlIHRvIGhpZGVcbiAqIGl0IGZyb20gYHJlcXVpcmUoJ3V0aWwnKS5pbnNwZWN0KClgIG91dHB1dCByZTogZ2gtMzkyNVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZhbGlkYXRvckVycm9yLnByb3RvdHlwZSwgJ3Byb3BlcnRpZXMnLCB7XG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICB3cml0YWJsZTogdHJ1ZSxcbiAgdmFsdWU6IG51bGxcbn0pO1xuXG4vLyBFeHBvc2VkIGZvciB0ZXN0aW5nXG5WYWxpZGF0b3JFcnJvci5wcm90b3R5cGUuZm9ybWF0TWVzc2FnZSA9IGZvcm1hdE1lc3NhZ2U7XG5cbi8qKlxuICogRm9ybWF0cyBlcnJvciBtZXNzYWdlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0TWVzc2FnZShtc2csIHByb3BlcnRpZXMsIGRvYykge1xuICBpZiAodHlwZW9mIG1zZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBtc2cocHJvcGVydGllcywgZG9jKTtcbiAgfVxuXG4gIGNvbnN0IHByb3BlcnR5TmFtZXMgPSBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKTtcbiAgZm9yIChjb25zdCBwcm9wZXJ0eU5hbWUgb2YgcHJvcGVydHlOYW1lcykge1xuICAgIGlmIChwcm9wZXJ0eU5hbWUgPT09ICdtZXNzYWdlJykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIG1zZyA9IG1zZy5yZXBsYWNlKCd7JyArIHByb3BlcnR5TmFtZS50b1VwcGVyQ2FzZSgpICsgJ30nLCBwcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV0pO1xuICB9XG5cbiAgcmV0dXJuIG1zZztcbn1cblxuLyohXG4gKiBleHBvcnRzXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBWYWxpZGF0b3JFcnJvcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/error/validator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/error/version.js":
/*!****************************************************!*\
  !*** ./node_modules/mongoose/lib/error/version.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\nconst MongooseError = __webpack_require__(/*! ./ */ \"(ssr)/./node_modules/mongoose/lib/error/index.js\");\n\nclass VersionError extends MongooseError {\n  /**\n   * Version Error constructor.\n   *\n   * @param {Document} doc\n   * @param {Number} currentVersion\n   * @param {Array<String>} modifiedPaths\n   * @api private\n   */\n  constructor(doc, currentVersion, modifiedPaths) {\n    const modifiedPathsStr = modifiedPaths.join(', ');\n    super('No matching document found for id \"' + doc._id +\n      '\" version ' + currentVersion + ' modifiedPaths \"' + modifiedPathsStr + '\"');\n    this.version = currentVersion;\n    this.modifiedPaths = modifiedPaths;\n  }\n}\n\n\nObject.defineProperty(VersionError.prototype, 'name', {\n  value: 'VersionError'\n});\n\n/*!\n * exports\n */\n\nmodule.exports = VersionError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2Vycm9yL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBLHNCQUFzQixtQkFBTyxDQUFDLDREQUFJOztBQUVsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsVUFBVTtBQUN2QixhQUFhLFFBQVE7QUFDckIsYUFBYSxlQUFlO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9lcnJvci92ZXJzaW9uLmpzP2M0ZjciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKiFcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxuY29uc3QgTW9uZ29vc2VFcnJvciA9IHJlcXVpcmUoJy4vJyk7XG5cbmNsYXNzIFZlcnNpb25FcnJvciBleHRlbmRzIE1vbmdvb3NlRXJyb3Ige1xuICAvKipcbiAgICogVmVyc2lvbiBFcnJvciBjb25zdHJ1Y3Rvci5cbiAgICpcbiAgICogQHBhcmFtIHtEb2N1bWVudH0gZG9jXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBjdXJyZW50VmVyc2lvblxuICAgKiBAcGFyYW0ge0FycmF5PFN0cmluZz59IG1vZGlmaWVkUGF0aHNcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihkb2MsIGN1cnJlbnRWZXJzaW9uLCBtb2RpZmllZFBhdGhzKSB7XG4gICAgY29uc3QgbW9kaWZpZWRQYXRoc1N0ciA9IG1vZGlmaWVkUGF0aHMuam9pbignLCAnKTtcbiAgICBzdXBlcignTm8gbWF0Y2hpbmcgZG9jdW1lbnQgZm91bmQgZm9yIGlkIFwiJyArIGRvYy5faWQgK1xuICAgICAgJ1wiIHZlcnNpb24gJyArIGN1cnJlbnRWZXJzaW9uICsgJyBtb2RpZmllZFBhdGhzIFwiJyArIG1vZGlmaWVkUGF0aHNTdHIgKyAnXCInKTtcbiAgICB0aGlzLnZlcnNpb24gPSBjdXJyZW50VmVyc2lvbjtcbiAgICB0aGlzLm1vZGlmaWVkUGF0aHMgPSBtb2RpZmllZFBhdGhzO1xuICB9XG59XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZlcnNpb25FcnJvci5wcm90b3R5cGUsICduYW1lJywge1xuICB2YWx1ZTogJ1ZlcnNpb25FcnJvcidcbn0pO1xuXG4vKiFcbiAqIGV4cG9ydHNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZlcnNpb25FcnJvcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/error/version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/aggregate/prepareDiscriminatorPipeline.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/aggregate/prepareDiscriminatorPipeline.js ***!
  \*************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function prepareDiscriminatorPipeline(pipeline, schema, prefix) {\n  const discriminatorMapping = schema && schema.discriminatorMapping;\n  prefix = prefix || '';\n\n  if (discriminatorMapping && !discriminatorMapping.isRoot) {\n    const originalPipeline = pipeline;\n    const filterKey = (prefix.length > 0 ? prefix + '.' : prefix) + discriminatorMapping.key;\n    const discriminatorValue = discriminatorMapping.value;\n\n    // If the first pipeline stage is a match and it doesn't specify a `__t`\n    // key, add the discriminator key to it. This allows for potential\n    // aggregation query optimizations not to be disturbed by this feature.\n    if (originalPipeline[0] != null &&\n        originalPipeline[0].$match &&\n        (originalPipeline[0].$match[filterKey] === undefined || originalPipeline[0].$match[filterKey] === discriminatorValue)) {\n      originalPipeline[0].$match[filterKey] = discriminatorValue;\n      // `originalPipeline` is a ref, so there's no need for\n      // aggregate._pipeline = originalPipeline\n    } else if (originalPipeline[0] != null && originalPipeline[0].$geoNear) {\n      originalPipeline[0].$geoNear.query =\n          originalPipeline[0].$geoNear.query || {};\n      originalPipeline[0].$geoNear.query[filterKey] = discriminatorValue;\n    } else if (originalPipeline[0] != null && originalPipeline[0].$search) {\n      if (originalPipeline[1] && originalPipeline[1].$match != null) {\n        originalPipeline[1].$match[filterKey] = originalPipeline[1].$match[filterKey] || discriminatorValue;\n      } else {\n        const match = {};\n        match[filterKey] = discriminatorValue;\n        originalPipeline.splice(1, 0, { $match: match });\n      }\n    } else {\n      const match = {};\n      match[filterKey] = discriminatorValue;\n      originalPipeline.unshift({ $match: match });\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvYWdncmVnYXRlL3ByZXBhcmVEaXNjcmltaW5hdG9yUGlwZWxpbmUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0Esd0NBQXdDLGVBQWU7QUFDdkQ7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLGlDQUFpQyxlQUFlO0FBQ2hEO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvYWdncmVnYXRlL3ByZXBhcmVEaXNjcmltaW5hdG9yUGlwZWxpbmUuanM/NmJiNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcHJlcGFyZURpc2NyaW1pbmF0b3JQaXBlbGluZShwaXBlbGluZSwgc2NoZW1hLCBwcmVmaXgpIHtcbiAgY29uc3QgZGlzY3JpbWluYXRvck1hcHBpbmcgPSBzY2hlbWEgJiYgc2NoZW1hLmRpc2NyaW1pbmF0b3JNYXBwaW5nO1xuICBwcmVmaXggPSBwcmVmaXggfHwgJyc7XG5cbiAgaWYgKGRpc2NyaW1pbmF0b3JNYXBwaW5nICYmICFkaXNjcmltaW5hdG9yTWFwcGluZy5pc1Jvb3QpIHtcbiAgICBjb25zdCBvcmlnaW5hbFBpcGVsaW5lID0gcGlwZWxpbmU7XG4gICAgY29uc3QgZmlsdGVyS2V5ID0gKHByZWZpeC5sZW5ndGggPiAwID8gcHJlZml4ICsgJy4nIDogcHJlZml4KSArIGRpc2NyaW1pbmF0b3JNYXBwaW5nLmtleTtcbiAgICBjb25zdCBkaXNjcmltaW5hdG9yVmFsdWUgPSBkaXNjcmltaW5hdG9yTWFwcGluZy52YWx1ZTtcblxuICAgIC8vIElmIHRoZSBmaXJzdCBwaXBlbGluZSBzdGFnZSBpcyBhIG1hdGNoIGFuZCBpdCBkb2Vzbid0IHNwZWNpZnkgYSBgX190YFxuICAgIC8vIGtleSwgYWRkIHRoZSBkaXNjcmltaW5hdG9yIGtleSB0byBpdC4gVGhpcyBhbGxvd3MgZm9yIHBvdGVudGlhbFxuICAgIC8vIGFnZ3JlZ2F0aW9uIHF1ZXJ5IG9wdGltaXphdGlvbnMgbm90IHRvIGJlIGRpc3R1cmJlZCBieSB0aGlzIGZlYXR1cmUuXG4gICAgaWYgKG9yaWdpbmFsUGlwZWxpbmVbMF0gIT0gbnVsbCAmJlxuICAgICAgICBvcmlnaW5hbFBpcGVsaW5lWzBdLiRtYXRjaCAmJlxuICAgICAgICAob3JpZ2luYWxQaXBlbGluZVswXS4kbWF0Y2hbZmlsdGVyS2V5XSA9PT0gdW5kZWZpbmVkIHx8IG9yaWdpbmFsUGlwZWxpbmVbMF0uJG1hdGNoW2ZpbHRlcktleV0gPT09IGRpc2NyaW1pbmF0b3JWYWx1ZSkpIHtcbiAgICAgIG9yaWdpbmFsUGlwZWxpbmVbMF0uJG1hdGNoW2ZpbHRlcktleV0gPSBkaXNjcmltaW5hdG9yVmFsdWU7XG4gICAgICAvLyBgb3JpZ2luYWxQaXBlbGluZWAgaXMgYSByZWYsIHNvIHRoZXJlJ3Mgbm8gbmVlZCBmb3JcbiAgICAgIC8vIGFnZ3JlZ2F0ZS5fcGlwZWxpbmUgPSBvcmlnaW5hbFBpcGVsaW5lXG4gICAgfSBlbHNlIGlmIChvcmlnaW5hbFBpcGVsaW5lWzBdICE9IG51bGwgJiYgb3JpZ2luYWxQaXBlbGluZVswXS4kZ2VvTmVhcikge1xuICAgICAgb3JpZ2luYWxQaXBlbGluZVswXS4kZ2VvTmVhci5xdWVyeSA9XG4gICAgICAgICAgb3JpZ2luYWxQaXBlbGluZVswXS4kZ2VvTmVhci5xdWVyeSB8fCB7fTtcbiAgICAgIG9yaWdpbmFsUGlwZWxpbmVbMF0uJGdlb05lYXIucXVlcnlbZmlsdGVyS2V5XSA9IGRpc2NyaW1pbmF0b3JWYWx1ZTtcbiAgICB9IGVsc2UgaWYgKG9yaWdpbmFsUGlwZWxpbmVbMF0gIT0gbnVsbCAmJiBvcmlnaW5hbFBpcGVsaW5lWzBdLiRzZWFyY2gpIHtcbiAgICAgIGlmIChvcmlnaW5hbFBpcGVsaW5lWzFdICYmIG9yaWdpbmFsUGlwZWxpbmVbMV0uJG1hdGNoICE9IG51bGwpIHtcbiAgICAgICAgb3JpZ2luYWxQaXBlbGluZVsxXS4kbWF0Y2hbZmlsdGVyS2V5XSA9IG9yaWdpbmFsUGlwZWxpbmVbMV0uJG1hdGNoW2ZpbHRlcktleV0gfHwgZGlzY3JpbWluYXRvclZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB7fTtcbiAgICAgICAgbWF0Y2hbZmlsdGVyS2V5XSA9IGRpc2NyaW1pbmF0b3JWYWx1ZTtcbiAgICAgICAgb3JpZ2luYWxQaXBlbGluZS5zcGxpY2UoMSwgMCwgeyAkbWF0Y2g6IG1hdGNoIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBtYXRjaCA9IHt9O1xuICAgICAgbWF0Y2hbZmlsdGVyS2V5XSA9IGRpc2NyaW1pbmF0b3JWYWx1ZTtcbiAgICAgIG9yaWdpbmFsUGlwZWxpbmUudW5zaGlmdCh7ICRtYXRjaDogbWF0Y2ggfSk7XG4gICAgfVxuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/aggregate/prepareDiscriminatorPipeline.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/aggregate/stringifyFunctionOperators.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/aggregate/stringifyFunctionOperators.js ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function stringifyFunctionOperators(pipeline) {\n  if (!Array.isArray(pipeline)) {\n    return;\n  }\n\n  for (const stage of pipeline) {\n    if (stage == null) {\n      continue;\n    }\n\n    const canHaveAccumulator = stage.$group || stage.$bucket || stage.$bucketAuto;\n    if (canHaveAccumulator != null) {\n      for (const key of Object.keys(canHaveAccumulator)) {\n        handleAccumulator(canHaveAccumulator[key]);\n      }\n    }\n\n    const stageType = Object.keys(stage)[0];\n    if (stageType && typeof stage[stageType] === 'object') {\n      const stageOptions = stage[stageType];\n      for (const key of Object.keys(stageOptions)) {\n        if (stageOptions[key] != null &&\n            stageOptions[key].$function != null &&\n            typeof stageOptions[key].$function.body === 'function') {\n          stageOptions[key].$function.body = stageOptions[key].$function.body.toString();\n        }\n      }\n    }\n\n    if (stage.$facet != null) {\n      for (const key of Object.keys(stage.$facet)) {\n        stringifyFunctionOperators(stage.$facet[key]);\n      }\n    }\n  }\n};\n\nfunction handleAccumulator(operator) {\n  if (operator == null || operator.$accumulator == null) {\n    return;\n  }\n\n  for (const key of ['init', 'accumulate', 'merge', 'finalize']) {\n    if (typeof operator.$accumulator[key] === 'function') {\n      operator.$accumulator[key] = String(operator.$accumulator[key]);\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvYWdncmVnYXRlL3N0cmluZ2lmeUZ1bmN0aW9uT3BlcmF0b3JzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvYWdncmVnYXRlL3N0cmluZ2lmeUZ1bmN0aW9uT3BlcmF0b3JzLmpzPzQ2ZmUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHN0cmluZ2lmeUZ1bmN0aW9uT3BlcmF0b3JzKHBpcGVsaW5lKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShwaXBlbGluZSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBmb3IgKGNvbnN0IHN0YWdlIG9mIHBpcGVsaW5lKSB7XG4gICAgaWYgKHN0YWdlID09IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGNvbnN0IGNhbkhhdmVBY2N1bXVsYXRvciA9IHN0YWdlLiRncm91cCB8fCBzdGFnZS4kYnVja2V0IHx8IHN0YWdlLiRidWNrZXRBdXRvO1xuICAgIGlmIChjYW5IYXZlQWNjdW11bGF0b3IgIT0gbnVsbCkge1xuICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoY2FuSGF2ZUFjY3VtdWxhdG9yKSkge1xuICAgICAgICBoYW5kbGVBY2N1bXVsYXRvcihjYW5IYXZlQWNjdW11bGF0b3Jba2V5XSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc3RhZ2VUeXBlID0gT2JqZWN0LmtleXMoc3RhZ2UpWzBdO1xuICAgIGlmIChzdGFnZVR5cGUgJiYgdHlwZW9mIHN0YWdlW3N0YWdlVHlwZV0gPT09ICdvYmplY3QnKSB7XG4gICAgICBjb25zdCBzdGFnZU9wdGlvbnMgPSBzdGFnZVtzdGFnZVR5cGVdO1xuICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoc3RhZ2VPcHRpb25zKSkge1xuICAgICAgICBpZiAoc3RhZ2VPcHRpb25zW2tleV0gIT0gbnVsbCAmJlxuICAgICAgICAgICAgc3RhZ2VPcHRpb25zW2tleV0uJGZ1bmN0aW9uICE9IG51bGwgJiZcbiAgICAgICAgICAgIHR5cGVvZiBzdGFnZU9wdGlvbnNba2V5XS4kZnVuY3Rpb24uYm9keSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHN0YWdlT3B0aW9uc1trZXldLiRmdW5jdGlvbi5ib2R5ID0gc3RhZ2VPcHRpb25zW2tleV0uJGZ1bmN0aW9uLmJvZHkudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdGFnZS4kZmFjZXQgIT0gbnVsbCkge1xuICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoc3RhZ2UuJGZhY2V0KSkge1xuICAgICAgICBzdHJpbmdpZnlGdW5jdGlvbk9wZXJhdG9ycyhzdGFnZS4kZmFjZXRba2V5XSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBoYW5kbGVBY2N1bXVsYXRvcihvcGVyYXRvcikge1xuICBpZiAob3BlcmF0b3IgPT0gbnVsbCB8fCBvcGVyYXRvci4kYWNjdW11bGF0b3IgPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZvciAoY29uc3Qga2V5IG9mIFsnaW5pdCcsICdhY2N1bXVsYXRlJywgJ21lcmdlJywgJ2ZpbmFsaXplJ10pIHtcbiAgICBpZiAodHlwZW9mIG9wZXJhdG9yLiRhY2N1bXVsYXRvcltrZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvcGVyYXRvci4kYWNjdW11bGF0b3Jba2V5XSA9IFN0cmluZyhvcGVyYXRvci4kYWNjdW11bGF0b3Jba2V5XSk7XG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/aggregate/stringifyFunctionOperators.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/arrayDepth.js":
/*!*********************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/arrayDepth.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = arrayDepth;\n\nfunction arrayDepth(arr) {\n  if (!Array.isArray(arr)) {\n    return { min: 0, max: 0, containsNonArrayItem: true };\n  }\n  if (arr.length === 0) {\n    return { min: 1, max: 1, containsNonArrayItem: false };\n  }\n  if (arr.length === 1 && !Array.isArray(arr[0])) {\n    return { min: 1, max: 1, containsNonArrayItem: false };\n  }\n\n  const res = arrayDepth(arr[0]);\n\n  for (let i = 1; i < arr.length; ++i) {\n    const _res = arrayDepth(arr[i]);\n    if (_res.min < res.min) {\n      res.min = _res.min;\n    }\n    if (_res.max > res.max) {\n      res.max = _res.max;\n    }\n    res.containsNonArrayItem = res.containsNonArrayItem || _res.containsNonArrayItem;\n  }\n\n  res.min = res.min + 1;\n  res.max = res.max + 1;\n\n  return res;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvYXJyYXlEZXB0aC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjs7QUFFQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTs7QUFFQSxrQkFBa0IsZ0JBQWdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL2FycmF5RGVwdGguanM/ZjcyOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlEZXB0aDtcblxuZnVuY3Rpb24gYXJyYXlEZXB0aChhcnIpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICByZXR1cm4geyBtaW46IDAsIG1heDogMCwgY29udGFpbnNOb25BcnJheUl0ZW06IHRydWUgfTtcbiAgfVxuICBpZiAoYXJyLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB7IG1pbjogMSwgbWF4OiAxLCBjb250YWluc05vbkFycmF5SXRlbTogZmFsc2UgfTtcbiAgfVxuICBpZiAoYXJyLmxlbmd0aCA9PT0gMSAmJiAhQXJyYXkuaXNBcnJheShhcnJbMF0pKSB7XG4gICAgcmV0dXJuIHsgbWluOiAxLCBtYXg6IDEsIGNvbnRhaW5zTm9uQXJyYXlJdGVtOiBmYWxzZSB9O1xuICB9XG5cbiAgY29uc3QgcmVzID0gYXJyYXlEZXB0aChhcnJbMF0pO1xuXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgY29uc3QgX3JlcyA9IGFycmF5RGVwdGgoYXJyW2ldKTtcbiAgICBpZiAoX3Jlcy5taW4gPCByZXMubWluKSB7XG4gICAgICByZXMubWluID0gX3Jlcy5taW47XG4gICAgfVxuICAgIGlmIChfcmVzLm1heCA+IHJlcy5tYXgpIHtcbiAgICAgIHJlcy5tYXggPSBfcmVzLm1heDtcbiAgICB9XG4gICAgcmVzLmNvbnRhaW5zTm9uQXJyYXlJdGVtID0gcmVzLmNvbnRhaW5zTm9uQXJyYXlJdGVtIHx8IF9yZXMuY29udGFpbnNOb25BcnJheUl0ZW07XG4gIH1cblxuICByZXMubWluID0gcmVzLm1pbiArIDE7XG4gIHJlcy5tYXggPSByZXMubWF4ICsgMTtcblxuICByZXR1cm4gcmVzO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/arrayDepth.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/clone.js":
/*!****************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/clone.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst Decimal = __webpack_require__(/*! ../types/decimal128 */ \"(ssr)/./node_modules/mongoose/lib/types/decimal128.js\");\nconst ObjectId = __webpack_require__(/*! ../types/objectid */ \"(ssr)/./node_modules/mongoose/lib/types/objectid.js\");\nconst specialProperties = __webpack_require__(/*! ./specialProperties */ \"(ssr)/./node_modules/mongoose/lib/helpers/specialProperties.js\");\nconst isMongooseObject = __webpack_require__(/*! ./isMongooseObject */ \"(ssr)/./node_modules/mongoose/lib/helpers/isMongooseObject.js\");\nconst getFunctionName = __webpack_require__(/*! ./getFunctionName */ \"(ssr)/./node_modules/mongoose/lib/helpers/getFunctionName.js\");\nconst isBsonType = __webpack_require__(/*! ./isBsonType */ \"(ssr)/./node_modules/mongoose/lib/helpers/isBsonType.js\");\nconst isMongooseArray = (__webpack_require__(/*! ../types/array/isMongooseArray */ \"(ssr)/./node_modules/mongoose/lib/types/array/isMongooseArray.js\").isMongooseArray);\nconst isObject = __webpack_require__(/*! ./isObject */ \"(ssr)/./node_modules/mongoose/lib/helpers/isObject.js\");\nconst isPOJO = __webpack_require__(/*! ./isPOJO */ \"(ssr)/./node_modules/mongoose/lib/helpers/isPOJO.js\");\nconst symbols = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\");\nconst trustedSymbol = (__webpack_require__(/*! ./query/trusted */ \"(ssr)/./node_modules/mongoose/lib/helpers/query/trusted.js\").trustedSymbol);\n\n/**\n * Object clone with Mongoose natives support.\n *\n * If options.minimize is true, creates a minimal data object. Empty objects and undefined values will not be cloned. This makes the data payload sent to MongoDB as small as possible.\n *\n * Functions are never cloned.\n *\n * @param {Object} obj the object to clone\n * @param {Object} options\n * @param {Boolean} isArrayChild true if cloning immediately underneath an array. Special case for minimize.\n * @return {Object} the cloned object\n * @api private\n */\n\nfunction clone(obj, options, isArrayChild) {\n  if (obj == null) {\n    return obj;\n  }\n\n  if (Array.isArray(obj)) {\n    return cloneArray(isMongooseArray(obj) ? obj.__array : obj, options);\n  }\n\n  if (isMongooseObject(obj)) {\n    if (options) {\n      // Single nested subdocs should apply getters later in `applyGetters()`\n      // when calling `toObject()`. See gh-7442, gh-8295\n      if (options._skipSingleNestedGetters && obj.$isSingleNested) {\n        options = Object.assign({}, options, { getters: false });\n      }\n      if (options.retainDocuments && obj.$__ != null) {\n        const clonedDoc = obj.$clone();\n        if (obj.__index != null) {\n          clonedDoc.__index = obj.__index;\n        }\n        if (obj.__parentArray != null) {\n          clonedDoc.__parentArray = obj.__parentArray;\n        }\n        clonedDoc.$__parent = obj.$__parent;\n        return clonedDoc;\n      }\n    }\n    const isSingleNested = obj.$isSingleNested;\n\n    if (isPOJO(obj) && obj.$__ != null && obj._doc != null) {\n      return obj._doc;\n    }\n\n    let ret;\n    if (options && options.json && typeof obj.toJSON === 'function') {\n      ret = obj.toJSON(options);\n    } else {\n      ret = obj.toObject(options);\n    }\n\n    if (options && options.minimize && !obj.constructor.$__required && isSingleNested && Object.keys(ret).length === 0) {\n      return undefined;\n    }\n\n    return ret;\n  }\n\n  const objConstructor = obj.constructor;\n\n  if (objConstructor) {\n    switch (getFunctionName(objConstructor)) {\n      case 'Object':\n        return cloneObject(obj, options, isArrayChild);\n      case 'Date':\n        return new objConstructor(+obj);\n      case 'RegExp':\n        return cloneRegExp(obj);\n      default:\n        // ignore\n        break;\n    }\n  }\n\n  if (isBsonType(obj, 'ObjectId')) {\n    if (options && options.flattenObjectIds) {\n      return obj.toJSON();\n    }\n    return new ObjectId(obj.id);\n  }\n\n  if (isBsonType(obj, 'Decimal128')) {\n    if (options && options.flattenDecimals) {\n      return obj.toJSON();\n    }\n    return Decimal.fromString(obj.toString());\n  }\n\n  // object created with Object.create(null)\n  if (!objConstructor && isObject(obj)) {\n    return cloneObject(obj, options, isArrayChild);\n  }\n\n  if (typeof obj === 'object' && obj[symbols.schemaTypeSymbol]) {\n    return obj.clone();\n  }\n\n  // If we're cloning this object to go into a MongoDB command,\n  // and there's a `toBSON()` function, assume this object will be\n  // stored as a primitive in MongoDB and doesn't need to be cloned.\n  if (options && options.bson && typeof obj.toBSON === 'function') {\n    return obj;\n  }\n\n  if (typeof obj.valueOf === 'function') {\n    return obj.valueOf();\n  }\n\n  return cloneObject(obj, options, isArrayChild);\n}\nmodule.exports = clone;\n\n/*!\n * ignore\n */\n\nfunction cloneObject(obj, options, isArrayChild) {\n  const minimize = options && options.minimize;\n  const omitUndefined = options && options.omitUndefined;\n  const seen = options && options._seen;\n  const ret = {};\n  let hasKeys;\n\n  if (seen && seen.has(obj)) {\n    return seen.get(obj);\n  } else if (seen) {\n    seen.set(obj, ret);\n  }\n  if (trustedSymbol in obj) {\n    ret[trustedSymbol] = obj[trustedSymbol];\n  }\n\n  let i = 0;\n  let key = '';\n  const keys = Object.keys(obj);\n  const len = keys.length;\n\n  for (i = 0; i < len; ++i) {\n    if (specialProperties.has(key = keys[i])) {\n      continue;\n    }\n\n    // Don't pass `isArrayChild` down\n    const val = clone(obj[key], options, false);\n\n    if ((minimize === false || omitUndefined) && typeof val === 'undefined') {\n      delete ret[key];\n    } else if (minimize !== true || (typeof val !== 'undefined')) {\n      hasKeys || (hasKeys = true);\n      ret[key] = val;\n    }\n  }\n\n  return minimize && !isArrayChild ? hasKeys && ret : ret;\n}\n\nfunction cloneArray(arr, options) {\n  let i = 0;\n  const len = arr.length;\n  const ret = new Array(len);\n  for (i = 0; i < len; ++i) {\n    ret[i] = clone(arr[i], options, true);\n  }\n\n  return ret;\n}\n\nfunction cloneRegExp(regexp) {\n  const ret = new RegExp(regexp.source, regexp.flags);\n\n  if (ret.lastIndex !== regexp.lastIndex) {\n    ret.lastIndex = regexp.lastIndex;\n  }\n  return ret;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/clone.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/common.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/common.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\nconst Binary = (__webpack_require__(/*! bson */ \"(ssr)/./node_modules/bson/lib/bson.cjs\").Binary);\nconst isBsonType = __webpack_require__(/*! ./isBsonType */ \"(ssr)/./node_modules/mongoose/lib/helpers/isBsonType.js\");\nconst isMongooseObject = __webpack_require__(/*! ./isMongooseObject */ \"(ssr)/./node_modules/mongoose/lib/helpers/isMongooseObject.js\");\nconst MongooseError = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongoose/lib/error/index.js\");\nconst util = __webpack_require__(/*! util */ \"util\");\n\nexports.flatten = flatten;\nexports.modifiedPaths = modifiedPaths;\n\n/*!\n * ignore\n */\n\nfunction flatten(update, path, options, schema) {\n  let keys;\n  if (update && isMongooseObject(update) && !Buffer.isBuffer(update)) {\n    keys = Object.keys(update.toObject({ transform: false, virtuals: false }) || {});\n  } else {\n    keys = Object.keys(update || {});\n  }\n\n  const numKeys = keys.length;\n  const result = {};\n  path = path ? path + '.' : '';\n\n  for (let i = 0; i < numKeys; ++i) {\n    const key = keys[i];\n    const val = update[key];\n    result[path + key] = val;\n\n    // Avoid going into mixed paths if schema is specified\n    const keySchema = schema && schema.path && schema.path(path + key);\n    const isNested = schema && schema.nested && schema.nested[path + key];\n    if (keySchema && keySchema.instance === 'Mixed') continue;\n\n    if (shouldFlatten(val)) {\n      if (options && options.skipArrays && Array.isArray(val)) {\n        continue;\n      }\n      const flat = flatten(val, path + key, options, schema);\n      for (const k in flat) {\n        result[k] = flat[k];\n      }\n      if (Array.isArray(val)) {\n        result[path + key] = val;\n      }\n    }\n\n    if (isNested) {\n      const paths = Object.keys(schema.paths);\n      for (const p of paths) {\n        if (p.startsWith(path + key + '.') && !result.hasOwnProperty(p)) {\n          result[p] = void 0;\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\n/*!\n * ignore\n */\n\nfunction modifiedPaths(update, path, result, recursion = null) {\n  if (update == null || typeof update !== 'object') {\n    return;\n  }\n\n  if (recursion == null) {\n    recursion = {\n      raw: { update, path },\n      trace: new WeakSet()\n    };\n  }\n\n  if (recursion.trace.has(update)) {\n    throw new MongooseError(`a circular reference in the update value, updateValue:\n${util.inspect(recursion.raw.update, { showHidden: false, depth: 1 })}\nupdatePath: '${recursion.raw.path}'`);\n  }\n  recursion.trace.add(update);\n\n  const keys = Object.keys(update || {});\n  const numKeys = keys.length;\n  result = result || {};\n  path = path ? path + '.' : '';\n\n  for (let i = 0; i < numKeys; ++i) {\n    const key = keys[i];\n    let val = update[key];\n\n    const _path = path + key;\n    result[_path] = true;\n    if (!Buffer.isBuffer(val) && isMongooseObject(val)) {\n      val = val.toObject({ transform: false, virtuals: false });\n    }\n    if (shouldFlatten(val)) {\n      modifiedPaths(val, path + key, result, recursion);\n    }\n  }\n  recursion.trace.delete(update);\n\n  return result;\n}\n\n/*!\n * ignore\n */\n\nfunction shouldFlatten(val) {\n  return val &&\n      typeof val === 'object' &&\n      !(val instanceof Date) &&\n      !isBsonType(val, 'ObjectId') &&\n      (!Array.isArray(val) || val.length !== 0) &&\n      !(val instanceof Buffer) &&\n      !isBsonType(val, 'Decimal128') &&\n      !(val instanceof Binary);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvY29tbW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTs7QUFFQSxlQUFlLGtGQUFzQjtBQUNyQyxtQkFBbUIsbUJBQU8sQ0FBQyw2RUFBYztBQUN6Qyx5QkFBeUIsbUJBQU8sQ0FBQyx5RkFBb0I7QUFDckQsc0JBQXNCLG1CQUFPLENBQUMsa0VBQVU7QUFDeEMsYUFBYSxtQkFBTyxDQUFDLGtCQUFNOztBQUUzQixlQUFlO0FBQ2YscUJBQXFCOztBQUVyQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLG1DQUFtQyxPQUFPO0FBQ25GLElBQUk7QUFDSixtQ0FBbUM7QUFDbkM7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGtCQUFrQixhQUFhO0FBQy9CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLGNBQWM7QUFDM0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFLHFDQUFxQyw2QkFBNkI7QUFDcEUsZUFBZSxtQkFBbUI7QUFDbEM7QUFDQTs7QUFFQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBOztBQUVBLGtCQUFrQixhQUFhO0FBQy9CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLG1DQUFtQztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL2NvbW1vbi5qcz9hOWI0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyohXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbmNvbnN0IEJpbmFyeSA9IHJlcXVpcmUoJ2Jzb24nKS5CaW5hcnk7XG5jb25zdCBpc0Jzb25UeXBlID0gcmVxdWlyZSgnLi9pc0Jzb25UeXBlJyk7XG5jb25zdCBpc01vbmdvb3NlT2JqZWN0ID0gcmVxdWlyZSgnLi9pc01vbmdvb3NlT2JqZWN0Jyk7XG5jb25zdCBNb25nb29zZUVycm9yID0gcmVxdWlyZSgnLi4vZXJyb3InKTtcbmNvbnN0IHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbmV4cG9ydHMuZmxhdHRlbiA9IGZsYXR0ZW47XG5leHBvcnRzLm1vZGlmaWVkUGF0aHMgPSBtb2RpZmllZFBhdGhzO1xuXG4vKiFcbiAqIGlnbm9yZVxuICovXG5cbmZ1bmN0aW9uIGZsYXR0ZW4odXBkYXRlLCBwYXRoLCBvcHRpb25zLCBzY2hlbWEpIHtcbiAgbGV0IGtleXM7XG4gIGlmICh1cGRhdGUgJiYgaXNNb25nb29zZU9iamVjdCh1cGRhdGUpICYmICFCdWZmZXIuaXNCdWZmZXIodXBkYXRlKSkge1xuICAgIGtleXMgPSBPYmplY3Qua2V5cyh1cGRhdGUudG9PYmplY3QoeyB0cmFuc2Zvcm06IGZhbHNlLCB2aXJ0dWFsczogZmFsc2UgfSkgfHwge30pO1xuICB9IGVsc2Uge1xuICAgIGtleXMgPSBPYmplY3Qua2V5cyh1cGRhdGUgfHwge30pO1xuICB9XG5cbiAgY29uc3QgbnVtS2V5cyA9IGtleXMubGVuZ3RoO1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgcGF0aCA9IHBhdGggPyBwYXRoICsgJy4nIDogJyc7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1LZXlzOyArK2kpIHtcbiAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgIGNvbnN0IHZhbCA9IHVwZGF0ZVtrZXldO1xuICAgIHJlc3VsdFtwYXRoICsga2V5XSA9IHZhbDtcblxuICAgIC8vIEF2b2lkIGdvaW5nIGludG8gbWl4ZWQgcGF0aHMgaWYgc2NoZW1hIGlzIHNwZWNpZmllZFxuICAgIGNvbnN0IGtleVNjaGVtYSA9IHNjaGVtYSAmJiBzY2hlbWEucGF0aCAmJiBzY2hlbWEucGF0aChwYXRoICsga2V5KTtcbiAgICBjb25zdCBpc05lc3RlZCA9IHNjaGVtYSAmJiBzY2hlbWEubmVzdGVkICYmIHNjaGVtYS5uZXN0ZWRbcGF0aCArIGtleV07XG4gICAgaWYgKGtleVNjaGVtYSAmJiBrZXlTY2hlbWEuaW5zdGFuY2UgPT09ICdNaXhlZCcpIGNvbnRpbnVlO1xuXG4gICAgaWYgKHNob3VsZEZsYXR0ZW4odmFsKSkge1xuICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5za2lwQXJyYXlzICYmIEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGZsYXQgPSBmbGF0dGVuKHZhbCwgcGF0aCArIGtleSwgb3B0aW9ucywgc2NoZW1hKTtcbiAgICAgIGZvciAoY29uc3QgayBpbiBmbGF0KSB7XG4gICAgICAgIHJlc3VsdFtrXSA9IGZsYXRba107XG4gICAgICB9XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIHJlc3VsdFtwYXRoICsga2V5XSA9IHZhbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNOZXN0ZWQpIHtcbiAgICAgIGNvbnN0IHBhdGhzID0gT2JqZWN0LmtleXMoc2NoZW1hLnBhdGhzKTtcbiAgICAgIGZvciAoY29uc3QgcCBvZiBwYXRocykge1xuICAgICAgICBpZiAocC5zdGFydHNXaXRoKHBhdGggKyBrZXkgKyAnLicpICYmICFyZXN1bHQuaGFzT3duUHJvcGVydHkocCkpIHtcbiAgICAgICAgICByZXN1bHRbcF0gPSB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKiFcbiAqIGlnbm9yZVxuICovXG5cbmZ1bmN0aW9uIG1vZGlmaWVkUGF0aHModXBkYXRlLCBwYXRoLCByZXN1bHQsIHJlY3Vyc2lvbiA9IG51bGwpIHtcbiAgaWYgKHVwZGF0ZSA9PSBudWxsIHx8IHR5cGVvZiB1cGRhdGUgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHJlY3Vyc2lvbiA9PSBudWxsKSB7XG4gICAgcmVjdXJzaW9uID0ge1xuICAgICAgcmF3OiB7IHVwZGF0ZSwgcGF0aCB9LFxuICAgICAgdHJhY2U6IG5ldyBXZWFrU2V0KClcbiAgICB9O1xuICB9XG5cbiAgaWYgKHJlY3Vyc2lvbi50cmFjZS5oYXModXBkYXRlKSkge1xuICAgIHRocm93IG5ldyBNb25nb29zZUVycm9yKGBhIGNpcmN1bGFyIHJlZmVyZW5jZSBpbiB0aGUgdXBkYXRlIHZhbHVlLCB1cGRhdGVWYWx1ZTpcbiR7dXRpbC5pbnNwZWN0KHJlY3Vyc2lvbi5yYXcudXBkYXRlLCB7IHNob3dIaWRkZW46IGZhbHNlLCBkZXB0aDogMSB9KX1cbnVwZGF0ZVBhdGg6ICcke3JlY3Vyc2lvbi5yYXcucGF0aH0nYCk7XG4gIH1cbiAgcmVjdXJzaW9uLnRyYWNlLmFkZCh1cGRhdGUpO1xuXG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh1cGRhdGUgfHwge30pO1xuICBjb25zdCBudW1LZXlzID0ga2V5cy5sZW5ndGg7XG4gIHJlc3VsdCA9IHJlc3VsdCB8fCB7fTtcbiAgcGF0aCA9IHBhdGggPyBwYXRoICsgJy4nIDogJyc7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1LZXlzOyArK2kpIHtcbiAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgIGxldCB2YWwgPSB1cGRhdGVba2V5XTtcblxuICAgIGNvbnN0IF9wYXRoID0gcGF0aCArIGtleTtcbiAgICByZXN1bHRbX3BhdGhdID0gdHJ1ZTtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih2YWwpICYmIGlzTW9uZ29vc2VPYmplY3QodmFsKSkge1xuICAgICAgdmFsID0gdmFsLnRvT2JqZWN0KHsgdHJhbnNmb3JtOiBmYWxzZSwgdmlydHVhbHM6IGZhbHNlIH0pO1xuICAgIH1cbiAgICBpZiAoc2hvdWxkRmxhdHRlbih2YWwpKSB7XG4gICAgICBtb2RpZmllZFBhdGhzKHZhbCwgcGF0aCArIGtleSwgcmVzdWx0LCByZWN1cnNpb24pO1xuICAgIH1cbiAgfVxuICByZWN1cnNpb24udHJhY2UuZGVsZXRlKHVwZGF0ZSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyohXG4gKiBpZ25vcmVcbiAqL1xuXG5mdW5jdGlvbiBzaG91bGRGbGF0dGVuKHZhbCkge1xuICByZXR1cm4gdmFsICYmXG4gICAgICB0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJlxuICAgICAgISh2YWwgaW5zdGFuY2VvZiBEYXRlKSAmJlxuICAgICAgIWlzQnNvblR5cGUodmFsLCAnT2JqZWN0SWQnKSAmJlxuICAgICAgKCFBcnJheS5pc0FycmF5KHZhbCkgfHwgdmFsLmxlbmd0aCAhPT0gMCkgJiZcbiAgICAgICEodmFsIGluc3RhbmNlb2YgQnVmZmVyKSAmJlxuICAgICAgIWlzQnNvblR5cGUodmFsLCAnRGVjaW1hbDEyOCcpICYmXG4gICAgICAhKHZhbCBpbnN0YW5jZW9mIEJpbmFyeSk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/cursor/eachAsync.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/cursor/eachAsync.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\nconst EachAsyncMultiError = __webpack_require__(/*! ../../error/eachAsyncMultiError */ \"(ssr)/./node_modules/mongoose/lib/error/eachAsyncMultiError.js\");\nconst immediate = __webpack_require__(/*! ../immediate */ \"(ssr)/./node_modules/mongoose/lib/helpers/immediate.js\");\n\n/**\n * Execute `fn` for every document in the cursor. If `fn` returns a promise,\n * will wait for the promise to resolve before iterating on to the next one.\n * Returns a promise that resolves when done.\n *\n * @param {Function} next the thunk to call to get the next document\n * @param {Function} fn\n * @param {Object} options\n * @param {Number} [options.batchSize=null] if set, Mongoose will call `fn` with an array of at most `batchSize` documents, instead of a single document\n * @param {Number} [options.parallel=1] maximum number of `fn` calls that Mongoose will run in parallel\n * @param {AbortSignal} [options.signal] allow cancelling this eachAsync(). Once the abort signal is fired, `eachAsync()` will immediately fulfill the returned promise (or call the callback) and not fetch any more documents.\n * @return {Promise}\n * @api public\n * @method eachAsync\n */\n\nmodule.exports = async function eachAsync(next, fn, options) {\n  const parallel = options.parallel || 1;\n  const batchSize = options.batchSize;\n  const signal = options.signal;\n  const continueOnError = options.continueOnError;\n  const aggregatedErrors = [];\n  const enqueue = asyncQueue();\n\n  let aborted = false;\n\n  return new Promise((resolve, reject) => {\n    if (signal != null) {\n      if (signal.aborted) {\n        return resolve(null);\n      }\n\n      signal.addEventListener('abort', () => {\n        aborted = true;\n        return resolve(null);\n      }, { once: true });\n    }\n\n    if (batchSize != null) {\n      if (typeof batchSize !== 'number') {\n        throw new TypeError('batchSize must be a number');\n      } else if (!Number.isInteger(batchSize)) {\n        throw new TypeError('batchSize must be an integer');\n      } else if (batchSize < 1) {\n        throw new TypeError('batchSize must be at least 1');\n      }\n    }\n\n    iterate((err, res) => {\n      if (err != null) {\n        return reject(err);\n      }\n      resolve(res);\n    });\n  });\n\n  function iterate(finalCallback) {\n    let handleResultsInProgress = 0;\n    let currentDocumentIndex = 0;\n\n    let error = null;\n    for (let i = 0; i < parallel; ++i) {\n      enqueue(createFetch());\n    }\n\n    function createFetch() {\n      let documentsBatch = [];\n      let drained = false;\n\n      return fetch;\n\n      function fetch(done) {\n        if (drained || aborted) {\n          return done();\n        } else if (error) {\n          return done();\n        }\n\n        next(function(err, doc) {\n          if (error != null) {\n            return done();\n          }\n          if (err != null) {\n            if (err.name === 'MongoCursorExhaustedError') {\n              // We may end up calling `next()` multiple times on an exhausted\n              // cursor, which leads to an error. In case cursor is exhausted,\n              // just treat it as if the cursor returned no document, which is\n              // how a cursor indicates it is exhausted.\n              doc = null;\n            } else if (continueOnError) {\n              aggregatedErrors.push(err);\n            } else {\n              error = err;\n              finalCallback(err);\n              return done();\n            }\n          }\n          if (doc == null) {\n            drained = true;\n            if (handleResultsInProgress <= 0) {\n              const finalErr = continueOnError ?\n                createEachAsyncMultiError(aggregatedErrors) :\n                error;\n\n              finalCallback(finalErr);\n            } else if (batchSize && documentsBatch.length) {\n              handleNextResult(documentsBatch, currentDocumentIndex++, handleNextResultCallBack);\n            }\n            return done();\n          }\n\n          ++handleResultsInProgress;\n\n          // Kick off the subsequent `next()` before handling the result, but\n          // make sure we know that we still have a result to handle re: #8422\n          immediate(() => done());\n\n          if (batchSize) {\n            documentsBatch.push(doc);\n          }\n\n          // If the current documents size is less than the provided batch size don't process the documents yet\n          if (batchSize && documentsBatch.length !== batchSize) {\n            immediate(() => enqueue(fetch));\n            return;\n          }\n\n          const docsToProcess = batchSize ? documentsBatch : doc;\n\n          function handleNextResultCallBack(err) {\n            if (batchSize) {\n              handleResultsInProgress -= documentsBatch.length;\n              documentsBatch = [];\n            } else {\n              --handleResultsInProgress;\n            }\n            if (err != null) {\n              if (continueOnError) {\n                aggregatedErrors.push(err);\n              } else {\n                error = err;\n                return finalCallback(err);\n              }\n            }\n            if ((drained || aborted) && handleResultsInProgress <= 0) {\n              const finalErr = continueOnError ?\n                createEachAsyncMultiError(aggregatedErrors) :\n                error;\n              return finalCallback(finalErr);\n            }\n\n            immediate(() => enqueue(fetch));\n          }\n\n          handleNextResult(docsToProcess, currentDocumentIndex++, handleNextResultCallBack);\n        });\n      }\n    }\n  }\n\n  function handleNextResult(doc, i, callback) {\n    let maybePromise;\n    try {\n      maybePromise = fn(doc, i);\n    } catch (err) {\n      return callback(err);\n    }\n    if (maybePromise && typeof maybePromise.then === 'function') {\n      maybePromise.then(\n        function() { callback(null); },\n        function(error) {\n          callback(error || new Error('`eachAsync()` promise rejected without error'));\n        });\n    } else {\n      callback(null);\n    }\n  }\n};\n\n// `next()` can only execute one at a time, so make sure we always execute\n// `next()` in series, while still allowing multiple `fn()` instances to run\n// in parallel.\nfunction asyncQueue() {\n  const _queue = [];\n  let inProgress = null;\n  let id = 0;\n\n  return function enqueue(fn) {\n    if (\n      inProgress === null &&\n      _queue.length === 0\n    ) {\n      inProgress = id++;\n      return fn(_step);\n    }\n    _queue.push(fn);\n  };\n\n  function _step() {\n    if (_queue.length !== 0) {\n      inProgress = id++;\n      const fn = _queue.shift();\n      fn(_step);\n    } else {\n      inProgress = null;\n    }\n  }\n}\n\nfunction createEachAsyncMultiError(aggregatedErrors) {\n  if (aggregatedErrors.length === 0) {\n    return null;\n  }\n\n  return new EachAsyncMultiError(aggregatedErrors);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/cursor/eachAsync.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/discriminator/applyEmbeddedDiscriminators.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/discriminator/applyEmbeddedDiscriminators.js ***!
  \****************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = applyEmbeddedDiscriminators;\n\nfunction applyEmbeddedDiscriminators(schema, seen = new WeakSet()) {\n  if (seen.has(schema)) {\n    return;\n  }\n  seen.add(schema);\n  for (const path of Object.keys(schema.paths)) {\n    const schemaType = schema.paths[path];\n    if (!schemaType.schema) {\n      continue;\n    }\n    applyEmbeddedDiscriminators(schemaType.schema, seen);\n    if (!schemaType.schema._applyDiscriminators) {\n      continue;\n    }\n    if (schemaType._appliedDiscriminators) {\n      continue;\n    }\n    for (const discriminatorKey of schemaType.schema._applyDiscriminators.keys()) {\n      const discriminatorSchema = schemaType.schema._applyDiscriminators.get(discriminatorKey);\n      applyEmbeddedDiscriminators(discriminatorSchema, seen);\n      schemaType.discriminator(discriminatorKey, discriminatorSchema);\n    }\n    schemaType._appliedDiscriminators = true;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvZGlzY3JpbWluYXRvci9hcHBseUVtYmVkZGVkRGlzY3JpbWluYXRvcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL2Rpc2NyaW1pbmF0b3IvYXBwbHlFbWJlZGRlZERpc2NyaW1pbmF0b3JzLmpzP2I2Y2UiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFwcGx5RW1iZWRkZWREaXNjcmltaW5hdG9ycztcblxuZnVuY3Rpb24gYXBwbHlFbWJlZGRlZERpc2NyaW1pbmF0b3JzKHNjaGVtYSwgc2VlbiA9IG5ldyBXZWFrU2V0KCkpIHtcbiAgaWYgKHNlZW4uaGFzKHNjaGVtYSkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgc2Vlbi5hZGQoc2NoZW1hKTtcbiAgZm9yIChjb25zdCBwYXRoIG9mIE9iamVjdC5rZXlzKHNjaGVtYS5wYXRocykpIHtcbiAgICBjb25zdCBzY2hlbWFUeXBlID0gc2NoZW1hLnBhdGhzW3BhdGhdO1xuICAgIGlmICghc2NoZW1hVHlwZS5zY2hlbWEpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBhcHBseUVtYmVkZGVkRGlzY3JpbWluYXRvcnMoc2NoZW1hVHlwZS5zY2hlbWEsIHNlZW4pO1xuICAgIGlmICghc2NoZW1hVHlwZS5zY2hlbWEuX2FwcGx5RGlzY3JpbWluYXRvcnMpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoc2NoZW1hVHlwZS5fYXBwbGllZERpc2NyaW1pbmF0b3JzKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBkaXNjcmltaW5hdG9yS2V5IG9mIHNjaGVtYVR5cGUuc2NoZW1hLl9hcHBseURpc2NyaW1pbmF0b3JzLmtleXMoKSkge1xuICAgICAgY29uc3QgZGlzY3JpbWluYXRvclNjaGVtYSA9IHNjaGVtYVR5cGUuc2NoZW1hLl9hcHBseURpc2NyaW1pbmF0b3JzLmdldChkaXNjcmltaW5hdG9yS2V5KTtcbiAgICAgIGFwcGx5RW1iZWRkZWREaXNjcmltaW5hdG9ycyhkaXNjcmltaW5hdG9yU2NoZW1hLCBzZWVuKTtcbiAgICAgIHNjaGVtYVR5cGUuZGlzY3JpbWluYXRvcihkaXNjcmltaW5hdG9yS2V5LCBkaXNjcmltaW5hdG9yU2NoZW1hKTtcbiAgICB9XG4gICAgc2NoZW1hVHlwZS5fYXBwbGllZERpc2NyaW1pbmF0b3JzID0gdHJ1ZTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/discriminator/applyEmbeddedDiscriminators.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/discriminator/areDiscriminatorValuesEqual.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/discriminator/areDiscriminatorValuesEqual.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst isBsonType = __webpack_require__(/*! ../isBsonType */ \"(ssr)/./node_modules/mongoose/lib/helpers/isBsonType.js\");\n\nmodule.exports = function areDiscriminatorValuesEqual(a, b) {\n  if (typeof a === 'string' && typeof b === 'string') {\n    return a === b;\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a === b;\n  }\n  if (isBsonType(a, 'ObjectId') && isBsonType(b, 'ObjectId')) {\n    return a.toString() === b.toString();\n  }\n  return false;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvZGlzY3JpbWluYXRvci9hcmVEaXNjcmltaW5hdG9yVmFsdWVzRXF1YWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsbUJBQW1CLG1CQUFPLENBQUMsOEVBQWU7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvZGlzY3JpbWluYXRvci9hcmVEaXNjcmltaW5hdG9yVmFsdWVzRXF1YWwuanM/ODhmYyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGlzQnNvblR5cGUgPSByZXF1aXJlKCcuLi9pc0Jzb25UeXBlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYXJlRGlzY3JpbWluYXRvclZhbHVlc0VxdWFsKGEsIGIpIHtcbiAgaWYgKHR5cGVvZiBhID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgYiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gYSA9PT0gYjtcbiAgfVxuICBpZiAodHlwZW9mIGEgPT09ICdudW1iZXInICYmIHR5cGVvZiBiID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBhID09PSBiO1xuICB9XG4gIGlmIChpc0Jzb25UeXBlKGEsICdPYmplY3RJZCcpICYmIGlzQnNvblR5cGUoYiwgJ09iamVjdElkJykpIHtcbiAgICByZXR1cm4gYS50b1N0cmluZygpID09PSBiLnRvU3RyaW5nKCk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/discriminator/areDiscriminatorValuesEqual.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/discriminator/checkEmbeddedDiscriminatorKeyProjection.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/discriminator/checkEmbeddedDiscriminatorKeyProjection.js ***!
  \****************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function checkEmbeddedDiscriminatorKeyProjection(userProjection, path, schema, selected, addedPaths) {\n  const userProjectedInPath = Object.keys(userProjection).\n    reduce((cur, key) => cur || key.startsWith(path + '.'), false);\n  const _discriminatorKey = path + '.' + schema.options.discriminatorKey;\n  if (!userProjectedInPath &&\n      addedPaths.length === 1 &&\n      addedPaths[0] === _discriminatorKey) {\n    selected.splice(selected.indexOf(_discriminatorKey), 1);\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvZGlzY3JpbWluYXRvci9jaGVja0VtYmVkZGVkRGlzY3JpbWluYXRvcktleVByb2plY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL2Rpc2NyaW1pbmF0b3IvY2hlY2tFbWJlZGRlZERpc2NyaW1pbmF0b3JLZXlQcm9qZWN0aW9uLmpzP2IyNjUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNoZWNrRW1iZWRkZWREaXNjcmltaW5hdG9yS2V5UHJvamVjdGlvbih1c2VyUHJvamVjdGlvbiwgcGF0aCwgc2NoZW1hLCBzZWxlY3RlZCwgYWRkZWRQYXRocykge1xuICBjb25zdCB1c2VyUHJvamVjdGVkSW5QYXRoID0gT2JqZWN0LmtleXModXNlclByb2plY3Rpb24pLlxuICAgIHJlZHVjZSgoY3VyLCBrZXkpID0+IGN1ciB8fCBrZXkuc3RhcnRzV2l0aChwYXRoICsgJy4nKSwgZmFsc2UpO1xuICBjb25zdCBfZGlzY3JpbWluYXRvcktleSA9IHBhdGggKyAnLicgKyBzY2hlbWEub3B0aW9ucy5kaXNjcmltaW5hdG9yS2V5O1xuICBpZiAoIXVzZXJQcm9qZWN0ZWRJblBhdGggJiZcbiAgICAgIGFkZGVkUGF0aHMubGVuZ3RoID09PSAxICYmXG4gICAgICBhZGRlZFBhdGhzWzBdID09PSBfZGlzY3JpbWluYXRvcktleSkge1xuICAgIHNlbGVjdGVkLnNwbGljZShzZWxlY3RlZC5pbmRleE9mKF9kaXNjcmltaW5hdG9yS2V5KSwgMSk7XG4gIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/discriminator/checkEmbeddedDiscriminatorKeyProjection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/discriminator/getConstructor.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/discriminator/getConstructor.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst getDiscriminatorByValue = __webpack_require__(/*! ./getDiscriminatorByValue */ \"(ssr)/./node_modules/mongoose/lib/helpers/discriminator/getDiscriminatorByValue.js\");\n\n/**\n * Find the correct constructor, taking into account discriminators\n * @api private\n */\n\nmodule.exports = function getConstructor(Constructor, value, defaultDiscriminatorValue) {\n  const discriminatorKey = Constructor.schema.options.discriminatorKey;\n  let discriminatorValue = (value != null && value[discriminatorKey]);\n  if (discriminatorValue == null) {\n    discriminatorValue = defaultDiscriminatorValue;\n  }\n  if (Constructor.discriminators &&\n      discriminatorValue != null) {\n    if (Constructor.discriminators[discriminatorValue]) {\n      Constructor = Constructor.discriminators[discriminatorValue];\n    } else {\n      const constructorByValue = getDiscriminatorByValue(Constructor.discriminators, discriminatorValue);\n      if (constructorByValue) {\n        Constructor = constructorByValue;\n      }\n    }\n  }\n\n  return Constructor;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvZGlzY3JpbWluYXRvci9nZXRDb25zdHJ1Y3Rvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixnQ0FBZ0MsbUJBQU8sQ0FBQyxxSEFBMkI7O0FBRW5FO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9kaXNjcmltaW5hdG9yL2dldENvbnN0cnVjdG9yLmpzPzQ2ODIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBnZXREaXNjcmltaW5hdG9yQnlWYWx1ZSA9IHJlcXVpcmUoJy4vZ2V0RGlzY3JpbWluYXRvckJ5VmFsdWUnKTtcblxuLyoqXG4gKiBGaW5kIHRoZSBjb3JyZWN0IGNvbnN0cnVjdG9yLCB0YWtpbmcgaW50byBhY2NvdW50IGRpc2NyaW1pbmF0b3JzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldENvbnN0cnVjdG9yKENvbnN0cnVjdG9yLCB2YWx1ZSwgZGVmYXVsdERpc2NyaW1pbmF0b3JWYWx1ZSkge1xuICBjb25zdCBkaXNjcmltaW5hdG9yS2V5ID0gQ29uc3RydWN0b3Iuc2NoZW1hLm9wdGlvbnMuZGlzY3JpbWluYXRvcktleTtcbiAgbGV0IGRpc2NyaW1pbmF0b3JWYWx1ZSA9ICh2YWx1ZSAhPSBudWxsICYmIHZhbHVlW2Rpc2NyaW1pbmF0b3JLZXldKTtcbiAgaWYgKGRpc2NyaW1pbmF0b3JWYWx1ZSA9PSBudWxsKSB7XG4gICAgZGlzY3JpbWluYXRvclZhbHVlID0gZGVmYXVsdERpc2NyaW1pbmF0b3JWYWx1ZTtcbiAgfVxuICBpZiAoQ29uc3RydWN0b3IuZGlzY3JpbWluYXRvcnMgJiZcbiAgICAgIGRpc2NyaW1pbmF0b3JWYWx1ZSAhPSBudWxsKSB7XG4gICAgaWYgKENvbnN0cnVjdG9yLmRpc2NyaW1pbmF0b3JzW2Rpc2NyaW1pbmF0b3JWYWx1ZV0pIHtcbiAgICAgIENvbnN0cnVjdG9yID0gQ29uc3RydWN0b3IuZGlzY3JpbWluYXRvcnNbZGlzY3JpbWluYXRvclZhbHVlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY29uc3RydWN0b3JCeVZhbHVlID0gZ2V0RGlzY3JpbWluYXRvckJ5VmFsdWUoQ29uc3RydWN0b3IuZGlzY3JpbWluYXRvcnMsIGRpc2NyaW1pbmF0b3JWYWx1ZSk7XG4gICAgICBpZiAoY29uc3RydWN0b3JCeVZhbHVlKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gY29uc3RydWN0b3JCeVZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/discriminator/getConstructor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/discriminator/getDiscriminatorByValue.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/discriminator/getDiscriminatorByValue.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst areDiscriminatorValuesEqual = __webpack_require__(/*! ./areDiscriminatorValuesEqual */ \"(ssr)/./node_modules/mongoose/lib/helpers/discriminator/areDiscriminatorValuesEqual.js\");\n\n/**\n * returns discriminator by discriminatorMapping.value\n *\n * @param {Object} discriminators\n * @param {string} value\n * @api private\n */\n\nmodule.exports = function getDiscriminatorByValue(discriminators, value) {\n  if (discriminators == null) {\n    return null;\n  }\n  for (const name of Object.keys(discriminators)) {\n    const it = discriminators[name];\n    if (\n      it.schema &&\n      it.schema.discriminatorMapping &&\n      areDiscriminatorValuesEqual(it.schema.discriminatorMapping.value, value)\n    ) {\n      return it;\n    }\n  }\n  return null;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvZGlzY3JpbWluYXRvci9nZXREaXNjcmltaW5hdG9yQnlWYWx1ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixvQ0FBb0MsbUJBQU8sQ0FBQyw2SEFBK0I7O0FBRTNFO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvZGlzY3JpbWluYXRvci9nZXREaXNjcmltaW5hdG9yQnlWYWx1ZS5qcz81ZWQ2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgYXJlRGlzY3JpbWluYXRvclZhbHVlc0VxdWFsID0gcmVxdWlyZSgnLi9hcmVEaXNjcmltaW5hdG9yVmFsdWVzRXF1YWwnKTtcblxuLyoqXG4gKiByZXR1cm5zIGRpc2NyaW1pbmF0b3IgYnkgZGlzY3JpbWluYXRvck1hcHBpbmcudmFsdWVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGlzY3JpbWluYXRvcnNcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXREaXNjcmltaW5hdG9yQnlWYWx1ZShkaXNjcmltaW5hdG9ycywgdmFsdWUpIHtcbiAgaWYgKGRpc2NyaW1pbmF0b3JzID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmb3IgKGNvbnN0IG5hbWUgb2YgT2JqZWN0LmtleXMoZGlzY3JpbWluYXRvcnMpKSB7XG4gICAgY29uc3QgaXQgPSBkaXNjcmltaW5hdG9yc1tuYW1lXTtcbiAgICBpZiAoXG4gICAgICBpdC5zY2hlbWEgJiZcbiAgICAgIGl0LnNjaGVtYS5kaXNjcmltaW5hdG9yTWFwcGluZyAmJlxuICAgICAgYXJlRGlzY3JpbWluYXRvclZhbHVlc0VxdWFsKGl0LnNjaGVtYS5kaXNjcmltaW5hdG9yTWFwcGluZy52YWx1ZSwgdmFsdWUpXG4gICAgKSB7XG4gICAgICByZXR1cm4gaXQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/discriminator/getDiscriminatorByValue.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/discriminator/getSchemaDiscriminatorByValue.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/discriminator/getSchemaDiscriminatorByValue.js ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst areDiscriminatorValuesEqual = __webpack_require__(/*! ./areDiscriminatorValuesEqual */ \"(ssr)/./node_modules/mongoose/lib/helpers/discriminator/areDiscriminatorValuesEqual.js\");\n\n/**\n * returns discriminator by discriminatorMapping.value\n *\n * @param {Schema} schema\n * @param {string} value\n * @api private\n */\n\nmodule.exports = function getSchemaDiscriminatorByValue(schema, value) {\n  if (schema == null || schema.discriminators == null) {\n    return null;\n  }\n  for (const key of Object.keys(schema.discriminators)) {\n    const discriminatorSchema = schema.discriminators[key];\n    if (discriminatorSchema.discriminatorMapping == null) {\n      continue;\n    }\n    if (areDiscriminatorValuesEqual(discriminatorSchema.discriminatorMapping.value, value)) {\n      return discriminatorSchema;\n    }\n  }\n  return null;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvZGlzY3JpbWluYXRvci9nZXRTY2hlbWFEaXNjcmltaW5hdG9yQnlWYWx1ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixvQ0FBb0MsbUJBQU8sQ0FBQyw2SEFBK0I7O0FBRTNFO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL2Rpc2NyaW1pbmF0b3IvZ2V0U2NoZW1hRGlzY3JpbWluYXRvckJ5VmFsdWUuanM/MTU2NCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGFyZURpc2NyaW1pbmF0b3JWYWx1ZXNFcXVhbCA9IHJlcXVpcmUoJy4vYXJlRGlzY3JpbWluYXRvclZhbHVlc0VxdWFsJyk7XG5cbi8qKlxuICogcmV0dXJucyBkaXNjcmltaW5hdG9yIGJ5IGRpc2NyaW1pbmF0b3JNYXBwaW5nLnZhbHVlXG4gKlxuICogQHBhcmFtIHtTY2hlbWF9IHNjaGVtYVxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFNjaGVtYURpc2NyaW1pbmF0b3JCeVZhbHVlKHNjaGVtYSwgdmFsdWUpIHtcbiAgaWYgKHNjaGVtYSA9PSBudWxsIHx8IHNjaGVtYS5kaXNjcmltaW5hdG9ycyA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoc2NoZW1hLmRpc2NyaW1pbmF0b3JzKSkge1xuICAgIGNvbnN0IGRpc2NyaW1pbmF0b3JTY2hlbWEgPSBzY2hlbWEuZGlzY3JpbWluYXRvcnNba2V5XTtcbiAgICBpZiAoZGlzY3JpbWluYXRvclNjaGVtYS5kaXNjcmltaW5hdG9yTWFwcGluZyA9PSBudWxsKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFyZURpc2NyaW1pbmF0b3JWYWx1ZXNFcXVhbChkaXNjcmltaW5hdG9yU2NoZW1hLmRpc2NyaW1pbmF0b3JNYXBwaW5nLnZhbHVlLCB2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBkaXNjcmltaW5hdG9yU2NoZW1hO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/discriminator/getSchemaDiscriminatorByValue.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/discriminator/mergeDiscriminatorSchema.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/discriminator/mergeDiscriminatorSchema.js ***!
  \*************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst schemaMerge = __webpack_require__(/*! ../schema/merge */ \"(ssr)/./node_modules/mongoose/lib/helpers/schema/merge.js\");\nconst specialProperties = __webpack_require__(/*! ../../helpers/specialProperties */ \"(ssr)/./node_modules/mongoose/lib/helpers/specialProperties.js\");\nconst isBsonType = __webpack_require__(/*! ../../helpers/isBsonType */ \"(ssr)/./node_modules/mongoose/lib/helpers/isBsonType.js\");\nconst ObjectId = __webpack_require__(/*! ../../types/objectid */ \"(ssr)/./node_modules/mongoose/lib/types/objectid.js\");\nconst isObject = __webpack_require__(/*! ../../helpers/isObject */ \"(ssr)/./node_modules/mongoose/lib/helpers/isObject.js\");\n/**\n * Merges `from` into `to` without overwriting existing properties.\n *\n * @param {Object} to\n * @param {Object} from\n * @param {String} [path]\n * @api private\n */\n\nmodule.exports = function mergeDiscriminatorSchema(to, from, path, seen) {\n  const keys = Object.keys(from);\n  let i = 0;\n  const len = keys.length;\n  let key;\n\n  path = path || '';\n  seen = seen || new WeakSet();\n\n  if (seen.has(from)) {\n    return;\n  }\n  seen.add(from);\n\n  while (i < len) {\n    key = keys[i++];\n    if (!path) {\n      if (key === 'discriminators' ||\n        key === 'base' ||\n        key === '_applyDiscriminators' ||\n        key === '_userProvidedOptions' ||\n        key === 'options' ||\n        key === 'tree') {\n        continue;\n      }\n    }\n    if (path === 'tree' && from != null && from.instanceOfSchema) {\n      continue;\n    }\n    if (specialProperties.has(key)) {\n      continue;\n    }\n    if (to[key] == null) {\n      to[key] = from[key];\n    } else if (isObject(from[key])) {\n      if (!isObject(to[key])) {\n        to[key] = {};\n      }\n      if (from[key] != null) {\n        // Skip merging schemas if we're creating a discriminator schema and\n        // base schema has a given path as a single nested but discriminator schema\n        // has the path as a document array, or vice versa (gh-9534)\n        if ((from[key].$isSingleNested && to[key].$isMongooseDocumentArray) ||\n              (from[key].$isMongooseDocumentArray && to[key].$isSingleNested) ||\n              (from[key].$isMongooseDocumentArrayElement && to[key].$isMongooseDocumentArrayElement)) {\n          continue;\n        } else if (from[key].instanceOfSchema) {\n          if (to[key].instanceOfSchema) {\n            schemaMerge(to[key], from[key].clone(), true);\n          } else {\n            to[key] = from[key].clone();\n          }\n          continue;\n        } else if (isBsonType(from[key], 'ObjectId')) {\n          to[key] = new ObjectId(from[key]);\n          continue;\n        }\n      }\n      mergeDiscriminatorSchema(to[key], from[key], path ? path + '.' + key : key, seen);\n    }\n  }\n\n  if (from != null && from.instanceOfSchema) {\n    to.tree = Object.assign({}, from.tree, to.tree);\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvZGlzY3JpbWluYXRvci9tZXJnZURpc2NyaW1pbmF0b3JTY2hlbWEuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixvQkFBb0IsbUJBQU8sQ0FBQyxrRkFBaUI7QUFDN0MsMEJBQTBCLG1CQUFPLENBQUMsdUdBQWlDO0FBQ25FLG1CQUFtQixtQkFBTyxDQUFDLHlGQUEwQjtBQUNyRCxpQkFBaUIsbUJBQU8sQ0FBQyxpRkFBc0I7QUFDL0MsaUJBQWlCLG1CQUFPLENBQUMscUZBQXdCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9kaXNjcmltaW5hdG9yL21lcmdlRGlzY3JpbWluYXRvclNjaGVtYS5qcz9jNDUyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IHNjaGVtYU1lcmdlID0gcmVxdWlyZSgnLi4vc2NoZW1hL21lcmdlJyk7XG5jb25zdCBzcGVjaWFsUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uLy4uL2hlbHBlcnMvc3BlY2lhbFByb3BlcnRpZXMnKTtcbmNvbnN0IGlzQnNvblR5cGUgPSByZXF1aXJlKCcuLi8uLi9oZWxwZXJzL2lzQnNvblR5cGUnKTtcbmNvbnN0IE9iamVjdElkID0gcmVxdWlyZSgnLi4vLi4vdHlwZXMvb2JqZWN0aWQnKTtcbmNvbnN0IGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vLi4vaGVscGVycy9pc09iamVjdCcpO1xuLyoqXG4gKiBNZXJnZXMgYGZyb21gIGludG8gYHRvYCB3aXRob3V0IG92ZXJ3cml0aW5nIGV4aXN0aW5nIHByb3BlcnRpZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHRvXG4gKiBAcGFyYW0ge09iamVjdH0gZnJvbVxuICogQHBhcmFtIHtTdHJpbmd9IFtwYXRoXVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZXJnZURpc2NyaW1pbmF0b3JTY2hlbWEodG8sIGZyb20sIHBhdGgsIHNlZW4pIHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGZyb20pO1xuICBsZXQgaSA9IDA7XG4gIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoO1xuICBsZXQga2V5O1xuXG4gIHBhdGggPSBwYXRoIHx8ICcnO1xuICBzZWVuID0gc2VlbiB8fCBuZXcgV2Vha1NldCgpO1xuXG4gIGlmIChzZWVuLmhhcyhmcm9tKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBzZWVuLmFkZChmcm9tKTtcblxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIGtleSA9IGtleXNbaSsrXTtcbiAgICBpZiAoIXBhdGgpIHtcbiAgICAgIGlmIChrZXkgPT09ICdkaXNjcmltaW5hdG9ycycgfHxcbiAgICAgICAga2V5ID09PSAnYmFzZScgfHxcbiAgICAgICAga2V5ID09PSAnX2FwcGx5RGlzY3JpbWluYXRvcnMnIHx8XG4gICAgICAgIGtleSA9PT0gJ191c2VyUHJvdmlkZWRPcHRpb25zJyB8fFxuICAgICAgICBrZXkgPT09ICdvcHRpb25zJyB8fFxuICAgICAgICBrZXkgPT09ICd0cmVlJykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBhdGggPT09ICd0cmVlJyAmJiBmcm9tICE9IG51bGwgJiYgZnJvbS5pbnN0YW5jZU9mU2NoZW1hKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKHNwZWNpYWxQcm9wZXJ0aWVzLmhhcyhrZXkpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKHRvW2tleV0gPT0gbnVsbCkge1xuICAgICAgdG9ba2V5XSA9IGZyb21ba2V5XTtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGZyb21ba2V5XSkpIHtcbiAgICAgIGlmICghaXNPYmplY3QodG9ba2V5XSkpIHtcbiAgICAgICAgdG9ba2V5XSA9IHt9O1xuICAgICAgfVxuICAgICAgaWYgKGZyb21ba2V5XSAhPSBudWxsKSB7XG4gICAgICAgIC8vIFNraXAgbWVyZ2luZyBzY2hlbWFzIGlmIHdlJ3JlIGNyZWF0aW5nIGEgZGlzY3JpbWluYXRvciBzY2hlbWEgYW5kXG4gICAgICAgIC8vIGJhc2Ugc2NoZW1hIGhhcyBhIGdpdmVuIHBhdGggYXMgYSBzaW5nbGUgbmVzdGVkIGJ1dCBkaXNjcmltaW5hdG9yIHNjaGVtYVxuICAgICAgICAvLyBoYXMgdGhlIHBhdGggYXMgYSBkb2N1bWVudCBhcnJheSwgb3IgdmljZSB2ZXJzYSAoZ2gtOTUzNClcbiAgICAgICAgaWYgKChmcm9tW2tleV0uJGlzU2luZ2xlTmVzdGVkICYmIHRvW2tleV0uJGlzTW9uZ29vc2VEb2N1bWVudEFycmF5KSB8fFxuICAgICAgICAgICAgICAoZnJvbVtrZXldLiRpc01vbmdvb3NlRG9jdW1lbnRBcnJheSAmJiB0b1trZXldLiRpc1NpbmdsZU5lc3RlZCkgfHxcbiAgICAgICAgICAgICAgKGZyb21ba2V5XS4kaXNNb25nb29zZURvY3VtZW50QXJyYXlFbGVtZW50ICYmIHRvW2tleV0uJGlzTW9uZ29vc2VEb2N1bWVudEFycmF5RWxlbWVudCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIGlmIChmcm9tW2tleV0uaW5zdGFuY2VPZlNjaGVtYSkge1xuICAgICAgICAgIGlmICh0b1trZXldLmluc3RhbmNlT2ZTY2hlbWEpIHtcbiAgICAgICAgICAgIHNjaGVtYU1lcmdlKHRvW2tleV0sIGZyb21ba2V5XS5jbG9uZSgpLCB0cnVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9ba2V5XSA9IGZyb21ba2V5XS5jbG9uZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0Jzb25UeXBlKGZyb21ba2V5XSwgJ09iamVjdElkJykpIHtcbiAgICAgICAgICB0b1trZXldID0gbmV3IE9iamVjdElkKGZyb21ba2V5XSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG1lcmdlRGlzY3JpbWluYXRvclNjaGVtYSh0b1trZXldLCBmcm9tW2tleV0sIHBhdGggPyBwYXRoICsgJy4nICsga2V5IDoga2V5LCBzZWVuKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZnJvbSAhPSBudWxsICYmIGZyb20uaW5zdGFuY2VPZlNjaGVtYSkge1xuICAgIHRvLnRyZWUgPSBPYmplY3QuYXNzaWduKHt9LCBmcm9tLnRyZWUsIHRvLnRyZWUpO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/discriminator/mergeDiscriminatorSchema.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/document/applyDefaults.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/document/applyDefaults.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst isNestedProjection = __webpack_require__(/*! ../projection/isNestedProjection */ \"(ssr)/./node_modules/mongoose/lib/helpers/projection/isNestedProjection.js\");\n\nmodule.exports = function applyDefaults(doc, fields, exclude, hasIncludedChildren, isBeforeSetters, pathsToSkip) {\n  const paths = Object.keys(doc.$__schema.paths);\n  const plen = paths.length;\n\n  for (let i = 0; i < plen; ++i) {\n    let def;\n    let curPath = '';\n    const p = paths[i];\n\n    if (p === '_id' && doc.$__.skipId) {\n      continue;\n    }\n\n    const type = doc.$__schema.paths[p];\n    const path = type.splitPath();\n    const len = path.length;\n    let included = false;\n    let doc_ = doc._doc;\n    for (let j = 0; j < len; ++j) {\n      if (doc_ == null) {\n        break;\n      }\n\n      const piece = path[j];\n      curPath += (!curPath.length ? '' : '.') + piece;\n\n      if (exclude === true) {\n        if (curPath in fields) {\n          break;\n        }\n      } else if (exclude === false && fields && !included) {\n        const hasSubpaths = type.$isSingleNested || type.$isMongooseDocumentArray;\n        if ((curPath in fields && !isNestedProjection(fields[curPath])) || (j === len - 1 && hasSubpaths && hasIncludedChildren != null && hasIncludedChildren[curPath])) {\n          included = true;\n        } else if (hasIncludedChildren != null && !hasIncludedChildren[curPath]) {\n          break;\n        }\n      }\n\n      if (j === len - 1) {\n        if (doc_[piece] !== void 0) {\n          break;\n        }\n\n        if (isBeforeSetters != null) {\n          if (typeof type.defaultValue === 'function') {\n            if (!type.defaultValue.$runBeforeSetters && isBeforeSetters) {\n              break;\n            }\n            if (type.defaultValue.$runBeforeSetters && !isBeforeSetters) {\n              break;\n            }\n          } else if (!isBeforeSetters) {\n            // Non-function defaults should always run **before** setters\n            continue;\n          }\n        }\n\n        if (pathsToSkip && pathsToSkip[curPath]) {\n          break;\n        }\n\n        if (fields && exclude !== null) {\n          if (exclude === true) {\n            // apply defaults to all non-excluded fields\n            if (p in fields) {\n              continue;\n            }\n\n            try {\n              def = type.getDefault(doc, false);\n            } catch (err) {\n              doc.invalidate(p, err);\n              break;\n            }\n\n            if (typeof def !== 'undefined') {\n              doc_[piece] = def;\n              applyChangeTracking(doc, p);\n            }\n          } else if (included) {\n            // selected field\n            try {\n              def = type.getDefault(doc, false);\n            } catch (err) {\n              doc.invalidate(p, err);\n              break;\n            }\n\n            if (typeof def !== 'undefined') {\n              doc_[piece] = def;\n              applyChangeTracking(doc, p);\n            }\n          }\n        } else {\n          try {\n            def = type.getDefault(doc, false);\n          } catch (err) {\n            doc.invalidate(p, err);\n            break;\n          }\n\n          if (typeof def !== 'undefined') {\n            doc_[piece] = def;\n            applyChangeTracking(doc, p);\n          }\n        }\n      } else {\n        doc_ = doc_[piece];\n      }\n    }\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction applyChangeTracking(doc, fullPath) {\n  doc.$__.activePaths.default(fullPath);\n  if (doc.$isSubdocument && doc.$isSingleNested && doc.$parent() != null) {\n    doc.$parent().$__.activePaths.default(doc.$__pathRelativeToParent(fullPath));\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvZG9jdW1lbnQvYXBwbHlEZWZhdWx0cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiwyQkFBMkIsbUJBQU8sQ0FBQyxvSEFBa0M7O0FBRXJFO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0IsVUFBVTtBQUM1QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL2RvY3VtZW50L2FwcGx5RGVmYXVsdHMuanM/ZTJhZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGlzTmVzdGVkUHJvamVjdGlvbiA9IHJlcXVpcmUoJy4uL3Byb2plY3Rpb24vaXNOZXN0ZWRQcm9qZWN0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYXBwbHlEZWZhdWx0cyhkb2MsIGZpZWxkcywgZXhjbHVkZSwgaGFzSW5jbHVkZWRDaGlsZHJlbiwgaXNCZWZvcmVTZXR0ZXJzLCBwYXRoc1RvU2tpcCkge1xuICBjb25zdCBwYXRocyA9IE9iamVjdC5rZXlzKGRvYy4kX19zY2hlbWEucGF0aHMpO1xuICBjb25zdCBwbGVuID0gcGF0aHMubGVuZ3RoO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcGxlbjsgKytpKSB7XG4gICAgbGV0IGRlZjtcbiAgICBsZXQgY3VyUGF0aCA9ICcnO1xuICAgIGNvbnN0IHAgPSBwYXRoc1tpXTtcblxuICAgIGlmIChwID09PSAnX2lkJyAmJiBkb2MuJF9fLnNraXBJZCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgY29uc3QgdHlwZSA9IGRvYy4kX19zY2hlbWEucGF0aHNbcF07XG4gICAgY29uc3QgcGF0aCA9IHR5cGUuc3BsaXRQYXRoKCk7XG4gICAgY29uc3QgbGVuID0gcGF0aC5sZW5ndGg7XG4gICAgbGV0IGluY2x1ZGVkID0gZmFsc2U7XG4gICAgbGV0IGRvY18gPSBkb2MuX2RvYztcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGxlbjsgKytqKSB7XG4gICAgICBpZiAoZG9jXyA9PSBudWxsKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwaWVjZSA9IHBhdGhbal07XG4gICAgICBjdXJQYXRoICs9ICghY3VyUGF0aC5sZW5ndGggPyAnJyA6ICcuJykgKyBwaWVjZTtcblxuICAgICAgaWYgKGV4Y2x1ZGUgPT09IHRydWUpIHtcbiAgICAgICAgaWYgKGN1clBhdGggaW4gZmllbGRzKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZXhjbHVkZSA9PT0gZmFsc2UgJiYgZmllbGRzICYmICFpbmNsdWRlZCkge1xuICAgICAgICBjb25zdCBoYXNTdWJwYXRocyA9IHR5cGUuJGlzU2luZ2xlTmVzdGVkIHx8IHR5cGUuJGlzTW9uZ29vc2VEb2N1bWVudEFycmF5O1xuICAgICAgICBpZiAoKGN1clBhdGggaW4gZmllbGRzICYmICFpc05lc3RlZFByb2plY3Rpb24oZmllbGRzW2N1clBhdGhdKSkgfHwgKGogPT09IGxlbiAtIDEgJiYgaGFzU3VicGF0aHMgJiYgaGFzSW5jbHVkZWRDaGlsZHJlbiAhPSBudWxsICYmIGhhc0luY2x1ZGVkQ2hpbGRyZW5bY3VyUGF0aF0pKSB7XG4gICAgICAgICAgaW5jbHVkZWQgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGhhc0luY2x1ZGVkQ2hpbGRyZW4gIT0gbnVsbCAmJiAhaGFzSW5jbHVkZWRDaGlsZHJlbltjdXJQYXRoXSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChqID09PSBsZW4gLSAxKSB7XG4gICAgICAgIGlmIChkb2NfW3BpZWNlXSAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNCZWZvcmVTZXR0ZXJzICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHR5cGUuZGVmYXVsdFZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBpZiAoIXR5cGUuZGVmYXVsdFZhbHVlLiRydW5CZWZvcmVTZXR0ZXJzICYmIGlzQmVmb3JlU2V0dGVycykge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlLmRlZmF1bHRWYWx1ZS4kcnVuQmVmb3JlU2V0dGVycyAmJiAhaXNCZWZvcmVTZXR0ZXJzKSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoIWlzQmVmb3JlU2V0dGVycykge1xuICAgICAgICAgICAgLy8gTm9uLWZ1bmN0aW9uIGRlZmF1bHRzIHNob3VsZCBhbHdheXMgcnVuICoqYmVmb3JlKiogc2V0dGVyc1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhdGhzVG9Ta2lwICYmIHBhdGhzVG9Ta2lwW2N1clBhdGhdKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmllbGRzICYmIGV4Y2x1ZGUgIT09IG51bGwpIHtcbiAgICAgICAgICBpZiAoZXhjbHVkZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgLy8gYXBwbHkgZGVmYXVsdHMgdG8gYWxsIG5vbi1leGNsdWRlZCBmaWVsZHNcbiAgICAgICAgICAgIGlmIChwIGluIGZpZWxkcykge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgZGVmID0gdHlwZS5nZXREZWZhdWx0KGRvYywgZmFsc2UpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgIGRvYy5pbnZhbGlkYXRlKHAsIGVycik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGRlZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgZG9jX1twaWVjZV0gPSBkZWY7XG4gICAgICAgICAgICAgIGFwcGx5Q2hhbmdlVHJhY2tpbmcoZG9jLCBwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGluY2x1ZGVkKSB7XG4gICAgICAgICAgICAvLyBzZWxlY3RlZCBmaWVsZFxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgZGVmID0gdHlwZS5nZXREZWZhdWx0KGRvYywgZmFsc2UpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgIGRvYy5pbnZhbGlkYXRlKHAsIGVycik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGRlZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgZG9jX1twaWVjZV0gPSBkZWY7XG4gICAgICAgICAgICAgIGFwcGx5Q2hhbmdlVHJhY2tpbmcoZG9jLCBwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGRlZiA9IHR5cGUuZ2V0RGVmYXVsdChkb2MsIGZhbHNlKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGRvYy5pbnZhbGlkYXRlKHAsIGVycik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodHlwZW9mIGRlZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGRvY19bcGllY2VdID0gZGVmO1xuICAgICAgICAgICAgYXBwbHlDaGFuZ2VUcmFja2luZyhkb2MsIHApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9jXyA9IGRvY19bcGllY2VdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyohXG4gKiBpZ25vcmVcbiAqL1xuXG5mdW5jdGlvbiBhcHBseUNoYW5nZVRyYWNraW5nKGRvYywgZnVsbFBhdGgpIHtcbiAgZG9jLiRfXy5hY3RpdmVQYXRocy5kZWZhdWx0KGZ1bGxQYXRoKTtcbiAgaWYgKGRvYy4kaXNTdWJkb2N1bWVudCAmJiBkb2MuJGlzU2luZ2xlTmVzdGVkICYmIGRvYy4kcGFyZW50KCkgIT0gbnVsbCkge1xuICAgIGRvYy4kcGFyZW50KCkuJF9fLmFjdGl2ZVBhdGhzLmRlZmF1bHQoZG9jLiRfX3BhdGhSZWxhdGl2ZVRvUGFyZW50KGZ1bGxQYXRoKSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/document/applyDefaults.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/document/cleanModifiedSubpaths.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/document/cleanModifiedSubpaths.js ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/*!\n * ignore\n */\n\nmodule.exports = function cleanModifiedSubpaths(doc, path, options) {\n  options = options || {};\n  const skipDocArrays = options.skipDocArrays;\n\n  let deleted = 0;\n  if (!doc) {\n    return deleted;\n  }\n\n  for (const modifiedPath of Object.keys(doc.$__.activePaths.getStatePaths('modify'))) {\n    if (skipDocArrays) {\n      const schemaType = doc.$__schema.path(modifiedPath);\n      if (schemaType && schemaType.$isMongooseDocumentArray) {\n        continue;\n      }\n    }\n    if (modifiedPath.startsWith(path + '.')) {\n      doc.$__.activePaths.clearPath(modifiedPath);\n      ++deleted;\n\n      if (doc.$isSubdocument) {\n        const owner = doc.ownerDocument();\n        const fullPath = doc.$__fullPath(modifiedPath);\n        owner.$__.activePaths.clearPath(fullPath);\n      }\n    }\n  }\n  return deleted;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvZG9jdW1lbnQvY2xlYW5Nb2RpZmllZFN1YnBhdGhzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9kb2N1bWVudC9jbGVhbk1vZGlmaWVkU3VicGF0aHMuanM/YzBlNiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjbGVhbk1vZGlmaWVkU3VicGF0aHMoZG9jLCBwYXRoLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBza2lwRG9jQXJyYXlzID0gb3B0aW9ucy5za2lwRG9jQXJyYXlzO1xuXG4gIGxldCBkZWxldGVkID0gMDtcbiAgaWYgKCFkb2MpIHtcbiAgICByZXR1cm4gZGVsZXRlZDtcbiAgfVxuXG4gIGZvciAoY29uc3QgbW9kaWZpZWRQYXRoIG9mIE9iamVjdC5rZXlzKGRvYy4kX18uYWN0aXZlUGF0aHMuZ2V0U3RhdGVQYXRocygnbW9kaWZ5JykpKSB7XG4gICAgaWYgKHNraXBEb2NBcnJheXMpIHtcbiAgICAgIGNvbnN0IHNjaGVtYVR5cGUgPSBkb2MuJF9fc2NoZW1hLnBhdGgobW9kaWZpZWRQYXRoKTtcbiAgICAgIGlmIChzY2hlbWFUeXBlICYmIHNjaGVtYVR5cGUuJGlzTW9uZ29vc2VEb2N1bWVudEFycmF5KSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobW9kaWZpZWRQYXRoLnN0YXJ0c1dpdGgocGF0aCArICcuJykpIHtcbiAgICAgIGRvYy4kX18uYWN0aXZlUGF0aHMuY2xlYXJQYXRoKG1vZGlmaWVkUGF0aCk7XG4gICAgICArK2RlbGV0ZWQ7XG5cbiAgICAgIGlmIChkb2MuJGlzU3ViZG9jdW1lbnQpIHtcbiAgICAgICAgY29uc3Qgb3duZXIgPSBkb2Mub3duZXJEb2N1bWVudCgpO1xuICAgICAgICBjb25zdCBmdWxsUGF0aCA9IGRvYy4kX19mdWxsUGF0aChtb2RpZmllZFBhdGgpO1xuICAgICAgICBvd25lci4kX18uYWN0aXZlUGF0aHMuY2xlYXJQYXRoKGZ1bGxQYXRoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlbGV0ZWQ7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/document/cleanModifiedSubpaths.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/document/compile.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/document/compile.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nconst clone = __webpack_require__(/*! ../../helpers/clone */ \"(ssr)/./node_modules/mongoose/lib/helpers/clone.js\");\nconst documentSchemaSymbol = (__webpack_require__(/*! ../../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").documentSchemaSymbol);\nconst internalToObjectOptions = (__webpack_require__(/*! ../../options */ \"(ssr)/./node_modules/mongoose/lib/options.js\").internalToObjectOptions);\nconst utils = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\n\nlet Document;\nconst getSymbol = (__webpack_require__(/*! ../../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").getSymbol);\nconst scopeSymbol = (__webpack_require__(/*! ../../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").scopeSymbol);\n\nconst isPOJO = utils.isPOJO;\n\n/*!\n * exports\n */\n\nexports.compile = compile;\nexports.defineKey = defineKey;\n\nconst _isEmptyOptions = Object.freeze({\n  minimize: true,\n  virtuals: false,\n  getters: false,\n  transform: false\n});\n\nconst noDottedPathGetOptions = Object.freeze({\n  noDottedPath: true\n});\n\n/**\n * Compiles schemas.\n * @param {Object} tree\n * @param {Any} proto\n * @param {String} prefix\n * @param {Object} options\n * @api private\n */\n\nfunction compile(tree, proto, prefix, options) {\n  Document = Document || __webpack_require__(/*! ../../document */ \"(ssr)/./node_modules/mongoose/lib/document.js\");\n  const typeKey = options.typeKey;\n\n  for (const key of Object.keys(tree)) {\n    const limb = tree[key];\n\n    const hasSubprops = isPOJO(limb) &&\n      Object.keys(limb).length > 0 &&\n      (!limb[typeKey] || (typeKey === 'type' && isPOJO(limb.type) && limb.type.type));\n    const subprops = hasSubprops ? limb : null;\n\n    defineKey({ prop: key, subprops: subprops, prototype: proto, prefix: prefix, options: options });\n  }\n}\n\n/**\n * Defines the accessor named prop on the incoming prototype.\n * @param {Object} options\n * @param {String} options.prop\n * @param {Boolean} options.subprops\n * @param {Any} options.prototype\n * @param {String} [options.prefix]\n * @param {Object} options.options\n * @api private\n */\n\nfunction defineKey({ prop, subprops, prototype, prefix, options }) {\n  Document = Document || __webpack_require__(/*! ../../document */ \"(ssr)/./node_modules/mongoose/lib/document.js\");\n  const path = (prefix ? prefix + '.' : '') + prop;\n  prefix = prefix || '';\n  const useGetOptions = prefix ? Object.freeze({}) : noDottedPathGetOptions;\n\n  if (subprops) {\n    Object.defineProperty(prototype, prop, {\n      enumerable: true,\n      configurable: true,\n      get: function() {\n        const _this = this;\n        if (!this.$__.getters) {\n          this.$__.getters = {};\n        }\n\n        if (!this.$__.getters[path]) {\n          const nested = Object.create(Document.prototype, getOwnPropertyDescriptors(this));\n\n          // save scope for nested getters/setters\n          if (!prefix) {\n            nested.$__[scopeSymbol] = this;\n          }\n          nested.$__.nestedPath = path;\n\n          Object.defineProperty(nested, 'schema', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: prototype.schema\n          });\n\n          Object.defineProperty(nested, '$__schema', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: prototype.schema\n          });\n\n          Object.defineProperty(nested, documentSchemaSymbol, {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: prototype.schema\n          });\n\n          Object.defineProperty(nested, 'toObject', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: function() {\n              return clone(_this.get(path, null, {\n                virtuals: this &&\n                  this.schema &&\n                  this.schema.options &&\n                  this.schema.options.toObject &&\n                  this.schema.options.toObject.virtuals || null\n              }));\n            }\n          });\n\n          Object.defineProperty(nested, '$__get', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: function() {\n              return _this.get(path, null, {\n                virtuals: this && this.schema && this.schema.options && this.schema.options.toObject && this.schema.options.toObject.virtuals || null\n              });\n            }\n          });\n\n          Object.defineProperty(nested, 'toJSON', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: function() {\n              return _this.get(path, null, {\n                virtuals: this && this.schema && this.schema.options && this.schema.options.toJSON && this.schema.options.toJSON.virtuals || null\n              });\n            }\n          });\n\n          Object.defineProperty(nested, '$__isNested', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: true\n          });\n\n          Object.defineProperty(nested, '$isEmpty', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: function() {\n              return Object.keys(this.get(path, null, _isEmptyOptions) || {}).length === 0;\n            }\n          });\n\n          Object.defineProperty(nested, '$__parent', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: this\n          });\n\n          compile(subprops, nested, path, options);\n          this.$__.getters[path] = nested;\n        }\n\n        return this.$__.getters[path];\n      },\n      set: function(v) {\n        if (v != null && v.$__isNested) {\n          // Convert top-level to POJO, but leave subdocs hydrated so `$set`\n          // can handle them. See gh-9293.\n          v = v.$__get();\n        } else if (v instanceof Document && !v.$__isNested) {\n          v = v.$toObject(internalToObjectOptions);\n        }\n        const doc = this.$__[scopeSymbol] || this;\n        doc.$set(path, v);\n      }\n    });\n  } else {\n    Object.defineProperty(prototype, prop, {\n      enumerable: true,\n      configurable: true,\n      get: function() {\n        return this[getSymbol].call(\n          this.$__[scopeSymbol] || this,\n          path,\n          null,\n          useGetOptions\n        );\n      },\n      set: function(v) {\n        this.$set.call(this.$__[scopeSymbol] || this, path, v);\n      }\n    });\n  }\n}\n\n// gets descriptors for all properties of `object`\n// makes all properties non-enumerable to match previous behavior to #2211\nfunction getOwnPropertyDescriptors(object) {\n  const result = {};\n\n  Object.getOwnPropertyNames(object).forEach(function(key) {\n    const skip = [\n      'isNew',\n      '$__',\n      '$errors',\n      'errors',\n      '_doc',\n      '$locals',\n      '$op',\n      '__parentArray',\n      '__index',\n      '$isDocumentArrayElement'\n    ].indexOf(key) === -1;\n    if (skip) {\n      return;\n    }\n\n    result[key] = Object.getOwnPropertyDescriptor(object, key);\n    result[key].enumerable = false;\n  });\n\n  return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/document/compile.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/document/getDeepestSubdocumentForPath.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/document/getDeepestSubdocumentForPath.js ***!
  \************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Find the deepest subdocument along a given path to ensure setter functions run\n * with the correct subdocument as `this`. If no subdocuments, returns the top-level\n * document.\n *\n * @param {Document} doc\n * @param {String[]} parts\n * @param {Schema} schema\n * @returns Document\n */\n\nmodule.exports = function getDeepestSubdocumentForPath(doc, parts, schema) {\n  let curPath = parts[0];\n  let curSchema = schema;\n  let subdoc = doc;\n  for (let i = 0; i < parts.length - 1; ++i) {\n    const curSchemaType = curSchema.path(curPath);\n    if (curSchemaType && curSchemaType.schema) {\n      let newSubdoc = subdoc.get(curPath);\n      curSchema = curSchemaType.schema;\n      curPath = parts[i + 1];\n      if (Array.isArray(newSubdoc) && !isNaN(curPath)) {\n        newSubdoc = newSubdoc[curPath];\n        curPath = '';\n      }\n      if (newSubdoc == null) {\n        break;\n      }\n      subdoc = newSubdoc;\n    } else {\n      curPath += curPath.length ? '.' + parts[i + 1] : parts[i + 1];\n    }\n  }\n\n  return subdoc;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvZG9jdW1lbnQvZ2V0RGVlcGVzdFN1YmRvY3VtZW50Rm9yUGF0aC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsVUFBVTtBQUNyQixXQUFXLFFBQVE7QUFDbkI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixzQkFBc0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL2RvY3VtZW50L2dldERlZXBlc3RTdWJkb2N1bWVudEZvclBhdGguanM/MGUzYyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRmluZCB0aGUgZGVlcGVzdCBzdWJkb2N1bWVudCBhbG9uZyBhIGdpdmVuIHBhdGggdG8gZW5zdXJlIHNldHRlciBmdW5jdGlvbnMgcnVuXG4gKiB3aXRoIHRoZSBjb3JyZWN0IHN1YmRvY3VtZW50IGFzIGB0aGlzYC4gSWYgbm8gc3ViZG9jdW1lbnRzLCByZXR1cm5zIHRoZSB0b3AtbGV2ZWxcbiAqIGRvY3VtZW50LlxuICpcbiAqIEBwYXJhbSB7RG9jdW1lbnR9IGRvY1xuICogQHBhcmFtIHtTdHJpbmdbXX0gcGFydHNcbiAqIEBwYXJhbSB7U2NoZW1hfSBzY2hlbWFcbiAqIEByZXR1cm5zIERvY3VtZW50XG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXREZWVwZXN0U3ViZG9jdW1lbnRGb3JQYXRoKGRvYywgcGFydHMsIHNjaGVtYSkge1xuICBsZXQgY3VyUGF0aCA9IHBhcnRzWzBdO1xuICBsZXQgY3VyU2NoZW1hID0gc2NoZW1hO1xuICBsZXQgc3ViZG9jID0gZG9jO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aCAtIDE7ICsraSkge1xuICAgIGNvbnN0IGN1clNjaGVtYVR5cGUgPSBjdXJTY2hlbWEucGF0aChjdXJQYXRoKTtcbiAgICBpZiAoY3VyU2NoZW1hVHlwZSAmJiBjdXJTY2hlbWFUeXBlLnNjaGVtYSkge1xuICAgICAgbGV0IG5ld1N1YmRvYyA9IHN1YmRvYy5nZXQoY3VyUGF0aCk7XG4gICAgICBjdXJTY2hlbWEgPSBjdXJTY2hlbWFUeXBlLnNjaGVtYTtcbiAgICAgIGN1clBhdGggPSBwYXJ0c1tpICsgMV07XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShuZXdTdWJkb2MpICYmICFpc05hTihjdXJQYXRoKSkge1xuICAgICAgICBuZXdTdWJkb2MgPSBuZXdTdWJkb2NbY3VyUGF0aF07XG4gICAgICAgIGN1clBhdGggPSAnJztcbiAgICAgIH1cbiAgICAgIGlmIChuZXdTdWJkb2MgPT0gbnVsbCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHN1YmRvYyA9IG5ld1N1YmRvYztcbiAgICB9IGVsc2Uge1xuICAgICAgY3VyUGF0aCArPSBjdXJQYXRoLmxlbmd0aCA/ICcuJyArIHBhcnRzW2kgKyAxXSA6IHBhcnRzW2kgKyAxXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3ViZG9jO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/document/getDeepestSubdocumentForPath.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/document/getEmbeddedDiscriminatorPath.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/document/getEmbeddedDiscriminatorPath.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst get = __webpack_require__(/*! ../get */ \"(ssr)/./node_modules/mongoose/lib/helpers/get.js\");\nconst getSchemaDiscriminatorByValue = __webpack_require__(/*! ../discriminator/getSchemaDiscriminatorByValue */ \"(ssr)/./node_modules/mongoose/lib/helpers/discriminator/getSchemaDiscriminatorByValue.js\");\n\n/**\n * Like `schema.path()`, except with a document, because impossible to\n * determine path type without knowing the embedded discriminator key.\n *\n * @param {Document} doc\n * @param {String|String[]} path\n * @param {Object} [options]\n * @api private\n */\n\nmodule.exports = function getEmbeddedDiscriminatorPath(doc, path, options) {\n  options = options || {};\n  const typeOnly = options.typeOnly;\n  const parts = Array.isArray(path) ?\n    path :\n    (path.indexOf('.') === -1 ? [path] : path.split('.'));\n  let schemaType = null;\n  let type = 'adhocOrUndefined';\n\n  const schema = getSchemaDiscriminatorByValue(doc.schema, doc.get(doc.schema.options.discriminatorKey)) || doc.schema;\n\n  for (let i = 0; i < parts.length; ++i) {\n    const subpath = parts.slice(0, i + 1).join('.');\n    schemaType = schema.path(subpath);\n    if (schemaType == null) {\n      type = 'adhocOrUndefined';\n      continue;\n    }\n    if (schemaType.instance === 'Mixed') {\n      return typeOnly ? 'real' : schemaType;\n    }\n    type = schema.pathType(subpath);\n    if ((schemaType.$isSingleNested || schemaType.$isMongooseDocumentArrayElement) &&\n    schemaType.schema.discriminators != null) {\n      const discriminators = schemaType.schema.discriminators;\n      const discriminatorKey = doc.get(subpath + '.' +\n        get(schemaType, 'schema.options.discriminatorKey'));\n      if (discriminatorKey == null || discriminators[discriminatorKey] == null) {\n        continue;\n      }\n      const rest = parts.slice(i + 1).join('.');\n      return getEmbeddedDiscriminatorPath(doc.get(subpath), rest, options);\n    }\n  }\n\n  // Are we getting the whole schema or just the type, 'real', 'nested', etc.\n  return typeOnly ? type : schemaType;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvZG9jdW1lbnQvZ2V0RW1iZWRkZWREaXNjcmltaW5hdG9yUGF0aC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixZQUFZLG1CQUFPLENBQUMsZ0VBQVE7QUFDNUIsc0NBQXNDLG1CQUFPLENBQUMsZ0pBQWdEOztBQUU5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixXQUFXLGlCQUFpQjtBQUM1QixXQUFXLFFBQVE7QUFDbkI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLGtCQUFrQixrQkFBa0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9kb2N1bWVudC9nZXRFbWJlZGRlZERpc2NyaW1pbmF0b3JQYXRoLmpzP2Q4NzYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBnZXQgPSByZXF1aXJlKCcuLi9nZXQnKTtcbmNvbnN0IGdldFNjaGVtYURpc2NyaW1pbmF0b3JCeVZhbHVlID0gcmVxdWlyZSgnLi4vZGlzY3JpbWluYXRvci9nZXRTY2hlbWFEaXNjcmltaW5hdG9yQnlWYWx1ZScpO1xuXG4vKipcbiAqIExpa2UgYHNjaGVtYS5wYXRoKClgLCBleGNlcHQgd2l0aCBhIGRvY3VtZW50LCBiZWNhdXNlIGltcG9zc2libGUgdG9cbiAqIGRldGVybWluZSBwYXRoIHR5cGUgd2l0aG91dCBrbm93aW5nIHRoZSBlbWJlZGRlZCBkaXNjcmltaW5hdG9yIGtleS5cbiAqXG4gKiBAcGFyYW0ge0RvY3VtZW50fSBkb2NcbiAqIEBwYXJhbSB7U3RyaW5nfFN0cmluZ1tdfSBwYXRoXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldEVtYmVkZGVkRGlzY3JpbWluYXRvclBhdGgoZG9jLCBwYXRoLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCB0eXBlT25seSA9IG9wdGlvbnMudHlwZU9ubHk7XG4gIGNvbnN0IHBhcnRzID0gQXJyYXkuaXNBcnJheShwYXRoKSA/XG4gICAgcGF0aCA6XG4gICAgKHBhdGguaW5kZXhPZignLicpID09PSAtMSA/IFtwYXRoXSA6IHBhdGguc3BsaXQoJy4nKSk7XG4gIGxldCBzY2hlbWFUeXBlID0gbnVsbDtcbiAgbGV0IHR5cGUgPSAnYWRob2NPclVuZGVmaW5lZCc7XG5cbiAgY29uc3Qgc2NoZW1hID0gZ2V0U2NoZW1hRGlzY3JpbWluYXRvckJ5VmFsdWUoZG9jLnNjaGVtYSwgZG9jLmdldChkb2Muc2NoZW1hLm9wdGlvbnMuZGlzY3JpbWluYXRvcktleSkpIHx8IGRvYy5zY2hlbWE7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7ICsraSkge1xuICAgIGNvbnN0IHN1YnBhdGggPSBwYXJ0cy5zbGljZSgwLCBpICsgMSkuam9pbignLicpO1xuICAgIHNjaGVtYVR5cGUgPSBzY2hlbWEucGF0aChzdWJwYXRoKTtcbiAgICBpZiAoc2NoZW1hVHlwZSA9PSBudWxsKSB7XG4gICAgICB0eXBlID0gJ2FkaG9jT3JVbmRlZmluZWQnO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChzY2hlbWFUeXBlLmluc3RhbmNlID09PSAnTWl4ZWQnKSB7XG4gICAgICByZXR1cm4gdHlwZU9ubHkgPyAncmVhbCcgOiBzY2hlbWFUeXBlO1xuICAgIH1cbiAgICB0eXBlID0gc2NoZW1hLnBhdGhUeXBlKHN1YnBhdGgpO1xuICAgIGlmICgoc2NoZW1hVHlwZS4kaXNTaW5nbGVOZXN0ZWQgfHwgc2NoZW1hVHlwZS4kaXNNb25nb29zZURvY3VtZW50QXJyYXlFbGVtZW50KSAmJlxuICAgIHNjaGVtYVR5cGUuc2NoZW1hLmRpc2NyaW1pbmF0b3JzICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IGRpc2NyaW1pbmF0b3JzID0gc2NoZW1hVHlwZS5zY2hlbWEuZGlzY3JpbWluYXRvcnM7XG4gICAgICBjb25zdCBkaXNjcmltaW5hdG9yS2V5ID0gZG9jLmdldChzdWJwYXRoICsgJy4nICtcbiAgICAgICAgZ2V0KHNjaGVtYVR5cGUsICdzY2hlbWEub3B0aW9ucy5kaXNjcmltaW5hdG9yS2V5JykpO1xuICAgICAgaWYgKGRpc2NyaW1pbmF0b3JLZXkgPT0gbnVsbCB8fCBkaXNjcmltaW5hdG9yc1tkaXNjcmltaW5hdG9yS2V5XSA9PSBudWxsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVzdCA9IHBhcnRzLnNsaWNlKGkgKyAxKS5qb2luKCcuJyk7XG4gICAgICByZXR1cm4gZ2V0RW1iZWRkZWREaXNjcmltaW5hdG9yUGF0aChkb2MuZ2V0KHN1YnBhdGgpLCByZXN0LCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICAvLyBBcmUgd2UgZ2V0dGluZyB0aGUgd2hvbGUgc2NoZW1hIG9yIGp1c3QgdGhlIHR5cGUsICdyZWFsJywgJ25lc3RlZCcsIGV0Yy5cbiAgcmV0dXJuIHR5cGVPbmx5ID8gdHlwZSA6IHNjaGVtYVR5cGU7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/document/getEmbeddedDiscriminatorPath.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/document/handleSpreadDoc.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/document/handleSpreadDoc.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst utils = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\n\nconst keysToSkip = new Set(['__index', '__parentArray', '_doc']);\n\n/**\n * Using spread operator on a Mongoose document gives you a\n * POJO that has a tendency to cause infinite recursion. So\n * we use this function on `set()` to prevent that.\n */\n\nmodule.exports = function handleSpreadDoc(v, includeExtraKeys) {\n  if (utils.isPOJO(v) && v.$__ != null && v._doc != null) {\n    if (includeExtraKeys) {\n      const extraKeys = {};\n      for (const key of Object.keys(v)) {\n        if (typeof key === 'symbol') {\n          continue;\n        }\n        if (key[0] === '$') {\n          continue;\n        }\n        if (keysToSkip.has(key)) {\n          continue;\n        }\n        extraKeys[key] = v[key];\n      }\n      return { ...v._doc, ...extraKeys };\n    }\n    return v._doc;\n  }\n\n  return v;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvZG9jdW1lbnQvaGFuZGxlU3ByZWFkRG9jLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGNBQWMsbUJBQU8sQ0FBQywrREFBYTs7QUFFbkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvZG9jdW1lbnQvaGFuZGxlU3ByZWFkRG9jLmpzPzU0NDQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzJyk7XG5cbmNvbnN0IGtleXNUb1NraXAgPSBuZXcgU2V0KFsnX19pbmRleCcsICdfX3BhcmVudEFycmF5JywgJ19kb2MnXSk7XG5cbi8qKlxuICogVXNpbmcgc3ByZWFkIG9wZXJhdG9yIG9uIGEgTW9uZ29vc2UgZG9jdW1lbnQgZ2l2ZXMgeW91IGFcbiAqIFBPSk8gdGhhdCBoYXMgYSB0ZW5kZW5jeSB0byBjYXVzZSBpbmZpbml0ZSByZWN1cnNpb24uIFNvXG4gKiB3ZSB1c2UgdGhpcyBmdW5jdGlvbiBvbiBgc2V0KClgIHRvIHByZXZlbnQgdGhhdC5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhbmRsZVNwcmVhZERvYyh2LCBpbmNsdWRlRXh0cmFLZXlzKSB7XG4gIGlmICh1dGlscy5pc1BPSk8odikgJiYgdi4kX18gIT0gbnVsbCAmJiB2Ll9kb2MgIT0gbnVsbCkge1xuICAgIGlmIChpbmNsdWRlRXh0cmFLZXlzKSB7XG4gICAgICBjb25zdCBleHRyYUtleXMgPSB7fTtcbiAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHYpKSB7XG4gICAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3ltYm9sJykge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChrZXlbMF0gPT09ICckJykge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChrZXlzVG9Ta2lwLmhhcyhrZXkpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZXh0cmFLZXlzW2tleV0gPSB2W2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4geyAuLi52Ll9kb2MsIC4uLmV4dHJhS2V5cyB9O1xuICAgIH1cbiAgICByZXR1cm4gdi5fZG9jO1xuICB9XG5cbiAgcmV0dXJuIHY7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/document/handleSpreadDoc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/each.js":
/*!***************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/each.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function each(arr, cb, done) {\n  if (arr.length === 0) {\n    return done();\n  }\n\n  let remaining = arr.length;\n  let err = null;\n  for (const v of arr) {\n    cb(v, function(_err) {\n      if (err != null) {\n        return;\n      }\n      if (_err != null) {\n        err = _err;\n        return done(err);\n      }\n\n      if (--remaining <= 0) {\n        return done();\n      }\n    });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvZWFjaC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9lYWNoLmpzPzA2YWIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVhY2goYXJyLCBjYiwgZG9uZSkge1xuICBpZiAoYXJyLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBkb25lKCk7XG4gIH1cblxuICBsZXQgcmVtYWluaW5nID0gYXJyLmxlbmd0aDtcbiAgbGV0IGVyciA9IG51bGw7XG4gIGZvciAoY29uc3QgdiBvZiBhcnIpIHtcbiAgICBjYih2LCBmdW5jdGlvbihfZXJyKSB7XG4gICAgICBpZiAoZXJyICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKF9lcnIgIT0gbnVsbCkge1xuICAgICAgICBlcnIgPSBfZXJyO1xuICAgICAgICByZXR1cm4gZG9uZShlcnIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoLS1yZW1haW5pbmcgPD0gMCkge1xuICAgICAgICByZXR1cm4gZG9uZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/each.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/error/combinePathErrors.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/error/combinePathErrors.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/*!\n * ignore\n */\n\nmodule.exports = function combinePathErrors(err) {\n  const keys = Object.keys(err.errors || {});\n  const len = keys.length;\n  const msgs = [];\n  let key;\n\n  for (let i = 0; i < len; ++i) {\n    key = keys[i];\n    if (err === err.errors[key]) {\n      continue;\n    }\n    msgs.push(key + ': ' + err.errors[key].message);\n  }\n\n  return msgs.join(', ');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvZXJyb3IvY29tYmluZVBhdGhFcnJvcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0IsU0FBUztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvZXJyb3IvY29tYmluZVBhdGhFcnJvcnMuanM/OTc4MiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lUGF0aEVycm9ycyhlcnIpIHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGVyci5lcnJvcnMgfHwge30pO1xuICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgY29uc3QgbXNncyA9IFtdO1xuICBsZXQga2V5O1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIGlmIChlcnIgPT09IGVyci5lcnJvcnNba2V5XSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIG1zZ3MucHVzaChrZXkgKyAnOiAnICsgZXJyLmVycm9yc1trZXldLm1lc3NhZ2UpO1xuICB9XG5cbiAgcmV0dXJuIG1zZ3Muam9pbignLCAnKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/error/combinePathErrors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/firstKey.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/firstKey.js ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function firstKey(obj) {\n  if (obj == null) {\n    return null;\n  }\n  return Object.keys(obj)[0];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvZmlyc3RLZXkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9maXJzdEtleS5qcz9iYjM3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaXJzdEtleShvYmopIHtcbiAgaWYgKG9iaiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iailbMF07XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/firstKey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/get.js":
/*!**************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/get.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Simplified lodash.get to work around the annoying null quirk. See:\n * https://github.com/lodash/lodash/issues/3659\n * @api private\n */\n\nmodule.exports = function get(obj, path, def) {\n  let parts;\n  let isPathArray = false;\n  if (typeof path === 'string') {\n    if (path.indexOf('.') === -1) {\n      const _v = getProperty(obj, path);\n      if (_v == null) {\n        return def;\n      }\n      return _v;\n    }\n\n    parts = path.split('.');\n  } else {\n    isPathArray = true;\n    parts = path;\n\n    if (parts.length === 1) {\n      const _v = getProperty(obj, parts[0]);\n      if (_v == null) {\n        return def;\n      }\n      return _v;\n    }\n  }\n  let rest = path;\n  let cur = obj;\n  for (const part of parts) {\n    if (cur == null) {\n      return def;\n    }\n\n    // `lib/cast.js` depends on being able to get dotted paths in updates,\n    // like `{ $set: { 'a.b': 42 } }`\n    if (!isPathArray && cur[rest] != null) {\n      return cur[rest];\n    }\n\n    cur = getProperty(cur, part);\n\n    if (!isPathArray) {\n      rest = rest.substr(part.length + 1);\n    }\n  }\n\n  return cur == null ? def : cur;\n};\n\nfunction getProperty(obj, prop) {\n  if (obj == null) {\n    return obj;\n  }\n  if (obj instanceof Map) {\n    return obj.get(prop);\n  }\n  return obj[prop];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvZ2V0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLFFBQVEsYUFBYTtBQUNwQztBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL2dldC5qcz8xZjZlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW1wbGlmaWVkIGxvZGFzaC5nZXQgdG8gd29yayBhcm91bmQgdGhlIGFubm95aW5nIG51bGwgcXVpcmsuIFNlZTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9sb2Rhc2gvbG9kYXNoL2lzc3Vlcy8zNjU5XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldChvYmosIHBhdGgsIGRlZikge1xuICBsZXQgcGFydHM7XG4gIGxldCBpc1BhdGhBcnJheSA9IGZhbHNlO1xuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHBhdGguaW5kZXhPZignLicpID09PSAtMSkge1xuICAgICAgY29uc3QgX3YgPSBnZXRQcm9wZXJ0eShvYmosIHBhdGgpO1xuICAgICAgaWYgKF92ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGRlZjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfdjtcbiAgICB9XG5cbiAgICBwYXJ0cyA9IHBhdGguc3BsaXQoJy4nKTtcbiAgfSBlbHNlIHtcbiAgICBpc1BhdGhBcnJheSA9IHRydWU7XG4gICAgcGFydHMgPSBwYXRoO1xuXG4gICAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgY29uc3QgX3YgPSBnZXRQcm9wZXJ0eShvYmosIHBhcnRzWzBdKTtcbiAgICAgIGlmIChfdiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBkZWY7XG4gICAgICB9XG4gICAgICByZXR1cm4gX3Y7XG4gICAgfVxuICB9XG4gIGxldCByZXN0ID0gcGF0aDtcbiAgbGV0IGN1ciA9IG9iajtcbiAgZm9yIChjb25zdCBwYXJ0IG9mIHBhcnRzKSB7XG4gICAgaWYgKGN1ciA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZGVmO1xuICAgIH1cblxuICAgIC8vIGBsaWIvY2FzdC5qc2AgZGVwZW5kcyBvbiBiZWluZyBhYmxlIHRvIGdldCBkb3R0ZWQgcGF0aHMgaW4gdXBkYXRlcyxcbiAgICAvLyBsaWtlIGB7ICRzZXQ6IHsgJ2EuYic6IDQyIH0gfWBcbiAgICBpZiAoIWlzUGF0aEFycmF5ICYmIGN1cltyZXN0XSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gY3VyW3Jlc3RdO1xuICAgIH1cblxuICAgIGN1ciA9IGdldFByb3BlcnR5KGN1ciwgcGFydCk7XG5cbiAgICBpZiAoIWlzUGF0aEFycmF5KSB7XG4gICAgICByZXN0ID0gcmVzdC5zdWJzdHIocGFydC5sZW5ndGggKyAxKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY3VyID09IG51bGwgPyBkZWYgOiBjdXI7XG59O1xuXG5mdW5jdGlvbiBnZXRQcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgaWYgKG9iaiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuICBpZiAob2JqIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgcmV0dXJuIG9iai5nZXQocHJvcCk7XG4gIH1cbiAgcmV0dXJuIG9ialtwcm9wXTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/get.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/getConstructorName.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/getConstructorName.js ***!
  \*****************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * If `val` is an object, returns constructor name, if possible. Otherwise returns undefined.\n * @api private\n */\n\nmodule.exports = function getConstructorName(val) {\n  if (val == null) {\n    return void 0;\n  }\n  if (typeof val.constructor !== 'function') {\n    return void 0;\n  }\n  return val.constructor.name;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvZ2V0Q29uc3RydWN0b3JOYW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvZ2V0Q29uc3RydWN0b3JOYW1lLmpzPzFjNGMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIElmIGB2YWxgIGlzIGFuIG9iamVjdCwgcmV0dXJucyBjb25zdHJ1Y3RvciBuYW1lLCBpZiBwb3NzaWJsZS4gT3RoZXJ3aXNlIHJldHVybnMgdW5kZWZpbmVkLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRDb25zdHJ1Y3Rvck5hbWUodmFsKSB7XG4gIGlmICh2YWwgPT0gbnVsbCkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWwuY29uc3RydWN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIHJldHVybiB2YWwuY29uc3RydWN0b3IubmFtZTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/getConstructorName.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/getDefaultBulkwriteResult.js":
/*!************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/getDefaultBulkwriteResult.js ***!
  \************************************************************************/
/***/ ((module) => {

"use strict";
eval("\nfunction getDefaultBulkwriteResult() {\n  return {\n    result: {\n      ok: 1,\n      writeErrors: [],\n      writeConcernErrors: [],\n      insertedIds: [],\n      nInserted: 0,\n      nUpserted: 0,\n      nMatched: 0,\n      nModified: 0,\n      nRemoved: 0,\n      upserted: []\n    },\n    insertedCount: 0,\n    matchedCount: 0,\n    modifiedCount: 0,\n    deletedCount: 0,\n    upsertedCount: 0,\n    upsertedIds: {},\n    insertedIds: {},\n    n: 0\n  };\n}\n\nmodule.exports = getDefaultBulkwriteResult;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvZ2V0RGVmYXVsdEJ1bGt3cml0ZVJlc3VsdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvZ2V0RGVmYXVsdEJ1bGt3cml0ZVJlc3VsdC5qcz81YzEyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmZ1bmN0aW9uIGdldERlZmF1bHRCdWxrd3JpdGVSZXN1bHQoKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdWx0OiB7XG4gICAgICBvazogMSxcbiAgICAgIHdyaXRlRXJyb3JzOiBbXSxcbiAgICAgIHdyaXRlQ29uY2VybkVycm9yczogW10sXG4gICAgICBpbnNlcnRlZElkczogW10sXG4gICAgICBuSW5zZXJ0ZWQ6IDAsXG4gICAgICBuVXBzZXJ0ZWQ6IDAsXG4gICAgICBuTWF0Y2hlZDogMCxcbiAgICAgIG5Nb2RpZmllZDogMCxcbiAgICAgIG5SZW1vdmVkOiAwLFxuICAgICAgdXBzZXJ0ZWQ6IFtdXG4gICAgfSxcbiAgICBpbnNlcnRlZENvdW50OiAwLFxuICAgIG1hdGNoZWRDb3VudDogMCxcbiAgICBtb2RpZmllZENvdW50OiAwLFxuICAgIGRlbGV0ZWRDb3VudDogMCxcbiAgICB1cHNlcnRlZENvdW50OiAwLFxuICAgIHVwc2VydGVkSWRzOiB7fSxcbiAgICBpbnNlcnRlZElkczoge30sXG4gICAgbjogMFxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldERlZmF1bHRCdWxrd3JpdGVSZXN1bHQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/getDefaultBulkwriteResult.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/getFunctionName.js":
/*!**************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/getFunctionName.js ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nconst functionNameRE = /^function\\s*([^\\s(]+)/;\n\nmodule.exports = function(fn) {\n  return (\n    fn.name ||\n    (fn.toString().trim().match(functionNameRE) || [])[1]\n  );\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvZ2V0RnVuY3Rpb25OYW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvZ2V0RnVuY3Rpb25OYW1lLmpzP2EyZWUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBmdW5jdGlvbk5hbWVSRSA9IC9eZnVuY3Rpb25cXHMqKFteXFxzKF0rKS87XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4pIHtcbiAgcmV0dXJuIChcbiAgICBmbi5uYW1lIHx8XG4gICAgKGZuLnRvU3RyaW5nKCkudHJpbSgpLm1hdGNoKGZ1bmN0aW9uTmFtZVJFKSB8fCBbXSlbMV1cbiAgKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/getFunctionName.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/immediate.js":
/*!********************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/immediate.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";
eval("/*!\n * Centralize this so we can more easily work around issues with people\n * stubbing out `process.nextTick()` in tests using sinon:\n * https://github.com/sinonjs/lolex#automatically-incrementing-mocked-time\n * See gh-6074\n */\n\n\n\nconst nextTick = typeof process !== 'undefined' && typeof process.nextTick === 'function' ?\n  process.nextTick.bind(process) :\n  cb => setTimeout(cb, 0); // Fallback for browser build\n\nmodule.exports = function immediate(cb) {\n  return nextTick(cb);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvaW1tZWRpYXRlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYjtBQUNBO0FBQ0EsMkJBQTJCOztBQUUzQjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL2ltbWVkaWF0ZS5qcz80ZmZlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ2VudHJhbGl6ZSB0aGlzIHNvIHdlIGNhbiBtb3JlIGVhc2lseSB3b3JrIGFyb3VuZCBpc3N1ZXMgd2l0aCBwZW9wbGVcbiAqIHN0dWJiaW5nIG91dCBgcHJvY2Vzcy5uZXh0VGljaygpYCBpbiB0ZXN0cyB1c2luZyBzaW5vbjpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5vbmpzL2xvbGV4I2F1dG9tYXRpY2FsbHktaW5jcmVtZW50aW5nLW1vY2tlZC10aW1lXG4gKiBTZWUgZ2gtNjA3NFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgbmV4dFRpY2sgPSB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHByb2Nlc3MubmV4dFRpY2sgPT09ICdmdW5jdGlvbicgP1xuICBwcm9jZXNzLm5leHRUaWNrLmJpbmQocHJvY2VzcykgOlxuICBjYiA9PiBzZXRUaW1lb3V0KGNiLCAwKTsgLy8gRmFsbGJhY2sgZm9yIGJyb3dzZXIgYnVpbGRcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbW1lZGlhdGUoY2IpIHtcbiAgcmV0dXJuIG5leHRUaWNrKGNiKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/immediate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/indexes/applySchemaCollation.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/indexes/applySchemaCollation.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst isTextIndex = __webpack_require__(/*! ./isTextIndex */ \"(ssr)/./node_modules/mongoose/lib/helpers/indexes/isTextIndex.js\");\n\nmodule.exports = function applySchemaCollation(indexKeys, indexOptions, schemaOptions) {\n  if (isTextIndex(indexKeys)) {\n    return;\n  }\n\n  if (schemaOptions.hasOwnProperty('collation') && !indexOptions.hasOwnProperty('collation')) {\n    indexOptions.collation = schemaOptions.collation;\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvaW5kZXhlcy9hcHBseVNjaGVtYUNvbGxhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixvQkFBb0IsbUJBQU8sQ0FBQyx1RkFBZTs7QUFFM0M7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL2luZGV4ZXMvYXBwbHlTY2hlbWFDb2xsYXRpb24uanM/Yjc1NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGlzVGV4dEluZGV4ID0gcmVxdWlyZSgnLi9pc1RleHRJbmRleCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGFwcGx5U2NoZW1hQ29sbGF0aW9uKGluZGV4S2V5cywgaW5kZXhPcHRpb25zLCBzY2hlbWFPcHRpb25zKSB7XG4gIGlmIChpc1RleHRJbmRleChpbmRleEtleXMpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHNjaGVtYU9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2NvbGxhdGlvbicpICYmICFpbmRleE9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2NvbGxhdGlvbicpKSB7XG4gICAgaW5kZXhPcHRpb25zLmNvbGxhdGlvbiA9IHNjaGVtYU9wdGlvbnMuY29sbGF0aW9uO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/indexes/applySchemaCollation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/indexes/decorateDiscriminatorIndexOptions.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/indexes/decorateDiscriminatorIndexOptions.js ***!
  \****************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function decorateDiscriminatorIndexOptions(schema, indexOptions) {\n  // If the model is a discriminator and has an index, add a\n  // partialFilterExpression by default so the index will only apply\n  // to that discriminator.\n  const discriminatorName = schema.discriminatorMapping && schema.discriminatorMapping.value;\n  if (discriminatorName && !('sparse' in indexOptions)) {\n    const discriminatorKey = schema.options.discriminatorKey;\n    indexOptions.partialFilterExpression = indexOptions.partialFilterExpression || {};\n    indexOptions.partialFilterExpression[discriminatorKey] = discriminatorName;\n  }\n  return indexOptions;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvaW5kZXhlcy9kZWNvcmF0ZURpc2NyaW1pbmF0b3JJbmRleE9wdGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9pbmRleGVzL2RlY29yYXRlRGlzY3JpbWluYXRvckluZGV4T3B0aW9ucy5qcz8yODMwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWNvcmF0ZURpc2NyaW1pbmF0b3JJbmRleE9wdGlvbnMoc2NoZW1hLCBpbmRleE9wdGlvbnMpIHtcbiAgLy8gSWYgdGhlIG1vZGVsIGlzIGEgZGlzY3JpbWluYXRvciBhbmQgaGFzIGFuIGluZGV4LCBhZGQgYVxuICAvLyBwYXJ0aWFsRmlsdGVyRXhwcmVzc2lvbiBieSBkZWZhdWx0IHNvIHRoZSBpbmRleCB3aWxsIG9ubHkgYXBwbHlcbiAgLy8gdG8gdGhhdCBkaXNjcmltaW5hdG9yLlxuICBjb25zdCBkaXNjcmltaW5hdG9yTmFtZSA9IHNjaGVtYS5kaXNjcmltaW5hdG9yTWFwcGluZyAmJiBzY2hlbWEuZGlzY3JpbWluYXRvck1hcHBpbmcudmFsdWU7XG4gIGlmIChkaXNjcmltaW5hdG9yTmFtZSAmJiAhKCdzcGFyc2UnIGluIGluZGV4T3B0aW9ucykpIHtcbiAgICBjb25zdCBkaXNjcmltaW5hdG9yS2V5ID0gc2NoZW1hLm9wdGlvbnMuZGlzY3JpbWluYXRvcktleTtcbiAgICBpbmRleE9wdGlvbnMucGFydGlhbEZpbHRlckV4cHJlc3Npb24gPSBpbmRleE9wdGlvbnMucGFydGlhbEZpbHRlckV4cHJlc3Npb24gfHwge307XG4gICAgaW5kZXhPcHRpb25zLnBhcnRpYWxGaWx0ZXJFeHByZXNzaW9uW2Rpc2NyaW1pbmF0b3JLZXldID0gZGlzY3JpbWluYXRvck5hbWU7XG4gIH1cbiAgcmV0dXJuIGluZGV4T3B0aW9ucztcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/indexes/decorateDiscriminatorIndexOptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/indexes/getRelatedIndexes.js":
/*!************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/indexes/getRelatedIndexes.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst hasDollarKeys = __webpack_require__(/*! ../query/hasDollarKeys */ \"(ssr)/./node_modules/mongoose/lib/helpers/query/hasDollarKeys.js\");\n\nfunction getRelatedSchemaIndexes(model, schemaIndexes) {\n  return getRelatedIndexes({\n    baseModelName: model.baseModelName,\n    discriminatorMapping: model.schema.discriminatorMapping,\n    indexes: schemaIndexes,\n    indexesType: 'schema'\n  });\n}\n\nfunction getRelatedDBIndexes(model, dbIndexes) {\n  return getRelatedIndexes({\n    baseModelName: model.baseModelName,\n    discriminatorMapping: model.schema.discriminatorMapping,\n    indexes: dbIndexes,\n    indexesType: 'db'\n  });\n}\n\nmodule.exports = {\n  getRelatedSchemaIndexes,\n  getRelatedDBIndexes\n};\n\nfunction getRelatedIndexes({\n  baseModelName,\n  discriminatorMapping,\n  indexes,\n  indexesType\n}) {\n  const discriminatorKey = discriminatorMapping && discriminatorMapping.key;\n  const discriminatorValue = discriminatorMapping && discriminatorMapping.value;\n\n  if (!discriminatorKey) {\n    return indexes;\n  }\n\n  const isChildDiscriminatorModel = Boolean(baseModelName);\n  if (isChildDiscriminatorModel) {\n    return indexes.filter(index => {\n      const partialFilterExpression = getPartialFilterExpression(index, indexesType);\n      return partialFilterExpression && partialFilterExpression[discriminatorKey] === discriminatorValue;\n    });\n  }\n\n  return indexes.filter(index => {\n    const partialFilterExpression = getPartialFilterExpression(index, indexesType);\n    return !partialFilterExpression\n      || !partialFilterExpression[discriminatorKey]\n      || (hasDollarKeys(partialFilterExpression[discriminatorKey]) && !('$eq' in partialFilterExpression[discriminatorKey]));\n  });\n}\n\nfunction getPartialFilterExpression(index, indexesType) {\n  if (indexesType === 'schema') {\n    const options = index[1];\n    return options && options.partialFilterExpression;\n  }\n  return index.partialFilterExpression;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvaW5kZXhlcy9nZXRSZWxhdGVkSW5kZXhlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixzQkFBc0IsbUJBQU8sQ0FBQyxnR0FBd0I7O0FBRXREO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL2luZGV4ZXMvZ2V0UmVsYXRlZEluZGV4ZXMuanM/ZDRlNiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGhhc0RvbGxhcktleXMgPSByZXF1aXJlKCcuLi9xdWVyeS9oYXNEb2xsYXJLZXlzJyk7XG5cbmZ1bmN0aW9uIGdldFJlbGF0ZWRTY2hlbWFJbmRleGVzKG1vZGVsLCBzY2hlbWFJbmRleGVzKSB7XG4gIHJldHVybiBnZXRSZWxhdGVkSW5kZXhlcyh7XG4gICAgYmFzZU1vZGVsTmFtZTogbW9kZWwuYmFzZU1vZGVsTmFtZSxcbiAgICBkaXNjcmltaW5hdG9yTWFwcGluZzogbW9kZWwuc2NoZW1hLmRpc2NyaW1pbmF0b3JNYXBwaW5nLFxuICAgIGluZGV4ZXM6IHNjaGVtYUluZGV4ZXMsXG4gICAgaW5kZXhlc1R5cGU6ICdzY2hlbWEnXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRSZWxhdGVkREJJbmRleGVzKG1vZGVsLCBkYkluZGV4ZXMpIHtcbiAgcmV0dXJuIGdldFJlbGF0ZWRJbmRleGVzKHtcbiAgICBiYXNlTW9kZWxOYW1lOiBtb2RlbC5iYXNlTW9kZWxOYW1lLFxuICAgIGRpc2NyaW1pbmF0b3JNYXBwaW5nOiBtb2RlbC5zY2hlbWEuZGlzY3JpbWluYXRvck1hcHBpbmcsXG4gICAgaW5kZXhlczogZGJJbmRleGVzLFxuICAgIGluZGV4ZXNUeXBlOiAnZGInXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0UmVsYXRlZFNjaGVtYUluZGV4ZXMsXG4gIGdldFJlbGF0ZWREQkluZGV4ZXNcbn07XG5cbmZ1bmN0aW9uIGdldFJlbGF0ZWRJbmRleGVzKHtcbiAgYmFzZU1vZGVsTmFtZSxcbiAgZGlzY3JpbWluYXRvck1hcHBpbmcsXG4gIGluZGV4ZXMsXG4gIGluZGV4ZXNUeXBlXG59KSB7XG4gIGNvbnN0IGRpc2NyaW1pbmF0b3JLZXkgPSBkaXNjcmltaW5hdG9yTWFwcGluZyAmJiBkaXNjcmltaW5hdG9yTWFwcGluZy5rZXk7XG4gIGNvbnN0IGRpc2NyaW1pbmF0b3JWYWx1ZSA9IGRpc2NyaW1pbmF0b3JNYXBwaW5nICYmIGRpc2NyaW1pbmF0b3JNYXBwaW5nLnZhbHVlO1xuXG4gIGlmICghZGlzY3JpbWluYXRvcktleSkge1xuICAgIHJldHVybiBpbmRleGVzO1xuICB9XG5cbiAgY29uc3QgaXNDaGlsZERpc2NyaW1pbmF0b3JNb2RlbCA9IEJvb2xlYW4oYmFzZU1vZGVsTmFtZSk7XG4gIGlmIChpc0NoaWxkRGlzY3JpbWluYXRvck1vZGVsKSB7XG4gICAgcmV0dXJuIGluZGV4ZXMuZmlsdGVyKGluZGV4ID0+IHtcbiAgICAgIGNvbnN0IHBhcnRpYWxGaWx0ZXJFeHByZXNzaW9uID0gZ2V0UGFydGlhbEZpbHRlckV4cHJlc3Npb24oaW5kZXgsIGluZGV4ZXNUeXBlKTtcbiAgICAgIHJldHVybiBwYXJ0aWFsRmlsdGVyRXhwcmVzc2lvbiAmJiBwYXJ0aWFsRmlsdGVyRXhwcmVzc2lvbltkaXNjcmltaW5hdG9yS2V5XSA9PT0gZGlzY3JpbWluYXRvclZhbHVlO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGluZGV4ZXMuZmlsdGVyKGluZGV4ID0+IHtcbiAgICBjb25zdCBwYXJ0aWFsRmlsdGVyRXhwcmVzc2lvbiA9IGdldFBhcnRpYWxGaWx0ZXJFeHByZXNzaW9uKGluZGV4LCBpbmRleGVzVHlwZSk7XG4gICAgcmV0dXJuICFwYXJ0aWFsRmlsdGVyRXhwcmVzc2lvblxuICAgICAgfHwgIXBhcnRpYWxGaWx0ZXJFeHByZXNzaW9uW2Rpc2NyaW1pbmF0b3JLZXldXG4gICAgICB8fCAoaGFzRG9sbGFyS2V5cyhwYXJ0aWFsRmlsdGVyRXhwcmVzc2lvbltkaXNjcmltaW5hdG9yS2V5XSkgJiYgISgnJGVxJyBpbiBwYXJ0aWFsRmlsdGVyRXhwcmVzc2lvbltkaXNjcmltaW5hdG9yS2V5XSkpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0UGFydGlhbEZpbHRlckV4cHJlc3Npb24oaW5kZXgsIGluZGV4ZXNUeXBlKSB7XG4gIGlmIChpbmRleGVzVHlwZSA9PT0gJ3NjaGVtYScpIHtcbiAgICBjb25zdCBvcHRpb25zID0gaW5kZXhbMV07XG4gICAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5wYXJ0aWFsRmlsdGVyRXhwcmVzc2lvbjtcbiAgfVxuICByZXR1cm4gaW5kZXgucGFydGlhbEZpbHRlckV4cHJlc3Npb247XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/indexes/getRelatedIndexes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/indexes/isDefaultIdIndex.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/indexes/isDefaultIdIndex.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst get = __webpack_require__(/*! ../get */ \"(ssr)/./node_modules/mongoose/lib/helpers/get.js\");\n\nmodule.exports = function isDefaultIdIndex(index) {\n  if (Array.isArray(index)) {\n    // Mongoose syntax\n    const keys = Object.keys(index[0]);\n    return keys.length === 1 && keys[0] === '_id' && index[0]._id !== 'hashed';\n  }\n\n  if (typeof index !== 'object') {\n    return false;\n  }\n\n  const key = get(index, 'key', {});\n  return Object.keys(key).length === 1 && key.hasOwnProperty('_id');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvaW5kZXhlcy9pc0RlZmF1bHRJZEluZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQyxnRUFBUTs7QUFFNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxrQ0FBa0M7QUFDbEM7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvaW5kZXhlcy9pc0RlZmF1bHRJZEluZGV4LmpzPzc4YmEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBnZXQgPSByZXF1aXJlKCcuLi9nZXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0RlZmF1bHRJZEluZGV4KGluZGV4KSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGluZGV4KSkge1xuICAgIC8vIE1vbmdvb3NlIHN5bnRheFxuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhpbmRleFswXSk7XG4gICAgcmV0dXJuIGtleXMubGVuZ3RoID09PSAxICYmIGtleXNbMF0gPT09ICdfaWQnICYmIGluZGV4WzBdLl9pZCAhPT0gJ2hhc2hlZCc7XG4gIH1cblxuICBpZiAodHlwZW9mIGluZGV4ICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IGtleSA9IGdldChpbmRleCwgJ2tleScsIHt9KTtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGtleSkubGVuZ3RoID09PSAxICYmIGtleS5oYXNPd25Qcm9wZXJ0eSgnX2lkJyk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/indexes/isDefaultIdIndex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/indexes/isIndexEqual.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/indexes/isIndexEqual.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst get = __webpack_require__(/*! ../get */ \"(ssr)/./node_modules/mongoose/lib/helpers/get.js\");\nconst utils = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\n/**\n * Given a Mongoose index definition (key + options objects) and a MongoDB server\n * index definition, determine if the two indexes are equal.\n *\n * @param {Object} schemaIndexKeysObject the Mongoose index spec\n * @param {Object} options the Mongoose index definition's options\n * @param {Object} dbIndex the index in MongoDB as returned by `listIndexes()`\n * @api private\n */\n\nmodule.exports = function isIndexEqual(schemaIndexKeysObject, options, dbIndex) {\n  // Special case: text indexes have a special format in the db. For example,\n  // `{ name: 'text' }` becomes:\n  // {\n  //   v: 2,\n  //   key: { _fts: 'text', _ftsx: 1 },\n  //   name: 'name_text',\n  //   ns: 'test.tests',\n  //   background: true,\n  //   weights: { name: 1 },\n  //   default_language: 'english',\n  //   language_override: 'language',\n  //   textIndexVersion: 3\n  // }\n  if (dbIndex.textIndexVersion != null) {\n    delete dbIndex.key._fts;\n    delete dbIndex.key._ftsx;\n    const weights = { ...dbIndex.weights, ...dbIndex.key };\n    if (Object.keys(weights).length !== Object.keys(schemaIndexKeysObject).length) {\n      return false;\n    }\n    for (const prop of Object.keys(weights)) {\n      if (!(prop in schemaIndexKeysObject)) {\n        return false;\n      }\n      const weight = weights[prop];\n      if (weight !== get(options, 'weights.' + prop) && !(weight === 1 && get(options, 'weights.' + prop) == null)) {\n        return false;\n      }\n    }\n\n    if (options['default_language'] !== dbIndex['default_language']) {\n      return dbIndex['default_language'] === 'english' && options['default_language'] == null;\n    }\n\n    return true;\n  }\n\n  const optionKeys = [\n    'unique',\n    'partialFilterExpression',\n    'sparse',\n    'expireAfterSeconds',\n    'collation'\n  ];\n  for (const key of optionKeys) {\n    if (!(key in options) && !(key in dbIndex)) {\n      continue;\n    }\n    if (key === 'collation') {\n      if (options[key] == null || dbIndex[key] == null) {\n        return options[key] == null && dbIndex[key] == null;\n      }\n      const definedKeys = Object.keys(options.collation);\n      const schemaCollation = options.collation;\n      const dbCollation = dbIndex.collation;\n      for (const opt of definedKeys) {\n        if (get(schemaCollation, opt) !== get(dbCollation, opt)) {\n          return false;\n        }\n      }\n    } else if (!utils.deepEqual(options[key], dbIndex[key])) {\n      return false;\n    }\n  }\n\n  const schemaIndexKeys = Object.keys(schemaIndexKeysObject);\n  const dbIndexKeys = Object.keys(dbIndex.key);\n  if (schemaIndexKeys.length !== dbIndexKeys.length) {\n    return false;\n  }\n  for (let i = 0; i < schemaIndexKeys.length; ++i) {\n    if (schemaIndexKeys[i] !== dbIndexKeys[i]) {\n      return false;\n    }\n    if (!utils.deepEqual(schemaIndexKeysObject[schemaIndexKeys[i]], dbIndex.key[dbIndexKeys[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvaW5kZXhlcy9pc0luZGV4RXF1YWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLGdFQUFRO0FBQzVCLGNBQWMsbUJBQU8sQ0FBQywrREFBYTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVEsY0FBYztBQUN0QjtBQUNBO0FBQ0EsY0FBYyx3QkFBd0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFNBQVM7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsNEJBQTRCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL2luZGV4ZXMvaXNJbmRleEVxdWFsLmpzPzEzMGMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBnZXQgPSByZXF1aXJlKCcuLi9nZXQnKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMnKTtcbi8qKlxuICogR2l2ZW4gYSBNb25nb29zZSBpbmRleCBkZWZpbml0aW9uIChrZXkgKyBvcHRpb25zIG9iamVjdHMpIGFuZCBhIE1vbmdvREIgc2VydmVyXG4gKiBpbmRleCBkZWZpbml0aW9uLCBkZXRlcm1pbmUgaWYgdGhlIHR3byBpbmRleGVzIGFyZSBlcXVhbC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc2NoZW1hSW5kZXhLZXlzT2JqZWN0IHRoZSBNb25nb29zZSBpbmRleCBzcGVjXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyB0aGUgTW9uZ29vc2UgaW5kZXggZGVmaW5pdGlvbidzIG9wdGlvbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYkluZGV4IHRoZSBpbmRleCBpbiBNb25nb0RCIGFzIHJldHVybmVkIGJ5IGBsaXN0SW5kZXhlcygpYFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0luZGV4RXF1YWwoc2NoZW1hSW5kZXhLZXlzT2JqZWN0LCBvcHRpb25zLCBkYkluZGV4KSB7XG4gIC8vIFNwZWNpYWwgY2FzZTogdGV4dCBpbmRleGVzIGhhdmUgYSBzcGVjaWFsIGZvcm1hdCBpbiB0aGUgZGIuIEZvciBleGFtcGxlLFxuICAvLyBgeyBuYW1lOiAndGV4dCcgfWAgYmVjb21lczpcbiAgLy8ge1xuICAvLyAgIHY6IDIsXG4gIC8vICAga2V5OiB7IF9mdHM6ICd0ZXh0JywgX2Z0c3g6IDEgfSxcbiAgLy8gICBuYW1lOiAnbmFtZV90ZXh0JyxcbiAgLy8gICBuczogJ3Rlc3QudGVzdHMnLFxuICAvLyAgIGJhY2tncm91bmQ6IHRydWUsXG4gIC8vICAgd2VpZ2h0czogeyBuYW1lOiAxIH0sXG4gIC8vICAgZGVmYXVsdF9sYW5ndWFnZTogJ2VuZ2xpc2gnLFxuICAvLyAgIGxhbmd1YWdlX292ZXJyaWRlOiAnbGFuZ3VhZ2UnLFxuICAvLyAgIHRleHRJbmRleFZlcnNpb246IDNcbiAgLy8gfVxuICBpZiAoZGJJbmRleC50ZXh0SW5kZXhWZXJzaW9uICE9IG51bGwpIHtcbiAgICBkZWxldGUgZGJJbmRleC5rZXkuX2Z0cztcbiAgICBkZWxldGUgZGJJbmRleC5rZXkuX2Z0c3g7XG4gICAgY29uc3Qgd2VpZ2h0cyA9IHsgLi4uZGJJbmRleC53ZWlnaHRzLCAuLi5kYkluZGV4LmtleSB9O1xuICAgIGlmIChPYmplY3Qua2V5cyh3ZWlnaHRzKS5sZW5ndGggIT09IE9iamVjdC5rZXlzKHNjaGVtYUluZGV4S2V5c09iamVjdCkubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAoY29uc3QgcHJvcCBvZiBPYmplY3Qua2V5cyh3ZWlnaHRzKSkge1xuICAgICAgaWYgKCEocHJvcCBpbiBzY2hlbWFJbmRleEtleXNPYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHdlaWdodCA9IHdlaWdodHNbcHJvcF07XG4gICAgICBpZiAod2VpZ2h0ICE9PSBnZXQob3B0aW9ucywgJ3dlaWdodHMuJyArIHByb3ApICYmICEod2VpZ2h0ID09PSAxICYmIGdldChvcHRpb25zLCAnd2VpZ2h0cy4nICsgcHJvcCkgPT0gbnVsbCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zWydkZWZhdWx0X2xhbmd1YWdlJ10gIT09IGRiSW5kZXhbJ2RlZmF1bHRfbGFuZ3VhZ2UnXSkge1xuICAgICAgcmV0dXJuIGRiSW5kZXhbJ2RlZmF1bHRfbGFuZ3VhZ2UnXSA9PT0gJ2VuZ2xpc2gnICYmIG9wdGlvbnNbJ2RlZmF1bHRfbGFuZ3VhZ2UnXSA9PSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgY29uc3Qgb3B0aW9uS2V5cyA9IFtcbiAgICAndW5pcXVlJyxcbiAgICAncGFydGlhbEZpbHRlckV4cHJlc3Npb24nLFxuICAgICdzcGFyc2UnLFxuICAgICdleHBpcmVBZnRlclNlY29uZHMnLFxuICAgICdjb2xsYXRpb24nXG4gIF07XG4gIGZvciAoY29uc3Qga2V5IG9mIG9wdGlvbktleXMpIHtcbiAgICBpZiAoIShrZXkgaW4gb3B0aW9ucykgJiYgIShrZXkgaW4gZGJJbmRleCkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoa2V5ID09PSAnY29sbGF0aW9uJykge1xuICAgICAgaWYgKG9wdGlvbnNba2V5XSA9PSBudWxsIHx8IGRiSW5kZXhba2V5XSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zW2tleV0gPT0gbnVsbCAmJiBkYkluZGV4W2tleV0gPT0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGRlZmluZWRLZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucy5jb2xsYXRpb24pO1xuICAgICAgY29uc3Qgc2NoZW1hQ29sbGF0aW9uID0gb3B0aW9ucy5jb2xsYXRpb247XG4gICAgICBjb25zdCBkYkNvbGxhdGlvbiA9IGRiSW5kZXguY29sbGF0aW9uO1xuICAgICAgZm9yIChjb25zdCBvcHQgb2YgZGVmaW5lZEtleXMpIHtcbiAgICAgICAgaWYgKGdldChzY2hlbWFDb2xsYXRpb24sIG9wdCkgIT09IGdldChkYkNvbGxhdGlvbiwgb3B0KSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmRlZXBFcXVhbChvcHRpb25zW2tleV0sIGRiSW5kZXhba2V5XSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBzY2hlbWFJbmRleEtleXMgPSBPYmplY3Qua2V5cyhzY2hlbWFJbmRleEtleXNPYmplY3QpO1xuICBjb25zdCBkYkluZGV4S2V5cyA9IE9iamVjdC5rZXlzKGRiSW5kZXgua2V5KTtcbiAgaWYgKHNjaGVtYUluZGV4S2V5cy5sZW5ndGggIT09IGRiSW5kZXhLZXlzLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNjaGVtYUluZGV4S2V5cy5sZW5ndGg7ICsraSkge1xuICAgIGlmIChzY2hlbWFJbmRleEtleXNbaV0gIT09IGRiSW5kZXhLZXlzW2ldKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghdXRpbHMuZGVlcEVxdWFsKHNjaGVtYUluZGV4S2V5c09iamVjdFtzY2hlbWFJbmRleEtleXNbaV1dLCBkYkluZGV4LmtleVtkYkluZGV4S2V5c1tpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/indexes/isIndexEqual.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/indexes/isTextIndex.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/indexes/isTextIndex.js ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Returns `true` if the given index options have a `text` option.\n */\n\nmodule.exports = function isTextIndex(indexKeys) {\n  let isTextIndex = false;\n  for (const key of Object.keys(indexKeys)) {\n    if (indexKeys[key] === 'text') {\n      isTextIndex = true;\n    }\n  }\n\n  return isTextIndex;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvaW5kZXhlcy9pc1RleHRJbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvaW5kZXhlcy9pc1RleHRJbmRleC5qcz8xMmQxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gaW5kZXggb3B0aW9ucyBoYXZlIGEgYHRleHRgIG9wdGlvbi5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzVGV4dEluZGV4KGluZGV4S2V5cykge1xuICBsZXQgaXNUZXh0SW5kZXggPSBmYWxzZTtcbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoaW5kZXhLZXlzKSkge1xuICAgIGlmIChpbmRleEtleXNba2V5XSA9PT0gJ3RleHQnKSB7XG4gICAgICBpc1RleHRJbmRleCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGlzVGV4dEluZGV4O1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/indexes/isTextIndex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/isAsyncFunction.js":
/*!**************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/isAsyncFunction.js ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function isAsyncFunction(v) {\n  return (\n    typeof v === 'function' &&\n    v.constructor &&\n    v.constructor.name === 'AsyncFunction'\n  );\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvaXNBc3luY0Z1bmN0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9pc0FzeW5jRnVuY3Rpb24uanM/ZDRmZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBc3luY0Z1bmN0aW9uKHYpIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgdiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHYuY29uc3RydWN0b3IgJiZcbiAgICB2LmNvbnN0cnVjdG9yLm5hbWUgPT09ICdBc3luY0Z1bmN0aW9uJ1xuICApO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/isAsyncFunction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/isBsonType.js":
/*!*********************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/isBsonType.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Get the bson type, if it exists\n * @api private\n */\n\nfunction isBsonType(obj, typename) {\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    obj._bsontype === typename\n  );\n}\n\nmodule.exports = isBsonType;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvaXNCc29uVHlwZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvaXNCc29uVHlwZS5qcz9jZDlkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBHZXQgdGhlIGJzb24gdHlwZSwgaWYgaXQgZXhpc3RzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBpc0Jzb25UeXBlKG9iaiwgdHlwZW5hbWUpIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJlxuICAgIG9iaiAhPT0gbnVsbCAmJlxuICAgIG9iai5fYnNvbnR5cGUgPT09IHR5cGVuYW1lXG4gICk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNCc29uVHlwZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/isBsonType.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/isMongooseObject.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/isMongooseObject.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst isMongooseArray = (__webpack_require__(/*! ../types/array/isMongooseArray */ \"(ssr)/./node_modules/mongoose/lib/types/array/isMongooseArray.js\").isMongooseArray);\n/**\n * Returns if `v` is a mongoose object that has a `toObject()` method we can use.\n *\n * This is for compatibility with libs like Date.js which do foolish things to Natives.\n *\n * @param {Any} v\n * @api private\n */\n\nmodule.exports = function(v) {\n  return (\n    v != null && (\n      isMongooseArray(v) || // Array or Document Array\n      v.$__ != null || // Document\n      v.isMongooseBuffer || // Buffer\n      v.$isMongooseMap // Map\n    )\n  );\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvaXNNb25nb29zZU9iamVjdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYix3QkFBd0IsK0lBQXlEO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvaXNNb25nb29zZU9iamVjdC5qcz9lOWEzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgaXNNb25nb29zZUFycmF5ID0gcmVxdWlyZSgnLi4vdHlwZXMvYXJyYXkvaXNNb25nb29zZUFycmF5JykuaXNNb25nb29zZUFycmF5O1xuLyoqXG4gKiBSZXR1cm5zIGlmIGB2YCBpcyBhIG1vbmdvb3NlIG9iamVjdCB0aGF0IGhhcyBhIGB0b09iamVjdCgpYCBtZXRob2Qgd2UgY2FuIHVzZS5cbiAqXG4gKiBUaGlzIGlzIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbGlicyBsaWtlIERhdGUuanMgd2hpY2ggZG8gZm9vbGlzaCB0aGluZ3MgdG8gTmF0aXZlcy5cbiAqXG4gKiBAcGFyYW0ge0FueX0gdlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2KSB7XG4gIHJldHVybiAoXG4gICAgdiAhPSBudWxsICYmIChcbiAgICAgIGlzTW9uZ29vc2VBcnJheSh2KSB8fCAvLyBBcnJheSBvciBEb2N1bWVudCBBcnJheVxuICAgICAgdi4kX18gIT0gbnVsbCB8fCAvLyBEb2N1bWVudFxuICAgICAgdi5pc01vbmdvb3NlQnVmZmVyIHx8IC8vIEJ1ZmZlclxuICAgICAgdi4kaXNNb25nb29zZU1hcCAvLyBNYXBcbiAgICApXG4gICk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/isMongooseObject.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/isObject.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/isObject.js ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Determines if `arg` is an object.\n *\n * @param {Object|Array|String|Function|RegExp|any} arg\n * @api private\n * @return {Boolean}\n */\n\nmodule.exports = function(arg) {\n  return (\n    Buffer.isBuffer(arg) ||\n    Object.prototype.toString.call(arg) === '[object Object]'\n  );\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvaXNPYmplY3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0EsV0FBVyx5Q0FBeUM7QUFDcEQ7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9pc09iamVjdC5qcz84NjgzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGBhcmdgIGlzIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheXxTdHJpbmd8RnVuY3Rpb258UmVnRXhwfGFueX0gYXJnXG4gKiBAYXBpIHByaXZhdGVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIChcbiAgICBCdWZmZXIuaXNCdWZmZXIoYXJnKSB8fFxuICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmcpID09PSAnW29iamVjdCBPYmplY3RdJ1xuICApO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/isObject.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/isPOJO.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/isPOJO.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function isPOJO(arg) {\n  if (arg == null || typeof arg !== 'object') {\n    return false;\n  }\n  const proto = Object.getPrototypeOf(arg);\n  // Prototype may be null if you used `Object.create(null)`\n  // Checking `proto`'s constructor is safe because `getPrototypeOf()`\n  // explicitly crosses the boundary from object data to object metadata\n  return !proto || proto.constructor.name === 'Object';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvaXNQT0pPLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9pc1BPSk8uanM/ODk3YyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNQT0pPKGFyZykge1xuICBpZiAoYXJnID09IG51bGwgfHwgdHlwZW9mIGFyZyAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYXJnKTtcbiAgLy8gUHJvdG90eXBlIG1heSBiZSBudWxsIGlmIHlvdSB1c2VkIGBPYmplY3QuY3JlYXRlKG51bGwpYFxuICAvLyBDaGVja2luZyBgcHJvdG9gJ3MgY29uc3RydWN0b3IgaXMgc2FmZSBiZWNhdXNlIGBnZXRQcm90b3R5cGVPZigpYFxuICAvLyBleHBsaWNpdGx5IGNyb3NzZXMgdGhlIGJvdW5kYXJ5IGZyb20gb2JqZWN0IGRhdGEgdG8gb2JqZWN0IG1ldGFkYXRhXG4gIHJldHVybiAhcHJvdG8gfHwgcHJvdG8uY29uc3RydWN0b3IubmFtZSA9PT0gJ09iamVjdCc7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/isPOJO.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/isPromise.js":
/*!********************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/isPromise.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";
eval("\nfunction isPromise(val) {\n  return !!val && (typeof val === 'object' || typeof val === 'function') && typeof val.then === 'function';\n}\n\nmodule.exports = isPromise;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvaXNQcm9taXNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9pc1Byb21pc2UuanM/MGVkMyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5mdW5jdGlvbiBpc1Byb21pc2UodmFsKSB7XG4gIHJldHVybiAhIXZhbCAmJiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykgJiYgdHlwZW9mIHZhbC50aGVuID09PSAnZnVuY3Rpb24nO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUHJvbWlzZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/isPromise.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/isSimpleValidator.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/isSimpleValidator.js ***!
  \****************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Determines if `arg` is a flat object.\n *\n * @param {Object|Array|String|Function|RegExp|any} arg\n * @api private\n * @return {Boolean}\n */\n\nmodule.exports = function isSimpleValidator(obj) {\n  const keys = Object.keys(obj);\n  let result = true;\n  for (let i = 0, len = keys.length; i < len; ++i) {\n    if (typeof obj[keys[i]] === 'object' && obj[keys[i]] !== null) {\n      result = false;\n      break;\n    }\n  }\n\n  return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvaXNTaW1wbGVWYWxpZGF0b3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0EsV0FBVyx5Q0FBeUM7QUFDcEQ7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLFNBQVM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9pc1NpbXBsZVZhbGlkYXRvci5qcz8xYzkyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGBhcmdgIGlzIGEgZmxhdCBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl8U3RyaW5nfEZ1bmN0aW9ufFJlZ0V4cHxhbnl9IGFyZ1xuICogQGFwaSBwcml2YXRlXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNTaW1wbGVWYWxpZGF0b3Iob2JqKSB7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBsZXQgcmVzdWx0ID0gdHJ1ZTtcbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGtleXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodHlwZW9mIG9ialtrZXlzW2ldXSA9PT0gJ29iamVjdCcgJiYgb2JqW2tleXNbaV1dICE9PSBudWxsKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/isSimpleValidator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/minimize.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/minimize.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst { isPOJO } = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\n\nmodule.exports = minimize;\n\n/**\n * Minimizes an object, removing undefined values and empty objects\n *\n * @param {Object} object to minimize\n * @return {Object|undefined}\n * @api private\n */\n\nfunction minimize(obj) {\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let hasKeys;\n  let key;\n  let val;\n\n  while (i--) {\n    key = keys[i];\n    val = obj[key];\n\n    if (isPOJO(val)) {\n      obj[key] = minimize(val);\n    }\n\n    if (undefined === obj[key]) {\n      delete obj[key];\n      continue;\n    }\n\n    hasKeys = true;\n  }\n\n  return hasKeys\n    ? obj\n    : undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvbWluaW1pemUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsUUFBUSxTQUFTLEVBQUUsbUJBQU8sQ0FBQyw0REFBVTs7QUFFckM7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL21pbmltaXplLmpzPzU3M2QiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB7IGlzUE9KTyB9ID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBtaW5pbWl6ZTtcblxuLyoqXG4gKiBNaW5pbWl6ZXMgYW4gb2JqZWN0LCByZW1vdmluZyB1bmRlZmluZWQgdmFsdWVzIGFuZCBlbXB0eSBvYmplY3RzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCB0byBtaW5pbWl6ZVxuICogQHJldHVybiB7T2JqZWN0fHVuZGVmaW5lZH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIG1pbmltaXplKG9iaikge1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgbGV0IGhhc0tleXM7XG4gIGxldCBrZXk7XG4gIGxldCB2YWw7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIGtleSA9IGtleXNbaV07XG4gICAgdmFsID0gb2JqW2tleV07XG5cbiAgICBpZiAoaXNQT0pPKHZhbCkpIHtcbiAgICAgIG9ialtrZXldID0gbWluaW1pemUodmFsKTtcbiAgICB9XG5cbiAgICBpZiAodW5kZWZpbmVkID09PSBvYmpba2V5XSkge1xuICAgICAgZGVsZXRlIG9ialtrZXldO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaGFzS2V5cyA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gaGFzS2V5c1xuICAgID8gb2JqXG4gICAgOiB1bmRlZmluZWQ7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/minimize.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/model/applyDefaultsToPOJO.js":
/*!************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/model/applyDefaultsToPOJO.js ***!
  \************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function applyDefaultsToPOJO(doc, schema) {\n  const paths = Object.keys(schema.paths);\n  const plen = paths.length;\n\n  for (let i = 0; i < plen; ++i) {\n    let curPath = '';\n    const p = paths[i];\n\n    const type = schema.paths[p];\n    const path = type.splitPath();\n    const len = path.length;\n    let doc_ = doc;\n    for (let j = 0; j < len; ++j) {\n      if (doc_ == null) {\n        break;\n      }\n\n      const piece = path[j];\n      curPath += (!curPath.length ? '' : '.') + piece;\n\n      if (j === len - 1) {\n        if (typeof doc_[piece] !== 'undefined') {\n          if (type.$isSingleNested) {\n            applyDefaultsToPOJO(doc_[piece], type.caster.schema);\n          } else if (type.$isMongooseDocumentArray && Array.isArray(doc_[piece])) {\n            doc_[piece].forEach(el => applyDefaultsToPOJO(el, type.schema));\n          }\n\n          break;\n        }\n\n        const def = type.getDefault(doc, false, { skipCast: true });\n        if (typeof def !== 'undefined') {\n          doc_[piece] = def;\n\n          if (type.$isSingleNested) {\n            applyDefaultsToPOJO(def, type.caster.schema);\n          } else if (type.$isMongooseDocumentArray && Array.isArray(def)) {\n            def.forEach(el => applyDefaultsToPOJO(el, type.schema));\n          }\n        }\n      } else {\n        if (doc_[piece] == null) {\n          doc_[piece] = {};\n        }\n        doc_ = doc_[piece];\n      }\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvbW9kZWwvYXBwbHlEZWZhdWx0c1RvUE9KTy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCLFVBQVU7QUFDNUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxrREFBa0QsZ0JBQWdCO0FBQ2xFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvbW9kZWwvYXBwbHlEZWZhdWx0c1RvUE9KTy5qcz9jMTk1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBhcHBseURlZmF1bHRzVG9QT0pPKGRvYywgc2NoZW1hKSB7XG4gIGNvbnN0IHBhdGhzID0gT2JqZWN0LmtleXMoc2NoZW1hLnBhdGhzKTtcbiAgY29uc3QgcGxlbiA9IHBhdGhzLmxlbmd0aDtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHBsZW47ICsraSkge1xuICAgIGxldCBjdXJQYXRoID0gJyc7XG4gICAgY29uc3QgcCA9IHBhdGhzW2ldO1xuXG4gICAgY29uc3QgdHlwZSA9IHNjaGVtYS5wYXRoc1twXTtcbiAgICBjb25zdCBwYXRoID0gdHlwZS5zcGxpdFBhdGgoKTtcbiAgICBjb25zdCBsZW4gPSBwYXRoLmxlbmd0aDtcbiAgICBsZXQgZG9jXyA9IGRvYztcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGxlbjsgKytqKSB7XG4gICAgICBpZiAoZG9jXyA9PSBudWxsKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwaWVjZSA9IHBhdGhbal07XG4gICAgICBjdXJQYXRoICs9ICghY3VyUGF0aC5sZW5ndGggPyAnJyA6ICcuJykgKyBwaWVjZTtcblxuICAgICAgaWYgKGogPT09IGxlbiAtIDEpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkb2NfW3BpZWNlXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBpZiAodHlwZS4kaXNTaW5nbGVOZXN0ZWQpIHtcbiAgICAgICAgICAgIGFwcGx5RGVmYXVsdHNUb1BPSk8oZG9jX1twaWVjZV0sIHR5cGUuY2FzdGVyLnNjaGVtYSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0eXBlLiRpc01vbmdvb3NlRG9jdW1lbnRBcnJheSAmJiBBcnJheS5pc0FycmF5KGRvY19bcGllY2VdKSkge1xuICAgICAgICAgICAgZG9jX1twaWVjZV0uZm9yRWFjaChlbCA9PiBhcHBseURlZmF1bHRzVG9QT0pPKGVsLCB0eXBlLnNjaGVtYSkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZGVmID0gdHlwZS5nZXREZWZhdWx0KGRvYywgZmFsc2UsIHsgc2tpcENhc3Q6IHRydWUgfSk7XG4gICAgICAgIGlmICh0eXBlb2YgZGVmICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGRvY19bcGllY2VdID0gZGVmO1xuXG4gICAgICAgICAgaWYgKHR5cGUuJGlzU2luZ2xlTmVzdGVkKSB7XG4gICAgICAgICAgICBhcHBseURlZmF1bHRzVG9QT0pPKGRlZiwgdHlwZS5jYXN0ZXIuc2NoZW1hKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUuJGlzTW9uZ29vc2VEb2N1bWVudEFycmF5ICYmIEFycmF5LmlzQXJyYXkoZGVmKSkge1xuICAgICAgICAgICAgZGVmLmZvckVhY2goZWwgPT4gYXBwbHlEZWZhdWx0c1RvUE9KTyhlbCwgdHlwZS5zY2hlbWEpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChkb2NfW3BpZWNlXSA9PSBudWxsKSB7XG4gICAgICAgICAgZG9jX1twaWVjZV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBkb2NfID0gZG9jX1twaWVjZV07XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/model/applyDefaultsToPOJO.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/model/applyHooks.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/model/applyHooks.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst symbols = __webpack_require__(/*! ../../schema/symbols */ \"(ssr)/./node_modules/mongoose/lib/schema/symbols.js\");\nconst promiseOrCallback = __webpack_require__(/*! ../promiseOrCallback */ \"(ssr)/./node_modules/mongoose/lib/helpers/promiseOrCallback.js\");\n\n/*!\n * ignore\n */\n\nmodule.exports = applyHooks;\n\n/*!\n * ignore\n */\n\napplyHooks.middlewareFunctions = [\n  'deleteOne',\n  'save',\n  'validate',\n  'remove',\n  'updateOne',\n  'init'\n];\n\n/*!\n * ignore\n */\n\nconst alreadyHookedFunctions = new Set(applyHooks.middlewareFunctions.flatMap(fn => ([fn, `$__${fn}`])));\n\n/**\n * Register hooks for this model\n *\n * @param {Model} model\n * @param {Schema} schema\n * @param {Object} options\n * @api private\n */\n\nfunction applyHooks(model, schema, options) {\n  options = options || {};\n\n  const kareemOptions = {\n    useErrorHandlers: true,\n    numCallbackParams: 1,\n    nullResultByDefault: true,\n    contextParameter: true\n  };\n  const objToDecorate = options.decorateDoc ? model : model.prototype;\n\n  model.$appliedHooks = true;\n  for (const key of Object.keys(schema.paths)) {\n    const type = schema.paths[key];\n    let childModel = null;\n    if (type.$isSingleNested) {\n      childModel = type.caster;\n    } else if (type.$isMongooseDocumentArray) {\n      childModel = type.Constructor;\n    } else {\n      continue;\n    }\n\n    if (childModel.$appliedHooks) {\n      continue;\n    }\n\n    applyHooks(childModel, type.schema, { ...options, isChildSchema: true });\n    if (childModel.discriminators != null) {\n      const keys = Object.keys(childModel.discriminators);\n      for (const key of keys) {\n        applyHooks(childModel.discriminators[key],\n          childModel.discriminators[key].schema, options);\n      }\n    }\n  }\n\n  // Built-in hooks rely on hooking internal functions in order to support\n  // promises and make it so that `doc.save.toString()` provides meaningful\n  // information.\n\n  const middleware = schema.s.hooks.\n    filter(hook => {\n      if (hook.name === 'updateOne' || hook.name === 'deleteOne') {\n        return !!hook['document'];\n      }\n      if (hook.name === 'remove' || hook.name === 'init') {\n        return hook['document'] == null || !!hook['document'];\n      }\n      if (hook.query != null || hook.document != null) {\n        return hook.document !== false;\n      }\n      return true;\n    }).\n    filter(hook => {\n      // If user has overwritten the method, don't apply built-in middleware\n      if (schema.methods[hook.name]) {\n        return !hook.fn[symbols.builtInMiddleware];\n      }\n\n      return true;\n    });\n\n  model._middleware = middleware;\n\n  objToDecorate.$__originalValidate = objToDecorate.$__originalValidate || objToDecorate.$__validate;\n\n  const internalMethodsToWrap = options && options.isChildSchema ? ['save', 'validate', 'deleteOne'] : ['save', 'validate'];\n  for (const method of internalMethodsToWrap) {\n    const toWrap = method === 'validate' ? '$__originalValidate' : `$__${method}`;\n    const wrapped = middleware.\n      createWrapper(method, objToDecorate[toWrap], null, kareemOptions);\n    objToDecorate[`$__${method}`] = wrapped;\n  }\n  objToDecorate.$__init = middleware.\n    createWrapperSync('init', objToDecorate.$__init, null, kareemOptions);\n\n  // Support hooks for custom methods\n  const customMethods = Object.keys(schema.methods);\n  const customMethodOptions = Object.assign({}, kareemOptions, {\n    // Only use `checkForPromise` for custom methods, because mongoose\n    // query thunks are not as consistent as I would like about returning\n    // a nullish value rather than the query. If a query thunk returns\n    // a query, `checkForPromise` causes infinite recursion\n    checkForPromise: true\n  });\n  for (const method of customMethods) {\n    if (alreadyHookedFunctions.has(method)) {\n      continue;\n    }\n    if (!middleware.hasHooks(method)) {\n      // Don't wrap if there are no hooks for the custom method to avoid\n      // surprises. Also, `createWrapper()` enforces consistent async,\n      // so wrapping a sync method would break it.\n      continue;\n    }\n    const originalMethod = objToDecorate[method];\n    objToDecorate[method] = function() {\n      const args = Array.prototype.slice.call(arguments);\n      const cb = args.slice(-1).pop();\n      const argsWithoutCallback = typeof cb === 'function' ?\n        args.slice(0, args.length - 1) : args;\n      return promiseOrCallback(cb, callback => {\n        return this[`$__${method}`].apply(this,\n          argsWithoutCallback.concat([callback]));\n      }, model.events);\n    };\n    objToDecorate[`$__${method}`] = middleware.\n      createWrapper(method, originalMethod, null, customMethodOptions);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvbW9kZWwvYXBwbHlIb29rcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixnQkFBZ0IsbUJBQU8sQ0FBQyxpRkFBc0I7QUFDOUMsMEJBQTBCLG1CQUFPLENBQUMsNEZBQXNCOztBQUV4RDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGdHQUFnRyxHQUFHOztBQUVuRztBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDBDQUEwQyxpQ0FBaUM7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMOztBQUVBOztBQUVBO0FBQ0E7QUFDQSx5RUFBeUUsT0FBTztBQUNoRjtBQUNBO0FBQ0Esd0JBQXdCLE9BQU87QUFDL0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLE9BQU87QUFDakM7QUFDQSxPQUFPO0FBQ1A7QUFDQSx3QkFBd0IsT0FBTztBQUMvQjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL21vZGVsL2FwcGx5SG9va3MuanM/MTEwMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHN5bWJvbHMgPSByZXF1aXJlKCcuLi8uLi9zY2hlbWEvc3ltYm9scycpO1xuY29uc3QgcHJvbWlzZU9yQ2FsbGJhY2sgPSByZXF1aXJlKCcuLi9wcm9taXNlT3JDYWxsYmFjaycpO1xuXG4vKiFcbiAqIGlnbm9yZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gYXBwbHlIb29rcztcblxuLyohXG4gKiBpZ25vcmVcbiAqL1xuXG5hcHBseUhvb2tzLm1pZGRsZXdhcmVGdW5jdGlvbnMgPSBbXG4gICdkZWxldGVPbmUnLFxuICAnc2F2ZScsXG4gICd2YWxpZGF0ZScsXG4gICdyZW1vdmUnLFxuICAndXBkYXRlT25lJyxcbiAgJ2luaXQnXG5dO1xuXG4vKiFcbiAqIGlnbm9yZVxuICovXG5cbmNvbnN0IGFscmVhZHlIb29rZWRGdW5jdGlvbnMgPSBuZXcgU2V0KGFwcGx5SG9va3MubWlkZGxld2FyZUZ1bmN0aW9ucy5mbGF0TWFwKGZuID0+IChbZm4sIGAkX18ke2ZufWBdKSkpO1xuXG4vKipcbiAqIFJlZ2lzdGVyIGhvb2tzIGZvciB0aGlzIG1vZGVsXG4gKlxuICogQHBhcmFtIHtNb2RlbH0gbW9kZWxcbiAqIEBwYXJhbSB7U2NoZW1hfSBzY2hlbWFcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBhcHBseUhvb2tzKG1vZGVsLCBzY2hlbWEsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgY29uc3Qga2FyZWVtT3B0aW9ucyA9IHtcbiAgICB1c2VFcnJvckhhbmRsZXJzOiB0cnVlLFxuICAgIG51bUNhbGxiYWNrUGFyYW1zOiAxLFxuICAgIG51bGxSZXN1bHRCeURlZmF1bHQ6IHRydWUsXG4gICAgY29udGV4dFBhcmFtZXRlcjogdHJ1ZVxuICB9O1xuICBjb25zdCBvYmpUb0RlY29yYXRlID0gb3B0aW9ucy5kZWNvcmF0ZURvYyA/IG1vZGVsIDogbW9kZWwucHJvdG90eXBlO1xuXG4gIG1vZGVsLiRhcHBsaWVkSG9va3MgPSB0cnVlO1xuICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhzY2hlbWEucGF0aHMpKSB7XG4gICAgY29uc3QgdHlwZSA9IHNjaGVtYS5wYXRoc1trZXldO1xuICAgIGxldCBjaGlsZE1vZGVsID0gbnVsbDtcbiAgICBpZiAodHlwZS4kaXNTaW5nbGVOZXN0ZWQpIHtcbiAgICAgIGNoaWxkTW9kZWwgPSB0eXBlLmNhc3RlcjtcbiAgICB9IGVsc2UgaWYgKHR5cGUuJGlzTW9uZ29vc2VEb2N1bWVudEFycmF5KSB7XG4gICAgICBjaGlsZE1vZGVsID0gdHlwZS5Db25zdHJ1Y3RvcjtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTW9kZWwuJGFwcGxpZWRIb29rcykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgYXBwbHlIb29rcyhjaGlsZE1vZGVsLCB0eXBlLnNjaGVtYSwgeyAuLi5vcHRpb25zLCBpc0NoaWxkU2NoZW1hOiB0cnVlIH0pO1xuICAgIGlmIChjaGlsZE1vZGVsLmRpc2NyaW1pbmF0b3JzICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhjaGlsZE1vZGVsLmRpc2NyaW1pbmF0b3JzKTtcbiAgICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICAgICAgYXBwbHlIb29rcyhjaGlsZE1vZGVsLmRpc2NyaW1pbmF0b3JzW2tleV0sXG4gICAgICAgICAgY2hpbGRNb2RlbC5kaXNjcmltaW5hdG9yc1trZXldLnNjaGVtYSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQnVpbHQtaW4gaG9va3MgcmVseSBvbiBob29raW5nIGludGVybmFsIGZ1bmN0aW9ucyBpbiBvcmRlciB0byBzdXBwb3J0XG4gIC8vIHByb21pc2VzIGFuZCBtYWtlIGl0IHNvIHRoYXQgYGRvYy5zYXZlLnRvU3RyaW5nKClgIHByb3ZpZGVzIG1lYW5pbmdmdWxcbiAgLy8gaW5mb3JtYXRpb24uXG5cbiAgY29uc3QgbWlkZGxld2FyZSA9IHNjaGVtYS5zLmhvb2tzLlxuICAgIGZpbHRlcihob29rID0+IHtcbiAgICAgIGlmIChob29rLm5hbWUgPT09ICd1cGRhdGVPbmUnIHx8IGhvb2submFtZSA9PT0gJ2RlbGV0ZU9uZScpIHtcbiAgICAgICAgcmV0dXJuICEhaG9va1snZG9jdW1lbnQnXTtcbiAgICAgIH1cbiAgICAgIGlmIChob29rLm5hbWUgPT09ICdyZW1vdmUnIHx8IGhvb2submFtZSA9PT0gJ2luaXQnKSB7XG4gICAgICAgIHJldHVybiBob29rWydkb2N1bWVudCddID09IG51bGwgfHwgISFob29rWydkb2N1bWVudCddO1xuICAgICAgfVxuICAgICAgaWYgKGhvb2sucXVlcnkgIT0gbnVsbCB8fCBob29rLmRvY3VtZW50ICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGhvb2suZG9jdW1lbnQgIT09IGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSkuXG4gICAgZmlsdGVyKGhvb2sgPT4ge1xuICAgICAgLy8gSWYgdXNlciBoYXMgb3ZlcndyaXR0ZW4gdGhlIG1ldGhvZCwgZG9uJ3QgYXBwbHkgYnVpbHQtaW4gbWlkZGxld2FyZVxuICAgICAgaWYgKHNjaGVtYS5tZXRob2RzW2hvb2submFtZV0pIHtcbiAgICAgICAgcmV0dXJuICFob29rLmZuW3N5bWJvbHMuYnVpbHRJbk1pZGRsZXdhcmVdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcblxuICBtb2RlbC5fbWlkZGxld2FyZSA9IG1pZGRsZXdhcmU7XG5cbiAgb2JqVG9EZWNvcmF0ZS4kX19vcmlnaW5hbFZhbGlkYXRlID0gb2JqVG9EZWNvcmF0ZS4kX19vcmlnaW5hbFZhbGlkYXRlIHx8IG9ialRvRGVjb3JhdGUuJF9fdmFsaWRhdGU7XG5cbiAgY29uc3QgaW50ZXJuYWxNZXRob2RzVG9XcmFwID0gb3B0aW9ucyAmJiBvcHRpb25zLmlzQ2hpbGRTY2hlbWEgPyBbJ3NhdmUnLCAndmFsaWRhdGUnLCAnZGVsZXRlT25lJ10gOiBbJ3NhdmUnLCAndmFsaWRhdGUnXTtcbiAgZm9yIChjb25zdCBtZXRob2Qgb2YgaW50ZXJuYWxNZXRob2RzVG9XcmFwKSB7XG4gICAgY29uc3QgdG9XcmFwID0gbWV0aG9kID09PSAndmFsaWRhdGUnID8gJyRfX29yaWdpbmFsVmFsaWRhdGUnIDogYCRfXyR7bWV0aG9kfWA7XG4gICAgY29uc3Qgd3JhcHBlZCA9IG1pZGRsZXdhcmUuXG4gICAgICBjcmVhdGVXcmFwcGVyKG1ldGhvZCwgb2JqVG9EZWNvcmF0ZVt0b1dyYXBdLCBudWxsLCBrYXJlZW1PcHRpb25zKTtcbiAgICBvYmpUb0RlY29yYXRlW2AkX18ke21ldGhvZH1gXSA9IHdyYXBwZWQ7XG4gIH1cbiAgb2JqVG9EZWNvcmF0ZS4kX19pbml0ID0gbWlkZGxld2FyZS5cbiAgICBjcmVhdGVXcmFwcGVyU3luYygnaW5pdCcsIG9ialRvRGVjb3JhdGUuJF9faW5pdCwgbnVsbCwga2FyZWVtT3B0aW9ucyk7XG5cbiAgLy8gU3VwcG9ydCBob29rcyBmb3IgY3VzdG9tIG1ldGhvZHNcbiAgY29uc3QgY3VzdG9tTWV0aG9kcyA9IE9iamVjdC5rZXlzKHNjaGVtYS5tZXRob2RzKTtcbiAgY29uc3QgY3VzdG9tTWV0aG9kT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGthcmVlbU9wdGlvbnMsIHtcbiAgICAvLyBPbmx5IHVzZSBgY2hlY2tGb3JQcm9taXNlYCBmb3IgY3VzdG9tIG1ldGhvZHMsIGJlY2F1c2UgbW9uZ29vc2VcbiAgICAvLyBxdWVyeSB0aHVua3MgYXJlIG5vdCBhcyBjb25zaXN0ZW50IGFzIEkgd291bGQgbGlrZSBhYm91dCByZXR1cm5pbmdcbiAgICAvLyBhIG51bGxpc2ggdmFsdWUgcmF0aGVyIHRoYW4gdGhlIHF1ZXJ5LiBJZiBhIHF1ZXJ5IHRodW5rIHJldHVybnNcbiAgICAvLyBhIHF1ZXJ5LCBgY2hlY2tGb3JQcm9taXNlYCBjYXVzZXMgaW5maW5pdGUgcmVjdXJzaW9uXG4gICAgY2hlY2tGb3JQcm9taXNlOiB0cnVlXG4gIH0pO1xuICBmb3IgKGNvbnN0IG1ldGhvZCBvZiBjdXN0b21NZXRob2RzKSB7XG4gICAgaWYgKGFscmVhZHlIb29rZWRGdW5jdGlvbnMuaGFzKG1ldGhvZCkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoIW1pZGRsZXdhcmUuaGFzSG9va3MobWV0aG9kKSkge1xuICAgICAgLy8gRG9uJ3Qgd3JhcCBpZiB0aGVyZSBhcmUgbm8gaG9va3MgZm9yIHRoZSBjdXN0b20gbWV0aG9kIHRvIGF2b2lkXG4gICAgICAvLyBzdXJwcmlzZXMuIEFsc28sIGBjcmVhdGVXcmFwcGVyKClgIGVuZm9yY2VzIGNvbnNpc3RlbnQgYXN5bmMsXG4gICAgICAvLyBzbyB3cmFwcGluZyBhIHN5bmMgbWV0aG9kIHdvdWxkIGJyZWFrIGl0LlxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IG9yaWdpbmFsTWV0aG9kID0gb2JqVG9EZWNvcmF0ZVttZXRob2RdO1xuICAgIG9ialRvRGVjb3JhdGVbbWV0aG9kXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgY29uc3QgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICBjb25zdCBjYiA9IGFyZ3Muc2xpY2UoLTEpLnBvcCgpO1xuICAgICAgY29uc3QgYXJnc1dpdGhvdXRDYWxsYmFjayA9IHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgICAgIGFyZ3Muc2xpY2UoMCwgYXJncy5sZW5ndGggLSAxKSA6IGFyZ3M7XG4gICAgICByZXR1cm4gcHJvbWlzZU9yQ2FsbGJhY2soY2IsIGNhbGxiYWNrID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXNbYCRfXyR7bWV0aG9kfWBdLmFwcGx5KHRoaXMsXG4gICAgICAgICAgYXJnc1dpdGhvdXRDYWxsYmFjay5jb25jYXQoW2NhbGxiYWNrXSkpO1xuICAgICAgfSwgbW9kZWwuZXZlbnRzKTtcbiAgICB9O1xuICAgIG9ialRvRGVjb3JhdGVbYCRfXyR7bWV0aG9kfWBdID0gbWlkZGxld2FyZS5cbiAgICAgIGNyZWF0ZVdyYXBwZXIobWV0aG9kLCBvcmlnaW5hbE1ldGhvZCwgbnVsbCwgY3VzdG9tTWV0aG9kT3B0aW9ucyk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/model/applyHooks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/model/applyMethods.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/model/applyMethods.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst get = __webpack_require__(/*! ../get */ \"(ssr)/./node_modules/mongoose/lib/helpers/get.js\");\nconst utils = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\n\n/**\n * Register methods for this model\n *\n * @param {Model} model\n * @param {Schema} schema\n * @api private\n */\n\nmodule.exports = function applyMethods(model, schema) {\n  const Model = __webpack_require__(/*! ../../model */ \"(ssr)/./node_modules/mongoose/lib/model.js\");\n\n  function apply(method, schema) {\n    Object.defineProperty(model.prototype, method, {\n      get: function() {\n        const h = {};\n        for (const k in schema.methods[method]) {\n          h[k] = schema.methods[method][k].bind(this);\n        }\n        return h;\n      },\n      configurable: true\n    });\n  }\n  for (const method of Object.keys(schema.methods)) {\n    const fn = schema.methods[method];\n    if (schema.tree.hasOwnProperty(method)) {\n      throw new Error('You have a method and a property in your schema both ' +\n        'named \"' + method + '\"');\n    }\n\n    // Avoid making custom methods if user sets a method to itself, e.g.\n    // `schema.method(save, Document.prototype.save)`. Can happen when\n    // calling `loadClass()` with a class that `extends Document`. See gh-12254\n    if (typeof fn === 'function' &&\n        Model.prototype[method] === fn) {\n      delete schema.methods[method];\n      continue;\n    }\n\n    if (schema.reserved[method] &&\n        !get(schema, `methodOptions.${method}.suppressWarning`, false)) {\n      utils.warn(`mongoose: the method name \"${method}\" is used by mongoose ` +\n        'internally, overwriting it may cause bugs. If you\\'re sure you know ' +\n        'what you\\'re doing, you can suppress this error by using ' +\n        `\\`schema.method('${method}', fn, { suppressWarning: true })\\`.`);\n    }\n    if (typeof fn === 'function') {\n      model.prototype[method] = fn;\n    } else {\n      apply(method, schema);\n    }\n  }\n\n  // Recursively call `applyMethods()` on child schemas\n  model.$appliedMethods = true;\n  for (const key of Object.keys(schema.paths)) {\n    const type = schema.paths[key];\n    if (type.$isSingleNested && !type.caster.$appliedMethods) {\n      applyMethods(type.caster, type.schema);\n    }\n    if (type.$isMongooseDocumentArray && !type.Constructor.$appliedMethods) {\n      applyMethods(type.Constructor, type.schema);\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvbW9kZWwvYXBwbHlNZXRob2RzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQyxnRUFBUTtBQUM1QixjQUFjLG1CQUFPLENBQUMsK0RBQWE7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLFFBQVE7QUFDbkI7QUFDQTs7QUFFQTtBQUNBLGdCQUFnQixtQkFBTyxDQUFDLCtEQUFhOztBQUVyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzQ0FBc0MsT0FBTztBQUM3QywrQ0FBK0MsT0FBTztBQUN0RDtBQUNBO0FBQ0EsNEJBQTRCLE9BQU8sU0FBUyx1QkFBdUI7QUFDbkU7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL21vZGVsL2FwcGx5TWV0aG9kcy5qcz9lZTdhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZ2V0ID0gcmVxdWlyZSgnLi4vZ2V0Jyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogUmVnaXN0ZXIgbWV0aG9kcyBmb3IgdGhpcyBtb2RlbFxuICpcbiAqIEBwYXJhbSB7TW9kZWx9IG1vZGVsXG4gKiBAcGFyYW0ge1NjaGVtYX0gc2NoZW1hXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGFwcGx5TWV0aG9kcyhtb2RlbCwgc2NoZW1hKSB7XG4gIGNvbnN0IE1vZGVsID0gcmVxdWlyZSgnLi4vLi4vbW9kZWwnKTtcblxuICBmdW5jdGlvbiBhcHBseShtZXRob2QsIHNjaGVtYSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2RlbC5wcm90b3R5cGUsIG1ldGhvZCwge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgaCA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGsgaW4gc2NoZW1hLm1ldGhvZHNbbWV0aG9kXSkge1xuICAgICAgICAgIGhba10gPSBzY2hlbWEubWV0aG9kc1ttZXRob2RdW2tdLmJpbmQodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGg7XG4gICAgICB9LFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgZm9yIChjb25zdCBtZXRob2Qgb2YgT2JqZWN0LmtleXMoc2NoZW1hLm1ldGhvZHMpKSB7XG4gICAgY29uc3QgZm4gPSBzY2hlbWEubWV0aG9kc1ttZXRob2RdO1xuICAgIGlmIChzY2hlbWEudHJlZS5oYXNPd25Qcm9wZXJ0eShtZXRob2QpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBoYXZlIGEgbWV0aG9kIGFuZCBhIHByb3BlcnR5IGluIHlvdXIgc2NoZW1hIGJvdGggJyArXG4gICAgICAgICduYW1lZCBcIicgKyBtZXRob2QgKyAnXCInKTtcbiAgICB9XG5cbiAgICAvLyBBdm9pZCBtYWtpbmcgY3VzdG9tIG1ldGhvZHMgaWYgdXNlciBzZXRzIGEgbWV0aG9kIHRvIGl0c2VsZiwgZS5nLlxuICAgIC8vIGBzY2hlbWEubWV0aG9kKHNhdmUsIERvY3VtZW50LnByb3RvdHlwZS5zYXZlKWAuIENhbiBoYXBwZW4gd2hlblxuICAgIC8vIGNhbGxpbmcgYGxvYWRDbGFzcygpYCB3aXRoIGEgY2xhc3MgdGhhdCBgZXh0ZW5kcyBEb2N1bWVudGAuIFNlZSBnaC0xMjI1NFxuICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgTW9kZWwucHJvdG90eXBlW21ldGhvZF0gPT09IGZuKSB7XG4gICAgICBkZWxldGUgc2NoZW1hLm1ldGhvZHNbbWV0aG9kXTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChzY2hlbWEucmVzZXJ2ZWRbbWV0aG9kXSAmJlxuICAgICAgICAhZ2V0KHNjaGVtYSwgYG1ldGhvZE9wdGlvbnMuJHttZXRob2R9LnN1cHByZXNzV2FybmluZ2AsIGZhbHNlKSkge1xuICAgICAgdXRpbHMud2FybihgbW9uZ29vc2U6IHRoZSBtZXRob2QgbmFtZSBcIiR7bWV0aG9kfVwiIGlzIHVzZWQgYnkgbW9uZ29vc2UgYCArXG4gICAgICAgICdpbnRlcm5hbGx5LCBvdmVyd3JpdGluZyBpdCBtYXkgY2F1c2UgYnVncy4gSWYgeW91XFwncmUgc3VyZSB5b3Uga25vdyAnICtcbiAgICAgICAgJ3doYXQgeW91XFwncmUgZG9pbmcsIHlvdSBjYW4gc3VwcHJlc3MgdGhpcyBlcnJvciBieSB1c2luZyAnICtcbiAgICAgICAgYFxcYHNjaGVtYS5tZXRob2QoJyR7bWV0aG9kfScsIGZuLCB7IHN1cHByZXNzV2FybmluZzogdHJ1ZSB9KVxcYC5gKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgbW9kZWwucHJvdG90eXBlW21ldGhvZF0gPSBmbjtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBwbHkobWV0aG9kLCBzY2hlbWEpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJlY3Vyc2l2ZWx5IGNhbGwgYGFwcGx5TWV0aG9kcygpYCBvbiBjaGlsZCBzY2hlbWFzXG4gIG1vZGVsLiRhcHBsaWVkTWV0aG9kcyA9IHRydWU7XG4gIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHNjaGVtYS5wYXRocykpIHtcbiAgICBjb25zdCB0eXBlID0gc2NoZW1hLnBhdGhzW2tleV07XG4gICAgaWYgKHR5cGUuJGlzU2luZ2xlTmVzdGVkICYmICF0eXBlLmNhc3Rlci4kYXBwbGllZE1ldGhvZHMpIHtcbiAgICAgIGFwcGx5TWV0aG9kcyh0eXBlLmNhc3RlciwgdHlwZS5zY2hlbWEpO1xuICAgIH1cbiAgICBpZiAodHlwZS4kaXNNb25nb29zZURvY3VtZW50QXJyYXkgJiYgIXR5cGUuQ29uc3RydWN0b3IuJGFwcGxpZWRNZXRob2RzKSB7XG4gICAgICBhcHBseU1ldGhvZHModHlwZS5Db25zdHJ1Y3RvciwgdHlwZS5zY2hlbWEpO1xuICAgIH1cbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/model/applyMethods.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/model/applyStaticHooks.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/model/applyStaticHooks.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst middlewareFunctions = (__webpack_require__(/*! ../../constants */ \"(ssr)/./node_modules/mongoose/lib/constants.js\").queryMiddlewareFunctions);\nconst promiseOrCallback = __webpack_require__(/*! ../promiseOrCallback */ \"(ssr)/./node_modules/mongoose/lib/helpers/promiseOrCallback.js\");\n\nmodule.exports = function applyStaticHooks(model, hooks, statics) {\n  const kareemOptions = {\n    useErrorHandlers: true,\n    numCallbackParams: 1\n  };\n\n  hooks = hooks.filter(hook => {\n    // If the custom static overwrites an existing query middleware, don't apply\n    // middleware to it by default. This avoids a potential backwards breaking\n    // change with plugins like `mongoose-delete` that use statics to overwrite\n    // built-in Mongoose functions.\n    if (middlewareFunctions.indexOf(hook.name) !== -1) {\n      return !!hook.model;\n    }\n    return hook.model !== false;\n  });\n\n  model.$__insertMany = hooks.createWrapper('insertMany',\n    model.$__insertMany, model, kareemOptions);\n\n  for (const key of Object.keys(statics)) {\n    if (hooks.hasHooks(key)) {\n      const original = model[key];\n\n      model[key] = function() {\n        const numArgs = arguments.length;\n        const lastArg = numArgs > 0 ? arguments[numArgs - 1] : null;\n        const cb = typeof lastArg === 'function' ? lastArg : null;\n        const args = Array.prototype.slice.\n          call(arguments, 0, cb == null ? numArgs : numArgs - 1);\n        // Special case: can't use `Kareem#wrap()` because it doesn't currently\n        // support wrapped functions that return a promise.\n        return promiseOrCallback(cb, callback => {\n          hooks.execPre(key, model, args, function(err) {\n            if (err != null) {\n              return callback(err);\n            }\n\n            let postCalled = 0;\n            const ret = original.apply(model, args.concat(post));\n            if (ret != null && typeof ret.then === 'function') {\n              ret.then(res => post(null, res), err => post(err));\n            }\n\n            function post(error, res) {\n              if (postCalled++ > 0) {\n                return;\n              }\n\n              if (error != null) {\n                return callback(error);\n              }\n\n              hooks.execPost(key, model, [res], function(error) {\n                if (error != null) {\n                  return callback(error);\n                }\n                callback(null, res);\n              });\n            }\n          });\n        }, model.events);\n      };\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvbW9kZWwvYXBwbHlTdGF0aWNIb29rcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw0QkFBNEIsdUhBQW1EO0FBQy9FLDBCQUEwQixtQkFBTyxDQUFDLDRGQUFzQjs7QUFFeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9tb2RlbC9hcHBseVN0YXRpY0hvb2tzLmpzP2U0NGUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBtaWRkbGV3YXJlRnVuY3Rpb25zID0gcmVxdWlyZSgnLi4vLi4vY29uc3RhbnRzJykucXVlcnlNaWRkbGV3YXJlRnVuY3Rpb25zO1xuY29uc3QgcHJvbWlzZU9yQ2FsbGJhY2sgPSByZXF1aXJlKCcuLi9wcm9taXNlT3JDYWxsYmFjaycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGFwcGx5U3RhdGljSG9va3MobW9kZWwsIGhvb2tzLCBzdGF0aWNzKSB7XG4gIGNvbnN0IGthcmVlbU9wdGlvbnMgPSB7XG4gICAgdXNlRXJyb3JIYW5kbGVyczogdHJ1ZSxcbiAgICBudW1DYWxsYmFja1BhcmFtczogMVxuICB9O1xuXG4gIGhvb2tzID0gaG9va3MuZmlsdGVyKGhvb2sgPT4ge1xuICAgIC8vIElmIHRoZSBjdXN0b20gc3RhdGljIG92ZXJ3cml0ZXMgYW4gZXhpc3RpbmcgcXVlcnkgbWlkZGxld2FyZSwgZG9uJ3QgYXBwbHlcbiAgICAvLyBtaWRkbGV3YXJlIHRvIGl0IGJ5IGRlZmF1bHQuIFRoaXMgYXZvaWRzIGEgcG90ZW50aWFsIGJhY2t3YXJkcyBicmVha2luZ1xuICAgIC8vIGNoYW5nZSB3aXRoIHBsdWdpbnMgbGlrZSBgbW9uZ29vc2UtZGVsZXRlYCB0aGF0IHVzZSBzdGF0aWNzIHRvIG92ZXJ3cml0ZVxuICAgIC8vIGJ1aWx0LWluIE1vbmdvb3NlIGZ1bmN0aW9ucy5cbiAgICBpZiAobWlkZGxld2FyZUZ1bmN0aW9ucy5pbmRleE9mKGhvb2submFtZSkgIT09IC0xKSB7XG4gICAgICByZXR1cm4gISFob29rLm1vZGVsO1xuICAgIH1cbiAgICByZXR1cm4gaG9vay5tb2RlbCAhPT0gZmFsc2U7XG4gIH0pO1xuXG4gIG1vZGVsLiRfX2luc2VydE1hbnkgPSBob29rcy5jcmVhdGVXcmFwcGVyKCdpbnNlcnRNYW55JyxcbiAgICBtb2RlbC4kX19pbnNlcnRNYW55LCBtb2RlbCwga2FyZWVtT3B0aW9ucyk7XG5cbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoc3RhdGljcykpIHtcbiAgICBpZiAoaG9va3MuaGFzSG9va3Moa2V5KSkge1xuICAgICAgY29uc3Qgb3JpZ2luYWwgPSBtb2RlbFtrZXldO1xuXG4gICAgICBtb2RlbFtrZXldID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IG51bUFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICBjb25zdCBsYXN0QXJnID0gbnVtQXJncyA+IDAgPyBhcmd1bWVudHNbbnVtQXJncyAtIDFdIDogbnVsbDtcbiAgICAgICAgY29uc3QgY2IgPSB0eXBlb2YgbGFzdEFyZyA9PT0gJ2Z1bmN0aW9uJyA/IGxhc3RBcmcgOiBudWxsO1xuICAgICAgICBjb25zdCBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLlxuICAgICAgICAgIGNhbGwoYXJndW1lbnRzLCAwLCBjYiA9PSBudWxsID8gbnVtQXJncyA6IG51bUFyZ3MgLSAxKTtcbiAgICAgICAgLy8gU3BlY2lhbCBjYXNlOiBjYW4ndCB1c2UgYEthcmVlbSN3cmFwKClgIGJlY2F1c2UgaXQgZG9lc24ndCBjdXJyZW50bHlcbiAgICAgICAgLy8gc3VwcG9ydCB3cmFwcGVkIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBhIHByb21pc2UuXG4gICAgICAgIHJldHVybiBwcm9taXNlT3JDYWxsYmFjayhjYiwgY2FsbGJhY2sgPT4ge1xuICAgICAgICAgIGhvb2tzLmV4ZWNQcmUoa2V5LCBtb2RlbCwgYXJncywgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBwb3N0Q2FsbGVkID0gMDtcbiAgICAgICAgICAgIGNvbnN0IHJldCA9IG9yaWdpbmFsLmFwcGx5KG1vZGVsLCBhcmdzLmNvbmNhdChwb3N0KSk7XG4gICAgICAgICAgICBpZiAocmV0ICE9IG51bGwgJiYgdHlwZW9mIHJldC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIHJldC50aGVuKHJlcyA9PiBwb3N0KG51bGwsIHJlcyksIGVyciA9PiBwb3N0KGVycikpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBwb3N0KGVycm9yLCByZXMpIHtcbiAgICAgICAgICAgICAgaWYgKHBvc3RDYWxsZWQrKyA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoZXJyb3IgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnJvcik7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBob29rcy5leGVjUG9zdChrZXksIG1vZGVsLCBbcmVzXSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIG1vZGVsLmV2ZW50cyk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/model/applyStaticHooks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/model/applyStatics.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/model/applyStatics.js ***!
  \*****************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Register statics for this model\n * @param {Model} model\n * @param {Schema} schema\n * @api private\n */\nmodule.exports = function applyStatics(model, schema) {\n  for (const i in schema.statics) {\n    model[i] = schema.statics[i];\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvbW9kZWwvYXBwbHlTdGF0aWNzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9tb2RlbC9hcHBseVN0YXRpY3MuanM/MmNmYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogUmVnaXN0ZXIgc3RhdGljcyBmb3IgdGhpcyBtb2RlbFxuICogQHBhcmFtIHtNb2RlbH0gbW9kZWxcbiAqIEBwYXJhbSB7U2NoZW1hfSBzY2hlbWFcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGFwcGx5U3RhdGljcyhtb2RlbCwgc2NoZW1hKSB7XG4gIGZvciAoY29uc3QgaSBpbiBzY2hlbWEuc3RhdGljcykge1xuICAgIG1vZGVsW2ldID0gc2NoZW1hLnN0YXRpY3NbaV07XG4gIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/model/applyStatics.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/model/castBulkWrite.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/model/castBulkWrite.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst MongooseError = __webpack_require__(/*! ../../error/mongooseError */ \"(ssr)/./node_modules/mongoose/lib/error/mongooseError.js\");\nconst getDiscriminatorByValue = __webpack_require__(/*! ../../helpers/discriminator/getDiscriminatorByValue */ \"(ssr)/./node_modules/mongoose/lib/helpers/discriminator/getDiscriminatorByValue.js\");\nconst applyTimestampsToChildren = __webpack_require__(/*! ../update/applyTimestampsToChildren */ \"(ssr)/./node_modules/mongoose/lib/helpers/update/applyTimestampsToChildren.js\");\nconst applyTimestampsToUpdate = __webpack_require__(/*! ../update/applyTimestampsToUpdate */ \"(ssr)/./node_modules/mongoose/lib/helpers/update/applyTimestampsToUpdate.js\");\nconst cast = __webpack_require__(/*! ../../cast */ \"(ssr)/./node_modules/mongoose/lib/cast.js\");\nconst castUpdate = __webpack_require__(/*! ../query/castUpdate */ \"(ssr)/./node_modules/mongoose/lib/helpers/query/castUpdate.js\");\nconst clone = __webpack_require__(/*! ../clone */ \"(ssr)/./node_modules/mongoose/lib/helpers/clone.js\");\nconst decorateUpdateWithVersionKey = __webpack_require__(/*! ../update/decorateUpdateWithVersionKey */ \"(ssr)/./node_modules/mongoose/lib/helpers/update/decorateUpdateWithVersionKey.js\");\nconst { inspect } = __webpack_require__(/*! util */ \"util\");\nconst setDefaultsOnInsert = __webpack_require__(/*! ../setDefaultsOnInsert */ \"(ssr)/./node_modules/mongoose/lib/helpers/setDefaultsOnInsert.js\");\n\n/**\n * Given a model and a bulkWrite op, return a thunk that handles casting and\n * validating the individual op.\n * @param {Model} originalModel\n * @param {Object} op\n * @param {Object} [options]\n * @api private\n */\n\nmodule.exports = function castBulkWrite(originalModel, op, options) {\n  const now = originalModel.base.now();\n\n  const globalSetDefaultsOnInsert = originalModel.base.options.setDefaultsOnInsert;\n  if (op['insertOne']) {\n    return (callback) => {\n      const model = decideModelByObject(originalModel, op['insertOne']['document']);\n\n      const doc = new model(op['insertOne']['document']);\n      if (model.schema.options.timestamps && options.timestamps !== false) {\n        doc.initializeTimestamps();\n      }\n      if (options.session != null) {\n        doc.$session(options.session);\n      }\n      const versionKey = model?.schema?.options?.versionKey;\n      if (versionKey && doc[versionKey] == null) {\n        doc[versionKey] = 0;\n      }\n      op['insertOne']['document'] = doc;\n\n      if (options.skipValidation || op['insertOne'].skipValidation) {\n        callback(null);\n        return;\n      }\n\n      op['insertOne']['document'].$validate().then(\n        () => { callback(null); },\n        err => { callback(err, null); }\n      );\n    };\n  } else if (op['updateOne']) {\n    return (callback) => {\n      try {\n        if (!op['updateOne']['filter']) {\n          throw new Error('Must provide a filter object.');\n        }\n        if (!op['updateOne']['update']) {\n          throw new Error('Must provide an update object.');\n        }\n\n        const model = decideModelByObject(originalModel, op['updateOne']['filter']);\n        const schema = model.schema;\n        const strict = options.strict != null ? options.strict : model.schema.options.strict;\n\n        const update = clone(op['updateOne']['update']);\n\n        _addDiscriminatorToObject(schema, op['updateOne']['filter']);\n\n        if (model.schema.$timestamps != null && op['updateOne'].timestamps !== false) {\n          const createdAt = model.schema.$timestamps.createdAt;\n          const updatedAt = model.schema.$timestamps.updatedAt;\n          applyTimestampsToUpdate(now, createdAt, updatedAt, update, {});\n        }\n\n        if (op['updateOne'].timestamps !== false) {\n          applyTimestampsToChildren(now, update, model.schema);\n        }\n\n        const shouldSetDefaultsOnInsert = op['updateOne'].setDefaultsOnInsert == null ?\n          globalSetDefaultsOnInsert :\n          op['updateOne'].setDefaultsOnInsert;\n        if (shouldSetDefaultsOnInsert !== false) {\n          setDefaultsOnInsert(op['updateOne']['filter'], model.schema, update, {\n            setDefaultsOnInsert: true,\n            upsert: op['updateOne'].upsert\n          });\n        }\n\n        decorateUpdateWithVersionKey(\n          update,\n          op['updateOne'],\n          model.schema.options.versionKey\n        );\n\n        op['updateOne']['filter'] = cast(model.schema, op['updateOne']['filter'], {\n          strict: strict,\n          upsert: op['updateOne'].upsert\n        });\n        op['updateOne']['update'] = castUpdate(model.schema, update, {\n          strict: strict,\n          upsert: op['updateOne'].upsert\n        }, model, op['updateOne']['filter']);\n      } catch (error) {\n        return callback(error, null);\n      }\n\n      callback(null);\n    };\n  } else if (op['updateMany']) {\n    return (callback) => {\n      try {\n        if (!op['updateMany']['filter']) {\n          throw new Error('Must provide a filter object.');\n        }\n        if (!op['updateMany']['update']) {\n          throw new Error('Must provide an update object.');\n        }\n\n        const model = decideModelByObject(originalModel, op['updateMany']['filter']);\n        const schema = model.schema;\n        const strict = options.strict != null ? options.strict : model.schema.options.strict;\n\n        const shouldSetDefaultsOnInsert = op['updateMany'].setDefaultsOnInsert == null ?\n          globalSetDefaultsOnInsert :\n          op['updateMany'].setDefaultsOnInsert;\n\n        if (shouldSetDefaultsOnInsert !== false) {\n          setDefaultsOnInsert(op['updateMany']['filter'], model.schema, op['updateMany']['update'], {\n            setDefaultsOnInsert: true,\n            upsert: op['updateMany'].upsert\n          });\n        }\n\n        if (model.schema.$timestamps != null && op['updateMany'].timestamps !== false) {\n          const createdAt = model.schema.$timestamps.createdAt;\n          const updatedAt = model.schema.$timestamps.updatedAt;\n          applyTimestampsToUpdate(now, createdAt, updatedAt, op['updateMany']['update'], {});\n        }\n        if (op['updateMany'].timestamps !== false) {\n          applyTimestampsToChildren(now, op['updateMany']['update'], model.schema);\n        }\n\n        _addDiscriminatorToObject(schema, op['updateMany']['filter']);\n\n        decorateUpdateWithVersionKey(\n          op['updateMany']['update'],\n          op['updateMany'],\n          model.schema.options.versionKey\n        );\n\n        op['updateMany']['filter'] = cast(model.schema, op['updateMany']['filter'], {\n          strict: strict,\n          upsert: op['updateMany'].upsert\n        });\n\n        op['updateMany']['update'] = castUpdate(model.schema, op['updateMany']['update'], {\n          strict: strict,\n          upsert: op['updateMany'].upsert\n        }, model, op['updateMany']['filter']);\n      } catch (error) {\n        return callback(error, null);\n      }\n\n      callback(null);\n    };\n  } else if (op['replaceOne']) {\n    return (callback) => {\n      const model = decideModelByObject(originalModel, op['replaceOne']['filter']);\n      const schema = model.schema;\n      const strict = options.strict != null ? options.strict : model.schema.options.strict;\n\n      _addDiscriminatorToObject(schema, op['replaceOne']['filter']);\n      try {\n        op['replaceOne']['filter'] = cast(model.schema, op['replaceOne']['filter'], {\n          strict: strict,\n          upsert: op['replaceOne'].upsert\n        });\n      } catch (error) {\n        return callback(error, null);\n      }\n\n      // set `skipId`, otherwise we get \"_id field cannot be changed\"\n      const doc = new model(op['replaceOne']['replacement'], strict, true);\n      if (model.schema.options.timestamps) {\n        doc.initializeTimestamps();\n      }\n      if (options.session != null) {\n        doc.$session(options.session);\n      }\n      const versionKey = model?.schema?.options?.versionKey;\n      if (versionKey && doc[versionKey] == null) {\n        doc[versionKey] = 0;\n      }\n      op['replaceOne']['replacement'] = doc;\n\n      if (options.skipValidation || op['replaceOne'].skipValidation) {\n        op['replaceOne']['replacement'] = op['replaceOne']['replacement'].toBSON();\n        callback(null);\n        return;\n      }\n\n      op['replaceOne']['replacement'].$validate().then(\n        () => {\n          op['replaceOne']['replacement'] = op['replaceOne']['replacement'].toBSON();\n          callback(null);\n        },\n        error => {\n          callback(error, null);\n        }\n      );\n    };\n  } else if (op['deleteOne']) {\n    return (callback) => {\n      const model = decideModelByObject(originalModel, op['deleteOne']['filter']);\n      const schema = model.schema;\n\n      _addDiscriminatorToObject(schema, op['deleteOne']['filter']);\n\n      try {\n        op['deleteOne']['filter'] = cast(model.schema,\n          op['deleteOne']['filter']);\n      } catch (error) {\n        return callback(error, null);\n      }\n\n      callback(null);\n    };\n  } else if (op['deleteMany']) {\n    return (callback) => {\n      const model = decideModelByObject(originalModel, op['deleteMany']['filter']);\n      const schema = model.schema;\n\n      _addDiscriminatorToObject(schema, op['deleteMany']['filter']);\n\n      try {\n        op['deleteMany']['filter'] = cast(model.schema,\n          op['deleteMany']['filter']);\n      } catch (error) {\n        return callback(error, null);\n      }\n\n      callback(null);\n    };\n  } else {\n    return (callback) => {\n      const error = new MongooseError(`Invalid op passed to \\`bulkWrite()\\`: ${inspect(op)}`);\n      callback(error, null);\n    };\n  }\n};\n\nfunction _addDiscriminatorToObject(schema, obj) {\n  if (schema == null) {\n    return;\n  }\n  if (schema.discriminatorMapping && !schema.discriminatorMapping.isRoot) {\n    obj[schema.discriminatorMapping.key] = schema.discriminatorMapping.value;\n  }\n}\n\n/**\n * gets discriminator model if discriminator key is present in object\n * @api private\n */\n\nfunction decideModelByObject(model, object) {\n  const discriminatorKey = model.schema.options.discriminatorKey;\n  if (object != null && object.hasOwnProperty(discriminatorKey)) {\n    model = getDiscriminatorByValue(model.discriminators, object[discriminatorKey]) || model;\n  }\n  return model;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/model/castBulkWrite.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/model/discriminator.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/model/discriminator.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst Mixed = __webpack_require__(/*! ../../schema/mixed */ \"(ssr)/./node_modules/mongoose/lib/schema/mixed.js\");\nconst applyBuiltinPlugins = __webpack_require__(/*! ../schema/applyBuiltinPlugins */ \"(ssr)/./node_modules/mongoose/lib/helpers/schema/applyBuiltinPlugins.js\");\nconst clone = __webpack_require__(/*! ../clone */ \"(ssr)/./node_modules/mongoose/lib/helpers/clone.js\");\nconst defineKey = (__webpack_require__(/*! ../document/compile */ \"(ssr)/./node_modules/mongoose/lib/helpers/document/compile.js\").defineKey);\nconst get = __webpack_require__(/*! ../get */ \"(ssr)/./node_modules/mongoose/lib/helpers/get.js\");\nconst utils = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\nconst mergeDiscriminatorSchema = __webpack_require__(/*! ../../helpers/discriminator/mergeDiscriminatorSchema */ \"(ssr)/./node_modules/mongoose/lib/helpers/discriminator/mergeDiscriminatorSchema.js\");\n\nconst CUSTOMIZABLE_DISCRIMINATOR_OPTIONS = {\n  toJSON: true,\n  toObject: true,\n  _id: true,\n  id: true,\n  virtuals: true,\n  methods: true\n};\n\n/*!\n * ignore\n */\n\nmodule.exports = function discriminator(model, name, schema, tiedValue, applyPlugins, mergeHooks) {\n  if (!(schema && schema.instanceOfSchema)) {\n    throw new Error('You must pass a valid discriminator Schema');\n  }\n\n  mergeHooks = mergeHooks == null ? true : mergeHooks;\n\n  if (model.schema.discriminatorMapping &&\n      !model.schema.discriminatorMapping.isRoot) {\n    throw new Error('Discriminator \"' + name +\n        '\" can only be a discriminator of the root model');\n  }\n\n  if (applyPlugins) {\n    const applyPluginsToDiscriminators = get(model.base,\n      'options.applyPluginsToDiscriminators', false) || !mergeHooks;\n    // Even if `applyPluginsToDiscriminators` isn't set, we should still apply\n    // global plugins to schemas embedded in the discriminator schema (gh-7370)\n    model.base._applyPlugins(schema, {\n      skipTopLevel: !applyPluginsToDiscriminators\n    });\n  } else if (!mergeHooks) {\n    applyBuiltinPlugins(schema);\n  }\n\n  const key = model.schema.options.discriminatorKey;\n\n  const existingPath = model.schema.path(key);\n  if (existingPath != null) {\n    if (!utils.hasUserDefinedProperty(existingPath.options, 'select')) {\n      existingPath.options.select = true;\n    }\n    existingPath.options.$skipDiscriminatorCheck = true;\n  } else {\n    const baseSchemaAddition = {};\n    baseSchemaAddition[key] = {\n      default: void 0,\n      select: true,\n      $skipDiscriminatorCheck: true\n    };\n    baseSchemaAddition[key][model.schema.options.typeKey] = String;\n    model.schema.add(baseSchemaAddition);\n    defineKey({\n      prop: key,\n      prototype: model.prototype,\n      options: model.schema.options\n    });\n  }\n\n  if (schema.path(key) && schema.path(key).options.$skipDiscriminatorCheck !== true) {\n    throw new Error('Discriminator \"' + name +\n        '\" cannot have field with name \"' + key + '\"');\n  }\n\n  let value = name;\n  if ((typeof tiedValue === 'string' && tiedValue.length) || tiedValue != null) {\n    value = tiedValue;\n  }\n\n  function merge(schema, baseSchema) {\n    // Retain original schema before merging base schema\n    schema._baseSchema = baseSchema;\n    if (baseSchema.paths._id &&\n        baseSchema.paths._id.options &&\n        !baseSchema.paths._id.options.auto) {\n      schema.remove('_id');\n    }\n\n    // Find conflicting paths: if something is a path in the base schema\n    // and a nested path in the child schema, overwrite the base schema path.\n    // See gh-6076\n    const baseSchemaPaths = Object.keys(baseSchema.paths);\n    const conflictingPaths = [];\n\n    for (const path of baseSchemaPaths) {\n      if (schema.nested[path]) {\n        conflictingPaths.push(path);\n        continue;\n      }\n\n      if (path.indexOf('.') === -1) {\n        continue;\n      }\n      const sp = path.split('.').slice(0, -1);\n      let cur = '';\n      for (const piece of sp) {\n        cur += (cur.length ? '.' : '') + piece;\n        if (schema.paths[cur] instanceof Mixed ||\n            schema.singleNestedPaths[cur] instanceof Mixed) {\n          conflictingPaths.push(path);\n        }\n      }\n    }\n\n    mergeDiscriminatorSchema(schema, baseSchema);\n\n    // Clean up conflicting paths _after_ merging re: gh-6076\n    for (const conflictingPath of conflictingPaths) {\n      delete schema.paths[conflictingPath];\n    }\n\n    // Rebuild schema models because schemas may have been merged re: #7884\n    schema.childSchemas.forEach(obj => {\n      obj.model.prototype.$__setSchema(obj.schema);\n    });\n\n    const obj = {};\n    obj[key] = {\n      default: value,\n      select: true,\n      set: function(newName) {\n        if (newName === value || (Array.isArray(value) && utils.deepEqual(newName, value))) {\n          return value;\n        }\n        throw new Error('Can\\'t set discriminator key \"' + key + '\"');\n      },\n      $skipDiscriminatorCheck: true\n    };\n    obj[key][schema.options.typeKey] = existingPath ? existingPath.options[schema.options.typeKey] : String;\n    schema.add(obj);\n\n    schema.discriminatorMapping = { key: key, value: value, isRoot: false };\n\n    if (baseSchema.options.collection) {\n      schema.options.collection = baseSchema.options.collection;\n    }\n    const toJSON = schema.options.toJSON;\n    const toObject = schema.options.toObject;\n    const _id = schema.options._id;\n    const id = schema.options.id;\n\n    const keys = Object.keys(schema.options);\n    schema.options.discriminatorKey = baseSchema.options.discriminatorKey;\n    const userProvidedOptions = schema._userProvidedOptions;\n    for (const _key of keys) {\n      if (!CUSTOMIZABLE_DISCRIMINATOR_OPTIONS[_key]) {\n        // Use `schema.options` in `deepEqual()` because of `discriminatorKey`\n        // set above. We don't allow customizing discriminator key, always\n        // overwrite. See gh-9238\n        if (_key in userProvidedOptions && !utils.deepEqual(schema.options[_key], baseSchema.options[_key])) {\n          throw new Error('Can\\'t customize discriminator option ' + _key +\n            ' (can only modify ' +\n            Object.keys(CUSTOMIZABLE_DISCRIMINATOR_OPTIONS).join(', ') +\n            ')');\n        }\n      }\n    }\n    schema.options = clone(baseSchema.options);\n\n    for (const _key of Object.keys(userProvidedOptions)) {\n      schema.options[_key] = userProvidedOptions[_key];\n    }\n    if (toJSON) schema.options.toJSON = toJSON;\n    if (toObject) schema.options.toObject = toObject;\n    if (typeof _id !== 'undefined') {\n      schema.options._id = _id;\n    }\n    schema.options.id = id;\n    if (mergeHooks) {\n      schema.s.hooks = model.schema.s.hooks.merge(schema.s.hooks);\n    }\n    if (applyPlugins) {\n      schema.plugins = Array.prototype.slice.call(baseSchema.plugins);\n    }\n    schema.callQueue = baseSchema.callQueue.concat(schema.callQueue);\n    delete schema._requiredpaths; // reset just in case Schema#requiredPaths() was called on either schema\n  }\n\n  // merges base schema into new discriminator schema and sets new type field.\n  merge(schema, model.schema);\n\n  if (!model.discriminators) {\n    model.discriminators = {};\n  }\n\n  if (!model.schema.discriminatorMapping) {\n    model.schema.discriminatorMapping = { key: key, value: null, isRoot: true };\n  }\n  if (!model.schema.discriminators) {\n    model.schema.discriminators = {};\n  }\n\n  model.schema.discriminators[name] = schema;\n\n  if (model.discriminators[name] && !schema.options.overwriteModels) {\n    throw new Error('Discriminator with name \"' + name + '\" already exists');\n  }\n\n  return schema;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/model/discriminator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/model/pushNestedArrayPaths.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/model/pushNestedArrayPaths.js ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function pushNestedArrayPaths(paths, nestedArray, path) {\n  if (nestedArray == null) {\n    return;\n  }\n\n  for (let i = 0; i < nestedArray.length; ++i) {\n    if (Array.isArray(nestedArray[i])) {\n      pushNestedArrayPaths(paths, nestedArray[i], path + '.' + i);\n    } else {\n      paths.push(path + '.' + i);\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvbW9kZWwvcHVzaE5lc3RlZEFycmF5UGF0aHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCLHdCQUF3QjtBQUMxQztBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9tb2RlbC9wdXNoTmVzdGVkQXJyYXlQYXRocy5qcz8yMzE2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwdXNoTmVzdGVkQXJyYXlQYXRocyhwYXRocywgbmVzdGVkQXJyYXksIHBhdGgpIHtcbiAgaWYgKG5lc3RlZEFycmF5ID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IG5lc3RlZEFycmF5Lmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobmVzdGVkQXJyYXlbaV0pKSB7XG4gICAgICBwdXNoTmVzdGVkQXJyYXlQYXRocyhwYXRocywgbmVzdGVkQXJyYXlbaV0sIHBhdGggKyAnLicgKyBpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGF0aHMucHVzaChwYXRoICsgJy4nICsgaSk7XG4gICAgfVxuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/model/pushNestedArrayPaths.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/parallelLimit.js":
/*!************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/parallelLimit.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = parallelLimit;\n\n/*!\n * ignore\n */\n\nfunction parallelLimit(fns, limit, callback) {\n  let numInProgress = 0;\n  let numFinished = 0;\n  let error = null;\n\n  if (limit <= 0) {\n    throw new Error('Limit must be positive');\n  }\n\n  if (fns.length === 0) {\n    return callback(null, []);\n  }\n\n  for (let i = 0; i < fns.length && i < limit; ++i) {\n    _start();\n  }\n\n  function _start() {\n    fns[numFinished + numInProgress](_done(numFinished + numInProgress));\n    ++numInProgress;\n  }\n\n  const results = [];\n\n  function _done(index) {\n    return (err, res) => {\n      --numInProgress;\n      ++numFinished;\n\n      if (error != null) {\n        return;\n      }\n      if (err != null) {\n        error = err;\n        return callback(error);\n      }\n\n      results[index] = res;\n\n      if (numFinished === fns.length) {\n        return callback(null, results);\n      } else if (numFinished + numInProgress < fns.length) {\n        _start();\n      }\n    };\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcGFyYWxsZWxMaW1pdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0IsNkJBQTZCO0FBQy9DO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9wYXJhbGxlbExpbWl0LmpzP2IxNDgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmFsbGVsTGltaXQ7XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxuZnVuY3Rpb24gcGFyYWxsZWxMaW1pdChmbnMsIGxpbWl0LCBjYWxsYmFjaykge1xuICBsZXQgbnVtSW5Qcm9ncmVzcyA9IDA7XG4gIGxldCBudW1GaW5pc2hlZCA9IDA7XG4gIGxldCBlcnJvciA9IG51bGw7XG5cbiAgaWYgKGxpbWl0IDw9IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0xpbWl0IG11c3QgYmUgcG9zaXRpdmUnKTtcbiAgfVxuXG4gIGlmIChmbnMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIFtdKTtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZm5zLmxlbmd0aCAmJiBpIDwgbGltaXQ7ICsraSkge1xuICAgIF9zdGFydCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gX3N0YXJ0KCkge1xuICAgIGZuc1tudW1GaW5pc2hlZCArIG51bUluUHJvZ3Jlc3NdKF9kb25lKG51bUZpbmlzaGVkICsgbnVtSW5Qcm9ncmVzcykpO1xuICAgICsrbnVtSW5Qcm9ncmVzcztcbiAgfVxuXG4gIGNvbnN0IHJlc3VsdHMgPSBbXTtcblxuICBmdW5jdGlvbiBfZG9uZShpbmRleCkge1xuICAgIHJldHVybiAoZXJyLCByZXMpID0+IHtcbiAgICAgIC0tbnVtSW5Qcm9ncmVzcztcbiAgICAgICsrbnVtRmluaXNoZWQ7XG5cbiAgICAgIGlmIChlcnJvciAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChlcnIgIT0gbnVsbCkge1xuICAgICAgICBlcnJvciA9IGVycjtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0c1tpbmRleF0gPSByZXM7XG5cbiAgICAgIGlmIChudW1GaW5pc2hlZCA9PT0gZm5zLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgcmVzdWx0cyk7XG4gICAgICB9IGVsc2UgaWYgKG51bUZpbmlzaGVkICsgbnVtSW5Qcm9ncmVzcyA8IGZucy5sZW5ndGgpIHtcbiAgICAgICAgX3N0YXJ0KCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/parallelLimit.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/path/parentPaths.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/path/parentPaths.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nconst dotRE = /\\./g;\nmodule.exports = function parentPaths(path) {\n  if (path.indexOf('.') === -1) {\n    return [path];\n  }\n  const pieces = path.split(dotRE);\n  const len = pieces.length;\n  const ret = new Array(len);\n  let cur = '';\n  for (let i = 0; i < len; ++i) {\n    cur += (cur.length !== 0) ? '.' + pieces[i] : pieces[i];\n    ret[i] = cur;\n  }\n\n  return ret;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcGF0aC9wYXJlbnRQYXRocy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsU0FBUztBQUMzQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcGF0aC9wYXJlbnRQYXRocy5qcz84ODY2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZG90UkUgPSAvXFwuL2c7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcmVudFBhdGhzKHBhdGgpIHtcbiAgaWYgKHBhdGguaW5kZXhPZignLicpID09PSAtMSkge1xuICAgIHJldHVybiBbcGF0aF07XG4gIH1cbiAgY29uc3QgcGllY2VzID0gcGF0aC5zcGxpdChkb3RSRSk7XG4gIGNvbnN0IGxlbiA9IHBpZWNlcy5sZW5ndGg7XG4gIGNvbnN0IHJldCA9IG5ldyBBcnJheShsZW4pO1xuICBsZXQgY3VyID0gJyc7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBjdXIgKz0gKGN1ci5sZW5ndGggIT09IDApID8gJy4nICsgcGllY2VzW2ldIDogcGllY2VzW2ldO1xuICAgIHJldFtpXSA9IGN1cjtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/path/parentPaths.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/path/setDottedPath.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/path/setDottedPath.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst specialProperties = __webpack_require__(/*! ../specialProperties */ \"(ssr)/./node_modules/mongoose/lib/helpers/specialProperties.js\");\n\n\nmodule.exports = function setDottedPath(obj, path, val) {\n  if (path.indexOf('.') === -1) {\n    if (specialProperties.has(path)) {\n      return;\n    }\n\n    obj[path] = val;\n    return;\n  }\n  const parts = path.split('.');\n\n  const last = parts.pop();\n  let cur = obj;\n  for (const part of parts) {\n    if (specialProperties.has(part)) {\n      continue;\n    }\n    if (cur[part] == null) {\n      cur[part] = {};\n    }\n\n    cur = cur[part];\n  }\n\n  if (!specialProperties.has(last)) {\n    cur[last] = val;\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcGF0aC9zZXREb3R0ZWRQYXRoLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDBCQUEwQixtQkFBTyxDQUFDLDRGQUFzQjs7O0FBR3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL3BhdGgvc2V0RG90dGVkUGF0aC5qcz8wOTE4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3Qgc3BlY2lhbFByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9zcGVjaWFsUHJvcGVydGllcycpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0RG90dGVkUGF0aChvYmosIHBhdGgsIHZhbCkge1xuICBpZiAocGF0aC5pbmRleE9mKCcuJykgPT09IC0xKSB7XG4gICAgaWYgKHNwZWNpYWxQcm9wZXJ0aWVzLmhhcyhwYXRoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG9ialtwYXRoXSA9IHZhbDtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgcGFydHMgPSBwYXRoLnNwbGl0KCcuJyk7XG5cbiAgY29uc3QgbGFzdCA9IHBhcnRzLnBvcCgpO1xuICBsZXQgY3VyID0gb2JqO1xuICBmb3IgKGNvbnN0IHBhcnQgb2YgcGFydHMpIHtcbiAgICBpZiAoc3BlY2lhbFByb3BlcnRpZXMuaGFzKHBhcnQpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGN1cltwYXJ0XSA9PSBudWxsKSB7XG4gICAgICBjdXJbcGFydF0gPSB7fTtcbiAgICB9XG5cbiAgICBjdXIgPSBjdXJbcGFydF07XG4gIH1cblxuICBpZiAoIXNwZWNpYWxQcm9wZXJ0aWVzLmhhcyhsYXN0KSkge1xuICAgIGN1cltsYXN0XSA9IHZhbDtcbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/path/setDottedPath.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/pluralize.js":
/*!********************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/pluralize.js ***!
  \********************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\n\nmodule.exports = pluralize;\n\n/**\n * Pluralization rules.\n */\n\nexports.pluralization = [\n  [/human$/gi, 'humans'],\n  [/(m)an$/gi, '$1en'],\n  [/(pe)rson$/gi, '$1ople'],\n  [/(child)$/gi, '$1ren'],\n  [/^(ox)$/gi, '$1en'],\n  [/(ax|test)is$/gi, '$1es'],\n  [/(octop|vir)us$/gi, '$1i'],\n  [/(alias|status)$/gi, '$1es'],\n  [/(bu)s$/gi, '$1ses'],\n  [/(buffal|tomat|potat)o$/gi, '$1oes'],\n  [/([ti])um$/gi, '$1a'],\n  [/sis$/gi, 'ses'],\n  [/(?:([^f])fe|([lr])f)$/gi, '$1$2ves'],\n  [/(hive)$/gi, '$1s'],\n  [/([^aeiouy]|qu)y$/gi, '$1ies'],\n  [/(x|ch|ss|sh)$/gi, '$1es'],\n  [/(matr|vert|ind)ix|ex$/gi, '$1ices'],\n  [/([m|l])ouse$/gi, '$1ice'],\n  [/(kn|w|l)ife$/gi, '$1ives'],\n  [/(quiz)$/gi, '$1zes'],\n  [/^goose$/i, 'geese'],\n  [/s$/gi, 's'],\n  [/([^a-z])$/, '$1'],\n  [/$/gi, 's']\n];\nconst rules = exports.pluralization;\n\n/**\n * Uncountable words.\n *\n * These words are applied while processing the argument to `toCollectionName`.\n * @api public\n */\n\nexports.uncountables = [\n  'advice',\n  'energy',\n  'excretion',\n  'digestion',\n  'cooperation',\n  'health',\n  'justice',\n  'labour',\n  'machinery',\n  'equipment',\n  'information',\n  'pollution',\n  'sewage',\n  'paper',\n  'money',\n  'species',\n  'series',\n  'rain',\n  'rice',\n  'fish',\n  'sheep',\n  'moose',\n  'deer',\n  'news',\n  'expertise',\n  'status',\n  'media'\n];\nconst uncountables = exports.uncountables;\n\n/**\n * Pluralize function.\n *\n * @author TJ Holowaychuk (extracted from _ext.js_)\n * @param {String} string to pluralize\n * @api private\n */\n\nfunction pluralize(str) {\n  let found;\n  str = str.toLowerCase();\n  if (!~uncountables.indexOf(str)) {\n    found = rules.filter(function(rule) {\n      return str.match(rule[0]);\n    });\n    if (found[0]) {\n      return str.replace(found[0][0], found[0][1]);\n    }\n  }\n  return str;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcGx1cmFsaXplLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9wbHVyYWxpemUuanM/MzcxYiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcGx1cmFsaXplO1xuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gcnVsZXMuXG4gKi9cblxuZXhwb3J0cy5wbHVyYWxpemF0aW9uID0gW1xuICBbL2h1bWFuJC9naSwgJ2h1bWFucyddLFxuICBbLyhtKWFuJC9naSwgJyQxZW4nXSxcbiAgWy8ocGUpcnNvbiQvZ2ksICckMW9wbGUnXSxcbiAgWy8oY2hpbGQpJC9naSwgJyQxcmVuJ10sXG4gIFsvXihveCkkL2dpLCAnJDFlbiddLFxuICBbLyhheHx0ZXN0KWlzJC9naSwgJyQxZXMnXSxcbiAgWy8ob2N0b3B8dmlyKXVzJC9naSwgJyQxaSddLFxuICBbLyhhbGlhc3xzdGF0dXMpJC9naSwgJyQxZXMnXSxcbiAgWy8oYnUpcyQvZ2ksICckMXNlcyddLFxuICBbLyhidWZmYWx8dG9tYXR8cG90YXQpbyQvZ2ksICckMW9lcyddLFxuICBbLyhbdGldKXVtJC9naSwgJyQxYSddLFxuICBbL3NpcyQvZ2ksICdzZXMnXSxcbiAgWy8oPzooW15mXSlmZXwoW2xyXSlmKSQvZ2ksICckMSQydmVzJ10sXG4gIFsvKGhpdmUpJC9naSwgJyQxcyddLFxuICBbLyhbXmFlaW91eV18cXUpeSQvZ2ksICckMWllcyddLFxuICBbLyh4fGNofHNzfHNoKSQvZ2ksICckMWVzJ10sXG4gIFsvKG1hdHJ8dmVydHxpbmQpaXh8ZXgkL2dpLCAnJDFpY2VzJ10sXG4gIFsvKFttfGxdKW91c2UkL2dpLCAnJDFpY2UnXSxcbiAgWy8oa258d3xsKWlmZSQvZ2ksICckMWl2ZXMnXSxcbiAgWy8ocXVpeikkL2dpLCAnJDF6ZXMnXSxcbiAgWy9eZ29vc2UkL2ksICdnZWVzZSddLFxuICBbL3MkL2dpLCAncyddLFxuICBbLyhbXmEtel0pJC8sICckMSddLFxuICBbLyQvZ2ksICdzJ11cbl07XG5jb25zdCBydWxlcyA9IGV4cG9ydHMucGx1cmFsaXphdGlvbjtcblxuLyoqXG4gKiBVbmNvdW50YWJsZSB3b3Jkcy5cbiAqXG4gKiBUaGVzZSB3b3JkcyBhcmUgYXBwbGllZCB3aGlsZSBwcm9jZXNzaW5nIHRoZSBhcmd1bWVudCB0byBgdG9Db2xsZWN0aW9uTmFtZWAuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMudW5jb3VudGFibGVzID0gW1xuICAnYWR2aWNlJyxcbiAgJ2VuZXJneScsXG4gICdleGNyZXRpb24nLFxuICAnZGlnZXN0aW9uJyxcbiAgJ2Nvb3BlcmF0aW9uJyxcbiAgJ2hlYWx0aCcsXG4gICdqdXN0aWNlJyxcbiAgJ2xhYm91cicsXG4gICdtYWNoaW5lcnknLFxuICAnZXF1aXBtZW50JyxcbiAgJ2luZm9ybWF0aW9uJyxcbiAgJ3BvbGx1dGlvbicsXG4gICdzZXdhZ2UnLFxuICAncGFwZXInLFxuICAnbW9uZXknLFxuICAnc3BlY2llcycsXG4gICdzZXJpZXMnLFxuICAncmFpbicsXG4gICdyaWNlJyxcbiAgJ2Zpc2gnLFxuICAnc2hlZXAnLFxuICAnbW9vc2UnLFxuICAnZGVlcicsXG4gICduZXdzJyxcbiAgJ2V4cGVydGlzZScsXG4gICdzdGF0dXMnLFxuICAnbWVkaWEnXG5dO1xuY29uc3QgdW5jb3VudGFibGVzID0gZXhwb3J0cy51bmNvdW50YWJsZXM7XG5cbi8qKlxuICogUGx1cmFsaXplIGZ1bmN0aW9uLlxuICpcbiAqIEBhdXRob3IgVEogSG9sb3dheWNodWsgKGV4dHJhY3RlZCBmcm9tIF9leHQuanNfKVxuICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZyB0byBwbHVyYWxpemVcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbGl6ZShzdHIpIHtcbiAgbGV0IGZvdW5kO1xuICBzdHIgPSBzdHIudG9Mb3dlckNhc2UoKTtcbiAgaWYgKCF+dW5jb3VudGFibGVzLmluZGV4T2Yoc3RyKSkge1xuICAgIGZvdW5kID0gcnVsZXMuZmlsdGVyKGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICAgIHJldHVybiBzdHIubWF0Y2gocnVsZVswXSk7XG4gICAgfSk7XG4gICAgaWYgKGZvdW5kWzBdKSB7XG4gICAgICByZXR1cm4gc3RyLnJlcGxhY2UoZm91bmRbMF1bMF0sIGZvdW5kWzBdWzFdKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/pluralize.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/populate/assignRawDocsToIdStructure.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/populate/assignRawDocsToIdStructure.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst clone = __webpack_require__(/*! ../../helpers/clone */ \"(ssr)/./node_modules/mongoose/lib/helpers/clone.js\");\nconst leanPopulateMap = __webpack_require__(/*! ./leanPopulateMap */ \"(ssr)/./node_modules/mongoose/lib/helpers/populate/leanPopulateMap.js\");\nconst modelSymbol = (__webpack_require__(/*! ../symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").modelSymbol);\nconst utils = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\n\nmodule.exports = assignRawDocsToIdStructure;\n\nconst kHasArray = Symbol('mongoose#assignRawDocsToIdStructure#hasArray');\n\n/**\n * Assign `vals` returned by mongo query to the `rawIds`\n * structure returned from utils.getVals() honoring\n * query sort order if specified by user.\n *\n * This can be optimized.\n *\n * Rules:\n *\n *   if the value of the path is not an array, use findOne rules, else find.\n *   for findOne the results are assigned directly to doc path (including null results).\n *   for find, if user specified sort order, results are assigned directly\n *   else documents are put back in original order of array if found in results\n *\n * @param {Array} rawIds\n * @param {Array} resultDocs\n * @param {Array} resultOrder\n * @param {Object} options\n * @param {Boolean} recursed\n * @api private\n */\n\nfunction assignRawDocsToIdStructure(rawIds, resultDocs, resultOrder, options, recursed) {\n  // honor user specified sort order, unless we're populating a single\n  // virtual underneath an array (e.g. populating `employees.mostRecentShift` where\n  // `mostRecentShift` is a virtual with `justOne`)\n  const newOrder = [];\n  const sorting = options.isVirtual && options.justOne && rawIds.length > 1\n    ? false :\n    options.sort && rawIds.length > 1;\n  const nullIfNotFound = options.$nullIfNotFound;\n  let doc;\n  let sid;\n  let id;\n\n  if (utils.isMongooseArray(rawIds)) {\n    rawIds = rawIds.__array;\n  }\n\n  let i = 0;\n  const len = rawIds.length;\n\n  if (sorting && recursed && options[kHasArray] === undefined) {\n    options[kHasArray] = false;\n    for (const key in resultOrder) {\n      if (Array.isArray(resultOrder[key])) {\n        options[kHasArray] = true;\n        break;\n      }\n    }\n  }\n\n  for (i = 0; i < len; ++i) {\n    id = rawIds[i];\n\n    if (Array.isArray(id)) {\n      // handle [ [id0, id2], [id3] ]\n      assignRawDocsToIdStructure(id, resultDocs, resultOrder, options, true);\n      newOrder.push(id);\n      continue;\n    }\n\n    if (id === null && sorting === false) {\n      // keep nulls for findOne unless sorting, which always\n      // removes them (backward compat)\n      newOrder.push(id);\n      continue;\n    }\n\n    sid = String(id);\n    doc = resultDocs[sid];\n    // If user wants separate copies of same doc, use this option\n    if (options.clone && doc != null) {\n      if (options.lean) {\n        const _model = leanPopulateMap.get(doc);\n        doc = clone(doc);\n        leanPopulateMap.set(doc, _model);\n      } else {\n        doc = doc.constructor.hydrate(doc._doc);\n      }\n    }\n\n    if (recursed) {\n      if (doc) {\n        if (sorting) {\n          const _resultOrder = resultOrder[sid];\n          if (options[kHasArray]) {\n            // If result arrays, rely on the MongoDB server response for ordering\n            newOrder.push(doc);\n          } else {\n            newOrder[_resultOrder] = doc;\n          }\n        } else {\n          newOrder.push(doc);\n        }\n      } else if (id != null && id[modelSymbol] != null) {\n        newOrder.push(id);\n      } else {\n        newOrder.push(options.retainNullValues || nullIfNotFound ? null : id);\n      }\n    } else {\n      // apply findOne behavior - if document in results, assign, else assign null\n      newOrder[i] = doc || null;\n    }\n  }\n\n  rawIds.length = 0;\n  if (newOrder.length) {\n    // reassign the documents based on corrected order\n\n    // forEach skips over sparse entries in arrays so we\n    // can safely use this to our advantage dealing with sorted\n    // result sets too.\n    newOrder.forEach(function(doc, i) {\n      rawIds[i] = doc;\n    });\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcG9wdWxhdGUvYXNzaWduUmF3RG9jc1RvSWRTdHJ1Y3R1cmUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLCtFQUFxQjtBQUMzQyx3QkFBd0IsbUJBQU8sQ0FBQyxnR0FBbUI7QUFDbkQsb0JBQW9CLDJHQUFpQztBQUNyRCxjQUFjLG1CQUFPLENBQUMsK0RBQWE7O0FBRW5DOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxjQUFjLFNBQVM7QUFDdkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9wb3B1bGF0ZS9hc3NpZ25SYXdEb2NzVG9JZFN0cnVjdHVyZS5qcz9hMTc4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY2xvbmUgPSByZXF1aXJlKCcuLi8uLi9oZWxwZXJzL2Nsb25lJyk7XG5jb25zdCBsZWFuUG9wdWxhdGVNYXAgPSByZXF1aXJlKCcuL2xlYW5Qb3B1bGF0ZU1hcCcpO1xuY29uc3QgbW9kZWxTeW1ib2wgPSByZXF1aXJlKCcuLi9zeW1ib2xzJykubW9kZWxTeW1ib2w7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzaWduUmF3RG9jc1RvSWRTdHJ1Y3R1cmU7XG5cbmNvbnN0IGtIYXNBcnJheSA9IFN5bWJvbCgnbW9uZ29vc2UjYXNzaWduUmF3RG9jc1RvSWRTdHJ1Y3R1cmUjaGFzQXJyYXknKTtcblxuLyoqXG4gKiBBc3NpZ24gYHZhbHNgIHJldHVybmVkIGJ5IG1vbmdvIHF1ZXJ5IHRvIHRoZSBgcmF3SWRzYFxuICogc3RydWN0dXJlIHJldHVybmVkIGZyb20gdXRpbHMuZ2V0VmFscygpIGhvbm9yaW5nXG4gKiBxdWVyeSBzb3J0IG9yZGVyIGlmIHNwZWNpZmllZCBieSB1c2VyLlxuICpcbiAqIFRoaXMgY2FuIGJlIG9wdGltaXplZC5cbiAqXG4gKiBSdWxlczpcbiAqXG4gKiAgIGlmIHRoZSB2YWx1ZSBvZiB0aGUgcGF0aCBpcyBub3QgYW4gYXJyYXksIHVzZSBmaW5kT25lIHJ1bGVzLCBlbHNlIGZpbmQuXG4gKiAgIGZvciBmaW5kT25lIHRoZSByZXN1bHRzIGFyZSBhc3NpZ25lZCBkaXJlY3RseSB0byBkb2MgcGF0aCAoaW5jbHVkaW5nIG51bGwgcmVzdWx0cykuXG4gKiAgIGZvciBmaW5kLCBpZiB1c2VyIHNwZWNpZmllZCBzb3J0IG9yZGVyLCByZXN1bHRzIGFyZSBhc3NpZ25lZCBkaXJlY3RseVxuICogICBlbHNlIGRvY3VtZW50cyBhcmUgcHV0IGJhY2sgaW4gb3JpZ2luYWwgb3JkZXIgb2YgYXJyYXkgaWYgZm91bmQgaW4gcmVzdWx0c1xuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHJhd0lkc1xuICogQHBhcmFtIHtBcnJheX0gcmVzdWx0RG9jc1xuICogQHBhcmFtIHtBcnJheX0gcmVzdWx0T3JkZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHJlY3Vyc2VkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBhc3NpZ25SYXdEb2NzVG9JZFN0cnVjdHVyZShyYXdJZHMsIHJlc3VsdERvY3MsIHJlc3VsdE9yZGVyLCBvcHRpb25zLCByZWN1cnNlZCkge1xuICAvLyBob25vciB1c2VyIHNwZWNpZmllZCBzb3J0IG9yZGVyLCB1bmxlc3Mgd2UncmUgcG9wdWxhdGluZyBhIHNpbmdsZVxuICAvLyB2aXJ0dWFsIHVuZGVybmVhdGggYW4gYXJyYXkgKGUuZy4gcG9wdWxhdGluZyBgZW1wbG95ZWVzLm1vc3RSZWNlbnRTaGlmdGAgd2hlcmVcbiAgLy8gYG1vc3RSZWNlbnRTaGlmdGAgaXMgYSB2aXJ0dWFsIHdpdGggYGp1c3RPbmVgKVxuICBjb25zdCBuZXdPcmRlciA9IFtdO1xuICBjb25zdCBzb3J0aW5nID0gb3B0aW9ucy5pc1ZpcnR1YWwgJiYgb3B0aW9ucy5qdXN0T25lICYmIHJhd0lkcy5sZW5ndGggPiAxXG4gICAgPyBmYWxzZSA6XG4gICAgb3B0aW9ucy5zb3J0ICYmIHJhd0lkcy5sZW5ndGggPiAxO1xuICBjb25zdCBudWxsSWZOb3RGb3VuZCA9IG9wdGlvbnMuJG51bGxJZk5vdEZvdW5kO1xuICBsZXQgZG9jO1xuICBsZXQgc2lkO1xuICBsZXQgaWQ7XG5cbiAgaWYgKHV0aWxzLmlzTW9uZ29vc2VBcnJheShyYXdJZHMpKSB7XG4gICAgcmF3SWRzID0gcmF3SWRzLl9fYXJyYXk7XG4gIH1cblxuICBsZXQgaSA9IDA7XG4gIGNvbnN0IGxlbiA9IHJhd0lkcy5sZW5ndGg7XG5cbiAgaWYgKHNvcnRpbmcgJiYgcmVjdXJzZWQgJiYgb3B0aW9uc1trSGFzQXJyYXldID09PSB1bmRlZmluZWQpIHtcbiAgICBvcHRpb25zW2tIYXNBcnJheV0gPSBmYWxzZTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiByZXN1bHRPcmRlcikge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0T3JkZXJba2V5XSkpIHtcbiAgICAgICAgb3B0aW9uc1trSGFzQXJyYXldID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWQgPSByYXdJZHNbaV07XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShpZCkpIHtcbiAgICAgIC8vIGhhbmRsZSBbIFtpZDAsIGlkMl0sIFtpZDNdIF1cbiAgICAgIGFzc2lnblJhd0RvY3NUb0lkU3RydWN0dXJlKGlkLCByZXN1bHREb2NzLCByZXN1bHRPcmRlciwgb3B0aW9ucywgdHJ1ZSk7XG4gICAgICBuZXdPcmRlci5wdXNoKGlkKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChpZCA9PT0gbnVsbCAmJiBzb3J0aW5nID09PSBmYWxzZSkge1xuICAgICAgLy8ga2VlcCBudWxscyBmb3IgZmluZE9uZSB1bmxlc3Mgc29ydGluZywgd2hpY2ggYWx3YXlzXG4gICAgICAvLyByZW1vdmVzIHRoZW0gKGJhY2t3YXJkIGNvbXBhdClcbiAgICAgIG5ld09yZGVyLnB1c2goaWQpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgc2lkID0gU3RyaW5nKGlkKTtcbiAgICBkb2MgPSByZXN1bHREb2NzW3NpZF07XG4gICAgLy8gSWYgdXNlciB3YW50cyBzZXBhcmF0ZSBjb3BpZXMgb2Ygc2FtZSBkb2MsIHVzZSB0aGlzIG9wdGlvblxuICAgIGlmIChvcHRpb25zLmNsb25lICYmIGRvYyAhPSBudWxsKSB7XG4gICAgICBpZiAob3B0aW9ucy5sZWFuKSB7XG4gICAgICAgIGNvbnN0IF9tb2RlbCA9IGxlYW5Qb3B1bGF0ZU1hcC5nZXQoZG9jKTtcbiAgICAgICAgZG9jID0gY2xvbmUoZG9jKTtcbiAgICAgICAgbGVhblBvcHVsYXRlTWFwLnNldChkb2MsIF9tb2RlbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb2MgPSBkb2MuY29uc3RydWN0b3IuaHlkcmF0ZShkb2MuX2RvYyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHJlY3Vyc2VkKSB7XG4gICAgICBpZiAoZG9jKSB7XG4gICAgICAgIGlmIChzb3J0aW5nKSB7XG4gICAgICAgICAgY29uc3QgX3Jlc3VsdE9yZGVyID0gcmVzdWx0T3JkZXJbc2lkXTtcbiAgICAgICAgICBpZiAob3B0aW9uc1trSGFzQXJyYXldKSB7XG4gICAgICAgICAgICAvLyBJZiByZXN1bHQgYXJyYXlzLCByZWx5IG9uIHRoZSBNb25nb0RCIHNlcnZlciByZXNwb25zZSBmb3Igb3JkZXJpbmdcbiAgICAgICAgICAgIG5ld09yZGVyLnB1c2goZG9jKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3T3JkZXJbX3Jlc3VsdE9yZGVyXSA9IGRvYztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3T3JkZXIucHVzaChkb2MpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlkICE9IG51bGwgJiYgaWRbbW9kZWxTeW1ib2xdICE9IG51bGwpIHtcbiAgICAgICAgbmV3T3JkZXIucHVzaChpZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdPcmRlci5wdXNoKG9wdGlvbnMucmV0YWluTnVsbFZhbHVlcyB8fCBudWxsSWZOb3RGb3VuZCA/IG51bGwgOiBpZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGFwcGx5IGZpbmRPbmUgYmVoYXZpb3IgLSBpZiBkb2N1bWVudCBpbiByZXN1bHRzLCBhc3NpZ24sIGVsc2UgYXNzaWduIG51bGxcbiAgICAgIG5ld09yZGVyW2ldID0gZG9jIHx8IG51bGw7XG4gICAgfVxuICB9XG5cbiAgcmF3SWRzLmxlbmd0aCA9IDA7XG4gIGlmIChuZXdPcmRlci5sZW5ndGgpIHtcbiAgICAvLyByZWFzc2lnbiB0aGUgZG9jdW1lbnRzIGJhc2VkIG9uIGNvcnJlY3RlZCBvcmRlclxuXG4gICAgLy8gZm9yRWFjaCBza2lwcyBvdmVyIHNwYXJzZSBlbnRyaWVzIGluIGFycmF5cyBzbyB3ZVxuICAgIC8vIGNhbiBzYWZlbHkgdXNlIHRoaXMgdG8gb3VyIGFkdmFudGFnZSBkZWFsaW5nIHdpdGggc29ydGVkXG4gICAgLy8gcmVzdWx0IHNldHMgdG9vLlxuICAgIG5ld09yZGVyLmZvckVhY2goZnVuY3Rpb24oZG9jLCBpKSB7XG4gICAgICByYXdJZHNbaV0gPSBkb2M7XG4gICAgfSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/populate/assignRawDocsToIdStructure.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/populate/assignVals.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/populate/assignVals.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst MongooseMap = __webpack_require__(/*! ../../types/map */ \"(ssr)/./node_modules/mongoose/lib/types/map.js\");\nconst SkipPopulateValue = __webpack_require__(/*! ./skipPopulateValue */ \"(ssr)/./node_modules/mongoose/lib/helpers/populate/skipPopulateValue.js\");\nconst assignRawDocsToIdStructure = __webpack_require__(/*! ./assignRawDocsToIdStructure */ \"(ssr)/./node_modules/mongoose/lib/helpers/populate/assignRawDocsToIdStructure.js\");\nconst get = __webpack_require__(/*! ../get */ \"(ssr)/./node_modules/mongoose/lib/helpers/get.js\");\nconst getVirtual = __webpack_require__(/*! ./getVirtual */ \"(ssr)/./node_modules/mongoose/lib/helpers/populate/getVirtual.js\");\nconst leanPopulateMap = __webpack_require__(/*! ./leanPopulateMap */ \"(ssr)/./node_modules/mongoose/lib/helpers/populate/leanPopulateMap.js\");\nconst lookupLocalFields = __webpack_require__(/*! ./lookupLocalFields */ \"(ssr)/./node_modules/mongoose/lib/helpers/populate/lookupLocalFields.js\");\nconst markArraySubdocsPopulated = __webpack_require__(/*! ./markArraySubdocsPopulated */ \"(ssr)/./node_modules/mongoose/lib/helpers/populate/markArraySubdocsPopulated.js\");\nconst mpath = __webpack_require__(/*! mpath */ \"(ssr)/./node_modules/mpath/index.js\");\nconst sift = (__webpack_require__(/*! sift */ \"(ssr)/./node_modules/sift/es5m/index.js\")[\"default\"]);\nconst utils = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\nconst { populateModelSymbol } = __webpack_require__(/*! ../symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\");\n\nmodule.exports = function assignVals(o) {\n  // Options that aren't explicitly listed in `populateOptions`\n  const userOptions = Object.assign({}, get(o, 'allOptions.options.options'), get(o, 'allOptions.options'));\n  // `o.options` contains options explicitly listed in `populateOptions`, like\n  // `match` and `limit`.\n  const populateOptions = Object.assign({}, o.options, userOptions, {\n    justOne: o.justOne,\n    isVirtual: o.isVirtual\n  });\n  populateOptions.$nullIfNotFound = o.isVirtual;\n  const populatedModel = o.populatedModel;\n\n  const originalIds = [].concat(o.rawIds);\n\n  // replace the original ids in our intermediate _ids structure\n  // with the documents found by query\n  o.allIds = [].concat(o.allIds);\n  assignRawDocsToIdStructure(o.rawIds, o.rawDocs, o.rawOrder, populateOptions);\n\n  // now update the original documents being populated using the\n  // result structure that contains real documents.\n  const docs = o.docs;\n  const rawIds = o.rawIds;\n  const options = o.options;\n  const count = o.count && o.isVirtual;\n  let i;\n  let setValueIndex = 0;\n\n  function setValue(val) {\n    ++setValueIndex;\n    if (count) {\n      return val;\n    }\n    if (val instanceof SkipPopulateValue) {\n      return val.val;\n    }\n    if (val === void 0) {\n      return val;\n    }\n\n    const _allIds = o.allIds[i];\n\n    if (o.path.endsWith('.$*')) {\n      // Skip maps re: gh-12494\n      return valueFilter(val, options, populateOptions, _allIds);\n    }\n\n    if (o.justOne === true && Array.isArray(val)) {\n      // Might be an embedded discriminator (re: gh-9244) with multiple models, so make sure to pick the right\n      // model before assigning.\n      const ret = [];\n      for (const doc of val) {\n        const _docPopulatedModel = leanPopulateMap.get(doc);\n        if (_docPopulatedModel == null || _docPopulatedModel === populatedModel) {\n          ret.push(doc);\n        }\n      }\n      // Since we don't want to have to create a new mongoosearray, make sure to\n      // modify the array in place\n      while (val.length > ret.length) {\n        Array.prototype.pop.apply(val, []);\n      }\n      for (let i = 0; i < ret.length; ++i) {\n        val[i] = ret[i];\n      }\n\n      return valueFilter(val[0], options, populateOptions, _allIds);\n    } else if (o.justOne === false && !Array.isArray(val)) {\n      return valueFilter([val], options, populateOptions, _allIds);\n    } else if (o.justOne === true && !Array.isArray(val) && Array.isArray(_allIds)) {\n      return valueFilter(val, options, populateOptions, val == null ? val : _allIds[setValueIndex - 1]);\n    }\n    return valueFilter(val, options, populateOptions, _allIds);\n  }\n\n  for (i = 0; i < docs.length; ++i) {\n    setValueIndex = 0;\n    const _path = o.path.endsWith('.$*') ? o.path.slice(0, -3) : o.path;\n    const existingVal = mpath.get(_path, docs[i], lookupLocalFields);\n    if (existingVal == null && !getVirtual(o.originalModel.schema, _path)) {\n      continue;\n    }\n\n    let valueToSet;\n    if (count) {\n      valueToSet = numDocs(rawIds[i]);\n    } else if (Array.isArray(o.match)) {\n      valueToSet = Array.isArray(rawIds[i]) ?\n        rawIds[i].filter(sift(o.match[i])) :\n        [rawIds[i]].filter(sift(o.match[i]))[0];\n    } else {\n      valueToSet = rawIds[i];\n    }\n\n    // If we're populating a map, the existing value will be an object, so\n    // we need to transform again\n    const originalSchema = o.originalModel.schema;\n    const isDoc = get(docs[i], '$__', null) != null;\n    let isMap = isDoc ?\n      existingVal instanceof Map :\n      utils.isPOJO(existingVal);\n    // If we pass the first check, also make sure the local field's schematype\n    // is map (re: gh-6460)\n    isMap = isMap && get(originalSchema._getSchema(_path), '$isSchemaMap');\n    if (!o.isVirtual && isMap) {\n      const _keys = existingVal instanceof Map ?\n        Array.from(existingVal.keys()) :\n        Object.keys(existingVal);\n      valueToSet = valueToSet.reduce((cur, v, i) => {\n        cur.set(_keys[i], v);\n        return cur;\n      }, new Map());\n    }\n\n    if (isDoc && Array.isArray(valueToSet)) {\n      for (const val of valueToSet) {\n        if (val != null && val.$__ != null) {\n          val.$__.parent = docs[i];\n        }\n      }\n    } else if (isDoc && valueToSet != null && valueToSet.$__ != null) {\n      valueToSet.$__.parent = docs[i];\n    }\n\n    if (o.isVirtual && isDoc) {\n      docs[i].$populated(_path, o.justOne ? originalIds[0] : originalIds, o.allOptions);\n      // If virtual populate and doc is already init-ed, need to walk through\n      // the actual doc to set rather than setting `_doc` directly\n      if (Array.isArray(valueToSet)) {\n        valueToSet = valueToSet.map(v => v == null ? void 0 : v);\n      }\n      mpath.set(_path, valueToSet, docs[i], void 0, setValue, false);\n      continue;\n    }\n\n    const parts = _path.split('.');\n    let cur = docs[i];\n    for (let j = 0; j < parts.length - 1; ++j) {\n      // If we get to an array with a dotted path, like `arr.foo`, don't set\n      // `foo` on the array.\n      if (Array.isArray(cur) && !utils.isArrayIndex(parts[j])) {\n        break;\n      }\n\n      if (parts[j] === '$*') {\n        break;\n      }\n\n      if (cur[parts[j]] == null) {\n        // If nothing to set, avoid creating an unnecessary array. Otherwise\n        // we'll end up with a single doc in the array with only defaults.\n        // See gh-8342, gh-8455\n        const curPath = parts.slice(0, j + 1).join('.');\n        const schematype = originalSchema._getSchema(curPath);\n        if (valueToSet == null && schematype != null && schematype.$isMongooseArray) {\n          break;\n        }\n        cur[parts[j]] = {};\n      }\n      cur = cur[parts[j]];\n      // If the property in MongoDB is a primitive, we won't be able to populate\n      // the nested path, so skip it. See gh-7545\n      if (typeof cur !== 'object') {\n        break;\n      }\n    }\n    if (docs[i].$__) {\n      o.allOptions.options[populateModelSymbol] = o.allOptions.model;\n      docs[i].$populated(_path, o.unpopulatedValues[i], o.allOptions.options);\n\n      if (valueToSet != null && valueToSet.$__ != null) {\n        valueToSet.$__.wasPopulated = { value: o.unpopulatedValues[i] };\n      }\n\n      if (valueToSet instanceof Map && !valueToSet.$isMongooseMap) {\n        valueToSet = new MongooseMap(valueToSet, _path, docs[i], docs[i].schema.path(_path).$__schemaType);\n      }\n    }\n\n    // If lean, need to check that each individual virtual respects\n    // `justOne`, because you may have a populated virtual with `justOne`\n    // underneath an array. See gh-6867\n    mpath.set(_path, valueToSet, docs[i], lookupLocalFields, setValue, false);\n\n    if (docs[i].$__) {\n      markArraySubdocsPopulated(docs[i], [o.allOptions.options]);\n    }\n  }\n};\n\nfunction numDocs(v) {\n  if (Array.isArray(v)) {\n    // If setting underneath an array of populated subdocs, we may have an\n    // array of arrays. See gh-7573\n    if (v.some(el => Array.isArray(el) || el === null)) {\n      return v.map(el => {\n        if (el == null) {\n          return 0;\n        }\n        if (Array.isArray(el)) {\n          return el.filter(el => el != null).length;\n        }\n        return 1;\n      });\n    }\n    return v.filter(el => el != null).length;\n  }\n  return v == null ? 0 : 1;\n}\n\n/**\n * 1) Apply backwards compatible find/findOne behavior to sub documents\n *\n *    find logic:\n *      a) filter out non-documents\n *      b) remove _id from sub docs when user specified\n *\n *    findOne\n *      a) if no doc found, set to null\n *      b) remove _id from sub docs when user specified\n *\n * 2) Remove _ids when specified by users query.\n *\n * background:\n * _ids are left in the query even when user excludes them so\n * that population mapping can occur.\n * @param {Any} val\n * @param {Object} assignmentOpts\n * @param {Object} populateOptions\n * @param {Function} [populateOptions.transform]\n * @param {Boolean} allIds\n * @api private\n */\n\nfunction valueFilter(val, assignmentOpts, populateOptions, allIds) {\n  const userSpecifiedTransform = typeof populateOptions.transform === 'function';\n  const transform = userSpecifiedTransform ? populateOptions.transform : noop;\n  if (Array.isArray(val)) {\n    // find logic\n    const ret = [];\n    const numValues = val.length;\n    for (let i = 0; i < numValues; ++i) {\n      let subdoc = val[i];\n      const _allIds = Array.isArray(allIds) ? allIds[i] : allIds;\n      if (!isPopulatedObject(subdoc) && (!populateOptions.retainNullValues || subdoc != null) && !userSpecifiedTransform) {\n        continue;\n      } else if (!populateOptions.retainNullValues && subdoc == null) {\n        continue;\n      } else if (userSpecifiedTransform) {\n        subdoc = transform(isPopulatedObject(subdoc) ? subdoc : null, _allIds);\n      }\n      maybeRemoveId(subdoc, assignmentOpts);\n      ret.push(subdoc);\n      if (assignmentOpts.originalLimit &&\n          ret.length >= assignmentOpts.originalLimit) {\n        break;\n      }\n    }\n\n    const rLen = ret.length;\n    // Since we don't want to have to create a new mongoosearray, make sure to\n    // modify the array in place\n    while (val.length > rLen) {\n      Array.prototype.pop.apply(val, []);\n    }\n    let i = 0;\n    if (utils.isMongooseArray(val)) {\n      for (i = 0; i < rLen; ++i) {\n        val.set(i, ret[i], true);\n      }\n    } else {\n      for (i = 0; i < rLen; ++i) {\n        val[i] = ret[i];\n      }\n    }\n    return val;\n  }\n\n  // findOne\n  if (isPopulatedObject(val) || utils.isPOJO(val)) {\n    maybeRemoveId(val, assignmentOpts);\n    return transform(val, allIds);\n  }\n  if (val instanceof Map) {\n    return val;\n  }\n\n  if (populateOptions.justOne === false) {\n    return [];\n  }\n\n  return val == null ? transform(val, allIds) : transform(null, allIds);\n}\n\n/**\n * Remove _id from `subdoc` if user specified \"lean\" query option\n * @param {Document} subdoc\n * @param {Object} assignmentOpts\n * @api private\n */\n\nfunction maybeRemoveId(subdoc, assignmentOpts) {\n  if (subdoc != null && assignmentOpts.excludeId) {\n    if (typeof subdoc.$__setValue === 'function') {\n      delete subdoc._doc._id;\n    } else {\n      delete subdoc._id;\n    }\n  }\n}\n\n/**\n * Determine if `obj` is something we can set a populated path to. Can be a\n * document, a lean document, or an array/map that contains docs.\n * @param {Any} obj\n * @api private\n */\n\nfunction isPopulatedObject(obj) {\n  if (obj == null) {\n    return false;\n  }\n\n  return Array.isArray(obj) ||\n    obj.$isMongooseMap ||\n    obj.$__ != null ||\n    leanPopulateMap.has(obj);\n}\n\nfunction noop(v) {\n  return v;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/populate/assignVals.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/populate/createPopulateQueryFilter.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/populate/createPopulateQueryFilter.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst SkipPopulateValue = __webpack_require__(/*! ./skipPopulateValue */ \"(ssr)/./node_modules/mongoose/lib/helpers/populate/skipPopulateValue.js\");\nconst parentPaths = __webpack_require__(/*! ../path/parentPaths */ \"(ssr)/./node_modules/mongoose/lib/helpers/path/parentPaths.js\");\nconst { trusted } = __webpack_require__(/*! ../query/trusted */ \"(ssr)/./node_modules/mongoose/lib/helpers/query/trusted.js\");\nconst hasDollarKeys = __webpack_require__(/*! ../query/hasDollarKeys */ \"(ssr)/./node_modules/mongoose/lib/helpers/query/hasDollarKeys.js\");\n\nmodule.exports = function createPopulateQueryFilter(ids, _match, _foreignField, model, skipInvalidIds) {\n  const match = _formatMatch(_match);\n\n  if (_foreignField.size === 1) {\n    const foreignField = Array.from(_foreignField)[0];\n    const foreignSchemaType = model.schema.path(foreignField);\n    if (foreignField !== '_id' || !match['_id']) {\n      ids = _filterInvalidIds(ids, foreignSchemaType, skipInvalidIds);\n      match[foreignField] = trusted({ $in: ids });\n    } else if (foreignField === '_id' && match['_id']) {\n      const userSpecifiedMatch = hasDollarKeys(match[foreignField]) ?\n        match[foreignField] :\n        { $eq: match[foreignField] };\n      match[foreignField] = { ...trusted({ $in: ids }), ...userSpecifiedMatch };\n    }\n\n    const _parentPaths = parentPaths(foreignField);\n    for (let i = 0; i < _parentPaths.length - 1; ++i) {\n      const cur = _parentPaths[i];\n      if (match[cur] != null && match[cur].$elemMatch != null) {\n        match[cur].$elemMatch[foreignField.slice(cur.length + 1)] = trusted({ $in: ids });\n        delete match[foreignField];\n        break;\n      }\n    }\n  } else {\n    const $or = [];\n    if (Array.isArray(match.$or)) {\n      match.$and = [{ $or: match.$or }, { $or: $or }];\n      delete match.$or;\n    } else {\n      match.$or = $or;\n    }\n    for (const foreignField of _foreignField) {\n      if (foreignField !== '_id' || !match['_id']) {\n        const foreignSchemaType = model.schema.path(foreignField);\n        ids = _filterInvalidIds(ids, foreignSchemaType, skipInvalidIds);\n        $or.push({ [foreignField]: { $in: ids } });\n      } else if (foreignField === '_id' && match['_id']) {\n        const userSpecifiedMatch = hasDollarKeys(match[foreignField]) ?\n          match[foreignField] :\n          { $eq: match[foreignField] };\n        match[foreignField] = { ...trusted({ $in: ids }), ...userSpecifiedMatch };\n      }\n    }\n  }\n\n  return match;\n};\n\n/**\n * Optionally filter out invalid ids that don't conform to foreign field's schema\n * to avoid cast errors (gh-7706)\n * @param {Array} ids\n * @param {SchemaType} foreignSchemaType\n * @param {Boolean} [skipInvalidIds]\n * @api private\n */\n\nfunction _filterInvalidIds(ids, foreignSchemaType, skipInvalidIds) {\n  ids = ids.filter(v => !(v instanceof SkipPopulateValue));\n  if (!skipInvalidIds) {\n    return ids;\n  }\n  return ids.filter(id => {\n    try {\n      foreignSchemaType.cast(id);\n      return true;\n    } catch (err) {\n      return false;\n    }\n  });\n}\n\n/**\n * Format `mod.match` given that it may be an array that we need to $or if\n * the client has multiple docs with match functions\n * @param {Array|Any} match\n * @api private\n */\n\nfunction _formatMatch(match) {\n  if (Array.isArray(match)) {\n    if (match.length > 1) {\n      return { $or: [].concat(match.map(m => Object.assign({}, m))) };\n    }\n    return Object.assign({}, match[0]);\n  }\n  return Object.assign({}, match);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcG9wdWxhdGUvY3JlYXRlUG9wdWxhdGVRdWVyeUZpbHRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiwwQkFBMEIsbUJBQU8sQ0FBQyxvR0FBcUI7QUFDdkQsb0JBQW9CLG1CQUFPLENBQUMsMEZBQXFCO0FBQ2pELFFBQVEsVUFBVSxFQUFFLG1CQUFPLENBQUMsb0ZBQWtCO0FBQzlDLHNCQUFzQixtQkFBTyxDQUFDLGdHQUF3Qjs7QUFFdEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLFVBQVU7QUFDaEQsTUFBTTtBQUNOO0FBQ0E7QUFDQSxVQUFVO0FBQ1YsOEJBQThCLGFBQWEsVUFBVTtBQUNyRDs7QUFFQTtBQUNBLG9CQUFvQiw2QkFBNkI7QUFDakQ7QUFDQTtBQUNBLDhFQUE4RSxVQUFVO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxzQkFBc0IsZ0JBQWdCLElBQUksVUFBVTtBQUNwRDtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsa0JBQWtCLFlBQVk7QUFDakQsUUFBUTtBQUNSO0FBQ0E7QUFDQSxZQUFZO0FBQ1osZ0NBQWdDLGFBQWEsVUFBVTtBQUN2RDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxZQUFZO0FBQ3ZCLFdBQVcsU0FBUztBQUNwQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsV0FBVztBQUN0QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsOENBQThDO0FBQzdEO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0EseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9wb3B1bGF0ZS9jcmVhdGVQb3B1bGF0ZVF1ZXJ5RmlsdGVyLmpzPzQ5MjEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBTa2lwUG9wdWxhdGVWYWx1ZSA9IHJlcXVpcmUoJy4vc2tpcFBvcHVsYXRlVmFsdWUnKTtcbmNvbnN0IHBhcmVudFBhdGhzID0gcmVxdWlyZSgnLi4vcGF0aC9wYXJlbnRQYXRocycpO1xuY29uc3QgeyB0cnVzdGVkIH0gPSByZXF1aXJlKCcuLi9xdWVyeS90cnVzdGVkJyk7XG5jb25zdCBoYXNEb2xsYXJLZXlzID0gcmVxdWlyZSgnLi4vcXVlcnkvaGFzRG9sbGFyS2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZVBvcHVsYXRlUXVlcnlGaWx0ZXIoaWRzLCBfbWF0Y2gsIF9mb3JlaWduRmllbGQsIG1vZGVsLCBza2lwSW52YWxpZElkcykge1xuICBjb25zdCBtYXRjaCA9IF9mb3JtYXRNYXRjaChfbWF0Y2gpO1xuXG4gIGlmIChfZm9yZWlnbkZpZWxkLnNpemUgPT09IDEpIHtcbiAgICBjb25zdCBmb3JlaWduRmllbGQgPSBBcnJheS5mcm9tKF9mb3JlaWduRmllbGQpWzBdO1xuICAgIGNvbnN0IGZvcmVpZ25TY2hlbWFUeXBlID0gbW9kZWwuc2NoZW1hLnBhdGgoZm9yZWlnbkZpZWxkKTtcbiAgICBpZiAoZm9yZWlnbkZpZWxkICE9PSAnX2lkJyB8fCAhbWF0Y2hbJ19pZCddKSB7XG4gICAgICBpZHMgPSBfZmlsdGVySW52YWxpZElkcyhpZHMsIGZvcmVpZ25TY2hlbWFUeXBlLCBza2lwSW52YWxpZElkcyk7XG4gICAgICBtYXRjaFtmb3JlaWduRmllbGRdID0gdHJ1c3RlZCh7ICRpbjogaWRzIH0pO1xuICAgIH0gZWxzZSBpZiAoZm9yZWlnbkZpZWxkID09PSAnX2lkJyAmJiBtYXRjaFsnX2lkJ10pIHtcbiAgICAgIGNvbnN0IHVzZXJTcGVjaWZpZWRNYXRjaCA9IGhhc0RvbGxhcktleXMobWF0Y2hbZm9yZWlnbkZpZWxkXSkgP1xuICAgICAgICBtYXRjaFtmb3JlaWduRmllbGRdIDpcbiAgICAgICAgeyAkZXE6IG1hdGNoW2ZvcmVpZ25GaWVsZF0gfTtcbiAgICAgIG1hdGNoW2ZvcmVpZ25GaWVsZF0gPSB7IC4uLnRydXN0ZWQoeyAkaW46IGlkcyB9KSwgLi4udXNlclNwZWNpZmllZE1hdGNoIH07XG4gICAgfVxuXG4gICAgY29uc3QgX3BhcmVudFBhdGhzID0gcGFyZW50UGF0aHMoZm9yZWlnbkZpZWxkKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IF9wYXJlbnRQYXRocy5sZW5ndGggLSAxOyArK2kpIHtcbiAgICAgIGNvbnN0IGN1ciA9IF9wYXJlbnRQYXRoc1tpXTtcbiAgICAgIGlmIChtYXRjaFtjdXJdICE9IG51bGwgJiYgbWF0Y2hbY3VyXS4kZWxlbU1hdGNoICE9IG51bGwpIHtcbiAgICAgICAgbWF0Y2hbY3VyXS4kZWxlbU1hdGNoW2ZvcmVpZ25GaWVsZC5zbGljZShjdXIubGVuZ3RoICsgMSldID0gdHJ1c3RlZCh7ICRpbjogaWRzIH0pO1xuICAgICAgICBkZWxldGUgbWF0Y2hbZm9yZWlnbkZpZWxkXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnN0ICRvciA9IFtdO1xuICAgIGlmIChBcnJheS5pc0FycmF5KG1hdGNoLiRvcikpIHtcbiAgICAgIG1hdGNoLiRhbmQgPSBbeyAkb3I6IG1hdGNoLiRvciB9LCB7ICRvcjogJG9yIH1dO1xuICAgICAgZGVsZXRlIG1hdGNoLiRvcjtcbiAgICB9IGVsc2Uge1xuICAgICAgbWF0Y2guJG9yID0gJG9yO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGZvcmVpZ25GaWVsZCBvZiBfZm9yZWlnbkZpZWxkKSB7XG4gICAgICBpZiAoZm9yZWlnbkZpZWxkICE9PSAnX2lkJyB8fCAhbWF0Y2hbJ19pZCddKSB7XG4gICAgICAgIGNvbnN0IGZvcmVpZ25TY2hlbWFUeXBlID0gbW9kZWwuc2NoZW1hLnBhdGgoZm9yZWlnbkZpZWxkKTtcbiAgICAgICAgaWRzID0gX2ZpbHRlckludmFsaWRJZHMoaWRzLCBmb3JlaWduU2NoZW1hVHlwZSwgc2tpcEludmFsaWRJZHMpO1xuICAgICAgICAkb3IucHVzaCh7IFtmb3JlaWduRmllbGRdOiB7ICRpbjogaWRzIH0gfSk7XG4gICAgICB9IGVsc2UgaWYgKGZvcmVpZ25GaWVsZCA9PT0gJ19pZCcgJiYgbWF0Y2hbJ19pZCddKSB7XG4gICAgICAgIGNvbnN0IHVzZXJTcGVjaWZpZWRNYXRjaCA9IGhhc0RvbGxhcktleXMobWF0Y2hbZm9yZWlnbkZpZWxkXSkgP1xuICAgICAgICAgIG1hdGNoW2ZvcmVpZ25GaWVsZF0gOlxuICAgICAgICAgIHsgJGVxOiBtYXRjaFtmb3JlaWduRmllbGRdIH07XG4gICAgICAgIG1hdGNoW2ZvcmVpZ25GaWVsZF0gPSB7IC4uLnRydXN0ZWQoeyAkaW46IGlkcyB9KSwgLi4udXNlclNwZWNpZmllZE1hdGNoIH07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1hdGNoO1xufTtcblxuLyoqXG4gKiBPcHRpb25hbGx5IGZpbHRlciBvdXQgaW52YWxpZCBpZHMgdGhhdCBkb24ndCBjb25mb3JtIHRvIGZvcmVpZ24gZmllbGQncyBzY2hlbWFcbiAqIHRvIGF2b2lkIGNhc3QgZXJyb3JzIChnaC03NzA2KVxuICogQHBhcmFtIHtBcnJheX0gaWRzXG4gKiBAcGFyYW0ge1NjaGVtYVR5cGV9IGZvcmVpZ25TY2hlbWFUeXBlXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtza2lwSW52YWxpZElkc11cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIF9maWx0ZXJJbnZhbGlkSWRzKGlkcywgZm9yZWlnblNjaGVtYVR5cGUsIHNraXBJbnZhbGlkSWRzKSB7XG4gIGlkcyA9IGlkcy5maWx0ZXIodiA9PiAhKHYgaW5zdGFuY2VvZiBTa2lwUG9wdWxhdGVWYWx1ZSkpO1xuICBpZiAoIXNraXBJbnZhbGlkSWRzKSB7XG4gICAgcmV0dXJuIGlkcztcbiAgfVxuICByZXR1cm4gaWRzLmZpbHRlcihpZCA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGZvcmVpZ25TY2hlbWFUeXBlLmNhc3QoaWQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBGb3JtYXQgYG1vZC5tYXRjaGAgZ2l2ZW4gdGhhdCBpdCBtYXkgYmUgYW4gYXJyYXkgdGhhdCB3ZSBuZWVkIHRvICRvciBpZlxuICogdGhlIGNsaWVudCBoYXMgbXVsdGlwbGUgZG9jcyB3aXRoIG1hdGNoIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtBcnJheXxBbnl9IG1hdGNoXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBfZm9ybWF0TWF0Y2gobWF0Y2gpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkobWF0Y2gpKSB7XG4gICAgaWYgKG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJldHVybiB7ICRvcjogW10uY29uY2F0KG1hdGNoLm1hcChtID0+IE9iamVjdC5hc3NpZ24oe30sIG0pKSkgfTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIG1hdGNoWzBdKTtcbiAgfVxuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgbWF0Y2gpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/populate/createPopulateQueryFilter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/populate/getModelsMapForPopulate.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/populate/getModelsMapForPopulate.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst MongooseError = __webpack_require__(/*! ../../error/index */ \"(ssr)/./node_modules/mongoose/lib/error/index.js\");\nconst SkipPopulateValue = __webpack_require__(/*! ./skipPopulateValue */ \"(ssr)/./node_modules/mongoose/lib/helpers/populate/skipPopulateValue.js\");\nconst clone = __webpack_require__(/*! ../clone */ \"(ssr)/./node_modules/mongoose/lib/helpers/clone.js\");\nconst get = __webpack_require__(/*! ../get */ \"(ssr)/./node_modules/mongoose/lib/helpers/get.js\");\nconst getDiscriminatorByValue = __webpack_require__(/*! ../discriminator/getDiscriminatorByValue */ \"(ssr)/./node_modules/mongoose/lib/helpers/discriminator/getDiscriminatorByValue.js\");\nconst getConstructorName = __webpack_require__(/*! ../getConstructorName */ \"(ssr)/./node_modules/mongoose/lib/helpers/getConstructorName.js\");\nconst getSchemaTypes = __webpack_require__(/*! ./getSchemaTypes */ \"(ssr)/./node_modules/mongoose/lib/helpers/populate/getSchemaTypes.js\");\nconst getVirtual = __webpack_require__(/*! ./getVirtual */ \"(ssr)/./node_modules/mongoose/lib/helpers/populate/getVirtual.js\");\nconst lookupLocalFields = __webpack_require__(/*! ./lookupLocalFields */ \"(ssr)/./node_modules/mongoose/lib/helpers/populate/lookupLocalFields.js\");\nconst mpath = __webpack_require__(/*! mpath */ \"(ssr)/./node_modules/mpath/index.js\");\nconst modelNamesFromRefPath = __webpack_require__(/*! ./modelNamesFromRefPath */ \"(ssr)/./node_modules/mongoose/lib/helpers/populate/modelNamesFromRefPath.js\");\nconst utils = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\n\nconst modelSymbol = (__webpack_require__(/*! ../symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").modelSymbol);\nconst populateModelSymbol = (__webpack_require__(/*! ../symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").populateModelSymbol);\nconst schemaMixedSymbol = (__webpack_require__(/*! ../../schema/symbols */ \"(ssr)/./node_modules/mongoose/lib/schema/symbols.js\").schemaMixedSymbol);\nconst StrictPopulate = __webpack_require__(/*! ../../error/strictPopulate */ \"(ssr)/./node_modules/mongoose/lib/error/strictPopulate.js\");\n\nmodule.exports = function getModelsMapForPopulate(model, docs, options) {\n  let doc;\n  const len = docs.length;\n  const map = [];\n  const modelNameFromQuery = options.model && options.model.modelName || options.model;\n  let schema;\n  let refPath;\n  let modelNames;\n  const available = {};\n\n  const modelSchema = model.schema;\n\n  // Populating a nested path should always be a no-op re: #9073.\n  // People shouldn't do this, but apparently they do.\n  if (options._localModel != null && options._localModel.schema.nested[options.path]) {\n    return [];\n  }\n\n  const _virtualRes = getVirtual(model.schema, options.path);\n  const virtual = _virtualRes == null ? null : _virtualRes.virtual;\n  if (virtual != null) {\n    return _virtualPopulate(model, docs, options, _virtualRes);\n  }\n\n  let allSchemaTypes = getSchemaTypes(model, modelSchema, null, options.path);\n  allSchemaTypes = Array.isArray(allSchemaTypes) ? allSchemaTypes : [allSchemaTypes].filter(v => v != null);\n\n  const isStrictPopulateDisabled = options.strictPopulate === false || options.options?.strictPopulate === false;\n  if (!isStrictPopulateDisabled && allSchemaTypes.length === 0 && options._localModel != null) {\n    return new StrictPopulate(options._fullPath || options.path);\n  }\n\n  for (let i = 0; i < len; i++) {\n    doc = docs[i];\n    let justOne = null;\n\n    const docSchema = doc != null && doc.$__ != null ? doc.$__schema : modelSchema;\n    schema = getSchemaTypes(model, docSchema, doc, options.path);\n\n    // Special case: populating a path that's a DocumentArray unless\n    // there's an explicit `ref` or `refPath` re: gh-8946\n    if (schema != null &&\n        schema.$isMongooseDocumentArray &&\n        schema.options.ref == null &&\n        schema.options.refPath == null) {\n      continue;\n    }\n    const isUnderneathDocArray = schema && schema.$parentSchemaDocArray;\n    if (isUnderneathDocArray && get(options, 'options.sort') != null) {\n      return new MongooseError('Cannot populate with `sort` on path ' + options.path +\n        ' because it is a subproperty of a document array');\n    }\n\n    modelNames = null;\n    let isRefPath = false;\n    let normalizedRefPath = null;\n    let schemaOptions = null;\n    let modelNamesInOrder = null;\n\n    if (schema != null && schema.instance === 'Embedded') {\n      if (schema.options.ref) {\n        const data = {\n          localField: options.path + '._id',\n          foreignField: '_id',\n          justOne: true\n        };\n        const res = _getModelNames(doc, schema, modelNameFromQuery, model);\n\n        const unpopulatedValue = mpath.get(options.path, doc);\n        const id = mpath.get('_id', unpopulatedValue);\n        addModelNamesToMap(model, map, available, res.modelNames, options, data, id, doc, schemaOptions, unpopulatedValue);\n      }\n      // No-op if no `ref` set. See gh-11538\n      continue;\n    }\n\n    if (Array.isArray(schema)) {\n      const schemasArray = schema;\n      for (const _schema of schemasArray) {\n        let _modelNames;\n        let res;\n        try {\n          res = _getModelNames(doc, _schema, modelNameFromQuery, model);\n          _modelNames = res.modelNames;\n          isRefPath = isRefPath || res.isRefPath;\n          normalizedRefPath = normalizedRefPath || res.refPath;\n          justOne = res.justOne;\n        } catch (error) {\n          return error;\n        }\n\n        if (isRefPath && !res.isRefPath) {\n          continue;\n        }\n        if (!_modelNames) {\n          continue;\n        }\n        modelNames = modelNames || [];\n        for (const modelName of _modelNames) {\n          if (modelNames.indexOf(modelName) === -1) {\n            modelNames.push(modelName);\n          }\n        }\n      }\n    } else {\n      try {\n        const res = _getModelNames(doc, schema, modelNameFromQuery, model);\n        modelNames = res.modelNames;\n        isRefPath = res.isRefPath;\n        normalizedRefPath = normalizedRefPath || res.refPath;\n        justOne = res.justOne;\n        schemaOptions = get(schema, 'options.populate', null);\n        // Dedupe, because `refPath` can return duplicates of the same model name,\n        // and that causes perf issues.\n        if (isRefPath) {\n          modelNamesInOrder = modelNames;\n          modelNames = Array.from(new Set(modelNames));\n        }\n      } catch (error) {\n        return error;\n      }\n\n      if (!modelNames) {\n        continue;\n      }\n    }\n\n    const data = {};\n    const localField = options.path;\n    const foreignField = '_id';\n\n    // `justOne = null` means we don't know from the schema whether the end\n    // result should be an array or a single doc. This can result from\n    // populating a POJO using `Model.populate()`\n    if ('justOne' in options && options.justOne !== void 0) {\n      justOne = options.justOne;\n    } else if (schema && !schema[schemaMixedSymbol]) {\n      // Skip Mixed types because we explicitly don't do casting on those.\n      if (options.path.endsWith('.' + schema.path) || options.path === schema.path) {\n        justOne = Array.isArray(schema) ?\n          schema.every(schema => !schema.$isMongooseArray) :\n          !schema.$isMongooseArray;\n      }\n    }\n\n    if (!modelNames) {\n      continue;\n    }\n\n    data.isVirtual = false;\n    data.justOne = justOne;\n    data.localField = localField;\n    data.foreignField = foreignField;\n\n    // Get local fields\n    const ret = _getLocalFieldValues(doc, localField, model, options, null, schema);\n\n    const id = String(utils.getValue(foreignField, doc));\n    options._docs[id] = Array.isArray(ret) ? ret.slice() : ret;\n\n    let match = get(options, 'match', null);\n\n    const hasMatchFunction = typeof match === 'function';\n    if (hasMatchFunction) {\n      match = match.call(doc, doc);\n    }\n    data.match = match;\n    data.hasMatchFunction = hasMatchFunction;\n    data.isRefPath = isRefPath;\n    data.modelNamesInOrder = modelNamesInOrder;\n\n    if (isRefPath) {\n      const embeddedDiscriminatorModelNames = _findRefPathForDiscriminators(doc,\n        modelSchema, data, options, normalizedRefPath, ret);\n\n      modelNames = embeddedDiscriminatorModelNames || modelNames;\n    }\n\n    try {\n      addModelNamesToMap(model, map, available, modelNames, options, data, ret, doc, schemaOptions);\n    } catch (err) {\n      return err;\n    }\n  }\n  return map;\n\n  function _getModelNames(doc, schema, modelNameFromQuery, model) {\n    let modelNames;\n    let isRefPath = false;\n    let justOne = null;\n\n    const originalSchema = schema;\n    if (schema && schema.instance === 'Array') {\n      schema = schema.caster;\n    }\n    if (schema && schema.$isSchemaMap) {\n      schema = schema.$__schemaType;\n    }\n\n    const ref = schema && schema.options && schema.options.ref;\n    refPath = schema && schema.options && schema.options.refPath;\n    if (schema != null &&\n        schema[schemaMixedSymbol] &&\n        !ref &&\n        !refPath &&\n        !modelNameFromQuery) {\n      return { modelNames: null };\n    }\n\n    if (modelNameFromQuery) {\n      modelNames = [modelNameFromQuery]; // query options\n    } else if (refPath != null) {\n      if (typeof refPath === 'function') {\n        const subdocPath = options.path.slice(0, options.path.length - schema.path.length - 1);\n        const vals = mpath.get(subdocPath, doc, lookupLocalFields);\n        const subdocsBeingPopulated = Array.isArray(vals) ?\n          utils.array.flatten(vals) :\n          (vals ? [vals] : []);\n\n        modelNames = new Set();\n        for (const subdoc of subdocsBeingPopulated) {\n          refPath = refPath.call(subdoc, subdoc, options.path);\n          modelNamesFromRefPath(refPath, doc, options.path, modelSchema, options._queryProjection).\n            forEach(name => modelNames.add(name));\n        }\n        modelNames = Array.from(modelNames);\n      } else {\n        modelNames = modelNamesFromRefPath(refPath, doc, options.path, modelSchema, options._queryProjection);\n      }\n\n      isRefPath = true;\n    } else {\n      let ref;\n      let refPath;\n      let schemaForCurrentDoc;\n      let discriminatorValue;\n      let modelForCurrentDoc = model;\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (!schema && discriminatorKey && (discriminatorValue = utils.getValue(discriminatorKey, doc))) {\n        // `modelNameForFind` is the discriminator value, so we might need\n        // find the discriminated model name\n        const discriminatorModel = getDiscriminatorByValue(model.discriminators, discriminatorValue) || model;\n        if (discriminatorModel != null) {\n          modelForCurrentDoc = discriminatorModel;\n        } else {\n          try {\n            modelForCurrentDoc = _getModelFromConn(model.db, discriminatorValue);\n          } catch (error) {\n            return error;\n          }\n        }\n\n        schemaForCurrentDoc = modelForCurrentDoc.schema._getSchema(options.path);\n\n        if (schemaForCurrentDoc && schemaForCurrentDoc.caster) {\n          schemaForCurrentDoc = schemaForCurrentDoc.caster;\n        }\n      } else {\n        schemaForCurrentDoc = schema;\n      }\n\n      if (originalSchema && originalSchema.path.endsWith('.$*')) {\n        justOne = !originalSchema.$isMongooseArray && !originalSchema._arrayPath;\n      } else if (schemaForCurrentDoc != null) {\n        justOne = !schemaForCurrentDoc.$isMongooseArray && !schemaForCurrentDoc._arrayPath;\n      }\n\n      if ((ref = get(schemaForCurrentDoc, 'options.ref')) != null) {\n        if (schemaForCurrentDoc != null &&\n            typeof ref === 'function' &&\n            options.path.endsWith('.' + schemaForCurrentDoc.path)) {\n          // Ensure correct context for ref functions: subdoc, not top-level doc. See gh-8469\n          modelNames = new Set();\n\n          const subdocPath = options.path.slice(0, options.path.length - schemaForCurrentDoc.path.length - 1);\n          const vals = mpath.get(subdocPath, doc, lookupLocalFields);\n          const subdocsBeingPopulated = Array.isArray(vals) ?\n            utils.array.flatten(vals) :\n            (vals ? [vals] : []);\n          for (const subdoc of subdocsBeingPopulated) {\n            modelNames.add(handleRefFunction(ref, subdoc));\n          }\n\n          if (subdocsBeingPopulated.length === 0) {\n            modelNames = [handleRefFunction(ref, doc)];\n          } else {\n            modelNames = Array.from(modelNames);\n          }\n        } else {\n          ref = handleRefFunction(ref, doc);\n          modelNames = [ref];\n        }\n      } else if ((schemaForCurrentDoc = get(schema, 'options.refPath')) != null) {\n        isRefPath = true;\n        if (typeof refPath === 'function') {\n          const subdocPath = options.path.slice(0, options.path.length - schemaForCurrentDoc.path.length - 1);\n          const vals = mpath.get(subdocPath, doc, lookupLocalFields);\n          const subdocsBeingPopulated = Array.isArray(vals) ?\n            utils.array.flatten(vals) :\n            (vals ? [vals] : []);\n\n          modelNames = new Set();\n          for (const subdoc of subdocsBeingPopulated) {\n            refPath = refPath.call(subdoc, subdoc, options.path);\n            modelNamesFromRefPath(refPath, doc, options.path, modelSchema, options._queryProjection).\n              forEach(name => modelNames.add(name));\n          }\n          modelNames = Array.from(modelNames);\n        } else {\n          modelNames = modelNamesFromRefPath(refPath, doc, options.path, modelSchema, options._queryProjection);\n        }\n      }\n    }\n\n    if (!modelNames) {\n      // `Model.populate()` on a POJO with no known local model. Default to using the `Model`\n      if (options._localModel == null) {\n        modelNames = [model.modelName];\n      } else {\n        return { modelNames: modelNames, justOne: justOne, isRefPath: isRefPath, refPath: refPath };\n      }\n    }\n\n    if (!Array.isArray(modelNames)) {\n      modelNames = [modelNames];\n    }\n\n    return { modelNames: modelNames, justOne: justOne, isRefPath: isRefPath, refPath: refPath };\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction _virtualPopulate(model, docs, options, _virtualRes) {\n  const map = [];\n  const available = {};\n  const virtual = _virtualRes.virtual;\n\n  for (const doc of docs) {\n    let modelNames = null;\n    const data = {};\n\n    // localField and foreignField\n    let localField;\n    const virtualPrefix = _virtualRes.nestedSchemaPath ?\n      _virtualRes.nestedSchemaPath + '.' : '';\n    if (typeof options.localField === 'string') {\n      localField = options.localField;\n    } else if (typeof virtual.options.localField === 'function') {\n      localField = virtualPrefix + virtual.options.localField.call(doc, doc);\n    } else if (Array.isArray(virtual.options.localField)) {\n      localField = virtual.options.localField.map(field => virtualPrefix + field);\n    } else {\n      localField = virtualPrefix + virtual.options.localField;\n    }\n    data.count = virtual.options.count;\n\n    if (virtual.options.skip != null && !options.hasOwnProperty('skip')) {\n      options.skip = virtual.options.skip;\n    }\n    if (virtual.options.limit != null && !options.hasOwnProperty('limit')) {\n      options.limit = virtual.options.limit;\n    }\n    if (virtual.options.perDocumentLimit != null && !options.hasOwnProperty('perDocumentLimit')) {\n      options.perDocumentLimit = virtual.options.perDocumentLimit;\n    }\n    let foreignField = virtual.options.foreignField;\n\n    if (!localField || !foreignField) {\n      return new MongooseError(`Cannot populate virtual \\`${options.path}\\` on model \\`${model.modelName}\\`, because options \\`localField\\` and / or \\`foreignField\\` are missing`);\n    }\n\n    if (typeof localField === 'function') {\n      localField = localField.call(doc, doc);\n    }\n    if (typeof foreignField === 'function') {\n      foreignField = foreignField.call(doc, doc);\n    }\n\n    data.isRefPath = false;\n\n    // `justOne = null` means we don't know from the schema whether the end\n    // result should be an array or a single doc. This can result from\n    // populating a POJO using `Model.populate()`\n    let justOne = null;\n    if ('justOne' in options && options.justOne !== void 0) {\n      justOne = options.justOne;\n    }\n\n    if (virtual.options.refPath) {\n      modelNames =\n        modelNamesFromRefPath(virtual.options.refPath, doc, options.path);\n      justOne = !!virtual.options.justOne;\n      data.isRefPath = true;\n    } else if (virtual.options.ref) {\n      let normalizedRef;\n      if (typeof virtual.options.ref === 'function' && !virtual.options.ref[modelSymbol]) {\n        normalizedRef = virtual.options.ref.call(doc, doc);\n      } else {\n        normalizedRef = virtual.options.ref;\n      }\n      justOne = !!virtual.options.justOne;\n      // When referencing nested arrays, the ref should be an Array\n      // of modelNames.\n      if (Array.isArray(normalizedRef)) {\n        modelNames = normalizedRef;\n      } else {\n        modelNames = [normalizedRef];\n      }\n    }\n\n    data.isVirtual = true;\n    data.virtual = virtual;\n    data.justOne = justOne;\n\n    // `match`\n    const baseMatch = get(data, 'virtual.options.match', null) ||\n      get(data, 'virtual.options.options.match', null);\n    let match = get(options, 'match', null) || baseMatch;\n\n    let hasMatchFunction = typeof match === 'function';\n    if (hasMatchFunction) {\n      match = match.call(doc, doc, data.virtual);\n    }\n\n    if (Array.isArray(localField) && Array.isArray(foreignField) && localField.length === foreignField.length) {\n      match = Object.assign({}, match);\n      for (let i = 1; i < localField.length; ++i) {\n        match[foreignField[i]] = convertTo_id(mpath.get(localField[i], doc, lookupLocalFields), model.schema);\n        hasMatchFunction = true;\n      }\n\n      localField = localField[0];\n      foreignField = foreignField[0];\n    }\n    data.localField = localField;\n    data.foreignField = foreignField;\n    data.match = match;\n    data.hasMatchFunction = hasMatchFunction;\n\n    // Get local fields\n    const ret = _getLocalFieldValues(doc, localField, model, options, virtual);\n\n    try {\n      addModelNamesToMap(model, map, available, modelNames, options, data, ret, doc);\n    } catch (err) {\n      return err;\n    }\n  }\n\n  return map;\n}\n\n/*!\n * ignore\n */\n\nfunction addModelNamesToMap(model, map, available, modelNames, options, data, ret, doc, schemaOptions, unpopulatedValue) {\n  // `PopulateOptions#connection`: if the model is passed as a string, the\n  // connection matters because different connections have different models.\n  const connection = options.connection != null ? options.connection : model.db;\n\n  unpopulatedValue = unpopulatedValue === void 0 ? ret : unpopulatedValue;\n  if (Array.isArray(unpopulatedValue)) {\n    unpopulatedValue = utils.cloneArrays(unpopulatedValue);\n  }\n\n  if (modelNames == null) {\n    return;\n  }\n\n  let k = modelNames.length;\n  while (k--) {\n    let modelName = modelNames[k];\n    if (modelName == null) {\n      continue;\n    }\n\n    let Model;\n    if (options.model && options.model[modelSymbol]) {\n      Model = options.model;\n    } else if (modelName[modelSymbol]) {\n      Model = modelName;\n      modelName = Model.modelName;\n    } else {\n      try {\n        Model = _getModelFromConn(connection, modelName);\n      } catch (err) {\n        if (ret !== void 0) {\n          throw err;\n        }\n        Model = null;\n      }\n    }\n\n    let ids = ret;\n    const flat = Array.isArray(ret) ? utils.array.flatten(ret) : [];\n\n    const modelNamesForRefPath = data.modelNamesInOrder ? data.modelNamesInOrder : modelNames;\n    if (data.isRefPath && Array.isArray(ret) && flat.length === modelNamesForRefPath.length) {\n      ids = flat.filter((val, i) => modelNamesForRefPath[i] === modelName);\n    }\n\n    const perDocumentLimit = options.perDocumentLimit == null ?\n      get(options, 'options.perDocumentLimit', null) :\n      options.perDocumentLimit;\n\n    if (!available[modelName] || perDocumentLimit != null) {\n      const currentOptions = {\n        model: Model\n      };\n      if (data.isVirtual && get(data.virtual, 'options.options')) {\n        currentOptions.options = clone(data.virtual.options.options);\n      } else if (schemaOptions != null) {\n        currentOptions.options = Object.assign({}, schemaOptions);\n      }\n      utils.merge(currentOptions, options);\n\n      // Used internally for checking what model was used to populate this\n      // path.\n      options[populateModelSymbol] = Model;\n      currentOptions[populateModelSymbol] = Model;\n      available[modelName] = {\n        model: Model,\n        options: currentOptions,\n        match: data.hasMatchFunction ? [data.match] : data.match,\n        docs: [doc],\n        ids: [ids],\n        allIds: [ret],\n        unpopulatedValues: [unpopulatedValue],\n        localField: new Set([data.localField]),\n        foreignField: new Set([data.foreignField]),\n        justOne: data.justOne,\n        isVirtual: data.isVirtual,\n        virtual: data.virtual,\n        count: data.count,\n        [populateModelSymbol]: Model\n      };\n      map.push(available[modelName]);\n    } else {\n      available[modelName].localField.add(data.localField);\n      available[modelName].foreignField.add(data.foreignField);\n      available[modelName].docs.push(doc);\n      available[modelName].ids.push(ids);\n      available[modelName].allIds.push(ret);\n      available[modelName].unpopulatedValues.push(unpopulatedValue);\n      if (data.hasMatchFunction) {\n        available[modelName].match.push(data.match);\n      }\n    }\n  }\n}\n\nfunction _getModelFromConn(conn, modelName) {\n  /* If this connection has a parent from `useDb()`, bubble up to parent's models */\n  if (conn.models[modelName] == null && conn._parent != null) {\n    return _getModelFromConn(conn._parent, modelName);\n  }\n\n  return conn.model(modelName);\n}\n\n/*!\n * ignore\n */\n\nfunction handleRefFunction(ref, doc) {\n  if (typeof ref === 'function' && !ref[modelSymbol]) {\n    return ref.call(doc, doc);\n  }\n  return ref;\n}\n\n/*!\n * ignore\n */\n\nfunction _getLocalFieldValues(doc, localField, model, options, virtual, schema) {\n  // Get Local fields\n  const localFieldPathType = model.schema._getPathType(localField);\n  const localFieldPath = localFieldPathType === 'real' ?\n    model.schema.path(localField) :\n    localFieldPathType.schema;\n  const localFieldGetters = localFieldPath && localFieldPath.getters ?\n    localFieldPath.getters : [];\n\n  localField = localFieldPath != null && localFieldPath.instance === 'Embedded' ? localField + '._id' : localField;\n\n  const _populateOptions = get(options, 'options', {});\n\n  const getters = 'getters' in _populateOptions ?\n    _populateOptions.getters :\n    get(virtual, 'options.getters', false);\n  if (localFieldGetters.length !== 0 && getters) {\n    const hydratedDoc = (doc.$__ != null) ? doc : model.hydrate(doc);\n    const localFieldValue = utils.getValue(localField, doc);\n    if (Array.isArray(localFieldValue)) {\n      const localFieldHydratedValue = utils.getValue(localField.split('.').slice(0, -1), hydratedDoc);\n      return localFieldValue.map((localFieldArrVal, localFieldArrIndex) =>\n        localFieldPath.applyGetters(localFieldArrVal, localFieldHydratedValue[localFieldArrIndex]));\n    } else {\n      return localFieldPath.applyGetters(localFieldValue, hydratedDoc);\n    }\n  } else {\n    return convertTo_id(mpath.get(localField, doc, lookupLocalFields), schema);\n  }\n}\n\n/**\n * Retrieve the _id of `val` if a Document or Array of Documents.\n *\n * @param {Array|Document|Any} val\n * @param {Schema} schema\n * @return {Array|Document|Any}\n * @api private\n */\n\nfunction convertTo_id(val, schema) {\n  if (val != null && val.$__ != null) {\n    return val._id;\n  }\n  if (val != null && val._id != null && (schema == null || !schema.$isSchemaMap)) {\n    return val._id;\n  }\n\n  if (Array.isArray(val)) {\n    const rawVal = val.__array != null ? val.__array : val;\n    for (let i = 0; i < rawVal.length; ++i) {\n      if (rawVal[i] != null && rawVal[i].$__ != null) {\n        rawVal[i] = rawVal[i]._id;\n      }\n    }\n    if (utils.isMongooseArray(val) && val.$schema()) {\n      return val.$schema()._castForPopulate(val, val.$parent());\n    }\n\n    return [].concat(val);\n  }\n\n  // `populate('map')` may be an object if populating on a doc that hasn't\n  // been hydrated yet\n  if (getConstructorName(val) === 'Object' &&\n      // The intent here is we should only flatten the object if we expect\n      // to get a Map in the end. Avoid doing this for mixed types.\n      (schema == null || schema[schemaMixedSymbol] == null)) {\n    const ret = [];\n    for (const key of Object.keys(val)) {\n      ret.push(val[key]);\n    }\n    return ret;\n  }\n  // If doc has already been hydrated, e.g. `doc.populate('map')`\n  // then `val` will already be a map\n  if (val instanceof Map) {\n    return Array.from(val.values());\n  }\n\n  return val;\n}\n\n/*!\n * ignore\n */\n\nfunction _findRefPathForDiscriminators(doc, modelSchema, data, options, normalizedRefPath, ret) {\n  // Re: gh-8452. Embedded discriminators may not have `refPath`, so clear\n  // out embedded discriminator docs that don't have a `refPath` on the\n  // populated path.\n  if (!data.isRefPath || normalizedRefPath == null) {\n    return;\n  }\n\n  const pieces = normalizedRefPath.split('.');\n  let cur = '';\n  let modelNames = void 0;\n  for (let i = 0; i < pieces.length; ++i) {\n    const piece = pieces[i];\n    cur = cur + (cur.length === 0 ? '' : '.') + piece;\n    const schematype = modelSchema.path(cur);\n    if (schematype != null &&\n        schematype.$isMongooseArray &&\n        schematype.caster.discriminators != null &&\n        Object.keys(schematype.caster.discriminators).length !== 0) {\n      const subdocs = utils.getValue(cur, doc);\n      const remnant = options.path.substring(cur.length + 1);\n      const discriminatorKey = schematype.caster.schema.options.discriminatorKey;\n      modelNames = [];\n      for (const subdoc of subdocs) {\n        const discriminatorName = utils.getValue(discriminatorKey, subdoc);\n        const discriminator = schematype.caster.discriminators[discriminatorName];\n        const discriminatorSchema = discriminator && discriminator.schema;\n        if (discriminatorSchema == null) {\n          continue;\n        }\n        const _path = discriminatorSchema.path(remnant);\n        if (_path == null || _path.options.refPath == null) {\n          const docValue = utils.getValue(data.localField.substring(cur.length + 1), subdoc);\n          ret.forEach((v, i) => {\n            if (v === docValue) {\n              ret[i] = SkipPopulateValue(v);\n            }\n          });\n          continue;\n        }\n        const modelName = utils.getValue(pieces.slice(i + 1).join('.'), subdoc);\n        modelNames.push(modelName);\n      }\n    }\n  }\n\n  return modelNames;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/populate/getModelsMapForPopulate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/populate/getSchemaTypes.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/populate/getSchemaTypes.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * ignore\n */\n\nconst Mixed = __webpack_require__(/*! ../../schema/mixed */ \"(ssr)/./node_modules/mongoose/lib/schema/mixed.js\");\nconst get = __webpack_require__(/*! ../get */ \"(ssr)/./node_modules/mongoose/lib/helpers/get.js\");\nconst getDiscriminatorByValue = __webpack_require__(/*! ../discriminator/getDiscriminatorByValue */ \"(ssr)/./node_modules/mongoose/lib/helpers/discriminator/getDiscriminatorByValue.js\");\nconst leanPopulateMap = __webpack_require__(/*! ./leanPopulateMap */ \"(ssr)/./node_modules/mongoose/lib/helpers/populate/leanPopulateMap.js\");\nconst mpath = __webpack_require__(/*! mpath */ \"(ssr)/./node_modules/mpath/index.js\");\n\nconst populateModelSymbol = (__webpack_require__(/*! ../symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").populateModelSymbol);\n\n/**\n * Given a model and its schema, find all possible schema types for `path`,\n * including searching through discriminators. If `doc` is specified, will\n * use the doc's values for discriminator keys when searching, otherwise\n * will search all discriminators.\n *\n * @param {Model} model\n * @param {Schema} schema\n * @param {Object} doc POJO\n * @param {string} path\n * @api private\n */\n\nmodule.exports = function getSchemaTypes(model, schema, doc, path) {\n  const pathschema = schema.path(path);\n  const topLevelDoc = doc;\n  if (pathschema) {\n    return pathschema;\n  }\n\n  const discriminatorKey = schema.discriminatorMapping &&\n    schema.discriminatorMapping.key;\n  if (discriminatorKey && model != null) {\n    if (doc != null && doc[discriminatorKey] != null) {\n      const discriminator = getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      schema = discriminator ? discriminator.schema : schema;\n    } else if (model.discriminators != null) {\n      return Object.keys(model.discriminators).reduce((arr, name) => {\n        const disc = model.discriminators[name];\n        return arr.concat(getSchemaTypes(disc, disc.schema, null, path));\n      }, []);\n    }\n  }\n\n  function search(parts, schema, subdoc, nestedPath) {\n    let p = parts.length + 1;\n    let foundschema;\n    let trypath;\n\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n      if (foundschema == null) {\n        continue;\n      }\n\n      if (foundschema.caster) {\n        // array of Mixed?\n        if (foundschema.caster instanceof Mixed) {\n          return foundschema.caster;\n        }\n\n        let schemas = null;\n        if (foundschema.schema != null && foundschema.schema.discriminators != null) {\n          const discriminators = foundschema.schema.discriminators;\n          const discriminatorKeyPath = trypath + '.' +\n            foundschema.schema.options.discriminatorKey;\n          const keys = subdoc ? mpath.get(discriminatorKeyPath, subdoc) || [] : [];\n          schemas = Object.keys(discriminators).\n            reduce(function(cur, discriminator) {\n              const tiedValue = discriminators[discriminator].discriminatorMapping.value;\n              if (doc == null || keys.indexOf(discriminator) !== -1 || keys.indexOf(tiedValue) !== -1) {\n                cur.push(discriminators[discriminator]);\n              }\n              return cur;\n            }, []);\n        }\n\n        // Now that we found the array, we need to check if there\n        // are remaining document paths to look up for casting.\n        // Also we need to handle array.$.path since schema.path\n        // doesn't work for that.\n        // If there is no foundschema.schema we are dealing with\n        // a path like array.$\n        if (p !== parts.length && foundschema.schema) {\n          let ret;\n          if (parts[p] === '$') {\n            if (p + 1 === parts.length) {\n              // comments.$\n              return foundschema;\n            }\n            // comments.$.comments.$.title\n            ret = search(\n              parts.slice(p + 1),\n              schema,\n              subdoc ? mpath.get(trypath, subdoc) : null,\n              nestedPath.concat(parts.slice(0, p))\n            );\n            if (ret) {\n              ret.$parentSchemaDocArray = ret.$parentSchemaDocArray ||\n                (foundschema.schema.$isSingleNested ? null : foundschema);\n            }\n            return ret;\n          }\n\n          if (schemas != null && schemas.length > 0) {\n            ret = [];\n            for (const schema of schemas) {\n              const _ret = search(\n                parts.slice(p),\n                schema,\n                subdoc ? mpath.get(trypath, subdoc) : null,\n                nestedPath.concat(parts.slice(0, p))\n              );\n              if (_ret != null) {\n                _ret.$parentSchemaDocArray = _ret.$parentSchemaDocArray ||\n                  (foundschema.schema.$isSingleNested ? null : foundschema);\n                if (_ret.$parentSchemaDocArray) {\n                  ret.$parentSchemaDocArray = _ret.$parentSchemaDocArray;\n                }\n                ret.push(_ret);\n              }\n            }\n            return ret;\n          } else {\n            ret = search(\n              parts.slice(p),\n              foundschema.schema,\n              subdoc ? mpath.get(trypath, subdoc) : null,\n              nestedPath.concat(parts.slice(0, p))\n            );\n\n            if (ret) {\n              ret.$parentSchemaDocArray = ret.$parentSchemaDocArray ||\n                (foundschema.schema.$isSingleNested ? null : foundschema);\n            }\n            return ret;\n          }\n        } else if (p !== parts.length &&\n            foundschema.$isMongooseArray &&\n            foundschema.casterConstructor.$isMongooseArray) {\n          // Nested arrays. Drill down to the bottom of the nested array.\n          let type = foundschema;\n          while (type.$isMongooseArray && !type.$isMongooseDocumentArray) {\n            type = type.casterConstructor;\n          }\n\n          const ret = search(\n            parts.slice(p),\n            type.schema,\n            null,\n            nestedPath.concat(parts.slice(0, p))\n          );\n          if (ret != null) {\n            return ret;\n          }\n\n          if (type.schema.discriminators) {\n            const discriminatorPaths = [];\n            for (const discriminatorName of Object.keys(type.schema.discriminators)) {\n              const _schema = type.schema.discriminators[discriminatorName] || type.schema;\n              const ret = search(parts.slice(p), _schema, null, nestedPath.concat(parts.slice(0, p)));\n              if (ret != null) {\n                discriminatorPaths.push(ret);\n              }\n            }\n            if (discriminatorPaths.length > 0) {\n              return discriminatorPaths;\n            }\n          }\n        }\n      } else if (foundschema.$isSchemaMap && foundschema.$__schemaType instanceof Mixed) {\n        return foundschema.$__schemaType;\n      }\n\n      const fullPath = nestedPath.concat([trypath]).join('.');\n      if (topLevelDoc != null && topLevelDoc.$__ && topLevelDoc.$populated(fullPath) && p < parts.length) {\n        const model = doc.$__.populated[fullPath].options[populateModelSymbol];\n        if (model != null) {\n          const ret = search(\n            parts.slice(p),\n            model.schema,\n            subdoc ? mpath.get(trypath, subdoc) : null,\n            nestedPath.concat(parts.slice(0, p))\n          );\n\n          return ret;\n        }\n      }\n\n      const _val = get(topLevelDoc, trypath);\n      if (_val != null) {\n        const model = Array.isArray(_val) && _val.length > 0 ?\n          leanPopulateMap.get(_val[0]) :\n          leanPopulateMap.get(_val);\n        // Populated using lean, `leanPopulateMap` value is the foreign model\n        const schema = model != null ? model.schema : null;\n        if (schema != null) {\n          const ret = search(\n            parts.slice(p),\n            schema,\n            subdoc ? mpath.get(trypath, subdoc) : null,\n            nestedPath.concat(parts.slice(0, p))\n          );\n\n          if (ret != null) {\n            ret.$parentSchemaDocArray = ret.$parentSchemaDocArray ||\n              (schema.$isSingleNested ? null : schema);\n            return ret;\n          }\n        }\n      }\n      return foundschema;\n    }\n  }\n  // look for arrays\n  const parts = path.split('.');\n  for (let i = 0; i < parts.length; ++i) {\n    if (parts[i] === '$') {\n      // Re: gh-5628, because `schema.path()` doesn't take $ into account.\n      parts[i] = '0';\n    }\n  }\n  return search(parts, schema, doc, []);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/populate/getSchemaTypes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/populate/getVirtual.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/populate/getVirtual.js ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = getVirtual;\n\n/*!\n * ignore\n */\n\nfunction getVirtual(schema, name) {\n  if (schema.virtuals[name]) {\n    return { virtual: schema.virtuals[name], path: void 0 };\n  }\n\n  const parts = name.split('.');\n  let cur = '';\n  let nestedSchemaPath = '';\n  for (let i = 0; i < parts.length; ++i) {\n    cur += (cur.length > 0 ? '.' : '') + parts[i];\n    if (schema.virtuals[cur]) {\n      if (i === parts.length - 1) {\n        return { virtual: schema.virtuals[cur], path: nestedSchemaPath };\n      }\n      continue;\n    }\n\n    if (schema.nested[cur]) {\n      continue;\n    }\n\n    if (schema.paths[cur] && schema.paths[cur].schema) {\n      schema = schema.paths[cur].schema;\n      const rest = parts.slice(i + 1).join('.');\n\n      if (schema.virtuals[rest]) {\n        if (i === parts.length - 2) {\n          return {\n            virtual: schema.virtuals[rest],\n            nestedSchemaPath: [nestedSchemaPath, cur].filter(v => !!v).join('.')\n          };\n        }\n        continue;\n      }\n\n      if (i + 1 < parts.length && schema.discriminators) {\n        for (const key of Object.keys(schema.discriminators)) {\n          const res = getVirtual(schema.discriminators[key], rest);\n          if (res != null) {\n            const _path = [nestedSchemaPath, cur, res.nestedSchemaPath].\n              filter(v => !!v).join('.');\n            return {\n              virtual: res.virtual,\n              nestedSchemaPath: _path\n            };\n          }\n        }\n      }\n\n      nestedSchemaPath += (nestedSchemaPath.length > 0 ? '.' : '') + cur;\n      cur = '';\n      continue;\n    }\n\n    if (schema.discriminators) {\n      for (const discriminatorKey of Object.keys(schema.discriminators)) {\n        const virtualFromDiscriminator = getVirtual(schema.discriminators[discriminatorKey], name);\n        if (virtualFromDiscriminator) return virtualFromDiscriminator;\n      }\n    }\n\n    return null;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcG9wdWxhdGUvZ2V0VmlydHVhbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isa0JBQWtCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcG9wdWxhdGUvZ2V0VmlydHVhbC5qcz81YjUzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRWaXJ0dWFsO1xuXG4vKiFcbiAqIGlnbm9yZVxuICovXG5cbmZ1bmN0aW9uIGdldFZpcnR1YWwoc2NoZW1hLCBuYW1lKSB7XG4gIGlmIChzY2hlbWEudmlydHVhbHNbbmFtZV0pIHtcbiAgICByZXR1cm4geyB2aXJ0dWFsOiBzY2hlbWEudmlydHVhbHNbbmFtZV0sIHBhdGg6IHZvaWQgMCB9O1xuICB9XG5cbiAgY29uc3QgcGFydHMgPSBuYW1lLnNwbGl0KCcuJyk7XG4gIGxldCBjdXIgPSAnJztcbiAgbGV0IG5lc3RlZFNjaGVtYVBhdGggPSAnJztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7ICsraSkge1xuICAgIGN1ciArPSAoY3VyLmxlbmd0aCA+IDAgPyAnLicgOiAnJykgKyBwYXJ0c1tpXTtcbiAgICBpZiAoc2NoZW1hLnZpcnR1YWxzW2N1cl0pIHtcbiAgICAgIGlmIChpID09PSBwYXJ0cy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHJldHVybiB7IHZpcnR1YWw6IHNjaGVtYS52aXJ0dWFsc1tjdXJdLCBwYXRoOiBuZXN0ZWRTY2hlbWFQYXRoIH07XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoc2NoZW1hLm5lc3RlZFtjdXJdKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoc2NoZW1hLnBhdGhzW2N1cl0gJiYgc2NoZW1hLnBhdGhzW2N1cl0uc2NoZW1hKSB7XG4gICAgICBzY2hlbWEgPSBzY2hlbWEucGF0aHNbY3VyXS5zY2hlbWE7XG4gICAgICBjb25zdCByZXN0ID0gcGFydHMuc2xpY2UoaSArIDEpLmpvaW4oJy4nKTtcblxuICAgICAgaWYgKHNjaGVtYS52aXJ0dWFsc1tyZXN0XSkge1xuICAgICAgICBpZiAoaSA9PT0gcGFydHMubGVuZ3RoIC0gMikge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2aXJ0dWFsOiBzY2hlbWEudmlydHVhbHNbcmVzdF0sXG4gICAgICAgICAgICBuZXN0ZWRTY2hlbWFQYXRoOiBbbmVzdGVkU2NoZW1hUGF0aCwgY3VyXS5maWx0ZXIodiA9PiAhIXYpLmpvaW4oJy4nKVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChpICsgMSA8IHBhcnRzLmxlbmd0aCAmJiBzY2hlbWEuZGlzY3JpbWluYXRvcnMpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoc2NoZW1hLmRpc2NyaW1pbmF0b3JzKSkge1xuICAgICAgICAgIGNvbnN0IHJlcyA9IGdldFZpcnR1YWwoc2NoZW1hLmRpc2NyaW1pbmF0b3JzW2tleV0sIHJlc3QpO1xuICAgICAgICAgIGlmIChyZXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgX3BhdGggPSBbbmVzdGVkU2NoZW1hUGF0aCwgY3VyLCByZXMubmVzdGVkU2NoZW1hUGF0aF0uXG4gICAgICAgICAgICAgIGZpbHRlcih2ID0+ICEhdikuam9pbignLicpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgdmlydHVhbDogcmVzLnZpcnR1YWwsXG4gICAgICAgICAgICAgIG5lc3RlZFNjaGVtYVBhdGg6IF9wYXRoXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBuZXN0ZWRTY2hlbWFQYXRoICs9IChuZXN0ZWRTY2hlbWFQYXRoLmxlbmd0aCA+IDAgPyAnLicgOiAnJykgKyBjdXI7XG4gICAgICBjdXIgPSAnJztcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChzY2hlbWEuZGlzY3JpbWluYXRvcnMpIHtcbiAgICAgIGZvciAoY29uc3QgZGlzY3JpbWluYXRvcktleSBvZiBPYmplY3Qua2V5cyhzY2hlbWEuZGlzY3JpbWluYXRvcnMpKSB7XG4gICAgICAgIGNvbnN0IHZpcnR1YWxGcm9tRGlzY3JpbWluYXRvciA9IGdldFZpcnR1YWwoc2NoZW1hLmRpc2NyaW1pbmF0b3JzW2Rpc2NyaW1pbmF0b3JLZXldLCBuYW1lKTtcbiAgICAgICAgaWYgKHZpcnR1YWxGcm9tRGlzY3JpbWluYXRvcikgcmV0dXJuIHZpcnR1YWxGcm9tRGlzY3JpbWluYXRvcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/populate/getVirtual.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/populate/leanPopulateMap.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/populate/leanPopulateMap.js ***!
  \***********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/*!\n * ignore\n */\n\nmodule.exports = new WeakMap();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcG9wdWxhdGUvbGVhblBvcHVsYXRlTWFwLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcG9wdWxhdGUvbGVhblBvcHVsYXRlTWFwLmpzPzcxOTQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKiFcbiAqIGlnbm9yZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFdlYWtNYXAoKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/populate/leanPopulateMap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/populate/lookupLocalFields.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/populate/lookupLocalFields.js ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function lookupLocalFields(cur, path, val) {\n  if (cur == null) {\n    return cur;\n  }\n\n  if (cur._doc != null) {\n    cur = cur._doc;\n  }\n\n  if (arguments.length >= 3) {\n    if (typeof cur !== 'object') {\n      return void 0;\n    }\n    if (val === void 0) {\n      return void 0;\n    }\n    if (cur instanceof Map) {\n      cur.set(path, val);\n    } else {\n      cur[path] = val;\n    }\n    return val;\n  }\n\n\n  // Support populating paths under maps using `map.$*.subpath`\n  if (path === '$*') {\n    return cur instanceof Map ?\n      Array.from(cur.values()) :\n      Object.keys(cur).map(key => cur[key]);\n  }\n\n  if (cur instanceof Map) {\n    return cur.get(path);\n  }\n\n  return cur[path];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcG9wdWxhdGUvbG9va3VwTG9jYWxGaWVsZHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9wb3B1bGF0ZS9sb29rdXBMb2NhbEZpZWxkcy5qcz85MzU5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBsb29rdXBMb2NhbEZpZWxkcyhjdXIsIHBhdGgsIHZhbCkge1xuICBpZiAoY3VyID09IG51bGwpIHtcbiAgICByZXR1cm4gY3VyO1xuICB9XG5cbiAgaWYgKGN1ci5fZG9jICE9IG51bGwpIHtcbiAgICBjdXIgPSBjdXIuX2RvYztcbiAgfVxuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIHtcbiAgICBpZiAodHlwZW9mIGN1ciAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIGlmICh2YWwgPT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG4gICAgaWYgKGN1ciBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgY3VyLnNldChwYXRoLCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJbcGF0aF0gPSB2YWw7XG4gICAgfVxuICAgIHJldHVybiB2YWw7XG4gIH1cblxuXG4gIC8vIFN1cHBvcnQgcG9wdWxhdGluZyBwYXRocyB1bmRlciBtYXBzIHVzaW5nIGBtYXAuJCouc3VicGF0aGBcbiAgaWYgKHBhdGggPT09ICckKicpIHtcbiAgICByZXR1cm4gY3VyIGluc3RhbmNlb2YgTWFwID9cbiAgICAgIEFycmF5LmZyb20oY3VyLnZhbHVlcygpKSA6XG4gICAgICBPYmplY3Qua2V5cyhjdXIpLm1hcChrZXkgPT4gY3VyW2tleV0pO1xuICB9XG5cbiAgaWYgKGN1ciBpbnN0YW5jZW9mIE1hcCkge1xuICAgIHJldHVybiBjdXIuZ2V0KHBhdGgpO1xuICB9XG5cbiAgcmV0dXJuIGN1cltwYXRoXTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/populate/lookupLocalFields.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/populate/markArraySubdocsPopulated.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/populate/markArraySubdocsPopulated.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst utils = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\n\n/**\n * If populating a path within a document array, make sure each\n * subdoc within the array knows its subpaths are populated.\n *\n * #### Example:\n *\n *     const doc = await Article.findOne().populate('comments.author');\n *     doc.comments[0].populated('author'); // Should be set\n *\n * @param {Document} doc\n * @param {Object} [populated]\n * @api private\n */\n\nmodule.exports = function markArraySubdocsPopulated(doc, populated) {\n  if (doc._id == null || populated == null || populated.length === 0) {\n    return;\n  }\n\n  const id = String(doc._id);\n  for (const item of populated) {\n    if (item.isVirtual) {\n      continue;\n    }\n    const path = item.path;\n    const pieces = path.split('.');\n    for (let i = 0; i < pieces.length - 1; ++i) {\n      const subpath = pieces.slice(0, i + 1).join('.');\n      const rest = pieces.slice(i + 1).join('.');\n      const val = doc.get(subpath);\n      if (val == null) {\n        continue;\n      }\n\n      if (utils.isMongooseDocumentArray(val)) {\n        for (let j = 0; j < val.length; ++j) {\n          if (val[j]) {\n            val[j].populated(rest, item._docs[id] == null ? void 0 : item._docs[id][j], item);\n          }\n        }\n        break;\n      }\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcG9wdWxhdGUvbWFya0FycmF5U3ViZG9jc1BvcHVsYXRlZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixjQUFjLG1CQUFPLENBQUMsK0RBQWE7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsUUFBUTtBQUNuQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHVCQUF1QjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx3QkFBd0IsZ0JBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcG9wdWxhdGUvbWFya0FycmF5U3ViZG9jc1BvcHVsYXRlZC5qcz9mZGY4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscycpO1xuXG4vKipcbiAqIElmIHBvcHVsYXRpbmcgYSBwYXRoIHdpdGhpbiBhIGRvY3VtZW50IGFycmF5LCBtYWtlIHN1cmUgZWFjaFxuICogc3ViZG9jIHdpdGhpbiB0aGUgYXJyYXkga25vd3MgaXRzIHN1YnBhdGhzIGFyZSBwb3B1bGF0ZWQuXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBjb25zdCBkb2MgPSBhd2FpdCBBcnRpY2xlLmZpbmRPbmUoKS5wb3B1bGF0ZSgnY29tbWVudHMuYXV0aG9yJyk7XG4gKiAgICAgZG9jLmNvbW1lbnRzWzBdLnBvcHVsYXRlZCgnYXV0aG9yJyk7IC8vIFNob3VsZCBiZSBzZXRcbiAqXG4gKiBAcGFyYW0ge0RvY3VtZW50fSBkb2NcbiAqIEBwYXJhbSB7T2JqZWN0fSBbcG9wdWxhdGVkXVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtYXJrQXJyYXlTdWJkb2NzUG9wdWxhdGVkKGRvYywgcG9wdWxhdGVkKSB7XG4gIGlmIChkb2MuX2lkID09IG51bGwgfHwgcG9wdWxhdGVkID09IG51bGwgfHwgcG9wdWxhdGVkLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGlkID0gU3RyaW5nKGRvYy5faWQpO1xuICBmb3IgKGNvbnN0IGl0ZW0gb2YgcG9wdWxhdGVkKSB7XG4gICAgaWYgKGl0ZW0uaXNWaXJ0dWFsKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgcGF0aCA9IGl0ZW0ucGF0aDtcbiAgICBjb25zdCBwaWVjZXMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwaWVjZXMubGVuZ3RoIC0gMTsgKytpKSB7XG4gICAgICBjb25zdCBzdWJwYXRoID0gcGllY2VzLnNsaWNlKDAsIGkgKyAxKS5qb2luKCcuJyk7XG4gICAgICBjb25zdCByZXN0ID0gcGllY2VzLnNsaWNlKGkgKyAxKS5qb2luKCcuJyk7XG4gICAgICBjb25zdCB2YWwgPSBkb2MuZ2V0KHN1YnBhdGgpO1xuICAgICAgaWYgKHZhbCA9PSBudWxsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNNb25nb29zZURvY3VtZW50QXJyYXkodmFsKSkge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHZhbC5sZW5ndGg7ICsraikge1xuICAgICAgICAgIGlmICh2YWxbal0pIHtcbiAgICAgICAgICAgIHZhbFtqXS5wb3B1bGF0ZWQocmVzdCwgaXRlbS5fZG9jc1tpZF0gPT0gbnVsbCA/IHZvaWQgMCA6IGl0ZW0uX2RvY3NbaWRdW2pdLCBpdGVtKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/populate/markArraySubdocsPopulated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/populate/modelNamesFromRefPath.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/populate/modelNamesFromRefPath.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst MongooseError = __webpack_require__(/*! ../../error/mongooseError */ \"(ssr)/./node_modules/mongoose/lib/error/mongooseError.js\");\nconst isPathExcluded = __webpack_require__(/*! ../projection/isPathExcluded */ \"(ssr)/./node_modules/mongoose/lib/helpers/projection/isPathExcluded.js\");\nconst lookupLocalFields = __webpack_require__(/*! ./lookupLocalFields */ \"(ssr)/./node_modules/mongoose/lib/helpers/populate/lookupLocalFields.js\");\nconst mpath = __webpack_require__(/*! mpath */ \"(ssr)/./node_modules/mpath/index.js\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst utils = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\n\nconst hasNumericPropRE = /(\\.\\d+$|\\.\\d+\\.)/g;\n\nmodule.exports = function modelNamesFromRefPath(refPath, doc, populatedPath, modelSchema, queryProjection) {\n  if (refPath == null) {\n    return [];\n  }\n\n  if (typeof refPath === 'string' && queryProjection != null && isPathExcluded(queryProjection, refPath)) {\n    throw new MongooseError('refPath `' + refPath + '` must not be excluded in projection, got ' +\n      util.inspect(queryProjection));\n  }\n\n  // If populated path has numerics, the end `refPath` should too. For example,\n  // if populating `a.0.b` instead of `a.b` and `b` has `refPath = a.c`, we\n  // should return `a.0.c` for the refPath.\n\n  if (hasNumericPropRE.test(populatedPath)) {\n    const chunks = populatedPath.split(hasNumericPropRE);\n\n    if (chunks[chunks.length - 1] === '') {\n      throw new Error('Can\\'t populate individual element in an array');\n    }\n\n    let _refPath = '';\n    let _remaining = refPath;\n    // 2nd, 4th, etc. will be numeric props. For example: `[ 'a', '.0.', 'b' ]`\n    for (let i = 0; i < chunks.length; i += 2) {\n      const chunk = chunks[i];\n      if (_remaining.startsWith(chunk + '.')) {\n        _refPath += _remaining.substring(0, chunk.length) + chunks[i + 1];\n        _remaining = _remaining.substring(chunk.length + 1);\n      } else if (i === chunks.length - 1) {\n        _refPath += _remaining;\n        _remaining = '';\n        break;\n      } else {\n        throw new Error('Could not normalize ref path, chunk ' + chunk + ' not in populated path');\n      }\n    }\n\n    const refValue = mpath.get(_refPath, doc, lookupLocalFields);\n    let modelNames = Array.isArray(refValue) ? refValue : [refValue];\n    modelNames = utils.array.flatten(modelNames);\n    return modelNames;\n  }\n\n  const refValue = mpath.get(refPath, doc, lookupLocalFields);\n\n  let modelNames;\n  if (modelSchema != null && modelSchema.virtuals.hasOwnProperty(refPath)) {\n    modelNames = [modelSchema.virtuals[refPath].applyGetters(void 0, doc)];\n  } else {\n    modelNames = Array.isArray(refValue) ? refValue : [refValue];\n  }\n\n  modelNames = utils.array.flatten(modelNames);\n\n  return modelNames;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcG9wdWxhdGUvbW9kZWxOYW1lc0Zyb21SZWZQYXRoLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLHNCQUFzQixtQkFBTyxDQUFDLDJGQUEyQjtBQUN6RCx1QkFBdUIsbUJBQU8sQ0FBQyw0R0FBOEI7QUFDN0QsMEJBQTBCLG1CQUFPLENBQUMsb0dBQXFCO0FBQ3ZELGNBQWMsbUJBQU8sQ0FBQyxrREFBTztBQUM3QixhQUFhLG1CQUFPLENBQUMsa0JBQU07QUFDM0IsY0FBYyxtQkFBTyxDQUFDLCtEQUFhOztBQUVuQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG1CQUFtQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcG9wdWxhdGUvbW9kZWxOYW1lc0Zyb21SZWZQYXRoLmpzPzRmZWIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBNb25nb29zZUVycm9yID0gcmVxdWlyZSgnLi4vLi4vZXJyb3IvbW9uZ29vc2VFcnJvcicpO1xuY29uc3QgaXNQYXRoRXhjbHVkZWQgPSByZXF1aXJlKCcuLi9wcm9qZWN0aW9uL2lzUGF0aEV4Y2x1ZGVkJyk7XG5jb25zdCBsb29rdXBMb2NhbEZpZWxkcyA9IHJlcXVpcmUoJy4vbG9va3VwTG9jYWxGaWVsZHMnKTtcbmNvbnN0IG1wYXRoID0gcmVxdWlyZSgnbXBhdGgnKTtcbmNvbnN0IHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzJyk7XG5cbmNvbnN0IGhhc051bWVyaWNQcm9wUkUgPSAvKFxcLlxcZCskfFxcLlxcZCtcXC4pL2c7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbW9kZWxOYW1lc0Zyb21SZWZQYXRoKHJlZlBhdGgsIGRvYywgcG9wdWxhdGVkUGF0aCwgbW9kZWxTY2hlbWEsIHF1ZXJ5UHJvamVjdGlvbikge1xuICBpZiAocmVmUGF0aCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgaWYgKHR5cGVvZiByZWZQYXRoID09PSAnc3RyaW5nJyAmJiBxdWVyeVByb2plY3Rpb24gIT0gbnVsbCAmJiBpc1BhdGhFeGNsdWRlZChxdWVyeVByb2plY3Rpb24sIHJlZlBhdGgpKSB7XG4gICAgdGhyb3cgbmV3IE1vbmdvb3NlRXJyb3IoJ3JlZlBhdGggYCcgKyByZWZQYXRoICsgJ2AgbXVzdCBub3QgYmUgZXhjbHVkZWQgaW4gcHJvamVjdGlvbiwgZ290ICcgK1xuICAgICAgdXRpbC5pbnNwZWN0KHF1ZXJ5UHJvamVjdGlvbikpO1xuICB9XG5cbiAgLy8gSWYgcG9wdWxhdGVkIHBhdGggaGFzIG51bWVyaWNzLCB0aGUgZW5kIGByZWZQYXRoYCBzaG91bGQgdG9vLiBGb3IgZXhhbXBsZSxcbiAgLy8gaWYgcG9wdWxhdGluZyBgYS4wLmJgIGluc3RlYWQgb2YgYGEuYmAgYW5kIGBiYCBoYXMgYHJlZlBhdGggPSBhLmNgLCB3ZVxuICAvLyBzaG91bGQgcmV0dXJuIGBhLjAuY2AgZm9yIHRoZSByZWZQYXRoLlxuXG4gIGlmIChoYXNOdW1lcmljUHJvcFJFLnRlc3QocG9wdWxhdGVkUGF0aCkpIHtcbiAgICBjb25zdCBjaHVua3MgPSBwb3B1bGF0ZWRQYXRoLnNwbGl0KGhhc051bWVyaWNQcm9wUkUpO1xuXG4gICAgaWYgKGNodW5rc1tjaHVua3MubGVuZ3RoIC0gMV0gPT09ICcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhblxcJ3QgcG9wdWxhdGUgaW5kaXZpZHVhbCBlbGVtZW50IGluIGFuIGFycmF5Jyk7XG4gICAgfVxuXG4gICAgbGV0IF9yZWZQYXRoID0gJyc7XG4gICAgbGV0IF9yZW1haW5pbmcgPSByZWZQYXRoO1xuICAgIC8vIDJuZCwgNHRoLCBldGMuIHdpbGwgYmUgbnVtZXJpYyBwcm9wcy4gRm9yIGV4YW1wbGU6IGBbICdhJywgJy4wLicsICdiJyBdYFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2h1bmtzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICBjb25zdCBjaHVuayA9IGNodW5rc1tpXTtcbiAgICAgIGlmIChfcmVtYWluaW5nLnN0YXJ0c1dpdGgoY2h1bmsgKyAnLicpKSB7XG4gICAgICAgIF9yZWZQYXRoICs9IF9yZW1haW5pbmcuc3Vic3RyaW5nKDAsIGNodW5rLmxlbmd0aCkgKyBjaHVua3NbaSArIDFdO1xuICAgICAgICBfcmVtYWluaW5nID0gX3JlbWFpbmluZy5zdWJzdHJpbmcoY2h1bmsubGVuZ3RoICsgMSk7XG4gICAgICB9IGVsc2UgaWYgKGkgPT09IGNodW5rcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIF9yZWZQYXRoICs9IF9yZW1haW5pbmc7XG4gICAgICAgIF9yZW1haW5pbmcgPSAnJztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBub3JtYWxpemUgcmVmIHBhdGgsIGNodW5rICcgKyBjaHVuayArICcgbm90IGluIHBvcHVsYXRlZCBwYXRoJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcmVmVmFsdWUgPSBtcGF0aC5nZXQoX3JlZlBhdGgsIGRvYywgbG9va3VwTG9jYWxGaWVsZHMpO1xuICAgIGxldCBtb2RlbE5hbWVzID0gQXJyYXkuaXNBcnJheShyZWZWYWx1ZSkgPyByZWZWYWx1ZSA6IFtyZWZWYWx1ZV07XG4gICAgbW9kZWxOYW1lcyA9IHV0aWxzLmFycmF5LmZsYXR0ZW4obW9kZWxOYW1lcyk7XG4gICAgcmV0dXJuIG1vZGVsTmFtZXM7XG4gIH1cblxuICBjb25zdCByZWZWYWx1ZSA9IG1wYXRoLmdldChyZWZQYXRoLCBkb2MsIGxvb2t1cExvY2FsRmllbGRzKTtcblxuICBsZXQgbW9kZWxOYW1lcztcbiAgaWYgKG1vZGVsU2NoZW1hICE9IG51bGwgJiYgbW9kZWxTY2hlbWEudmlydHVhbHMuaGFzT3duUHJvcGVydHkocmVmUGF0aCkpIHtcbiAgICBtb2RlbE5hbWVzID0gW21vZGVsU2NoZW1hLnZpcnR1YWxzW3JlZlBhdGhdLmFwcGx5R2V0dGVycyh2b2lkIDAsIGRvYyldO1xuICB9IGVsc2Uge1xuICAgIG1vZGVsTmFtZXMgPSBBcnJheS5pc0FycmF5KHJlZlZhbHVlKSA/IHJlZlZhbHVlIDogW3JlZlZhbHVlXTtcbiAgfVxuXG4gIG1vZGVsTmFtZXMgPSB1dGlscy5hcnJheS5mbGF0dGVuKG1vZGVsTmFtZXMpO1xuXG4gIHJldHVybiBtb2RlbE5hbWVzO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/populate/modelNamesFromRefPath.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/populate/removeDeselectedForeignField.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/populate/removeDeselectedForeignField.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst get = __webpack_require__(/*! ../get */ \"(ssr)/./node_modules/mongoose/lib/helpers/get.js\");\nconst mpath = __webpack_require__(/*! mpath */ \"(ssr)/./node_modules/mpath/index.js\");\nconst parseProjection = __webpack_require__(/*! ../projection/parseProjection */ \"(ssr)/./node_modules/mongoose/lib/helpers/projection/parseProjection.js\");\n\n/*!\n * ignore\n */\n\nmodule.exports = function removeDeselectedForeignField(foreignFields, options, docs) {\n  const projection = parseProjection(get(options, 'select', null), true) ||\n    parseProjection(get(options, 'options.select', null), true);\n\n  if (projection == null) {\n    return;\n  }\n  for (const foreignField of foreignFields) {\n    if (!projection.hasOwnProperty('-' + foreignField)) {\n      continue;\n    }\n\n    for (const val of docs) {\n      if (val.$__ != null) {\n        mpath.unset(foreignField, val._doc);\n      } else {\n        mpath.unset(foreignField, val);\n      }\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcG9wdWxhdGUvcmVtb3ZlRGVzZWxlY3RlZEZvcmVpZ25GaWVsZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixZQUFZLG1CQUFPLENBQUMsZ0VBQVE7QUFDNUIsY0FBYyxtQkFBTyxDQUFDLGtEQUFPO0FBQzdCLHdCQUF3QixtQkFBTyxDQUFDLDhHQUErQjs7QUFFL0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcG9wdWxhdGUvcmVtb3ZlRGVzZWxlY3RlZEZvcmVpZ25GaWVsZC5qcz84NDk0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZ2V0ID0gcmVxdWlyZSgnLi4vZ2V0Jyk7XG5jb25zdCBtcGF0aCA9IHJlcXVpcmUoJ21wYXRoJyk7XG5jb25zdCBwYXJzZVByb2plY3Rpb24gPSByZXF1aXJlKCcuLi9wcm9qZWN0aW9uL3BhcnNlUHJvamVjdGlvbicpO1xuXG4vKiFcbiAqIGlnbm9yZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVtb3ZlRGVzZWxlY3RlZEZvcmVpZ25GaWVsZChmb3JlaWduRmllbGRzLCBvcHRpb25zLCBkb2NzKSB7XG4gIGNvbnN0IHByb2plY3Rpb24gPSBwYXJzZVByb2plY3Rpb24oZ2V0KG9wdGlvbnMsICdzZWxlY3QnLCBudWxsKSwgdHJ1ZSkgfHxcbiAgICBwYXJzZVByb2plY3Rpb24oZ2V0KG9wdGlvbnMsICdvcHRpb25zLnNlbGVjdCcsIG51bGwpLCB0cnVlKTtcblxuICBpZiAocHJvamVjdGlvbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGZvciAoY29uc3QgZm9yZWlnbkZpZWxkIG9mIGZvcmVpZ25GaWVsZHMpIHtcbiAgICBpZiAoIXByb2plY3Rpb24uaGFzT3duUHJvcGVydHkoJy0nICsgZm9yZWlnbkZpZWxkKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCB2YWwgb2YgZG9jcykge1xuICAgICAgaWYgKHZhbC4kX18gIT0gbnVsbCkge1xuICAgICAgICBtcGF0aC51bnNldChmb3JlaWduRmllbGQsIHZhbC5fZG9jKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1wYXRoLnVuc2V0KGZvcmVpZ25GaWVsZCwgdmFsKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/populate/removeDeselectedForeignField.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/populate/setPopulatedVirtualValue.js":
/*!********************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/populate/setPopulatedVirtualValue.js ***!
  \********************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Set a populated virtual value on a document's `$$populatedVirtuals` value\n *\n * @param {*} populatedVirtuals A document's `$$populatedVirtuals`\n * @param {*} name The virtual name\n * @param {*} v The result of the populate query\n * @param {*} options The populate options. This function handles `justOne` and `count` options.\n * @returns {Array<Document>|Document|Object|Array<Object>} the populated virtual value that was set\n */\n\nmodule.exports = function setPopulatedVirtualValue(populatedVirtuals, name, v, options) {\n  if (options.justOne || options.count) {\n    populatedVirtuals[name] = Array.isArray(v) ?\n      v[0] :\n      v;\n\n    if (typeof populatedVirtuals[name] !== 'object') {\n      populatedVirtuals[name] = options.count ? v : null;\n    }\n  } else {\n    populatedVirtuals[name] = Array.isArray(v) ?\n      v :\n      v == null ? [] : [v];\n\n    populatedVirtuals[name] = populatedVirtuals[name].filter(function(doc) {\n      return doc && typeof doc === 'object';\n    });\n  }\n\n  return populatedVirtuals[name];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcG9wdWxhdGUvc2V0UG9wdWxhdGVkVmlydHVhbFZhbHVlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLFdBQVcsR0FBRztBQUNkLFdBQVcsR0FBRztBQUNkLFdBQVcsR0FBRztBQUNkLGFBQWEsK0NBQStDO0FBQzVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL3BvcHVsYXRlL3NldFBvcHVsYXRlZFZpcnR1YWxWYWx1ZS5qcz9iNDhjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTZXQgYSBwb3B1bGF0ZWQgdmlydHVhbCB2YWx1ZSBvbiBhIGRvY3VtZW50J3MgYCQkcG9wdWxhdGVkVmlydHVhbHNgIHZhbHVlXG4gKlxuICogQHBhcmFtIHsqfSBwb3B1bGF0ZWRWaXJ0dWFscyBBIGRvY3VtZW50J3MgYCQkcG9wdWxhdGVkVmlydHVhbHNgXG4gKiBAcGFyYW0geyp9IG5hbWUgVGhlIHZpcnR1YWwgbmFtZVxuICogQHBhcmFtIHsqfSB2IFRoZSByZXN1bHQgb2YgdGhlIHBvcHVsYXRlIHF1ZXJ5XG4gKiBAcGFyYW0geyp9IG9wdGlvbnMgVGhlIHBvcHVsYXRlIG9wdGlvbnMuIFRoaXMgZnVuY3Rpb24gaGFuZGxlcyBganVzdE9uZWAgYW5kIGBjb3VudGAgb3B0aW9ucy5cbiAqIEByZXR1cm5zIHtBcnJheTxEb2N1bWVudD58RG9jdW1lbnR8T2JqZWN0fEFycmF5PE9iamVjdD59IHRoZSBwb3B1bGF0ZWQgdmlydHVhbCB2YWx1ZSB0aGF0IHdhcyBzZXRcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldFBvcHVsYXRlZFZpcnR1YWxWYWx1ZShwb3B1bGF0ZWRWaXJ0dWFscywgbmFtZSwgdiwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucy5qdXN0T25lIHx8IG9wdGlvbnMuY291bnQpIHtcbiAgICBwb3B1bGF0ZWRWaXJ0dWFsc1tuYW1lXSA9IEFycmF5LmlzQXJyYXkodikgP1xuICAgICAgdlswXSA6XG4gICAgICB2O1xuXG4gICAgaWYgKHR5cGVvZiBwb3B1bGF0ZWRWaXJ0dWFsc1tuYW1lXSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHBvcHVsYXRlZFZpcnR1YWxzW25hbWVdID0gb3B0aW9ucy5jb3VudCA/IHYgOiBudWxsO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBwb3B1bGF0ZWRWaXJ0dWFsc1tuYW1lXSA9IEFycmF5LmlzQXJyYXkodikgP1xuICAgICAgdiA6XG4gICAgICB2ID09IG51bGwgPyBbXSA6IFt2XTtcblxuICAgIHBvcHVsYXRlZFZpcnR1YWxzW25hbWVdID0gcG9wdWxhdGVkVmlydHVhbHNbbmFtZV0uZmlsdGVyKGZ1bmN0aW9uKGRvYykge1xuICAgICAgcmV0dXJuIGRvYyAmJiB0eXBlb2YgZG9jID09PSAnb2JqZWN0JztcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBwb3B1bGF0ZWRWaXJ0dWFsc1tuYW1lXTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/populate/setPopulatedVirtualValue.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/populate/skipPopulateValue.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/populate/skipPopulateValue.js ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function SkipPopulateValue(val) {\n  if (!(this instanceof SkipPopulateValue)) {\n    return new SkipPopulateValue(val);\n  }\n\n  this.val = val;\n  return this;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcG9wdWxhdGUvc2tpcFBvcHVsYXRlVmFsdWUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9wb3B1bGF0ZS9za2lwUG9wdWxhdGVWYWx1ZS5qcz8xN2E2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBTa2lwUG9wdWxhdGVWYWx1ZSh2YWwpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNraXBQb3B1bGF0ZVZhbHVlKSkge1xuICAgIHJldHVybiBuZXcgU2tpcFBvcHVsYXRlVmFsdWUodmFsKTtcbiAgfVxuXG4gIHRoaXMudmFsID0gdmFsO1xuICByZXR1cm4gdGhpcztcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/populate/skipPopulateValue.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/populate/validateRef.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/populate/validateRef.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst MongooseError = __webpack_require__(/*! ../../error/mongooseError */ \"(ssr)/./node_modules/mongoose/lib/error/mongooseError.js\");\nconst util = __webpack_require__(/*! util */ \"util\");\n\nmodule.exports = validateRef;\n\nfunction validateRef(ref, path) {\n  if (typeof ref === 'string') {\n    return;\n  }\n\n  if (typeof ref === 'function') {\n    return;\n  }\n\n  throw new MongooseError('Invalid ref at path \"' + path + '\". Got ' +\n    util.inspect(ref, { depth: 0 }));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcG9wdWxhdGUvdmFsaWRhdGVSZWYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsc0JBQXNCLG1CQUFPLENBQUMsMkZBQTJCO0FBQ3pELGFBQWEsbUJBQU8sQ0FBQyxrQkFBTTs7QUFFM0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0JBQXdCLFVBQVU7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL3BvcHVsYXRlL3ZhbGlkYXRlUmVmLmpzP2I0OGUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBNb25nb29zZUVycm9yID0gcmVxdWlyZSgnLi4vLi4vZXJyb3IvbW9uZ29vc2VFcnJvcicpO1xuY29uc3QgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB2YWxpZGF0ZVJlZjtcblxuZnVuY3Rpb24gdmFsaWRhdGVSZWYocmVmLCBwYXRoKSB7XG4gIGlmICh0eXBlb2YgcmVmID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhyb3cgbmV3IE1vbmdvb3NlRXJyb3IoJ0ludmFsaWQgcmVmIGF0IHBhdGggXCInICsgcGF0aCArICdcIi4gR290ICcgK1xuICAgIHV0aWwuaW5zcGVjdChyZWYsIHsgZGVwdGg6IDAgfSkpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/populate/validateRef.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/printJestWarning.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/printJestWarning.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\n\nif (typeof jest !== 'undefined' && !process.env.SUPPRESS_JEST_WARNINGS) {\n  if (typeof window !== 'undefined') {\n    utils.warn('Mongoose: looks like you\\'re trying to test a Mongoose app ' +\n      'with Jest\\'s default jsdom test environment. Please make sure you read ' +\n      'Mongoose\\'s docs on configuring Jest to test Node.js apps: ' +\n      'https://mongoosejs.com/docs/jest.html. Set the SUPPRESS_JEST_WARNINGS to true ' +\n      'to hide this warning.');\n  }\n\n  if (setTimeout.clock != null && typeof setTimeout.clock.Date === 'function') {\n    utils.warn('Mongoose: looks like you\\'re trying to test a Mongoose app ' +\n      'with Jest\\'s mock timers enabled. Please make sure you read ' +\n      'Mongoose\\'s docs on configuring Jest to test Node.js apps: ' +\n      'https://mongoosejs.com/docs/jest.html. Set the SUPPRESS_JEST_WARNINGS to true ' +\n      'to hide this warning.');\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcHJpbnRKZXN0V2FybmluZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixjQUFjLG1CQUFPLENBQUMsNERBQVU7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcHJpbnRKZXN0V2FybmluZy5qcz9iMWY3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5pZiAodHlwZW9mIGplc3QgIT09ICd1bmRlZmluZWQnICYmICFwcm9jZXNzLmVudi5TVVBQUkVTU19KRVNUX1dBUk5JTkdTKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHV0aWxzLndhcm4oJ01vbmdvb3NlOiBsb29rcyBsaWtlIHlvdVxcJ3JlIHRyeWluZyB0byB0ZXN0IGEgTW9uZ29vc2UgYXBwICcgK1xuICAgICAgJ3dpdGggSmVzdFxcJ3MgZGVmYXVsdCBqc2RvbSB0ZXN0IGVudmlyb25tZW50LiBQbGVhc2UgbWFrZSBzdXJlIHlvdSByZWFkICcgK1xuICAgICAgJ01vbmdvb3NlXFwncyBkb2NzIG9uIGNvbmZpZ3VyaW5nIEplc3QgdG8gdGVzdCBOb2RlLmpzIGFwcHM6ICcgK1xuICAgICAgJ2h0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9qZXN0Lmh0bWwuIFNldCB0aGUgU1VQUFJFU1NfSkVTVF9XQVJOSU5HUyB0byB0cnVlICcgK1xuICAgICAgJ3RvIGhpZGUgdGhpcyB3YXJuaW5nLicpO1xuICB9XG5cbiAgaWYgKHNldFRpbWVvdXQuY2xvY2sgIT0gbnVsbCAmJiB0eXBlb2Ygc2V0VGltZW91dC5jbG9jay5EYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdXRpbHMud2FybignTW9uZ29vc2U6IGxvb2tzIGxpa2UgeW91XFwncmUgdHJ5aW5nIHRvIHRlc3QgYSBNb25nb29zZSBhcHAgJyArXG4gICAgICAnd2l0aCBKZXN0XFwncyBtb2NrIHRpbWVycyBlbmFibGVkLiBQbGVhc2UgbWFrZSBzdXJlIHlvdSByZWFkICcgK1xuICAgICAgJ01vbmdvb3NlXFwncyBkb2NzIG9uIGNvbmZpZ3VyaW5nIEplc3QgdG8gdGVzdCBOb2RlLmpzIGFwcHM6ICcgK1xuICAgICAgJ2h0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9qZXN0Lmh0bWwuIFNldCB0aGUgU1VQUFJFU1NfSkVTVF9XQVJOSU5HUyB0byB0cnVlICcgK1xuICAgICAgJ3RvIGhpZGUgdGhpcyB3YXJuaW5nLicpO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/printJestWarning.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/processConnectionOptions.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/processConnectionOptions.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst clone = __webpack_require__(/*! ./clone */ \"(ssr)/./node_modules/mongoose/lib/helpers/clone.js\");\nconst MongooseError = __webpack_require__(/*! ../error/index */ \"(ssr)/./node_modules/mongoose/lib/error/index.js\");\n\nfunction processConnectionOptions(uri, options) {\n  const opts = options ? options : {};\n  const readPreference = opts.readPreference\n    ? opts.readPreference\n    : getUriReadPreference(uri);\n\n  const clonedOpts = clone(opts);\n  const resolvedOpts = (readPreference && readPreference !== 'primary' && readPreference !== 'primaryPreferred')\n    ? resolveOptsConflicts(readPreference, clonedOpts)\n    : clonedOpts;\n\n  return resolvedOpts;\n}\n\nfunction resolveOptsConflicts(pref, opts) {\n  // don't silently override user-provided indexing options\n  if (setsIndexOptions(opts) && setsSecondaryRead(pref)) {\n    throwReadPreferenceError();\n  }\n\n  // if user has not explicitly set any auto-indexing options,\n  // we can silently default them all to false\n  else {\n    return defaultIndexOptsToFalse(opts);\n  }\n}\n\nfunction setsIndexOptions(opts) {\n  const configIdx = opts.config && opts.config.autoIndex;\n  const { autoCreate, autoIndex } = opts;\n  return !!(configIdx || autoCreate || autoIndex);\n}\n\nfunction setsSecondaryRead(prefString) {\n  return !!(prefString === 'secondary' || prefString === 'secondaryPreferred');\n}\n\nfunction getUriReadPreference(connectionString) {\n  const exp = /(?:&|\\?)readPreference=(\\w+)(?:&|$)/;\n  const match = exp.exec(connectionString);\n  return match ? match[1] : null;\n}\n\nfunction defaultIndexOptsToFalse(opts) {\n  opts.config = { autoIndex: false };\n  opts.autoCreate = false;\n  opts.autoIndex = false;\n  return opts;\n}\n\nfunction throwReadPreferenceError() {\n  throw new MongooseError(\n    'MongoDB prohibits index creation on connections that read from ' +\n            'non-primary replicas.  Connections that set \"readPreference\" to \"secondary\" or ' +\n            '\"secondaryPreferred\" may not opt-in to the following connection options: ' +\n            'autoCreate, autoIndex'\n  );\n}\n\nmodule.exports = processConnectionOptions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcHJvY2Vzc0Nvbm5lY3Rpb25PcHRpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGNBQWMsbUJBQU8sQ0FBQyxtRUFBUztBQUMvQixzQkFBc0IsbUJBQU8sQ0FBQyx3RUFBZ0I7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVSx3QkFBd0I7QUFDbEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9wcm9jZXNzQ29ubmVjdGlvbk9wdGlvbnMuanM/ZmUxZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNsb25lID0gcmVxdWlyZSgnLi9jbG9uZScpO1xuY29uc3QgTW9uZ29vc2VFcnJvciA9IHJlcXVpcmUoJy4uL2Vycm9yL2luZGV4Jyk7XG5cbmZ1bmN0aW9uIHByb2Nlc3NDb25uZWN0aW9uT3B0aW9ucyh1cmksIG9wdGlvbnMpIHtcbiAgY29uc3Qgb3B0cyA9IG9wdGlvbnMgPyBvcHRpb25zIDoge307XG4gIGNvbnN0IHJlYWRQcmVmZXJlbmNlID0gb3B0cy5yZWFkUHJlZmVyZW5jZVxuICAgID8gb3B0cy5yZWFkUHJlZmVyZW5jZVxuICAgIDogZ2V0VXJpUmVhZFByZWZlcmVuY2UodXJpKTtcblxuICBjb25zdCBjbG9uZWRPcHRzID0gY2xvbmUob3B0cyk7XG4gIGNvbnN0IHJlc29sdmVkT3B0cyA9IChyZWFkUHJlZmVyZW5jZSAmJiByZWFkUHJlZmVyZW5jZSAhPT0gJ3ByaW1hcnknICYmIHJlYWRQcmVmZXJlbmNlICE9PSAncHJpbWFyeVByZWZlcnJlZCcpXG4gICAgPyByZXNvbHZlT3B0c0NvbmZsaWN0cyhyZWFkUHJlZmVyZW5jZSwgY2xvbmVkT3B0cylcbiAgICA6IGNsb25lZE9wdHM7XG5cbiAgcmV0dXJuIHJlc29sdmVkT3B0cztcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZU9wdHNDb25mbGljdHMocHJlZiwgb3B0cykge1xuICAvLyBkb24ndCBzaWxlbnRseSBvdmVycmlkZSB1c2VyLXByb3ZpZGVkIGluZGV4aW5nIG9wdGlvbnNcbiAgaWYgKHNldHNJbmRleE9wdGlvbnMob3B0cykgJiYgc2V0c1NlY29uZGFyeVJlYWQocHJlZikpIHtcbiAgICB0aHJvd1JlYWRQcmVmZXJlbmNlRXJyb3IoKTtcbiAgfVxuXG4gIC8vIGlmIHVzZXIgaGFzIG5vdCBleHBsaWNpdGx5IHNldCBhbnkgYXV0by1pbmRleGluZyBvcHRpb25zLFxuICAvLyB3ZSBjYW4gc2lsZW50bHkgZGVmYXVsdCB0aGVtIGFsbCB0byBmYWxzZVxuICBlbHNlIHtcbiAgICByZXR1cm4gZGVmYXVsdEluZGV4T3B0c1RvRmFsc2Uob3B0cyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0c0luZGV4T3B0aW9ucyhvcHRzKSB7XG4gIGNvbnN0IGNvbmZpZ0lkeCA9IG9wdHMuY29uZmlnICYmIG9wdHMuY29uZmlnLmF1dG9JbmRleDtcbiAgY29uc3QgeyBhdXRvQ3JlYXRlLCBhdXRvSW5kZXggfSA9IG9wdHM7XG4gIHJldHVybiAhIShjb25maWdJZHggfHwgYXV0b0NyZWF0ZSB8fCBhdXRvSW5kZXgpO1xufVxuXG5mdW5jdGlvbiBzZXRzU2Vjb25kYXJ5UmVhZChwcmVmU3RyaW5nKSB7XG4gIHJldHVybiAhIShwcmVmU3RyaW5nID09PSAnc2Vjb25kYXJ5JyB8fCBwcmVmU3RyaW5nID09PSAnc2Vjb25kYXJ5UHJlZmVycmVkJyk7XG59XG5cbmZ1bmN0aW9uIGdldFVyaVJlYWRQcmVmZXJlbmNlKGNvbm5lY3Rpb25TdHJpbmcpIHtcbiAgY29uc3QgZXhwID0gLyg/OiZ8XFw/KXJlYWRQcmVmZXJlbmNlPShcXHcrKSg/OiZ8JCkvO1xuICBjb25zdCBtYXRjaCA9IGV4cC5leGVjKGNvbm5lY3Rpb25TdHJpbmcpO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRJbmRleE9wdHNUb0ZhbHNlKG9wdHMpIHtcbiAgb3B0cy5jb25maWcgPSB7IGF1dG9JbmRleDogZmFsc2UgfTtcbiAgb3B0cy5hdXRvQ3JlYXRlID0gZmFsc2U7XG4gIG9wdHMuYXV0b0luZGV4ID0gZmFsc2U7XG4gIHJldHVybiBvcHRzO1xufVxuXG5mdW5jdGlvbiB0aHJvd1JlYWRQcmVmZXJlbmNlRXJyb3IoKSB7XG4gIHRocm93IG5ldyBNb25nb29zZUVycm9yKFxuICAgICdNb25nb0RCIHByb2hpYml0cyBpbmRleCBjcmVhdGlvbiBvbiBjb25uZWN0aW9ucyB0aGF0IHJlYWQgZnJvbSAnICtcbiAgICAgICAgICAgICdub24tcHJpbWFyeSByZXBsaWNhcy4gIENvbm5lY3Rpb25zIHRoYXQgc2V0IFwicmVhZFByZWZlcmVuY2VcIiB0byBcInNlY29uZGFyeVwiIG9yICcgK1xuICAgICAgICAgICAgJ1wic2Vjb25kYXJ5UHJlZmVycmVkXCIgbWF5IG5vdCBvcHQtaW4gdG8gdGhlIGZvbGxvd2luZyBjb25uZWN0aW9uIG9wdGlvbnM6ICcgK1xuICAgICAgICAgICAgJ2F1dG9DcmVhdGUsIGF1dG9JbmRleCdcbiAgKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwcm9jZXNzQ29ubmVjdGlvbk9wdGlvbnM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/processConnectionOptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/projection/applyProjection.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/projection/applyProjection.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst hasIncludedChildren = __webpack_require__(/*! ./hasIncludedChildren */ \"(ssr)/./node_modules/mongoose/lib/helpers/projection/hasIncludedChildren.js\");\nconst isExclusive = __webpack_require__(/*! ./isExclusive */ \"(ssr)/./node_modules/mongoose/lib/helpers/projection/isExclusive.js\");\nconst isInclusive = __webpack_require__(/*! ./isInclusive */ \"(ssr)/./node_modules/mongoose/lib/helpers/projection/isInclusive.js\");\nconst isPOJO = (__webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\").isPOJO);\n\nmodule.exports = function applyProjection(doc, projection, _hasIncludedChildren) {\n  if (projection == null) {\n    return doc;\n  }\n  if (doc == null) {\n    return doc;\n  }\n\n  let exclude = null;\n  if (isInclusive(projection)) {\n    exclude = false;\n  } else if (isExclusive(projection)) {\n    exclude = true;\n  }\n\n  if (exclude == null) {\n    return doc;\n  } else if (exclude) {\n    _hasIncludedChildren = _hasIncludedChildren || hasIncludedChildren(projection);\n    return applyExclusiveProjection(doc, projection, _hasIncludedChildren);\n  } else {\n    _hasIncludedChildren = _hasIncludedChildren || hasIncludedChildren(projection);\n    return applyInclusiveProjection(doc, projection, _hasIncludedChildren);\n  }\n};\n\nfunction applyExclusiveProjection(doc, projection, hasIncludedChildren, projectionLimb, prefix) {\n  if (doc == null || typeof doc !== 'object') {\n    return doc;\n  }\n  const ret = { ...doc };\n  projectionLimb = prefix ? (projectionLimb || {}) : projection;\n\n  for (const key of Object.keys(ret)) {\n    const fullPath = prefix ? prefix + '.' + key : key;\n    if (projection.hasOwnProperty(fullPath) || projectionLimb.hasOwnProperty(key)) {\n      if (isPOJO(projection[fullPath]) || isPOJO(projectionLimb[key])) {\n        ret[key] = applyExclusiveProjection(ret[key], projection, hasIncludedChildren, projectionLimb[key], fullPath);\n      } else {\n        delete ret[key];\n      }\n    } else if (hasIncludedChildren[fullPath]) {\n      ret[key] = applyExclusiveProjection(ret[key], projection, hasIncludedChildren, projectionLimb[key], fullPath);\n    }\n  }\n  return ret;\n}\n\nfunction applyInclusiveProjection(doc, projection, hasIncludedChildren, projectionLimb, prefix) {\n  if (doc == null || typeof doc !== 'object') {\n    return doc;\n  }\n  const ret = { ...doc };\n  projectionLimb = prefix ? (projectionLimb || {}) : projection;\n\n  for (const key of Object.keys(ret)) {\n    const fullPath = prefix ? prefix + '.' + key : key;\n    if (projection.hasOwnProperty(fullPath) || projectionLimb.hasOwnProperty(key)) {\n      if (isPOJO(projection[fullPath]) || isPOJO(projectionLimb[key])) {\n        ret[key] = applyInclusiveProjection(ret[key], projection, hasIncludedChildren, projectionLimb[key], fullPath);\n      }\n      continue;\n    } else if (hasIncludedChildren[fullPath]) {\n      ret[key] = applyInclusiveProjection(ret[key], projection, hasIncludedChildren, projectionLimb[key], fullPath);\n    } else {\n      delete ret[key];\n    }\n  }\n  return ret;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcHJvamVjdGlvbi9hcHBseVByb2plY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsNEJBQTRCLG1CQUFPLENBQUMsMEdBQXVCO0FBQzNELG9CQUFvQixtQkFBTyxDQUFDLDBGQUFlO0FBQzNDLG9CQUFvQixtQkFBTyxDQUFDLDBGQUFlO0FBQzNDLGVBQWUsNkZBQTZCOztBQUU1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEIsaURBQWlEOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQixpREFBaUQ7O0FBRWpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL3Byb2plY3Rpb24vYXBwbHlQcm9qZWN0aW9uLmpzPzdlZDEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBoYXNJbmNsdWRlZENoaWxkcmVuID0gcmVxdWlyZSgnLi9oYXNJbmNsdWRlZENoaWxkcmVuJyk7XG5jb25zdCBpc0V4Y2x1c2l2ZSA9IHJlcXVpcmUoJy4vaXNFeGNsdXNpdmUnKTtcbmNvbnN0IGlzSW5jbHVzaXZlID0gcmVxdWlyZSgnLi9pc0luY2x1c2l2ZScpO1xuY29uc3QgaXNQT0pPID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMnKS5pc1BPSk87XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYXBwbHlQcm9qZWN0aW9uKGRvYywgcHJvamVjdGlvbiwgX2hhc0luY2x1ZGVkQ2hpbGRyZW4pIHtcbiAgaWYgKHByb2plY3Rpb24gPT0gbnVsbCkge1xuICAgIHJldHVybiBkb2M7XG4gIH1cbiAgaWYgKGRvYyA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGRvYztcbiAgfVxuXG4gIGxldCBleGNsdWRlID0gbnVsbDtcbiAgaWYgKGlzSW5jbHVzaXZlKHByb2plY3Rpb24pKSB7XG4gICAgZXhjbHVkZSA9IGZhbHNlO1xuICB9IGVsc2UgaWYgKGlzRXhjbHVzaXZlKHByb2plY3Rpb24pKSB7XG4gICAgZXhjbHVkZSA9IHRydWU7XG4gIH1cblxuICBpZiAoZXhjbHVkZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGRvYztcbiAgfSBlbHNlIGlmIChleGNsdWRlKSB7XG4gICAgX2hhc0luY2x1ZGVkQ2hpbGRyZW4gPSBfaGFzSW5jbHVkZWRDaGlsZHJlbiB8fCBoYXNJbmNsdWRlZENoaWxkcmVuKHByb2plY3Rpb24pO1xuICAgIHJldHVybiBhcHBseUV4Y2x1c2l2ZVByb2plY3Rpb24oZG9jLCBwcm9qZWN0aW9uLCBfaGFzSW5jbHVkZWRDaGlsZHJlbik7XG4gIH0gZWxzZSB7XG4gICAgX2hhc0luY2x1ZGVkQ2hpbGRyZW4gPSBfaGFzSW5jbHVkZWRDaGlsZHJlbiB8fCBoYXNJbmNsdWRlZENoaWxkcmVuKHByb2plY3Rpb24pO1xuICAgIHJldHVybiBhcHBseUluY2x1c2l2ZVByb2plY3Rpb24oZG9jLCBwcm9qZWN0aW9uLCBfaGFzSW5jbHVkZWRDaGlsZHJlbik7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGFwcGx5RXhjbHVzaXZlUHJvamVjdGlvbihkb2MsIHByb2plY3Rpb24sIGhhc0luY2x1ZGVkQ2hpbGRyZW4sIHByb2plY3Rpb25MaW1iLCBwcmVmaXgpIHtcbiAgaWYgKGRvYyA9PSBudWxsIHx8IHR5cGVvZiBkb2MgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGRvYztcbiAgfVxuICBjb25zdCByZXQgPSB7IC4uLmRvYyB9O1xuICBwcm9qZWN0aW9uTGltYiA9IHByZWZpeCA/IChwcm9qZWN0aW9uTGltYiB8fCB7fSkgOiBwcm9qZWN0aW9uO1xuXG4gIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHJldCkpIHtcbiAgICBjb25zdCBmdWxsUGF0aCA9IHByZWZpeCA/IHByZWZpeCArICcuJyArIGtleSA6IGtleTtcbiAgICBpZiAocHJvamVjdGlvbi5oYXNPd25Qcm9wZXJ0eShmdWxsUGF0aCkgfHwgcHJvamVjdGlvbkxpbWIuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgaWYgKGlzUE9KTyhwcm9qZWN0aW9uW2Z1bGxQYXRoXSkgfHwgaXNQT0pPKHByb2plY3Rpb25MaW1iW2tleV0pKSB7XG4gICAgICAgIHJldFtrZXldID0gYXBwbHlFeGNsdXNpdmVQcm9qZWN0aW9uKHJldFtrZXldLCBwcm9qZWN0aW9uLCBoYXNJbmNsdWRlZENoaWxkcmVuLCBwcm9qZWN0aW9uTGltYltrZXldLCBmdWxsUGF0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWxldGUgcmV0W2tleV07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChoYXNJbmNsdWRlZENoaWxkcmVuW2Z1bGxQYXRoXSkge1xuICAgICAgcmV0W2tleV0gPSBhcHBseUV4Y2x1c2l2ZVByb2plY3Rpb24ocmV0W2tleV0sIHByb2plY3Rpb24sIGhhc0luY2x1ZGVkQ2hpbGRyZW4sIHByb2plY3Rpb25MaW1iW2tleV0sIGZ1bGxQYXRoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gYXBwbHlJbmNsdXNpdmVQcm9qZWN0aW9uKGRvYywgcHJvamVjdGlvbiwgaGFzSW5jbHVkZWRDaGlsZHJlbiwgcHJvamVjdGlvbkxpbWIsIHByZWZpeCkge1xuICBpZiAoZG9jID09IG51bGwgfHwgdHlwZW9mIGRvYyAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZG9jO1xuICB9XG4gIGNvbnN0IHJldCA9IHsgLi4uZG9jIH07XG4gIHByb2plY3Rpb25MaW1iID0gcHJlZml4ID8gKHByb2plY3Rpb25MaW1iIHx8IHt9KSA6IHByb2plY3Rpb247XG5cbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMocmV0KSkge1xuICAgIGNvbnN0IGZ1bGxQYXRoID0gcHJlZml4ID8gcHJlZml4ICsgJy4nICsga2V5IDoga2V5O1xuICAgIGlmIChwcm9qZWN0aW9uLmhhc093blByb3BlcnR5KGZ1bGxQYXRoKSB8fCBwcm9qZWN0aW9uTGltYi5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBpZiAoaXNQT0pPKHByb2plY3Rpb25bZnVsbFBhdGhdKSB8fCBpc1BPSk8ocHJvamVjdGlvbkxpbWJba2V5XSkpIHtcbiAgICAgICAgcmV0W2tleV0gPSBhcHBseUluY2x1c2l2ZVByb2plY3Rpb24ocmV0W2tleV0sIHByb2plY3Rpb24sIGhhc0luY2x1ZGVkQ2hpbGRyZW4sIHByb2plY3Rpb25MaW1iW2tleV0sIGZ1bGxQYXRoKTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gZWxzZSBpZiAoaGFzSW5jbHVkZWRDaGlsZHJlbltmdWxsUGF0aF0pIHtcbiAgICAgIHJldFtrZXldID0gYXBwbHlJbmNsdXNpdmVQcm9qZWN0aW9uKHJldFtrZXldLCBwcm9qZWN0aW9uLCBoYXNJbmNsdWRlZENoaWxkcmVuLCBwcm9qZWN0aW9uTGltYltrZXldLCBmdWxsUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSByZXRba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/projection/applyProjection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/projection/hasIncludedChildren.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/projection/hasIncludedChildren.js ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Creates an object that precomputes whether a given path has child fields in\n * the projection.\n *\n * #### Example:\n *\n *     const res = hasIncludedChildren({ 'a.b.c': 0 });\n *     res.a; // 1\n *     res['a.b']; // 1\n *     res['a.b.c']; // 1\n *     res['a.c']; // undefined\n *\n * @param {Object} fields\n * @api private\n */\n\nmodule.exports = function hasIncludedChildren(fields) {\n  const hasIncludedChildren = {};\n  const keys = Object.keys(fields);\n\n  for (const key of keys) {\n\n    if (key.indexOf('.') === -1) {\n      hasIncludedChildren[key] = 1;\n      continue;\n    }\n    const parts = key.split('.');\n    let c = parts[0];\n\n    for (let i = 0; i < parts.length; ++i) {\n      hasIncludedChildren[c] = 1;\n      if (i + 1 < parts.length) {\n        c = c + '.' + parts[i + 1];\n      }\n    }\n  }\n\n  return hasIncludedChildren;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcHJvamVjdGlvbi9oYXNJbmNsdWRlZENoaWxkcmVuLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxZQUFZO0FBQ3JELGNBQWM7QUFDZCxtQkFBbUI7QUFDbkIscUJBQXFCO0FBQ3JCLG1CQUFtQjtBQUNuQjtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLGtCQUFrQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcHJvamVjdGlvbi9oYXNJbmNsdWRlZENoaWxkcmVuLmpzP2JmZTkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHRoYXQgcHJlY29tcHV0ZXMgd2hldGhlciBhIGdpdmVuIHBhdGggaGFzIGNoaWxkIGZpZWxkcyBpblxuICogdGhlIHByb2plY3Rpb24uXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBjb25zdCByZXMgPSBoYXNJbmNsdWRlZENoaWxkcmVuKHsgJ2EuYi5jJzogMCB9KTtcbiAqICAgICByZXMuYTsgLy8gMVxuICogICAgIHJlc1snYS5iJ107IC8vIDFcbiAqICAgICByZXNbJ2EuYi5jJ107IC8vIDFcbiAqICAgICByZXNbJ2EuYyddOyAvLyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZmllbGRzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc0luY2x1ZGVkQ2hpbGRyZW4oZmllbGRzKSB7XG4gIGNvbnN0IGhhc0luY2x1ZGVkQ2hpbGRyZW4gPSB7fTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGZpZWxkcyk7XG5cbiAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuXG4gICAgaWYgKGtleS5pbmRleE9mKCcuJykgPT09IC0xKSB7XG4gICAgICBoYXNJbmNsdWRlZENoaWxkcmVuW2tleV0gPSAxO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IHBhcnRzID0ga2V5LnNwbGl0KCcuJyk7XG4gICAgbGV0IGMgPSBwYXJ0c1swXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyArK2kpIHtcbiAgICAgIGhhc0luY2x1ZGVkQ2hpbGRyZW5bY10gPSAxO1xuICAgICAgaWYgKGkgKyAxIDwgcGFydHMubGVuZ3RoKSB7XG4gICAgICAgIGMgPSBjICsgJy4nICsgcGFydHNbaSArIDFdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBoYXNJbmNsdWRlZENoaWxkcmVuO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/projection/hasIncludedChildren.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/projection/isDefiningProjection.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/projection/isDefiningProjection.js ***!
  \******************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/*!\n * ignore\n */\n\nmodule.exports = function isDefiningProjection(val) {\n  if (val == null) {\n    // `undefined` or `null` become exclusive projections\n    return true;\n  }\n  if (typeof val === 'object') {\n    // Only cases where a value does **not** define whether the whole projection\n    // is inclusive or exclusive are `$meta` and `$slice`.\n    return !('$meta' in val) && !('$slice' in val);\n  }\n  return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcHJvamVjdGlvbi9pc0RlZmluaW5nUHJvamVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9wcm9qZWN0aW9uL2lzRGVmaW5pbmdQcm9qZWN0aW9uLmpzP2IzMTIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKiFcbiAqIGlnbm9yZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNEZWZpbmluZ1Byb2plY3Rpb24odmFsKSB7XG4gIGlmICh2YWwgPT0gbnVsbCkge1xuICAgIC8vIGB1bmRlZmluZWRgIG9yIGBudWxsYCBiZWNvbWUgZXhjbHVzaXZlIHByb2plY3Rpb25zXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgLy8gT25seSBjYXNlcyB3aGVyZSBhIHZhbHVlIGRvZXMgKipub3QqKiBkZWZpbmUgd2hldGhlciB0aGUgd2hvbGUgcHJvamVjdGlvblxuICAgIC8vIGlzIGluY2x1c2l2ZSBvciBleGNsdXNpdmUgYXJlIGAkbWV0YWAgYW5kIGAkc2xpY2VgLlxuICAgIHJldHVybiAhKCckbWV0YScgaW4gdmFsKSAmJiAhKCckc2xpY2UnIGluIHZhbCk7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/projection/isDefiningProjection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/projection/isExclusive.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/projection/isExclusive.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst isDefiningProjection = __webpack_require__(/*! ./isDefiningProjection */ \"(ssr)/./node_modules/mongoose/lib/helpers/projection/isDefiningProjection.js\");\n\n/*!\n * ignore\n */\n\nmodule.exports = function isExclusive(projection) {\n  if (projection == null) {\n    return null;\n  }\n\n  const keys = Object.keys(projection);\n  let exclude = null;\n\n  if (keys.length === 1 && keys[0] === '_id') {\n    exclude = !projection._id;\n  } else {\n    for (let ki = 0; ki < keys.length; ++ki) {\n      // Does this projection explicitly define inclusion/exclusion?\n      // Explicitly avoid `$meta` and `$slice`\n      const key = keys[ki];\n      if (key !== '_id' && isDefiningProjection(projection[key])) {\n        exclude = (projection[key] != null && typeof projection[key] === 'object') ?\n          isExclusive(projection[key]) :\n          !projection[key];\n        break;\n      }\n    }\n  }\n\n  return exclude;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcHJvamVjdGlvbi9pc0V4Y2x1c2l2ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw2QkFBNkIsbUJBQU8sQ0FBQyw0R0FBd0I7O0FBRTdEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0oscUJBQXFCLGtCQUFrQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL3Byb2plY3Rpb24vaXNFeGNsdXNpdmUuanM/NWY5MyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGlzRGVmaW5pbmdQcm9qZWN0aW9uID0gcmVxdWlyZSgnLi9pc0RlZmluaW5nUHJvamVjdGlvbicpO1xuXG4vKiFcbiAqIGlnbm9yZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNFeGNsdXNpdmUocHJvamVjdGlvbikge1xuICBpZiAocHJvamVjdGlvbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocHJvamVjdGlvbik7XG4gIGxldCBleGNsdWRlID0gbnVsbDtcblxuICBpZiAoa2V5cy5sZW5ndGggPT09IDEgJiYga2V5c1swXSA9PT0gJ19pZCcpIHtcbiAgICBleGNsdWRlID0gIXByb2plY3Rpb24uX2lkO1xuICB9IGVsc2Uge1xuICAgIGZvciAobGV0IGtpID0gMDsga2kgPCBrZXlzLmxlbmd0aDsgKytraSkge1xuICAgICAgLy8gRG9lcyB0aGlzIHByb2plY3Rpb24gZXhwbGljaXRseSBkZWZpbmUgaW5jbHVzaW9uL2V4Y2x1c2lvbj9cbiAgICAgIC8vIEV4cGxpY2l0bHkgYXZvaWQgYCRtZXRhYCBhbmQgYCRzbGljZWBcbiAgICAgIGNvbnN0IGtleSA9IGtleXNba2ldO1xuICAgICAgaWYgKGtleSAhPT0gJ19pZCcgJiYgaXNEZWZpbmluZ1Byb2plY3Rpb24ocHJvamVjdGlvbltrZXldKSkge1xuICAgICAgICBleGNsdWRlID0gKHByb2plY3Rpb25ba2V5XSAhPSBudWxsICYmIHR5cGVvZiBwcm9qZWN0aW9uW2tleV0gPT09ICdvYmplY3QnKSA/XG4gICAgICAgICAgaXNFeGNsdXNpdmUocHJvamVjdGlvbltrZXldKSA6XG4gICAgICAgICAgIXByb2plY3Rpb25ba2V5XTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGV4Y2x1ZGU7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/projection/isExclusive.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/projection/isInclusive.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/projection/isInclusive.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst isDefiningProjection = __webpack_require__(/*! ./isDefiningProjection */ \"(ssr)/./node_modules/mongoose/lib/helpers/projection/isDefiningProjection.js\");\n\n/*!\n * ignore\n */\n\nmodule.exports = function isInclusive(projection) {\n  if (projection == null) {\n    return false;\n  }\n\n  const props = Object.keys(projection);\n  const numProps = props.length;\n  if (numProps === 0) {\n    return false;\n  }\n\n  for (let i = 0; i < numProps; ++i) {\n    const prop = props[i];\n    // Plus paths can't define the projection (see gh-7050)\n    if (prop.startsWith('+')) {\n      continue;\n    }\n    // If field is truthy (1, true, etc.) and not an object, then this\n    // projection must be inclusive. If object, assume its $meta, $slice, etc.\n    if (isDefiningProjection(projection[prop]) && !!projection[prop]) {\n      if (projection[prop] != null && typeof projection[prop] === 'object') {\n        return isInclusive(projection[prop]);\n      } else {\n        return !!projection[prop];\n      }\n    }\n  }\n\n  return false;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcHJvamVjdGlvbi9pc0luY2x1c2l2ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw2QkFBNkIsbUJBQU8sQ0FBQyw0R0FBd0I7O0FBRTdEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQixjQUFjO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL3Byb2plY3Rpb24vaXNJbmNsdXNpdmUuanM/ZDJlZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGlzRGVmaW5pbmdQcm9qZWN0aW9uID0gcmVxdWlyZSgnLi9pc0RlZmluaW5nUHJvamVjdGlvbicpO1xuXG4vKiFcbiAqIGlnbm9yZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJbmNsdXNpdmUocHJvamVjdGlvbikge1xuICBpZiAocHJvamVjdGlvbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgcHJvcHMgPSBPYmplY3Qua2V5cyhwcm9qZWN0aW9uKTtcbiAgY29uc3QgbnVtUHJvcHMgPSBwcm9wcy5sZW5ndGg7XG4gIGlmIChudW1Qcm9wcyA9PT0gMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtUHJvcHM7ICsraSkge1xuICAgIGNvbnN0IHByb3AgPSBwcm9wc1tpXTtcbiAgICAvLyBQbHVzIHBhdGhzIGNhbid0IGRlZmluZSB0aGUgcHJvamVjdGlvbiAoc2VlIGdoLTcwNTApXG4gICAgaWYgKHByb3Auc3RhcnRzV2l0aCgnKycpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgLy8gSWYgZmllbGQgaXMgdHJ1dGh5ICgxLCB0cnVlLCBldGMuKSBhbmQgbm90IGFuIG9iamVjdCwgdGhlbiB0aGlzXG4gICAgLy8gcHJvamVjdGlvbiBtdXN0IGJlIGluY2x1c2l2ZS4gSWYgb2JqZWN0LCBhc3N1bWUgaXRzICRtZXRhLCAkc2xpY2UsIGV0Yy5cbiAgICBpZiAoaXNEZWZpbmluZ1Byb2plY3Rpb24ocHJvamVjdGlvbltwcm9wXSkgJiYgISFwcm9qZWN0aW9uW3Byb3BdKSB7XG4gICAgICBpZiAocHJvamVjdGlvbltwcm9wXSAhPSBudWxsICYmIHR5cGVvZiBwcm9qZWN0aW9uW3Byb3BdID09PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gaXNJbmNsdXNpdmUocHJvamVjdGlvbltwcm9wXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gISFwcm9qZWN0aW9uW3Byb3BdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/projection/isInclusive.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/projection/isNestedProjection.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/projection/isNestedProjection.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function isNestedProjection(val) {\n  if (val == null || typeof val !== 'object') {\n    return false;\n  }\n  return val.$slice == null && val.$elemMatch == null && val.$meta == null && val.$ == null;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcHJvamVjdGlvbi9pc05lc3RlZFByb2plY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9wcm9qZWN0aW9uL2lzTmVzdGVkUHJvamVjdGlvbi5qcz9jNWEwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc05lc3RlZFByb2plY3Rpb24odmFsKSB7XG4gIGlmICh2YWwgPT0gbnVsbCB8fCB0eXBlb2YgdmFsICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdmFsLiRzbGljZSA9PSBudWxsICYmIHZhbC4kZWxlbU1hdGNoID09IG51bGwgJiYgdmFsLiRtZXRhID09IG51bGwgJiYgdmFsLiQgPT0gbnVsbDtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/projection/isNestedProjection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/projection/isPathExcluded.js":
/*!************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/projection/isPathExcluded.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst isDefiningProjection = __webpack_require__(/*! ./isDefiningProjection */ \"(ssr)/./node_modules/mongoose/lib/helpers/projection/isDefiningProjection.js\");\n\n/**\n * Determines if `path` is excluded by `projection`\n *\n * @param {Object} projection\n * @param {String} path\n * @return {Boolean}\n * @api private\n */\n\nmodule.exports = function isPathExcluded(projection, path) {\n  if (projection == null) {\n    return false;\n  }\n\n  if (path === '_id') {\n    return projection._id === 0;\n  }\n\n  const paths = Object.keys(projection);\n  let type = null;\n\n  for (const _path of paths) {\n    if (isDefiningProjection(projection[_path])) {\n      type = projection[path] === 1 ? 'inclusive' : 'exclusive';\n      break;\n    }\n  }\n\n  if (type === 'inclusive') {\n    return projection[path] !== 1;\n  }\n  if (type === 'exclusive') {\n    return projection[path] === 0;\n  }\n  return false;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcHJvamVjdGlvbi9pc1BhdGhFeGNsdWRlZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw2QkFBNkIsbUJBQU8sQ0FBQyw0R0FBd0I7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL3Byb2plY3Rpb24vaXNQYXRoRXhjbHVkZWQuanM/N2ZlNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGlzRGVmaW5pbmdQcm9qZWN0aW9uID0gcmVxdWlyZSgnLi9pc0RlZmluaW5nUHJvamVjdGlvbicpO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgYHBhdGhgIGlzIGV4Y2x1ZGVkIGJ5IGBwcm9qZWN0aW9uYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9qZWN0aW9uXG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNQYXRoRXhjbHVkZWQocHJvamVjdGlvbiwgcGF0aCkge1xuICBpZiAocHJvamVjdGlvbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHBhdGggPT09ICdfaWQnKSB7XG4gICAgcmV0dXJuIHByb2plY3Rpb24uX2lkID09PSAwO1xuICB9XG5cbiAgY29uc3QgcGF0aHMgPSBPYmplY3Qua2V5cyhwcm9qZWN0aW9uKTtcbiAgbGV0IHR5cGUgPSBudWxsO1xuXG4gIGZvciAoY29uc3QgX3BhdGggb2YgcGF0aHMpIHtcbiAgICBpZiAoaXNEZWZpbmluZ1Byb2plY3Rpb24ocHJvamVjdGlvbltfcGF0aF0pKSB7XG4gICAgICB0eXBlID0gcHJvamVjdGlvbltwYXRoXSA9PT0gMSA/ICdpbmNsdXNpdmUnIDogJ2V4Y2x1c2l2ZSc7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZSA9PT0gJ2luY2x1c2l2ZScpIHtcbiAgICByZXR1cm4gcHJvamVjdGlvbltwYXRoXSAhPT0gMTtcbiAgfVxuICBpZiAodHlwZSA9PT0gJ2V4Y2x1c2l2ZScpIHtcbiAgICByZXR1cm4gcHJvamVjdGlvbltwYXRoXSA9PT0gMDtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/projection/isPathExcluded.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/projection/isPathSelectedInclusive.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/projection/isPathSelectedInclusive.js ***!
  \*********************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/*!\n * ignore\n */\n\nmodule.exports = function isPathSelectedInclusive(fields, path) {\n  const chunks = path.split('.');\n  let cur = '';\n  let j;\n  let keys;\n  let numKeys;\n  for (let i = 0; i < chunks.length; ++i) {\n    cur += cur.length ? '.' : '' + chunks[i];\n    if (fields[cur]) {\n      keys = Object.keys(fields);\n      numKeys = keys.length;\n      for (j = 0; j < numKeys; ++j) {\n        if (keys[i].indexOf(cur + '.') === 0 && keys[i].indexOf(path) !== 0) {\n          continue;\n        }\n      }\n      return true;\n    }\n  }\n\n  return false;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcHJvamVjdGlvbi9pc1BhdGhTZWxlY3RlZEluY2x1c2l2ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG1CQUFtQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixhQUFhO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL3Byb2plY3Rpb24vaXNQYXRoU2VsZWN0ZWRJbmNsdXNpdmUuanM/MGE1OSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1BhdGhTZWxlY3RlZEluY2x1c2l2ZShmaWVsZHMsIHBhdGgpIHtcbiAgY29uc3QgY2h1bmtzID0gcGF0aC5zcGxpdCgnLicpO1xuICBsZXQgY3VyID0gJyc7XG4gIGxldCBqO1xuICBsZXQga2V5cztcbiAgbGV0IG51bUtleXM7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2h1bmtzLmxlbmd0aDsgKytpKSB7XG4gICAgY3VyICs9IGN1ci5sZW5ndGggPyAnLicgOiAnJyArIGNodW5rc1tpXTtcbiAgICBpZiAoZmllbGRzW2N1cl0pIHtcbiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyhmaWVsZHMpO1xuICAgICAgbnVtS2V5cyA9IGtleXMubGVuZ3RoO1xuICAgICAgZm9yIChqID0gMDsgaiA8IG51bUtleXM7ICsraikge1xuICAgICAgICBpZiAoa2V5c1tpXS5pbmRleE9mKGN1ciArICcuJykgPT09IDAgJiYga2V5c1tpXS5pbmRleE9mKHBhdGgpICE9PSAwKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/projection/isPathSelectedInclusive.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/projection/isSubpath.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/projection/isSubpath.js ***!
  \*******************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Determines if `path2` is a subpath of or equal to `path1`\n *\n * @param {string} path1\n * @param {string} path2\n * @return {Boolean}\n * @api private\n */\n\nmodule.exports = function isSubpath(path1, path2) {\n  return path1 === path2 || path2.startsWith(path1 + '.');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcHJvamVjdGlvbi9pc1N1YnBhdGguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL3Byb2plY3Rpb24vaXNTdWJwYXRoLmpzP2MzOTEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgYHBhdGgyYCBpcyBhIHN1YnBhdGggb2Ygb3IgZXF1YWwgdG8gYHBhdGgxYFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoMVxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGgyXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1N1YnBhdGgocGF0aDEsIHBhdGgyKSB7XG4gIHJldHVybiBwYXRoMSA9PT0gcGF0aDIgfHwgcGF0aDIuc3RhcnRzV2l0aChwYXRoMSArICcuJyk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/projection/isSubpath.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/projection/parseProjection.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/projection/parseProjection.js ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Convert a string or array into a projection object, retaining all\n * `-` and `+` paths.\n */\n\nmodule.exports = function parseProjection(v, retainMinusPaths) {\n  const type = typeof v;\n\n  if (type === 'string') {\n    v = v.split(/\\s+/);\n  }\n  if (!Array.isArray(v) && Object.prototype.toString.call(v) !== '[object Arguments]') {\n    return v;\n  }\n\n  const len = v.length;\n  const ret = {};\n  for (let i = 0; i < len; ++i) {\n    let field = v[i];\n    if (!field) {\n      continue;\n    }\n    const include = '-' == field[0] ? 0 : 1;\n    if (!retainMinusPaths && include === 0) {\n      field = field.substring(1);\n    }\n    ret[field] = include;\n  }\n\n  return ret;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcHJvamVjdGlvbi9wYXJzZVByb2plY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQixTQUFTO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL3Byb2plY3Rpb24vcGFyc2VQcm9qZWN0aW9uLmpzPzQ0OTMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvbnZlcnQgYSBzdHJpbmcgb3IgYXJyYXkgaW50byBhIHByb2plY3Rpb24gb2JqZWN0LCByZXRhaW5pbmcgYWxsXG4gKiBgLWAgYW5kIGArYCBwYXRocy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlUHJvamVjdGlvbih2LCByZXRhaW5NaW51c1BhdGhzKSB7XG4gIGNvbnN0IHR5cGUgPSB0eXBlb2YgdjtcblxuICBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICB2ID0gdi5zcGxpdCgvXFxzKy8pO1xuICB9XG4gIGlmICghQXJyYXkuaXNBcnJheSh2KSAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodikgIT09ICdbb2JqZWN0IEFyZ3VtZW50c10nKSB7XG4gICAgcmV0dXJuIHY7XG4gIH1cblxuICBjb25zdCBsZW4gPSB2Lmxlbmd0aDtcbiAgY29uc3QgcmV0ID0ge307XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBsZXQgZmllbGQgPSB2W2ldO1xuICAgIGlmICghZmllbGQpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCBpbmNsdWRlID0gJy0nID09IGZpZWxkWzBdID8gMCA6IDE7XG4gICAgaWYgKCFyZXRhaW5NaW51c1BhdGhzICYmIGluY2x1ZGUgPT09IDApIHtcbiAgICAgIGZpZWxkID0gZmllbGQuc3Vic3RyaW5nKDEpO1xuICAgIH1cbiAgICByZXRbZmllbGRdID0gaW5jbHVkZTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/projection/parseProjection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/promiseOrCallback.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/promiseOrCallback.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst immediate = __webpack_require__(/*! ./immediate */ \"(ssr)/./node_modules/mongoose/lib/helpers/immediate.js\");\n\nconst emittedSymbol = Symbol('mongoose#emitted');\n\nmodule.exports = function promiseOrCallback(callback, fn, ee, Promise) {\n  if (typeof callback === 'function') {\n    try {\n      return fn(function(error) {\n        if (error != null) {\n          if (ee != null && ee.listeners != null && ee.listeners('error').length > 0 && !error[emittedSymbol]) {\n            error[emittedSymbol] = true;\n            ee.emit('error', error);\n          }\n          try {\n            callback(error);\n          } catch (error) {\n            return immediate(() => {\n              throw error;\n            });\n          }\n          return;\n        }\n        callback.apply(this, arguments);\n      });\n    } catch (error) {\n      if (ee != null && ee.listeners != null && ee.listeners('error').length > 0 && !error[emittedSymbol]) {\n        error[emittedSymbol] = true;\n        ee.emit('error', error);\n      }\n\n      return callback(error);\n    }\n  }\n\n  Promise = Promise || global.Promise;\n\n  return new Promise((resolve, reject) => {\n    fn(function(error, res) {\n      if (error != null) {\n        if (ee != null && ee.listeners != null && ee.listeners('error').length > 0 && !error[emittedSymbol]) {\n          error[emittedSymbol] = true;\n          ee.emit('error', error);\n        }\n        return reject(error);\n      }\n      if (arguments.length > 2) {\n        return resolve(Array.prototype.slice.call(arguments, 1));\n      }\n      resolve(res);\n    });\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcHJvbWlzZU9yQ2FsbGJhY2suanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCLG1CQUFPLENBQUMsMkVBQWE7O0FBRXZDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcHJvbWlzZU9yQ2FsbGJhY2suanM/ZTJiNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGltbWVkaWF0ZSA9IHJlcXVpcmUoJy4vaW1tZWRpYXRlJyk7XG5cbmNvbnN0IGVtaXR0ZWRTeW1ib2wgPSBTeW1ib2woJ21vbmdvb3NlI2VtaXR0ZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwcm9taXNlT3JDYWxsYmFjayhjYWxsYmFjaywgZm4sIGVlLCBQcm9taXNlKSB7XG4gIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZuKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvciAhPSBudWxsKSB7XG4gICAgICAgICAgaWYgKGVlICE9IG51bGwgJiYgZWUubGlzdGVuZXJzICE9IG51bGwgJiYgZWUubGlzdGVuZXJzKCdlcnJvcicpLmxlbmd0aCA+IDAgJiYgIWVycm9yW2VtaXR0ZWRTeW1ib2xdKSB7XG4gICAgICAgICAgICBlcnJvcltlbWl0dGVkU3ltYm9sXSA9IHRydWU7XG4gICAgICAgICAgICBlZS5lbWl0KCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGltbWVkaWF0ZSgoKSA9PiB7XG4gICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmIChlZSAhPSBudWxsICYmIGVlLmxpc3RlbmVycyAhPSBudWxsICYmIGVlLmxpc3RlbmVycygnZXJyb3InKS5sZW5ndGggPiAwICYmICFlcnJvcltlbWl0dGVkU3ltYm9sXSkge1xuICAgICAgICBlcnJvcltlbWl0dGVkU3ltYm9sXSA9IHRydWU7XG4gICAgICAgIGVlLmVtaXQoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2FsbGJhY2soZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIFByb21pc2UgPSBQcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlO1xuXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgZm4oZnVuY3Rpb24oZXJyb3IsIHJlcykge1xuICAgICAgaWYgKGVycm9yICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGVlICE9IG51bGwgJiYgZWUubGlzdGVuZXJzICE9IG51bGwgJiYgZWUubGlzdGVuZXJzKCdlcnJvcicpLmxlbmd0aCA+IDAgJiYgIWVycm9yW2VtaXR0ZWRTeW1ib2xdKSB7XG4gICAgICAgICAgZXJyb3JbZW1pdHRlZFN5bWJvbF0gPSB0cnVlO1xuICAgICAgICAgIGVlLmVtaXQoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWplY3QoZXJyb3IpO1xuICAgICAgfVxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShyZXMpO1xuICAgIH0pO1xuICB9KTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/promiseOrCallback.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/query/applyGlobalOption.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/query/applyGlobalOption.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst utils = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\n\nfunction applyGlobalMaxTimeMS(options, connectionOptions, baseOptions) {\n  applyGlobalOption(options, connectionOptions, baseOptions, 'maxTimeMS');\n}\n\nfunction applyGlobalDiskUse(options, connectionOptions, baseOptions) {\n  applyGlobalOption(options, connectionOptions, baseOptions, 'allowDiskUse');\n}\n\nmodule.exports = {\n  applyGlobalMaxTimeMS,\n  applyGlobalDiskUse\n};\n\n\nfunction applyGlobalOption(options, connectionOptions, baseOptions, optionName) {\n  if (utils.hasUserDefinedProperty(options, optionName)) {\n    return;\n  }\n\n  if (utils.hasUserDefinedProperty(connectionOptions, optionName)) {\n    options[optionName] = connectionOptions[optionName];\n  } else if (utils.hasUserDefinedProperty(baseOptions, optionName)) {\n    options[optionName] = baseOptions[optionName];\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcXVlcnkvYXBwbHlHbG9iYWxPcHRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLCtEQUFhOztBQUVuQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcXVlcnkvYXBwbHlHbG9iYWxPcHRpb24uanM/MzNjYiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gYXBwbHlHbG9iYWxNYXhUaW1lTVMob3B0aW9ucywgY29ubmVjdGlvbk9wdGlvbnMsIGJhc2VPcHRpb25zKSB7XG4gIGFwcGx5R2xvYmFsT3B0aW9uKG9wdGlvbnMsIGNvbm5lY3Rpb25PcHRpb25zLCBiYXNlT3B0aW9ucywgJ21heFRpbWVNUycpO1xufVxuXG5mdW5jdGlvbiBhcHBseUdsb2JhbERpc2tVc2Uob3B0aW9ucywgY29ubmVjdGlvbk9wdGlvbnMsIGJhc2VPcHRpb25zKSB7XG4gIGFwcGx5R2xvYmFsT3B0aW9uKG9wdGlvbnMsIGNvbm5lY3Rpb25PcHRpb25zLCBiYXNlT3B0aW9ucywgJ2FsbG93RGlza1VzZScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYXBwbHlHbG9iYWxNYXhUaW1lTVMsXG4gIGFwcGx5R2xvYmFsRGlza1VzZVxufTtcblxuXG5mdW5jdGlvbiBhcHBseUdsb2JhbE9wdGlvbihvcHRpb25zLCBjb25uZWN0aW9uT3B0aW9ucywgYmFzZU9wdGlvbnMsIG9wdGlvbk5hbWUpIHtcbiAgaWYgKHV0aWxzLmhhc1VzZXJEZWZpbmVkUHJvcGVydHkob3B0aW9ucywgb3B0aW9uTmFtZSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodXRpbHMuaGFzVXNlckRlZmluZWRQcm9wZXJ0eShjb25uZWN0aW9uT3B0aW9ucywgb3B0aW9uTmFtZSkpIHtcbiAgICBvcHRpb25zW29wdGlvbk5hbWVdID0gY29ubmVjdGlvbk9wdGlvbnNbb3B0aW9uTmFtZV07XG4gIH0gZWxzZSBpZiAodXRpbHMuaGFzVXNlckRlZmluZWRQcm9wZXJ0eShiYXNlT3B0aW9ucywgb3B0aW9uTmFtZSkpIHtcbiAgICBvcHRpb25zW29wdGlvbk5hbWVdID0gYmFzZU9wdGlvbnNbb3B0aW9uTmFtZV07XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/query/applyGlobalOption.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/query/cast$expr.js":
/*!**************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/query/cast$expr.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst CastError = __webpack_require__(/*! ../../error/cast */ \"(ssr)/./node_modules/mongoose/lib/error/cast.js\");\nconst StrictModeError = __webpack_require__(/*! ../../error/strict */ \"(ssr)/./node_modules/mongoose/lib/error/strict.js\");\nconst castNumber = __webpack_require__(/*! ../../cast/number */ \"(ssr)/./node_modules/mongoose/lib/cast/number.js\");\n\nconst booleanComparison = new Set(['$and', '$or']);\nconst comparisonOperator = new Set(['$cmp', '$eq', '$lt', '$lte', '$gt', '$gte']);\nconst arithmeticOperatorArray = new Set([\n  // avoid casting '$add' or '$subtract', because expressions can be either number or date,\n  // and we don't have a good way of inferring which arguments should be numbers and which should\n  // be dates.\n  '$multiply',\n  '$divide',\n  '$log',\n  '$mod',\n  '$trunc',\n  '$avg',\n  '$max',\n  '$min',\n  '$stdDevPop',\n  '$stdDevSamp',\n  '$sum'\n]);\nconst arithmeticOperatorNumber = new Set([\n  '$abs',\n  '$exp',\n  '$ceil',\n  '$floor',\n  '$ln',\n  '$log10',\n  '$sqrt',\n  '$sin',\n  '$cos',\n  '$tan',\n  '$asin',\n  '$acos',\n  '$atan',\n  '$atan2',\n  '$asinh',\n  '$acosh',\n  '$atanh',\n  '$sinh',\n  '$cosh',\n  '$tanh',\n  '$degreesToRadians',\n  '$radiansToDegrees'\n]);\nconst arrayElementOperators = new Set([\n  '$arrayElemAt',\n  '$first',\n  '$last'\n]);\nconst dateOperators = new Set([\n  '$year',\n  '$month',\n  '$week',\n  '$dayOfMonth',\n  '$dayOfYear',\n  '$hour',\n  '$minute',\n  '$second',\n  '$isoDayOfWeek',\n  '$isoWeekYear',\n  '$isoWeek',\n  '$millisecond'\n]);\nconst expressionOperator = new Set(['$not']);\n\nmodule.exports = function cast$expr(val, schema, strictQuery) {\n  if (typeof val !== 'object' || val === null) {\n    throw new Error('`$expr` must be an object');\n  }\n\n  return _castExpression(val, schema, strictQuery);\n};\n\nfunction _castExpression(val, schema, strictQuery) {\n  // Preserve the value if it represents a path or if it's null\n  if (isPath(val) || val === null) {\n    return val;\n  }\n\n  if (val.$cond != null) {\n    if (Array.isArray(val.$cond)) {\n      val.$cond = val.$cond.map(expr => _castExpression(expr, schema, strictQuery));\n    } else {\n      val.$cond.if = _castExpression(val.$cond.if, schema, strictQuery);\n      val.$cond.then = _castExpression(val.$cond.then, schema, strictQuery);\n      val.$cond.else = _castExpression(val.$cond.else, schema, strictQuery);\n    }\n  } else if (val.$ifNull != null) {\n    val.$ifNull.map(v => _castExpression(v, schema, strictQuery));\n  } else if (val.$switch != null) {\n    val.branches.map(v => _castExpression(v, schema, strictQuery));\n    val.default = _castExpression(val.default, schema, strictQuery);\n  }\n\n  const keys = Object.keys(val);\n  for (const key of keys) {\n    if (booleanComparison.has(key)) {\n      val[key] = val[key].map(v => _castExpression(v, schema, strictQuery));\n    } else if (comparisonOperator.has(key)) {\n      val[key] = castComparison(val[key], schema, strictQuery);\n    } else if (arithmeticOperatorArray.has(key)) {\n      val[key] = castArithmetic(val[key], schema, strictQuery);\n    } else if (arithmeticOperatorNumber.has(key)) {\n      val[key] = castNumberOperator(val[key], schema, strictQuery);\n    } else if (expressionOperator.has(key)) {\n      val[key] = _castExpression(val[key], schema, strictQuery);\n    }\n  }\n\n  if (val.$in) {\n    val.$in = castIn(val.$in, schema, strictQuery);\n  }\n  if (val.$size) {\n    val.$size = castNumberOperator(val.$size, schema, strictQuery);\n  }\n  if (val.$round) {\n    const $round = val.$round;\n    if (!Array.isArray($round) || $round.length < 1 || $round.length > 2) {\n      throw new CastError('Array', $round, '$round');\n    }\n    val.$round = $round.map(v => castNumberOperator(v, schema, strictQuery));\n  }\n\n  _omitUndefined(val);\n\n  return val;\n}\n\nfunction _omitUndefined(val) {\n  const keys = Object.keys(val);\n  for (let i = 0, len = keys.length; i < len; ++i) {\n    (val[keys[i]] === void 0) && delete val[keys[i]];\n  }\n}\n\n// { $op: <number> }\nfunction castNumberOperator(val) {\n  if (!isLiteral(val)) {\n    return val;\n  }\n\n  try {\n    return castNumber(val);\n  } catch (err) {\n    throw new CastError('Number', val);\n  }\n}\n\nfunction castIn(val, schema, strictQuery) {\n  const path = val[1];\n  if (!isPath(path)) {\n    return val;\n  }\n  const search = val[0];\n\n  const schematype = schema.path(path.slice(1));\n  if (schematype === null) {\n    if (strictQuery === false) {\n      return val;\n    } else if (strictQuery === 'throw') {\n      throw new StrictModeError('$in');\n    }\n\n    return void 0;\n  }\n\n  if (!schematype.$isMongooseArray) {\n    throw new Error('Path must be an array for $in');\n  }\n\n  return [\n    schematype.$isMongooseDocumentArray ? schematype.$embeddedSchemaType.cast(search) : schematype.caster.cast(search),\n    path\n  ];\n}\n\n// { $op: [<number>, <number>] }\nfunction castArithmetic(val) {\n  if (!Array.isArray(val)) {\n    if (!isLiteral(val)) {\n      return val;\n    }\n    try {\n      return castNumber(val);\n    } catch (err) {\n      throw new CastError('Number', val);\n    }\n  }\n\n  return val.map(v => {\n    if (!isLiteral(v)) {\n      return v;\n    }\n    try {\n      return castNumber(v);\n    } catch (err) {\n      throw new CastError('Number', v);\n    }\n  });\n}\n\n// { $op: [expression, expression] }\nfunction castComparison(val, schema, strictQuery) {\n  if (!Array.isArray(val) || val.length !== 2) {\n    throw new Error('Comparison operator must be an array of length 2');\n  }\n\n  val[0] = _castExpression(val[0], schema, strictQuery);\n  const lhs = val[0];\n\n  if (isLiteral(val[1])) {\n    let path = null;\n    let schematype = null;\n    let caster = null;\n    if (isPath(lhs)) {\n      path = lhs.slice(1);\n      schematype = schema.path(path);\n    } else if (typeof lhs === 'object' && lhs != null) {\n      for (const key of Object.keys(lhs)) {\n        if (dateOperators.has(key) && isPath(lhs[key])) {\n          path = lhs[key].slice(1) + '.' + key;\n          caster = castNumber;\n        } else if (arrayElementOperators.has(key) && isPath(lhs[key])) {\n          path = lhs[key].slice(1) + '.' + key;\n          schematype = schema.path(lhs[key].slice(1));\n          if (schematype != null) {\n            if (schematype.$isMongooseDocumentArray) {\n              schematype = schematype.$embeddedSchemaType;\n            } else if (schematype.$isMongooseArray) {\n              schematype = schematype.caster;\n            }\n          }\n        }\n      }\n    }\n\n    const is$literal = typeof val[1] === 'object' && val[1] != null && val[1].$literal != null;\n    if (schematype != null) {\n      if (is$literal) {\n        val[1] = { $literal: schematype.cast(val[1].$literal) };\n      } else {\n        val[1] = schematype.cast(val[1]);\n      }\n    } else if (caster != null) {\n      if (is$literal) {\n        try {\n          val[1] = { $literal: caster(val[1].$literal) };\n        } catch (err) {\n          throw new CastError(caster.name.replace(/^cast/, ''), val[1], path + '.$literal');\n        }\n      } else {\n        try {\n          val[1] = caster(val[1]);\n        } catch (err) {\n          throw new CastError(caster.name.replace(/^cast/, ''), val[1], path);\n        }\n      }\n    } else if (path != null && strictQuery === true) {\n      return void 0;\n    } else if (path != null && strictQuery === 'throw') {\n      throw new StrictModeError(path);\n    }\n  } else {\n    val[1] = _castExpression(val[1]);\n  }\n\n  return val;\n}\n\nfunction isPath(val) {\n  return typeof val === 'string' && val[0] === '$';\n}\n\nfunction isLiteral(val) {\n  if (typeof val === 'string' && val[0] === '$') {\n    return false;\n  }\n  if (typeof val === 'object' && val !== null && Object.keys(val).find(key => key[0] === '$')) {\n    // The `$literal` expression can make an object a literal\n    // https://www.mongodb.com/docs/manual/reference/operator/aggregation/literal/#mongodb-expression-exp.-literal\n    return val.$literal != null;\n  }\n  return true;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/query/cast$expr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/query/castFilterPath.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/query/castFilterPath.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst isOperator = __webpack_require__(/*! ./isOperator */ \"(ssr)/./node_modules/mongoose/lib/helpers/query/isOperator.js\");\n\nmodule.exports = function castFilterPath(ctx, schematype, val) {\n  const any$conditionals = Object.keys(val).some(isOperator);\n\n  if (!any$conditionals) {\n    return schematype.castForQuery(\n      null,\n      val,\n      ctx\n    );\n  }\n\n  const ks = Object.keys(val);\n\n  let k = ks.length;\n\n  while (k--) {\n    const $cond = ks[k];\n    const nested = val[$cond];\n\n    if ($cond === '$not') {\n      if (nested && schematype && !schematype.caster) {\n        const _keys = Object.keys(nested);\n        if (_keys.length && isOperator(_keys[0])) {\n          for (const key of Object.keys(nested)) {\n            nested[key] = schematype.castForQuery(\n              key,\n              nested[key],\n              ctx\n            );\n          }\n        } else {\n          val[$cond] = schematype.castForQuery(\n            $cond,\n            nested,\n            ctx\n          );\n        }\n        continue;\n      }\n    } else {\n      val[$cond] = schematype.castForQuery(\n        $cond,\n        nested,\n        ctx\n      );\n    }\n  }\n\n  return val;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcXVlcnkvY2FzdEZpbHRlclBhdGguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsbUJBQW1CLG1CQUFPLENBQUMsbUZBQWM7O0FBRXpDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9xdWVyeS9jYXN0RmlsdGVyUGF0aC5qcz80MjJjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgaXNPcGVyYXRvciA9IHJlcXVpcmUoJy4vaXNPcGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhc3RGaWx0ZXJQYXRoKGN0eCwgc2NoZW1hdHlwZSwgdmFsKSB7XG4gIGNvbnN0IGFueSRjb25kaXRpb25hbHMgPSBPYmplY3Qua2V5cyh2YWwpLnNvbWUoaXNPcGVyYXRvcik7XG5cbiAgaWYgKCFhbnkkY29uZGl0aW9uYWxzKSB7XG4gICAgcmV0dXJuIHNjaGVtYXR5cGUuY2FzdEZvclF1ZXJ5KFxuICAgICAgbnVsbCxcbiAgICAgIHZhbCxcbiAgICAgIGN0eFxuICAgICk7XG4gIH1cblxuICBjb25zdCBrcyA9IE9iamVjdC5rZXlzKHZhbCk7XG5cbiAgbGV0IGsgPSBrcy5sZW5ndGg7XG5cbiAgd2hpbGUgKGstLSkge1xuICAgIGNvbnN0ICRjb25kID0ga3Nba107XG4gICAgY29uc3QgbmVzdGVkID0gdmFsWyRjb25kXTtcblxuICAgIGlmICgkY29uZCA9PT0gJyRub3QnKSB7XG4gICAgICBpZiAobmVzdGVkICYmIHNjaGVtYXR5cGUgJiYgIXNjaGVtYXR5cGUuY2FzdGVyKSB7XG4gICAgICAgIGNvbnN0IF9rZXlzID0gT2JqZWN0LmtleXMobmVzdGVkKTtcbiAgICAgICAgaWYgKF9rZXlzLmxlbmd0aCAmJiBpc09wZXJhdG9yKF9rZXlzWzBdKSkge1xuICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKG5lc3RlZCkpIHtcbiAgICAgICAgICAgIG5lc3RlZFtrZXldID0gc2NoZW1hdHlwZS5jYXN0Rm9yUXVlcnkoXG4gICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgbmVzdGVkW2tleV0sXG4gICAgICAgICAgICAgIGN0eFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsWyRjb25kXSA9IHNjaGVtYXR5cGUuY2FzdEZvclF1ZXJ5KFxuICAgICAgICAgICAgJGNvbmQsXG4gICAgICAgICAgICBuZXN0ZWQsXG4gICAgICAgICAgICBjdHhcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YWxbJGNvbmRdID0gc2NoZW1hdHlwZS5jYXN0Rm9yUXVlcnkoXG4gICAgICAgICRjb25kLFxuICAgICAgICBuZXN0ZWQsXG4gICAgICAgIGN0eFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmFsO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/query/castFilterPath.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/query/castUpdate.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/query/castUpdate.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst CastError = __webpack_require__(/*! ../../error/cast */ \"(ssr)/./node_modules/mongoose/lib/error/cast.js\");\nconst MongooseError = __webpack_require__(/*! ../../error/mongooseError */ \"(ssr)/./node_modules/mongoose/lib/error/mongooseError.js\");\nconst StrictModeError = __webpack_require__(/*! ../../error/strict */ \"(ssr)/./node_modules/mongoose/lib/error/strict.js\");\nconst ValidationError = __webpack_require__(/*! ../../error/validation */ \"(ssr)/./node_modules/mongoose/lib/error/validation.js\");\nconst castNumber = __webpack_require__(/*! ../../cast/number */ \"(ssr)/./node_modules/mongoose/lib/cast/number.js\");\nconst cast = __webpack_require__(/*! ../../cast */ \"(ssr)/./node_modules/mongoose/lib/cast.js\");\nconst getConstructorName = __webpack_require__(/*! ../getConstructorName */ \"(ssr)/./node_modules/mongoose/lib/helpers/getConstructorName.js\");\nconst getEmbeddedDiscriminatorPath = __webpack_require__(/*! ./getEmbeddedDiscriminatorPath */ \"(ssr)/./node_modules/mongoose/lib/helpers/query/getEmbeddedDiscriminatorPath.js\");\nconst handleImmutable = __webpack_require__(/*! ./handleImmutable */ \"(ssr)/./node_modules/mongoose/lib/helpers/query/handleImmutable.js\");\nconst moveImmutableProperties = __webpack_require__(/*! ../update/moveImmutableProperties */ \"(ssr)/./node_modules/mongoose/lib/helpers/update/moveImmutableProperties.js\");\nconst schemaMixedSymbol = (__webpack_require__(/*! ../../schema/symbols */ \"(ssr)/./node_modules/mongoose/lib/schema/symbols.js\").schemaMixedSymbol);\nconst setDottedPath = __webpack_require__(/*! ../path/setDottedPath */ \"(ssr)/./node_modules/mongoose/lib/helpers/path/setDottedPath.js\");\nconst utils = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\nconst { internalToObjectOptions } = __webpack_require__(/*! ../../options */ \"(ssr)/./node_modules/mongoose/lib/options.js\");\n\nconst mongodbUpdateOperators = new Set([\n  '$currentDate',\n  '$inc',\n  '$min',\n  '$max',\n  '$mul',\n  '$rename',\n  '$set',\n  '$setOnInsert',\n  '$unset',\n  '$addToSet',\n  '$pop',\n  '$pull',\n  '$push',\n  '$pullAll',\n  '$bit'\n]);\n\n/**\n * Casts an update op based on the given schema\n *\n * @param {Schema} schema\n * @param {Object} obj\n * @param {Object} [options]\n * @param {Boolean|String} [options.strict] defaults to true\n * @param {Query} context passed to setters\n * @return {Boolean} true iff the update is non-empty\n * @api private\n */\nmodule.exports = function castUpdate(schema, obj, options, context, filter) {\n  if (obj == null) {\n    return undefined;\n  }\n  options = options || {};\n  // Update pipeline\n  if (Array.isArray(obj)) {\n    const len = obj.length;\n    for (let i = 0; i < len; ++i) {\n      const ops = Object.keys(obj[i]);\n      for (const op of ops) {\n        obj[i][op] = castPipelineOperator(op, obj[i][op]);\n      }\n    }\n    return obj;\n  }\n\n  if (options.upsert) {\n    moveImmutableProperties(schema, obj, context);\n  }\n\n  const ops = Object.keys(obj);\n  let i = ops.length;\n  const ret = {};\n  let val;\n  let hasDollarKey = false;\n\n  filter = filter || {};\n  while (i--) {\n    const op = ops[i];\n    if (!mongodbUpdateOperators.has(op)) {\n      // fix up $set sugar\n      if (!ret.$set) {\n        if (obj.$set) {\n          ret.$set = obj.$set;\n        } else {\n          ret.$set = {};\n        }\n      }\n      ret.$set[op] = obj[op];\n      ops.splice(i, 1);\n      if (!~ops.indexOf('$set')) ops.push('$set');\n    } else if (op === '$set') {\n      if (!ret.$set) {\n        ret[op] = obj[op];\n      }\n    } else {\n      ret[op] = obj[op];\n    }\n  }\n  // cast each value\n  i = ops.length;\n  while (i--) {\n    const op = ops[i];\n    val = ret[op];\n    hasDollarKey = hasDollarKey || op.startsWith('$');\n    if (val != null && val.$__) {\n      val = val.toObject(internalToObjectOptions);\n      ret[op] = val;\n    }\n    if (val &&\n        typeof val === 'object' &&\n        !Buffer.isBuffer(val) &&\n        mongodbUpdateOperators.has(op)) {\n      walkUpdatePath(schema, val, op, options, context, filter);\n    } else {\n      const msg = 'Invalid atomic update value for ' + op + '. '\n          + 'Expected an object, received ' + typeof val;\n      throw new Error(msg);\n    }\n\n    if (op.startsWith('$') && utils.isEmptyObject(val)) {\n      delete ret[op];\n    }\n  }\n\n  if (Object.keys(ret).length === 0 &&\n      options.upsert &&\n      Object.keys(filter).length > 0) {\n    // Trick the driver into allowing empty upserts to work around\n    // https://github.com/mongodb/node-mongodb-native/pull/2490\n    // Shallow clone to avoid passing defaults in re: gh-13962\n    return { $setOnInsert: { ...filter } };\n  }\n  return ret;\n};\n\n/*!\n * ignore\n */\n\nfunction castPipelineOperator(op, val) {\n  if (op === '$unset') {\n    if (typeof val !== 'string' && (!Array.isArray(val) || val.find(v => typeof v !== 'string'))) {\n      throw new MongooseError('Invalid $unset in pipeline, must be ' +\n        ' a string or an array of strings');\n    }\n    return val;\n  }\n  if (op === '$project') {\n    if (val == null || typeof val !== 'object') {\n      throw new MongooseError('Invalid $project in pipeline, must be an object');\n    }\n    return val;\n  }\n  if (op === '$addFields' || op === '$set') {\n    if (val == null || typeof val !== 'object') {\n      throw new MongooseError('Invalid ' + op + ' in pipeline, must be an object');\n    }\n    return val;\n  } else if (op === '$replaceRoot' || op === '$replaceWith') {\n    if (val == null || typeof val !== 'object') {\n      throw new MongooseError('Invalid ' + op + ' in pipeline, must be an object');\n    }\n    return val;\n  }\n\n  throw new MongooseError('Invalid update pipeline operator: \"' + op + '\"');\n}\n\n/**\n * Walk each path of obj and cast its values\n * according to its schema.\n *\n * @param {Schema} schema\n * @param {Object} obj part of a query\n * @param {String} op the atomic operator ($pull, $set, etc)\n * @param {Object} [options]\n * @param {Boolean|String} [options.strict]\n * @param {Query} context\n * @param {Object} filter\n * @param {String} pref path prefix (internal only)\n * @return {Bool} true if this path has keys to update\n * @api private\n */\n\nfunction walkUpdatePath(schema, obj, op, options, context, filter, pref) {\n  const strict = options.strict;\n  const prefix = pref ? pref + '.' : '';\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let hasKeys = false;\n  let schematype;\n  let key;\n  let val;\n\n  let aggregatedError = null;\n\n  const strictMode = strict != null ? strict : schema.options.strict;\n\n  while (i--) {\n    key = keys[i];\n    val = obj[key];\n\n    // `$pull` is special because we need to cast the RHS as a query, not as\n    // an update.\n    if (op === '$pull') {\n      schematype = schema._getSchema(prefix + key);\n      if (schematype != null && schematype.schema != null) {\n        obj[key] = cast(schematype.schema, obj[key], options, context);\n        hasKeys = true;\n        continue;\n      }\n    }\n\n    const discriminatorKey = (prefix ? prefix + key : key);\n    if (\n      schema.discriminatorMapping != null &&\n      discriminatorKey === schema.options.discriminatorKey &&\n      schema.discriminatorMapping.value !== obj[key] &&\n      !options.overwriteDiscriminatorKey\n    ) {\n      if (strictMode === 'throw') {\n        const err = new Error('Can\\'t modify discriminator key \"' + discriminatorKey + '\" on discriminator model');\n        aggregatedError = _appendError(err, context, discriminatorKey, aggregatedError);\n        continue;\n      } else if (strictMode) {\n        delete obj[key];\n        continue;\n      }\n    }\n\n    if (getConstructorName(val) === 'Object') {\n      // watch for embedded doc schemas\n      schematype = schema._getSchema(prefix + key);\n\n      if (schematype == null) {\n        const _res = getEmbeddedDiscriminatorPath(schema, obj, filter, prefix + key, options);\n        if (_res.schematype != null) {\n          schematype = _res.schematype;\n        }\n      }\n\n      if (op !== '$setOnInsert' &&\n          handleImmutable(schematype, strict, obj, key, prefix + key, context)) {\n        continue;\n      }\n\n      if (schematype && schematype.caster && op in castOps) {\n        // embedded doc schema\n        if ('$each' in val) {\n          hasKeys = true;\n          try {\n            obj[key] = {\n              $each: castUpdateVal(schematype, val.$each, op, key, context, prefix + key)\n            };\n          } catch (error) {\n            aggregatedError = _appendError(error, context, key, aggregatedError);\n          }\n\n          if (val.$slice != null) {\n            obj[key].$slice = val.$slice | 0;\n          }\n\n          if (val.$sort) {\n            obj[key].$sort = val.$sort;\n          }\n\n          if (val.$position != null) {\n            obj[key].$position = castNumber(val.$position);\n          }\n        } else {\n          if (schematype != null && schematype.$isSingleNested) {\n            const _strict = strict == null ? schematype.schema.options.strict : strict;\n            try {\n              obj[key] = schematype.castForQuery(null, val, context, { strict: _strict });\n            } catch (error) {\n              aggregatedError = _appendError(error, context, key, aggregatedError);\n            }\n          } else {\n            try {\n              obj[key] = castUpdateVal(schematype, val, op, key, context, prefix + key);\n            } catch (error) {\n              aggregatedError = _appendError(error, context, key, aggregatedError);\n            }\n          }\n\n          if (obj[key] === void 0) {\n            delete obj[key];\n            continue;\n          }\n\n          hasKeys = true;\n        }\n      } else if ((op === '$currentDate') || (op in castOps && schematype)) {\n        // $currentDate can take an object\n        try {\n          obj[key] = castUpdateVal(schematype, val, op, key, context, prefix + key);\n        } catch (error) {\n          aggregatedError = _appendError(error, context, key, aggregatedError);\n        }\n\n        if (obj[key] === void 0) {\n          delete obj[key];\n          continue;\n        }\n\n        hasKeys = true;\n      } else {\n        const pathToCheck = (prefix + key);\n        const v = schema._getPathType(pathToCheck);\n        let _strict = strict;\n        if (v && v.schema && _strict == null) {\n          _strict = v.schema.options.strict;\n        }\n\n        if (v.pathType === 'undefined') {\n          if (_strict === 'throw') {\n            throw new StrictModeError(pathToCheck);\n          } else if (_strict) {\n            delete obj[key];\n            continue;\n          }\n        }\n\n        // gh-2314\n        // we should be able to set a schema-less field\n        // to an empty object literal\n        hasKeys |= walkUpdatePath(schema, val, op, options, context, filter, prefix + key) ||\n          (utils.isObject(val) && Object.keys(val).length === 0);\n      }\n    } else {\n      const checkPath = (key === '$each' || key === '$or' || key === '$and' || key === '$in') ?\n        pref : prefix + key;\n      schematype = schema._getSchema(checkPath);\n\n      // You can use `$setOnInsert` with immutable keys\n      if (op !== '$setOnInsert' &&\n          handleImmutable(schematype, strict, obj, key, prefix + key, context)) {\n        continue;\n      }\n\n      let pathDetails = schema._getPathType(checkPath);\n\n      // If no schema type, check for embedded discriminators because the\n      // filter or update may imply an embedded discriminator type. See #8378\n      if (schematype == null) {\n        const _res = getEmbeddedDiscriminatorPath(schema, obj, filter, checkPath, options);\n        if (_res.schematype != null) {\n          schematype = _res.schematype;\n          pathDetails = _res.type;\n        }\n      }\n\n      let isStrict = strict;\n      if (pathDetails && pathDetails.schema && strict == null) {\n        isStrict = pathDetails.schema.options.strict;\n      }\n\n      const skip = isStrict &&\n        !schematype &&\n        !/real|nested/.test(pathDetails.pathType);\n\n      if (skip) {\n        // Even if strict is `throw`, avoid throwing an error because of\n        // virtuals because of #6731\n        if (isStrict === 'throw' && schema.virtuals[checkPath] == null) {\n          throw new StrictModeError(prefix + key);\n        } else {\n          delete obj[key];\n        }\n      } else {\n        // gh-1845 temporary fix: ignore $rename. See gh-3027 for tracking\n        // improving this.\n        if (op === '$rename') {\n          hasKeys = true;\n          continue;\n        }\n\n        try {\n          if (prefix.length === 0 || key.indexOf('.') === -1) {\n            obj[key] = castUpdateVal(schematype, val, op, key, context, prefix + key);\n          } else if (isStrict !== false || schematype != null) {\n            // Setting a nested dotted path that's in the schema. We don't allow paths with '.' in\n            // a schema, so replace the dotted path with a nested object to avoid ending up with\n            // dotted properties in the updated object. See (gh-10200)\n            setDottedPath(obj, key, castUpdateVal(schematype, val, op, key, context, prefix + key));\n            delete obj[key];\n          }\n        } catch (error) {\n          aggregatedError = _appendError(error, context, key, aggregatedError);\n        }\n\n        if (Array.isArray(obj[key]) && (op === '$addToSet' || op === '$push') && key !== '$each') {\n          if (schematype &&\n              schematype.caster &&\n              !schematype.caster.$isMongooseArray &&\n              !schematype.caster[schemaMixedSymbol]) {\n            obj[key] = { $each: obj[key] };\n          }\n        }\n\n        if (obj[key] === void 0) {\n          delete obj[key];\n          continue;\n        }\n\n        hasKeys = true;\n      }\n    }\n  }\n\n  if (aggregatedError != null) {\n    throw aggregatedError;\n  }\n\n  return hasKeys;\n}\n\n/*!\n * ignore\n */\n\nfunction _appendError(error, query, key, aggregatedError) {\n  if (typeof query !== 'object' || !query.options.multipleCastError) {\n    throw error;\n  }\n  aggregatedError = aggregatedError || new ValidationError();\n  aggregatedError.addError(key, error);\n  return aggregatedError;\n}\n\n/**\n * These operators should be cast to numbers instead\n * of their path schema type.\n * @api private\n */\n\nconst numberOps = {\n  $pop: 1,\n  $inc: 1\n};\n\n/**\n * These ops require no casting because the RHS doesn't do anything.\n * @api private\n */\n\nconst noCastOps = {\n  $unset: 1\n};\n\n/**\n * These operators require casting docs\n * to real Documents for Update operations.\n * @api private\n */\n\nconst castOps = {\n  $push: 1,\n  $addToSet: 1,\n  $set: 1,\n  $setOnInsert: 1\n};\n\n/*!\n * ignore\n */\n\nconst overwriteOps = {\n  $set: 1,\n  $setOnInsert: 1\n};\n\n/**\n * Casts `val` according to `schema` and atomic `op`.\n *\n * @param {SchemaType} schema\n * @param {Object} val\n * @param {String} op the atomic operator ($pull, $set, etc)\n * @param {String} $conditional\n * @param {Query} context\n * @param {String} path\n * @api private\n */\n\nfunction castUpdateVal(schema, val, op, $conditional, context, path) {\n  if (!schema) {\n    // non-existing schema path\n    if (op in numberOps) {\n      try {\n        return castNumber(val);\n      } catch (err) {\n        throw new CastError('number', val, path);\n      }\n    }\n    return val;\n  }\n\n  // console.log('CastUpdateVal', path, op, val, schema);\n\n  const cond = schema.caster && op in castOps &&\n      (utils.isObject(val) || Array.isArray(val));\n  if (cond && !overwriteOps[op]) {\n    // Cast values for ops that add data to MongoDB.\n    // Ensures embedded documents get ObjectIds etc.\n    let schemaArrayDepth = 0;\n    let cur = schema;\n    while (cur.$isMongooseArray) {\n      ++schemaArrayDepth;\n      cur = cur.caster;\n    }\n    let arrayDepth = 0;\n    let _val = val;\n    while (Array.isArray(_val)) {\n      ++arrayDepth;\n      _val = _val[0];\n    }\n\n    const additionalNesting = schemaArrayDepth - arrayDepth;\n    while (arrayDepth < schemaArrayDepth) {\n      val = [val];\n      ++arrayDepth;\n    }\n\n    let tmp = schema.applySetters(Array.isArray(val) ? val : [val], context);\n\n    for (let i = 0; i < additionalNesting; ++i) {\n      tmp = tmp[0];\n    }\n    return tmp;\n  }\n\n  if (op in noCastOps) {\n    return val;\n  }\n  if (op in numberOps) {\n    // Null and undefined not allowed for $pop, $inc\n    if (val == null) {\n      throw new CastError('number', val, schema.path);\n    }\n    if (op === '$inc') {\n      // Support `$inc` with long, int32, etc. (gh-4283)\n      return schema.castForQuery(\n        null,\n        val,\n        context\n      );\n    }\n    try {\n      return castNumber(val);\n    } catch (error) {\n      throw new CastError('number', val, schema.path);\n    }\n  }\n  if (op === '$currentDate') {\n    if (typeof val === 'object') {\n      return { $type: val.$type };\n    }\n    return Boolean(val);\n  }\n\n  if (mongodbUpdateOperators.has($conditional)) {\n    return schema.castForQuery(\n      $conditional,\n      val,\n      context\n    );\n  }\n\n  if (overwriteOps[op]) {\n    const skipQueryCastForUpdate = val != null && schema.$isMongooseArray && schema.$fullPath != null && !schema.$fullPath.match(/\\d+$/);\n    const applySetters = schema[schemaMixedSymbol] != null;\n    if (skipQueryCastForUpdate || applySetters) {\n      return schema.applySetters(val, context);\n    }\n    return schema.castForQuery(\n      null,\n      val,\n      context\n    );\n  }\n\n  return schema.castForQuery(null, val, context);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/query/castUpdate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/query/getEmbeddedDiscriminatorPath.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/query/getEmbeddedDiscriminatorPath.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst cleanPositionalOperators = __webpack_require__(/*! ../schema/cleanPositionalOperators */ \"(ssr)/./node_modules/mongoose/lib/helpers/schema/cleanPositionalOperators.js\");\nconst get = __webpack_require__(/*! ../get */ \"(ssr)/./node_modules/mongoose/lib/helpers/get.js\");\nconst getDiscriminatorByValue = __webpack_require__(/*! ../discriminator/getDiscriminatorByValue */ \"(ssr)/./node_modules/mongoose/lib/helpers/discriminator/getDiscriminatorByValue.js\");\nconst updatedPathsByArrayFilter = __webpack_require__(/*! ../update/updatedPathsByArrayFilter */ \"(ssr)/./node_modules/mongoose/lib/helpers/update/updatedPathsByArrayFilter.js\");\n\n/**\n * Like `schema.path()`, except with a document, because impossible to\n * determine path type without knowing the embedded discriminator key.\n * @param {Schema} schema\n * @param {Object} [update]\n * @param {Object} [filter]\n * @param {String} path\n * @param {Object} [options]\n * @api private\n */\n\nmodule.exports = function getEmbeddedDiscriminatorPath(schema, update, filter, path, options) {\n  const parts = path.split('.');\n  let schematype = null;\n  let type = 'adhocOrUndefined';\n\n  filter = filter || {};\n  update = update || {};\n  const arrayFilters = options != null && Array.isArray(options.arrayFilters) ?\n    options.arrayFilters : [];\n  const updatedPathsByFilter = updatedPathsByArrayFilter(update);\n\n  for (let i = 0; i < parts.length; ++i) {\n    const subpath = cleanPositionalOperators(parts.slice(0, i + 1).join('.'));\n    schematype = schema.path(subpath);\n    if (schematype == null) {\n      continue;\n    }\n\n    type = schema.pathType(subpath);\n    if ((schematype.$isSingleNested || schematype.$isMongooseDocumentArrayElement) &&\n        schematype.schema.discriminators != null) {\n      const key = get(schematype, 'schema.options.discriminatorKey');\n      const discriminatorValuePath = subpath + '.' + key;\n      const discriminatorFilterPath =\n        discriminatorValuePath.replace(/\\.\\d+\\./, '.');\n      let discriminatorKey = null;\n\n      if (discriminatorValuePath in filter) {\n        discriminatorKey = filter[discriminatorValuePath];\n      }\n      if (discriminatorFilterPath in filter) {\n        discriminatorKey = filter[discriminatorFilterPath];\n      }\n\n      const wrapperPath = subpath.replace(/\\.\\d+$/, '');\n      if (schematype.$isMongooseDocumentArrayElement &&\n          get(filter[wrapperPath], '$elemMatch.' + key) != null) {\n        discriminatorKey = filter[wrapperPath].$elemMatch[key];\n      }\n\n      if (discriminatorValuePath in update) {\n        discriminatorKey = update[discriminatorValuePath];\n      }\n\n      for (const filterKey of Object.keys(updatedPathsByFilter)) {\n        const schemaKey = updatedPathsByFilter[filterKey] + '.' + key;\n        const arrayFilterKey = filterKey + '.' + key;\n        if (schemaKey === discriminatorFilterPath) {\n          const filter = arrayFilters.find(filter => filter.hasOwnProperty(arrayFilterKey));\n          if (filter != null) {\n            discriminatorKey = filter[arrayFilterKey];\n          }\n        }\n      }\n\n      if (discriminatorKey == null) {\n        continue;\n      }\n\n      const discriminator = getDiscriminatorByValue(schematype.caster.discriminators, discriminatorKey);\n      const discriminatorSchema = discriminator && discriminator.schema;\n      if (discriminatorSchema == null) {\n        continue;\n      }\n\n      const rest = parts.slice(i + 1).join('.');\n      schematype = discriminatorSchema.path(rest);\n      if (schematype != null) {\n        type = discriminatorSchema._getPathType(rest);\n        break;\n      }\n    }\n  }\n\n  return { type: type, schematype: schematype };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcXVlcnkvZ2V0RW1iZWRkZWREaXNjcmltaW5hdG9yUGF0aC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixpQ0FBaUMsbUJBQU8sQ0FBQyx3SEFBb0M7QUFDN0UsWUFBWSxtQkFBTyxDQUFDLGdFQUFRO0FBQzVCLGdDQUFnQyxtQkFBTyxDQUFDLG9JQUEwQztBQUNsRixrQ0FBa0MsbUJBQU8sQ0FBQywwSEFBcUM7O0FBRS9FO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQixrQkFBa0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFdBQVc7QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcXVlcnkvZ2V0RW1iZWRkZWREaXNjcmltaW5hdG9yUGF0aC5qcz9iNGU2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY2xlYW5Qb3NpdGlvbmFsT3BlcmF0b3JzID0gcmVxdWlyZSgnLi4vc2NoZW1hL2NsZWFuUG9zaXRpb25hbE9wZXJhdG9ycycpO1xuY29uc3QgZ2V0ID0gcmVxdWlyZSgnLi4vZ2V0Jyk7XG5jb25zdCBnZXREaXNjcmltaW5hdG9yQnlWYWx1ZSA9IHJlcXVpcmUoJy4uL2Rpc2NyaW1pbmF0b3IvZ2V0RGlzY3JpbWluYXRvckJ5VmFsdWUnKTtcbmNvbnN0IHVwZGF0ZWRQYXRoc0J5QXJyYXlGaWx0ZXIgPSByZXF1aXJlKCcuLi91cGRhdGUvdXBkYXRlZFBhdGhzQnlBcnJheUZpbHRlcicpO1xuXG4vKipcbiAqIExpa2UgYHNjaGVtYS5wYXRoKClgLCBleGNlcHQgd2l0aCBhIGRvY3VtZW50LCBiZWNhdXNlIGltcG9zc2libGUgdG9cbiAqIGRldGVybWluZSBwYXRoIHR5cGUgd2l0aG91dCBrbm93aW5nIHRoZSBlbWJlZGRlZCBkaXNjcmltaW5hdG9yIGtleS5cbiAqIEBwYXJhbSB7U2NoZW1hfSBzY2hlbWFcbiAqIEBwYXJhbSB7T2JqZWN0fSBbdXBkYXRlXVxuICogQHBhcmFtIHtPYmplY3R9IFtmaWx0ZXJdXG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRFbWJlZGRlZERpc2NyaW1pbmF0b3JQYXRoKHNjaGVtYSwgdXBkYXRlLCBmaWx0ZXIsIHBhdGgsIG9wdGlvbnMpIHtcbiAgY29uc3QgcGFydHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIGxldCBzY2hlbWF0eXBlID0gbnVsbDtcbiAgbGV0IHR5cGUgPSAnYWRob2NPclVuZGVmaW5lZCc7XG5cbiAgZmlsdGVyID0gZmlsdGVyIHx8IHt9O1xuICB1cGRhdGUgPSB1cGRhdGUgfHwge307XG4gIGNvbnN0IGFycmF5RmlsdGVycyA9IG9wdGlvbnMgIT0gbnVsbCAmJiBBcnJheS5pc0FycmF5KG9wdGlvbnMuYXJyYXlGaWx0ZXJzKSA/XG4gICAgb3B0aW9ucy5hcnJheUZpbHRlcnMgOiBbXTtcbiAgY29uc3QgdXBkYXRlZFBhdGhzQnlGaWx0ZXIgPSB1cGRhdGVkUGF0aHNCeUFycmF5RmlsdGVyKHVwZGF0ZSk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7ICsraSkge1xuICAgIGNvbnN0IHN1YnBhdGggPSBjbGVhblBvc2l0aW9uYWxPcGVyYXRvcnMocGFydHMuc2xpY2UoMCwgaSArIDEpLmpvaW4oJy4nKSk7XG4gICAgc2NoZW1hdHlwZSA9IHNjaGVtYS5wYXRoKHN1YnBhdGgpO1xuICAgIGlmIChzY2hlbWF0eXBlID09IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHR5cGUgPSBzY2hlbWEucGF0aFR5cGUoc3VicGF0aCk7XG4gICAgaWYgKChzY2hlbWF0eXBlLiRpc1NpbmdsZU5lc3RlZCB8fCBzY2hlbWF0eXBlLiRpc01vbmdvb3NlRG9jdW1lbnRBcnJheUVsZW1lbnQpICYmXG4gICAgICAgIHNjaGVtYXR5cGUuc2NoZW1hLmRpc2NyaW1pbmF0b3JzICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IGtleSA9IGdldChzY2hlbWF0eXBlLCAnc2NoZW1hLm9wdGlvbnMuZGlzY3JpbWluYXRvcktleScpO1xuICAgICAgY29uc3QgZGlzY3JpbWluYXRvclZhbHVlUGF0aCA9IHN1YnBhdGggKyAnLicgKyBrZXk7XG4gICAgICBjb25zdCBkaXNjcmltaW5hdG9yRmlsdGVyUGF0aCA9XG4gICAgICAgIGRpc2NyaW1pbmF0b3JWYWx1ZVBhdGgucmVwbGFjZSgvXFwuXFxkK1xcLi8sICcuJyk7XG4gICAgICBsZXQgZGlzY3JpbWluYXRvcktleSA9IG51bGw7XG5cbiAgICAgIGlmIChkaXNjcmltaW5hdG9yVmFsdWVQYXRoIGluIGZpbHRlcikge1xuICAgICAgICBkaXNjcmltaW5hdG9yS2V5ID0gZmlsdGVyW2Rpc2NyaW1pbmF0b3JWYWx1ZVBhdGhdO1xuICAgICAgfVxuICAgICAgaWYgKGRpc2NyaW1pbmF0b3JGaWx0ZXJQYXRoIGluIGZpbHRlcikge1xuICAgICAgICBkaXNjcmltaW5hdG9yS2V5ID0gZmlsdGVyW2Rpc2NyaW1pbmF0b3JGaWx0ZXJQYXRoXTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgd3JhcHBlclBhdGggPSBzdWJwYXRoLnJlcGxhY2UoL1xcLlxcZCskLywgJycpO1xuICAgICAgaWYgKHNjaGVtYXR5cGUuJGlzTW9uZ29vc2VEb2N1bWVudEFycmF5RWxlbWVudCAmJlxuICAgICAgICAgIGdldChmaWx0ZXJbd3JhcHBlclBhdGhdLCAnJGVsZW1NYXRjaC4nICsga2V5KSAhPSBudWxsKSB7XG4gICAgICAgIGRpc2NyaW1pbmF0b3JLZXkgPSBmaWx0ZXJbd3JhcHBlclBhdGhdLiRlbGVtTWF0Y2hba2V5XTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRpc2NyaW1pbmF0b3JWYWx1ZVBhdGggaW4gdXBkYXRlKSB7XG4gICAgICAgIGRpc2NyaW1pbmF0b3JLZXkgPSB1cGRhdGVbZGlzY3JpbWluYXRvclZhbHVlUGF0aF07XG4gICAgICB9XG5cbiAgICAgIGZvciAoY29uc3QgZmlsdGVyS2V5IG9mIE9iamVjdC5rZXlzKHVwZGF0ZWRQYXRoc0J5RmlsdGVyKSkge1xuICAgICAgICBjb25zdCBzY2hlbWFLZXkgPSB1cGRhdGVkUGF0aHNCeUZpbHRlcltmaWx0ZXJLZXldICsgJy4nICsga2V5O1xuICAgICAgICBjb25zdCBhcnJheUZpbHRlcktleSA9IGZpbHRlcktleSArICcuJyArIGtleTtcbiAgICAgICAgaWYgKHNjaGVtYUtleSA9PT0gZGlzY3JpbWluYXRvckZpbHRlclBhdGgpIHtcbiAgICAgICAgICBjb25zdCBmaWx0ZXIgPSBhcnJheUZpbHRlcnMuZmluZChmaWx0ZXIgPT4gZmlsdGVyLmhhc093blByb3BlcnR5KGFycmF5RmlsdGVyS2V5KSk7XG4gICAgICAgICAgaWYgKGZpbHRlciAhPSBudWxsKSB7XG4gICAgICAgICAgICBkaXNjcmltaW5hdG9yS2V5ID0gZmlsdGVyW2FycmF5RmlsdGVyS2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGRpc2NyaW1pbmF0b3JLZXkgPT0gbnVsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZGlzY3JpbWluYXRvciA9IGdldERpc2NyaW1pbmF0b3JCeVZhbHVlKHNjaGVtYXR5cGUuY2FzdGVyLmRpc2NyaW1pbmF0b3JzLCBkaXNjcmltaW5hdG9yS2V5KTtcbiAgICAgIGNvbnN0IGRpc2NyaW1pbmF0b3JTY2hlbWEgPSBkaXNjcmltaW5hdG9yICYmIGRpc2NyaW1pbmF0b3Iuc2NoZW1hO1xuICAgICAgaWYgKGRpc2NyaW1pbmF0b3JTY2hlbWEgPT0gbnVsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcmVzdCA9IHBhcnRzLnNsaWNlKGkgKyAxKS5qb2luKCcuJyk7XG4gICAgICBzY2hlbWF0eXBlID0gZGlzY3JpbWluYXRvclNjaGVtYS5wYXRoKHJlc3QpO1xuICAgICAgaWYgKHNjaGVtYXR5cGUgIT0gbnVsbCkge1xuICAgICAgICB0eXBlID0gZGlzY3JpbWluYXRvclNjaGVtYS5fZ2V0UGF0aFR5cGUocmVzdCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7IHR5cGU6IHR5cGUsIHNjaGVtYXR5cGU6IHNjaGVtYXR5cGUgfTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/query/getEmbeddedDiscriminatorPath.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/query/handleImmutable.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/query/handleImmutable.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst StrictModeError = __webpack_require__(/*! ../../error/strict */ \"(ssr)/./node_modules/mongoose/lib/error/strict.js\");\n\nmodule.exports = function handleImmutable(schematype, strict, obj, key, fullPath, ctx) {\n  if (schematype == null || !schematype.options || !schematype.options.immutable) {\n    return false;\n  }\n  let immutable = schematype.options.immutable;\n\n  if (typeof immutable === 'function') {\n    immutable = immutable.call(ctx, ctx);\n  }\n  if (!immutable) {\n    return false;\n  }\n\n  if (strict === false) {\n    return false;\n  }\n  if (strict === 'throw') {\n    throw new StrictModeError(null,\n      `Field ${fullPath} is immutable and strict = 'throw'`);\n  }\n\n  delete obj[key];\n  return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcXVlcnkvaGFuZGxlSW1tdXRhYmxlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLHdCQUF3QixtQkFBTyxDQUFDLDZFQUFvQjs7QUFFcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsVUFBVTtBQUN6Qjs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL3F1ZXJ5L2hhbmRsZUltbXV0YWJsZS5qcz9jYzVkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgU3RyaWN0TW9kZUVycm9yID0gcmVxdWlyZSgnLi4vLi4vZXJyb3Ivc3RyaWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFuZGxlSW1tdXRhYmxlKHNjaGVtYXR5cGUsIHN0cmljdCwgb2JqLCBrZXksIGZ1bGxQYXRoLCBjdHgpIHtcbiAgaWYgKHNjaGVtYXR5cGUgPT0gbnVsbCB8fCAhc2NoZW1hdHlwZS5vcHRpb25zIHx8ICFzY2hlbWF0eXBlLm9wdGlvbnMuaW1tdXRhYmxlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGxldCBpbW11dGFibGUgPSBzY2hlbWF0eXBlLm9wdGlvbnMuaW1tdXRhYmxlO1xuXG4gIGlmICh0eXBlb2YgaW1tdXRhYmxlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaW1tdXRhYmxlID0gaW1tdXRhYmxlLmNhbGwoY3R4LCBjdHgpO1xuICB9XG4gIGlmICghaW1tdXRhYmxlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHN0cmljdCA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHN0cmljdCA9PT0gJ3Rocm93Jykge1xuICAgIHRocm93IG5ldyBTdHJpY3RNb2RlRXJyb3IobnVsbCxcbiAgICAgIGBGaWVsZCAke2Z1bGxQYXRofSBpcyBpbW11dGFibGUgYW5kIHN0cmljdCA9ICd0aHJvdydgKTtcbiAgfVxuXG4gIGRlbGV0ZSBvYmpba2V5XTtcbiAgcmV0dXJuIHRydWU7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/query/handleImmutable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/query/handleReadPreferenceAliases.js":
/*!********************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/query/handleReadPreferenceAliases.js ***!
  \********************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function handleReadPreferenceAliases(pref) {\n  switch (pref) {\n    case 'p':\n      pref = 'primary';\n      break;\n    case 'pp':\n      pref = 'primaryPreferred';\n      break;\n    case 's':\n      pref = 'secondary';\n      break;\n    case 'sp':\n      pref = 'secondaryPreferred';\n      break;\n    case 'n':\n      pref = 'nearest';\n      break;\n  }\n\n  return pref;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcXVlcnkvaGFuZGxlUmVhZFByZWZlcmVuY2VBbGlhc2VzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9xdWVyeS9oYW5kbGVSZWFkUHJlZmVyZW5jZUFsaWFzZXMuanM/NWFlMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFuZGxlUmVhZFByZWZlcmVuY2VBbGlhc2VzKHByZWYpIHtcbiAgc3dpdGNoIChwcmVmKSB7XG4gICAgY2FzZSAncCc6XG4gICAgICBwcmVmID0gJ3ByaW1hcnknO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncHAnOlxuICAgICAgcHJlZiA9ICdwcmltYXJ5UHJlZmVycmVkJztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3MnOlxuICAgICAgcHJlZiA9ICdzZWNvbmRhcnknO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnc3AnOlxuICAgICAgcHJlZiA9ICdzZWNvbmRhcnlQcmVmZXJyZWQnO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbic6XG4gICAgICBwcmVmID0gJ25lYXJlc3QnO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gcHJlZjtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/query/handleReadPreferenceAliases.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/query/hasDollarKeys.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/query/hasDollarKeys.js ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/*!\n * ignore\n */\n\nmodule.exports = function hasDollarKeys(obj) {\n\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  const keys = Object.keys(obj);\n  const len = keys.length;\n\n  for (let i = 0; i < len; ++i) {\n    if (keys[i][0] === '$') {\n      return true;\n    }\n  }\n\n  return false;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcXVlcnkvaGFzRG9sbGFyS2V5cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsa0JBQWtCLFNBQVM7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcXVlcnkvaGFzRG9sbGFyS2V5cy5qcz8zMWU1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyohXG4gKiBpZ25vcmVcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc0RvbGxhcktleXMob2JqKSB7XG5cbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGtleXNbaV1bMF0gPT09ICckJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/query/hasDollarKeys.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/query/isOperator.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/query/isOperator.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nconst specialKeys = new Set([\n  '$ref',\n  '$id',\n  '$db'\n]);\n\nmodule.exports = function isOperator(path) {\n  return (\n    path[0] === '$' &&\n    !specialKeys.has(path)\n  );\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcXVlcnkvaXNPcGVyYXRvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcXVlcnkvaXNPcGVyYXRvci5qcz9hNDY4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3Qgc3BlY2lhbEtleXMgPSBuZXcgU2V0KFtcbiAgJyRyZWYnLFxuICAnJGlkJyxcbiAgJyRkYidcbl0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzT3BlcmF0b3IocGF0aCkge1xuICByZXR1cm4gKFxuICAgIHBhdGhbMF0gPT09ICckJyAmJlxuICAgICFzcGVjaWFsS2V5cy5oYXMocGF0aClcbiAgKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/query/isOperator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/query/sanitizeFilter.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/query/sanitizeFilter.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst hasDollarKeys = __webpack_require__(/*! ./hasDollarKeys */ \"(ssr)/./node_modules/mongoose/lib/helpers/query/hasDollarKeys.js\");\nconst { trustedSymbol } = __webpack_require__(/*! ./trusted */ \"(ssr)/./node_modules/mongoose/lib/helpers/query/trusted.js\");\n\nmodule.exports = function sanitizeFilter(filter) {\n  if (filter == null || typeof filter !== 'object') {\n    return filter;\n  }\n  if (Array.isArray(filter)) {\n    for (const subfilter of filter) {\n      sanitizeFilter(subfilter);\n    }\n    return filter;\n  }\n\n  const filterKeys = Object.keys(filter);\n  for (const key of filterKeys) {\n    const value = filter[key];\n    if (value != null && value[trustedSymbol]) {\n      continue;\n    }\n    if (key === '$and' || key === '$or') {\n      sanitizeFilter(value);\n      continue;\n    }\n\n    if (hasDollarKeys(value)) {\n      const keys = Object.keys(value);\n      if (keys.length === 1 && keys[0] === '$eq') {\n        continue;\n      }\n      filter[key] = { $eq: filter[key] };\n    }\n  }\n\n  return filter;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcXVlcnkvc2FuaXRpemVGaWx0ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsc0JBQXNCLG1CQUFPLENBQUMseUZBQWlCO0FBQy9DLFFBQVEsZ0JBQWdCLEVBQUUsbUJBQU8sQ0FBQyw2RUFBVzs7QUFFN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL3F1ZXJ5L3Nhbml0aXplRmlsdGVyLmpzP2E4NzIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBoYXNEb2xsYXJLZXlzID0gcmVxdWlyZSgnLi9oYXNEb2xsYXJLZXlzJyk7XG5jb25zdCB7IHRydXN0ZWRTeW1ib2wgfSA9IHJlcXVpcmUoJy4vdHJ1c3RlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNhbml0aXplRmlsdGVyKGZpbHRlcikge1xuICBpZiAoZmlsdGVyID09IG51bGwgfHwgdHlwZW9mIGZpbHRlciAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmlsdGVyO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KGZpbHRlcikpIHtcbiAgICBmb3IgKGNvbnN0IHN1YmZpbHRlciBvZiBmaWx0ZXIpIHtcbiAgICAgIHNhbml0aXplRmlsdGVyKHN1YmZpbHRlcik7XG4gICAgfVxuICAgIHJldHVybiBmaWx0ZXI7XG4gIH1cblxuICBjb25zdCBmaWx0ZXJLZXlzID0gT2JqZWN0LmtleXMoZmlsdGVyKTtcbiAgZm9yIChjb25zdCBrZXkgb2YgZmlsdGVyS2V5cykge1xuICAgIGNvbnN0IHZhbHVlID0gZmlsdGVyW2tleV07XG4gICAgaWYgKHZhbHVlICE9IG51bGwgJiYgdmFsdWVbdHJ1c3RlZFN5bWJvbF0pIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoa2V5ID09PSAnJGFuZCcgfHwga2V5ID09PSAnJG9yJykge1xuICAgICAgc2FuaXRpemVGaWx0ZXIodmFsdWUpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGhhc0RvbGxhcktleXModmFsdWUpKSB7XG4gICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuICAgICAgaWYgKGtleXMubGVuZ3RoID09PSAxICYmIGtleXNbMF0gPT09ICckZXEnKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgZmlsdGVyW2tleV0gPSB7ICRlcTogZmlsdGVyW2tleV0gfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmlsdGVyO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/query/sanitizeFilter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/query/sanitizeProjection.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/query/sanitizeProjection.js ***!
  \***********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function sanitizeProjection(projection) {\n  if (projection == null) {\n    return;\n  }\n\n  const keys = Object.keys(projection);\n  for (let i = 0; i < keys.length; ++i) {\n    if (typeof projection[keys[i]] === 'string') {\n      projection[keys[i]] = 1;\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcXVlcnkvc2FuaXRpemVQcm9qZWN0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLGlCQUFpQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9xdWVyeS9zYW5pdGl6ZVByb2plY3Rpb24uanM/ODBjZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2FuaXRpemVQcm9qZWN0aW9uKHByb2plY3Rpb24pIHtcbiAgaWYgKHByb2plY3Rpb24gPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhwcm9qZWN0aW9uKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKHR5cGVvZiBwcm9qZWN0aW9uW2tleXNbaV1dID09PSAnc3RyaW5nJykge1xuICAgICAgcHJvamVjdGlvbltrZXlzW2ldXSA9IDE7XG4gICAgfVxuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/query/sanitizeProjection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/query/selectPopulatedFields.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/query/selectPopulatedFields.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst isExclusive = __webpack_require__(/*! ../projection/isExclusive */ \"(ssr)/./node_modules/mongoose/lib/helpers/projection/isExclusive.js\");\nconst isInclusive = __webpack_require__(/*! ../projection/isInclusive */ \"(ssr)/./node_modules/mongoose/lib/helpers/projection/isInclusive.js\");\n\n/*!\n * ignore\n */\n\nmodule.exports = function selectPopulatedFields(fields, userProvidedFields, populateOptions) {\n  if (populateOptions == null) {\n    return;\n  }\n\n  const paths = Object.keys(populateOptions);\n  userProvidedFields = userProvidedFields || {};\n  if (isInclusive(fields)) {\n    for (const path of paths) {\n      if (!isPathInFields(userProvidedFields, path)) {\n        fields[path] = 1;\n      } else if (userProvidedFields[path] === 0) {\n        delete fields[path];\n      }\n\n      const refPath = populateOptions[path]?.refPath;\n      if (typeof refPath === 'string') {\n        if (!isPathInFields(userProvidedFields, refPath)) {\n          fields[refPath] = 1;\n        } else if (userProvidedFields[refPath] === 0) {\n          delete fields[refPath];\n        }\n      }\n    }\n  } else if (isExclusive(fields)) {\n    for (const path of paths) {\n      if (userProvidedFields[path] == null) {\n        delete fields[path];\n      }\n      const refPath = populateOptions[path]?.refPath;\n      if (typeof refPath === 'string' && userProvidedFields[refPath] == null) {\n        delete fields[refPath];\n      }\n    }\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction isPathInFields(userProvidedFields, path) {\n  const pieces = path.split('.');\n  const len = pieces.length;\n  let cur = pieces[0];\n  for (let i = 1; i < len; ++i) {\n    if (userProvidedFields[cur] != null || userProvidedFields[cur + '.$'] != null) {\n      return true;\n    }\n    cur += '.' + pieces[i];\n  }\n  return userProvidedFields[cur] != null || userProvidedFields[cur + '.$'] != null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcXVlcnkvc2VsZWN0UG9wdWxhdGVkRmllbGRzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLG9CQUFvQixtQkFBTyxDQUFDLHNHQUEyQjtBQUN2RCxvQkFBb0IsbUJBQU8sQ0FBQyxzR0FBMkI7O0FBRXZEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixTQUFTO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9xdWVyeS9zZWxlY3RQb3B1bGF0ZWRGaWVsZHMuanM/YmMyMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGlzRXhjbHVzaXZlID0gcmVxdWlyZSgnLi4vcHJvamVjdGlvbi9pc0V4Y2x1c2l2ZScpO1xuY29uc3QgaXNJbmNsdXNpdmUgPSByZXF1aXJlKCcuLi9wcm9qZWN0aW9uL2lzSW5jbHVzaXZlJyk7XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZWxlY3RQb3B1bGF0ZWRGaWVsZHMoZmllbGRzLCB1c2VyUHJvdmlkZWRGaWVsZHMsIHBvcHVsYXRlT3B0aW9ucykge1xuICBpZiAocG9wdWxhdGVPcHRpb25zID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBwYXRocyA9IE9iamVjdC5rZXlzKHBvcHVsYXRlT3B0aW9ucyk7XG4gIHVzZXJQcm92aWRlZEZpZWxkcyA9IHVzZXJQcm92aWRlZEZpZWxkcyB8fCB7fTtcbiAgaWYgKGlzSW5jbHVzaXZlKGZpZWxkcykpIHtcbiAgICBmb3IgKGNvbnN0IHBhdGggb2YgcGF0aHMpIHtcbiAgICAgIGlmICghaXNQYXRoSW5GaWVsZHModXNlclByb3ZpZGVkRmllbGRzLCBwYXRoKSkge1xuICAgICAgICBmaWVsZHNbcGF0aF0gPSAxO1xuICAgICAgfSBlbHNlIGlmICh1c2VyUHJvdmlkZWRGaWVsZHNbcGF0aF0gPT09IDApIHtcbiAgICAgICAgZGVsZXRlIGZpZWxkc1twYXRoXTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcmVmUGF0aCA9IHBvcHVsYXRlT3B0aW9uc1twYXRoXT8ucmVmUGF0aDtcbiAgICAgIGlmICh0eXBlb2YgcmVmUGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKCFpc1BhdGhJbkZpZWxkcyh1c2VyUHJvdmlkZWRGaWVsZHMsIHJlZlBhdGgpKSB7XG4gICAgICAgICAgZmllbGRzW3JlZlBhdGhdID0gMTtcbiAgICAgICAgfSBlbHNlIGlmICh1c2VyUHJvdmlkZWRGaWVsZHNbcmVmUGF0aF0gPT09IDApIHtcbiAgICAgICAgICBkZWxldGUgZmllbGRzW3JlZlBhdGhdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzRXhjbHVzaXZlKGZpZWxkcykpIHtcbiAgICBmb3IgKGNvbnN0IHBhdGggb2YgcGF0aHMpIHtcbiAgICAgIGlmICh1c2VyUHJvdmlkZWRGaWVsZHNbcGF0aF0gPT0gbnVsbCkge1xuICAgICAgICBkZWxldGUgZmllbGRzW3BhdGhdO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVmUGF0aCA9IHBvcHVsYXRlT3B0aW9uc1twYXRoXT8ucmVmUGF0aDtcbiAgICAgIGlmICh0eXBlb2YgcmVmUGF0aCA9PT0gJ3N0cmluZycgJiYgdXNlclByb3ZpZGVkRmllbGRzW3JlZlBhdGhdID09IG51bGwpIHtcbiAgICAgICAgZGVsZXRlIGZpZWxkc1tyZWZQYXRoXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxuZnVuY3Rpb24gaXNQYXRoSW5GaWVsZHModXNlclByb3ZpZGVkRmllbGRzLCBwYXRoKSB7XG4gIGNvbnN0IHBpZWNlcyA9IHBhdGguc3BsaXQoJy4nKTtcbiAgY29uc3QgbGVuID0gcGllY2VzLmxlbmd0aDtcbiAgbGV0IGN1ciA9IHBpZWNlc1swXTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh1c2VyUHJvdmlkZWRGaWVsZHNbY3VyXSAhPSBudWxsIHx8IHVzZXJQcm92aWRlZEZpZWxkc1tjdXIgKyAnLiQnXSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY3VyICs9ICcuJyArIHBpZWNlc1tpXTtcbiAgfVxuICByZXR1cm4gdXNlclByb3ZpZGVkRmllbGRzW2N1cl0gIT0gbnVsbCB8fCB1c2VyUHJvdmlkZWRGaWVsZHNbY3VyICsgJy4kJ10gIT0gbnVsbDtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/query/selectPopulatedFields.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/query/trusted.js":
/*!************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/query/trusted.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nconst trustedSymbol = Symbol('mongoose#trustedSymbol');\n\nexports.trustedSymbol = trustedSymbol;\n\nexports.trusted = function trusted(obj) {\n  if (obj == null || typeof obj !== 'object') {\n    return obj;\n  }\n  obj[trustedSymbol] = true;\n  return obj;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvcXVlcnkvdHJ1c3RlZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjs7QUFFQSxxQkFBcUI7O0FBRXJCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL3F1ZXJ5L3RydXN0ZWQuanM/NjM0ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHRydXN0ZWRTeW1ib2wgPSBTeW1ib2woJ21vbmdvb3NlI3RydXN0ZWRTeW1ib2wnKTtcblxuZXhwb3J0cy50cnVzdGVkU3ltYm9sID0gdHJ1c3RlZFN5bWJvbDtcblxuZXhwb3J0cy50cnVzdGVkID0gZnVuY3Rpb24gdHJ1c3RlZChvYmopIHtcbiAgaWYgKG9iaiA9PSBudWxsIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuICBvYmpbdHJ1c3RlZFN5bWJvbF0gPSB0cnVlO1xuICByZXR1cm4gb2JqO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/query/trusted.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/schema/addAutoId.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/schema/addAutoId.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function addAutoId(schema) {\n  const _obj = { _id: { auto: true } };\n  _obj._id[schema.options.typeKey] = 'ObjectId';\n  schema.add(_obj);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvc2NoZW1hL2FkZEF1dG9JZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvc2NoZW1hL2FkZEF1dG9JZC5qcz9hMmZjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBhZGRBdXRvSWQoc2NoZW1hKSB7XG4gIGNvbnN0IF9vYmogPSB7IF9pZDogeyBhdXRvOiB0cnVlIH0gfTtcbiAgX29iai5faWRbc2NoZW1hLm9wdGlvbnMudHlwZUtleV0gPSAnT2JqZWN0SWQnO1xuICBzY2hlbWEuYWRkKF9vYmopO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/schema/addAutoId.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/schema/applyBuiltinPlugins.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/schema/applyBuiltinPlugins.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst builtinPlugins = __webpack_require__(/*! ../../plugins */ \"(ssr)/./node_modules/mongoose/lib/plugins/index.js\");\n\nmodule.exports = function applyBuiltinPlugins(schema) {\n  for (const plugin of Object.values(builtinPlugins)) {\n    plugin(schema, { deduplicate: true });\n  }\n  schema.plugins = Object.values(builtinPlugins).\n    map(fn => ({ fn, opts: { deduplicate: true } })).\n    concat(schema.plugins);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvc2NoZW1hL2FwcGx5QnVpbHRpblBsdWdpbnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsdUJBQXVCLG1CQUFPLENBQUMseUVBQWU7O0FBRTlDO0FBQ0E7QUFDQSxxQkFBcUIsbUJBQW1CO0FBQ3hDO0FBQ0E7QUFDQSxpQkFBaUIsWUFBWSxxQkFBcUI7QUFDbEQ7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvc2NoZW1hL2FwcGx5QnVpbHRpblBsdWdpbnMuanM/NjBlNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGJ1aWx0aW5QbHVnaW5zID0gcmVxdWlyZSgnLi4vLi4vcGx1Z2lucycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGFwcGx5QnVpbHRpblBsdWdpbnMoc2NoZW1hKSB7XG4gIGZvciAoY29uc3QgcGx1Z2luIG9mIE9iamVjdC52YWx1ZXMoYnVpbHRpblBsdWdpbnMpKSB7XG4gICAgcGx1Z2luKHNjaGVtYSwgeyBkZWR1cGxpY2F0ZTogdHJ1ZSB9KTtcbiAgfVxuICBzY2hlbWEucGx1Z2lucyA9IE9iamVjdC52YWx1ZXMoYnVpbHRpblBsdWdpbnMpLlxuICAgIG1hcChmbiA9PiAoeyBmbiwgb3B0czogeyBkZWR1cGxpY2F0ZTogdHJ1ZSB9IH0pKS5cbiAgICBjb25jYXQoc2NoZW1hLnBsdWdpbnMpO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/schema/applyBuiltinPlugins.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/schema/applyPlugins.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/schema/applyPlugins.js ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function applyPlugins(schema, plugins, options, cacheKey) {\n  if (schema[cacheKey]) {\n    return;\n  }\n  schema[cacheKey] = true;\n\n  if (!options || !options.skipTopLevel) {\n    let pluginTags = null;\n    for (const plugin of plugins) {\n      const tags = plugin[1] == null ? null : plugin[1].tags;\n      if (!Array.isArray(tags)) {\n        schema.plugin(plugin[0], plugin[1]);\n        continue;\n      }\n\n      pluginTags = pluginTags || new Set(schema.options.pluginTags || []);\n      if (!tags.find(tag => pluginTags.has(tag))) {\n        continue;\n      }\n      schema.plugin(plugin[0], plugin[1]);\n    }\n  }\n\n  options = Object.assign({}, options);\n  delete options.skipTopLevel;\n\n  if (options.applyPluginsToChildSchemas !== false) {\n    for (const path of Object.keys(schema.paths)) {\n      const type = schema.paths[path];\n      if (type.schema != null) {\n        applyPlugins(type.schema, plugins, options, cacheKey);\n\n        // Recompile schema because plugins may have changed it, see gh-7572\n        type.caster.prototype.$__setSchema(type.schema);\n      }\n    }\n  }\n\n  const discriminators = schema.discriminators;\n  if (discriminators == null) {\n    return;\n  }\n\n  const applyPluginsToDiscriminators = options.applyPluginsToDiscriminators;\n\n  const keys = Object.keys(discriminators);\n  for (const discriminatorKey of keys) {\n    const discriminatorSchema = discriminators[discriminatorKey];\n\n    applyPlugins(discriminatorSchema, plugins,\n      { skipTopLevel: !applyPluginsToDiscriminators }, cacheKey);\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvc2NoZW1hL2FwcGx5UGx1Z2lucy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNEJBQTRCO0FBQzVCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRLDZDQUE2QztBQUNyRDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9zY2hlbWEvYXBwbHlQbHVnaW5zLmpzP2JjYmIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGFwcGx5UGx1Z2lucyhzY2hlbWEsIHBsdWdpbnMsIG9wdGlvbnMsIGNhY2hlS2V5KSB7XG4gIGlmIChzY2hlbWFbY2FjaGVLZXldKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHNjaGVtYVtjYWNoZUtleV0gPSB0cnVlO1xuXG4gIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5za2lwVG9wTGV2ZWwpIHtcbiAgICBsZXQgcGx1Z2luVGFncyA9IG51bGw7XG4gICAgZm9yIChjb25zdCBwbHVnaW4gb2YgcGx1Z2lucykge1xuICAgICAgY29uc3QgdGFncyA9IHBsdWdpblsxXSA9PSBudWxsID8gbnVsbCA6IHBsdWdpblsxXS50YWdzO1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHRhZ3MpKSB7XG4gICAgICAgIHNjaGVtYS5wbHVnaW4ocGx1Z2luWzBdLCBwbHVnaW5bMV0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgcGx1Z2luVGFncyA9IHBsdWdpblRhZ3MgfHwgbmV3IFNldChzY2hlbWEub3B0aW9ucy5wbHVnaW5UYWdzIHx8IFtdKTtcbiAgICAgIGlmICghdGFncy5maW5kKHRhZyA9PiBwbHVnaW5UYWdzLmhhcyh0YWcpKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHNjaGVtYS5wbHVnaW4ocGx1Z2luWzBdLCBwbHVnaW5bMV0pO1xuICAgIH1cbiAgfVxuXG4gIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKTtcbiAgZGVsZXRlIG9wdGlvbnMuc2tpcFRvcExldmVsO1xuXG4gIGlmIChvcHRpb25zLmFwcGx5UGx1Z2luc1RvQ2hpbGRTY2hlbWFzICE9PSBmYWxzZSkge1xuICAgIGZvciAoY29uc3QgcGF0aCBvZiBPYmplY3Qua2V5cyhzY2hlbWEucGF0aHMpKSB7XG4gICAgICBjb25zdCB0eXBlID0gc2NoZW1hLnBhdGhzW3BhdGhdO1xuICAgICAgaWYgKHR5cGUuc2NoZW1hICE9IG51bGwpIHtcbiAgICAgICAgYXBwbHlQbHVnaW5zKHR5cGUuc2NoZW1hLCBwbHVnaW5zLCBvcHRpb25zLCBjYWNoZUtleSk7XG5cbiAgICAgICAgLy8gUmVjb21waWxlIHNjaGVtYSBiZWNhdXNlIHBsdWdpbnMgbWF5IGhhdmUgY2hhbmdlZCBpdCwgc2VlIGdoLTc1NzJcbiAgICAgICAgdHlwZS5jYXN0ZXIucHJvdG90eXBlLiRfX3NldFNjaGVtYSh0eXBlLnNjaGVtYSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3QgZGlzY3JpbWluYXRvcnMgPSBzY2hlbWEuZGlzY3JpbWluYXRvcnM7XG4gIGlmIChkaXNjcmltaW5hdG9ycyA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgYXBwbHlQbHVnaW5zVG9EaXNjcmltaW5hdG9ycyA9IG9wdGlvbnMuYXBwbHlQbHVnaW5zVG9EaXNjcmltaW5hdG9ycztcblxuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZGlzY3JpbWluYXRvcnMpO1xuICBmb3IgKGNvbnN0IGRpc2NyaW1pbmF0b3JLZXkgb2Yga2V5cykge1xuICAgIGNvbnN0IGRpc2NyaW1pbmF0b3JTY2hlbWEgPSBkaXNjcmltaW5hdG9yc1tkaXNjcmltaW5hdG9yS2V5XTtcblxuICAgIGFwcGx5UGx1Z2lucyhkaXNjcmltaW5hdG9yU2NoZW1hLCBwbHVnaW5zLFxuICAgICAgeyBza2lwVG9wTGV2ZWw6ICFhcHBseVBsdWdpbnNUb0Rpc2NyaW1pbmF0b3JzIH0sIGNhY2hlS2V5KTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/schema/applyPlugins.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/schema/applyWriteConcern.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/schema/applyWriteConcern.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst get = __webpack_require__(/*! ../get */ \"(ssr)/./node_modules/mongoose/lib/helpers/get.js\");\n\nmodule.exports = function applyWriteConcern(schema, options) {\n  if (options.writeConcern != null) {\n    return;\n  }\n  // Don't apply default write concern to operations in transactions,\n  // because setting write concern on an operation in a transaction is an error\n  // See: https://www.mongodb.com/docs/manual/reference/write-concern/\n  if (options && options.session && options.session.transaction) {\n    return;\n  }\n  const writeConcern = get(schema, 'options.writeConcern', {});\n  if (Object.keys(writeConcern).length != 0) {\n    options.writeConcern = {};\n    if (!('w' in options) && writeConcern.w != null) {\n      options.writeConcern.w = writeConcern.w;\n    }\n    if (!('j' in options) && writeConcern.j != null) {\n      options.writeConcern.j = writeConcern.j;\n    }\n    if (!('wtimeout' in options) && writeConcern.wtimeout != null) {\n      options.writeConcern.wtimeout = writeConcern.wtimeout;\n    }\n  }\n  else {\n    if (!('w' in options) && writeConcern.w != null) {\n      options.w = writeConcern.w;\n    }\n    if (!('j' in options) && writeConcern.j != null) {\n      options.j = writeConcern.j;\n    }\n    if (!('wtimeout' in options) && writeConcern.wtimeout != null) {\n      options.wtimeout = writeConcern.wtimeout;\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvc2NoZW1hL2FwcGx5V3JpdGVDb25jZXJuLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQyxnRUFBUTs7QUFFNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQ7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9zY2hlbWEvYXBwbHlXcml0ZUNvbmNlcm4uanM/ODVkMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGdldCA9IHJlcXVpcmUoJy4uL2dldCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGFwcGx5V3JpdGVDb25jZXJuKHNjaGVtYSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucy53cml0ZUNvbmNlcm4gIT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBEb24ndCBhcHBseSBkZWZhdWx0IHdyaXRlIGNvbmNlcm4gdG8gb3BlcmF0aW9ucyBpbiB0cmFuc2FjdGlvbnMsXG4gIC8vIGJlY2F1c2Ugc2V0dGluZyB3cml0ZSBjb25jZXJuIG9uIGFuIG9wZXJhdGlvbiBpbiBhIHRyYW5zYWN0aW9uIGlzIGFuIGVycm9yXG4gIC8vIFNlZTogaHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZG9jcy9tYW51YWwvcmVmZXJlbmNlL3dyaXRlLWNvbmNlcm4vXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuc2Vzc2lvbiAmJiBvcHRpb25zLnNlc3Npb24udHJhbnNhY3Rpb24pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qgd3JpdGVDb25jZXJuID0gZ2V0KHNjaGVtYSwgJ29wdGlvbnMud3JpdGVDb25jZXJuJywge30pO1xuICBpZiAoT2JqZWN0LmtleXMod3JpdGVDb25jZXJuKS5sZW5ndGggIT0gMCkge1xuICAgIG9wdGlvbnMud3JpdGVDb25jZXJuID0ge307XG4gICAgaWYgKCEoJ3cnIGluIG9wdGlvbnMpICYmIHdyaXRlQ29uY2Vybi53ICE9IG51bGwpIHtcbiAgICAgIG9wdGlvbnMud3JpdGVDb25jZXJuLncgPSB3cml0ZUNvbmNlcm4udztcbiAgICB9XG4gICAgaWYgKCEoJ2onIGluIG9wdGlvbnMpICYmIHdyaXRlQ29uY2Vybi5qICE9IG51bGwpIHtcbiAgICAgIG9wdGlvbnMud3JpdGVDb25jZXJuLmogPSB3cml0ZUNvbmNlcm4uajtcbiAgICB9XG4gICAgaWYgKCEoJ3d0aW1lb3V0JyBpbiBvcHRpb25zKSAmJiB3cml0ZUNvbmNlcm4ud3RpbWVvdXQgIT0gbnVsbCkge1xuICAgICAgb3B0aW9ucy53cml0ZUNvbmNlcm4ud3RpbWVvdXQgPSB3cml0ZUNvbmNlcm4ud3RpbWVvdXQ7XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIGlmICghKCd3JyBpbiBvcHRpb25zKSAmJiB3cml0ZUNvbmNlcm4udyAhPSBudWxsKSB7XG4gICAgICBvcHRpb25zLncgPSB3cml0ZUNvbmNlcm4udztcbiAgICB9XG4gICAgaWYgKCEoJ2onIGluIG9wdGlvbnMpICYmIHdyaXRlQ29uY2Vybi5qICE9IG51bGwpIHtcbiAgICAgIG9wdGlvbnMuaiA9IHdyaXRlQ29uY2Vybi5qO1xuICAgIH1cbiAgICBpZiAoISgnd3RpbWVvdXQnIGluIG9wdGlvbnMpICYmIHdyaXRlQ29uY2Vybi53dGltZW91dCAhPSBudWxsKSB7XG4gICAgICBvcHRpb25zLnd0aW1lb3V0ID0gd3JpdGVDb25jZXJuLnd0aW1lb3V0O1xuICAgIH1cbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/schema/applyWriteConcern.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/schema/cleanPositionalOperators.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/schema/cleanPositionalOperators.js ***!
  \******************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * For consistency's sake, we replace positional operator `$` and array filters\n * `$[]` and `$[foo]` with `0` when looking up schema paths.\n */\n\nmodule.exports = function cleanPositionalOperators(path) {\n  return path.\n    replace(/\\.\\$(\\[[^\\]]*\\])?(?=\\.)/g, '.0').\n    replace(/\\.\\$(\\[[^\\]]*\\])?$/g, '.0');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvc2NoZW1hL2NsZWFuUG9zaXRpb25hbE9wZXJhdG9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9zY2hlbWEvY2xlYW5Qb3NpdGlvbmFsT3BlcmF0b3JzLmpzP2Y3MWEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEZvciBjb25zaXN0ZW5jeSdzIHNha2UsIHdlIHJlcGxhY2UgcG9zaXRpb25hbCBvcGVyYXRvciBgJGAgYW5kIGFycmF5IGZpbHRlcnNcbiAqIGAkW11gIGFuZCBgJFtmb29dYCB3aXRoIGAwYCB3aGVuIGxvb2tpbmcgdXAgc2NoZW1hIHBhdGhzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY2xlYW5Qb3NpdGlvbmFsT3BlcmF0b3JzKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguXG4gICAgcmVwbGFjZSgvXFwuXFwkKFxcW1teXFxdXSpcXF0pPyg/PVxcLikvZywgJy4wJykuXG4gICAgcmVwbGFjZSgvXFwuXFwkKFxcW1teXFxdXSpcXF0pPyQvZywgJy4wJyk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/schema/cleanPositionalOperators.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/schema/getIndexes.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/schema/getIndexes.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst get = __webpack_require__(/*! ../get */ \"(ssr)/./node_modules/mongoose/lib/helpers/get.js\");\nconst helperIsObject = __webpack_require__(/*! ../isObject */ \"(ssr)/./node_modules/mongoose/lib/helpers/isObject.js\");\nconst decorateDiscriminatorIndexOptions = __webpack_require__(/*! ../indexes/decorateDiscriminatorIndexOptions */ \"(ssr)/./node_modules/mongoose/lib/helpers/indexes/decorateDiscriminatorIndexOptions.js\");\n\n/**\n * Gather all indexes defined in the schema, including single nested,\n * document arrays, and embedded discriminators.\n * @param {Schema} schema\n * @api private\n */\n\nmodule.exports = function getIndexes(schema) {\n  let indexes = [];\n  const schemaStack = new WeakMap();\n  const indexTypes = schema.constructor.indexTypes;\n  const indexByName = new Map();\n\n  collectIndexes(schema);\n  return indexes;\n\n  function collectIndexes(schema, prefix, baseSchema) {\n    // Ignore infinitely nested schemas, if we've already seen this schema\n    // along this path there must be a cycle\n    if (schemaStack.has(schema)) {\n      return;\n    }\n    schemaStack.set(schema, true);\n\n    prefix = prefix || '';\n    const keys = Object.keys(schema.paths);\n\n    for (const key of keys) {\n      const path = schema.paths[key];\n      if (baseSchema != null && baseSchema.paths[key]) {\n        // If looking at an embedded discriminator schema, don't look at paths\n        // that the\n        continue;\n      }\n\n      if (path.$isMongooseDocumentArray || path.$isSingleNested) {\n        if (get(path, 'options.excludeIndexes') !== true &&\n            get(path, 'schemaOptions.excludeIndexes') !== true &&\n            get(path, 'schema.options.excludeIndexes') !== true) {\n          collectIndexes(path.schema, prefix + key + '.');\n        }\n\n        if (path.schema.discriminators != null) {\n          const discriminators = path.schema.discriminators;\n          const discriminatorKeys = Object.keys(discriminators);\n          for (const discriminatorKey of discriminatorKeys) {\n            collectIndexes(discriminators[discriminatorKey],\n              prefix + key + '.', path.schema);\n          }\n        }\n\n        // Retained to minimize risk of backwards breaking changes due to\n        // gh-6113\n        if (path.$isMongooseDocumentArray) {\n          continue;\n        }\n      }\n\n      const index = path._index || (path.caster && path.caster._index);\n\n      if (index !== false && index !== null && index !== undefined) {\n        const field = {};\n        const isObject = helperIsObject(index);\n        const options = isObject ? index : {};\n        const type = typeof index === 'string' ? index :\n          isObject ? index.type :\n            false;\n\n        if (type && indexTypes.indexOf(type) !== -1) {\n          field[prefix + key] = type;\n        } else if (options.text) {\n          field[prefix + key] = 'text';\n          delete options.text;\n        } else {\n          let isDescendingIndex = false;\n          if (index === 'descending' || index === 'desc') {\n            isDescendingIndex = true;\n          } else if (index === 'ascending' || index === 'asc') {\n            isDescendingIndex = false;\n          } else {\n            isDescendingIndex = Number(index) === -1;\n          }\n\n          field[prefix + key] = isDescendingIndex ? -1 : 1;\n        }\n\n        delete options.type;\n        if (!('background' in options)) {\n          options.background = true;\n        }\n        if (schema.options.autoIndex != null) {\n          options._autoIndex = schema.options.autoIndex;\n        }\n\n        const indexName = options && options.name;\n\n        if (typeof indexName === 'string') {\n          if (indexByName.has(indexName)) {\n            Object.assign(indexByName.get(indexName), field);\n          } else {\n            indexes.push([field, options]);\n            indexByName.set(indexName, field);\n          }\n        } else {\n          indexes.push([field, options]);\n          indexByName.set(indexName, field);\n        }\n      }\n    }\n\n    schemaStack.delete(schema);\n\n    if (prefix) {\n      fixSubIndexPaths(schema, prefix);\n    } else {\n      schema._indexes.forEach(function(index) {\n        const options = index[1];\n        if (!('background' in options)) {\n          options.background = true;\n        }\n        decorateDiscriminatorIndexOptions(schema, options);\n      });\n      indexes = indexes.concat(schema._indexes);\n    }\n  }\n\n  /**\n   * Checks for indexes added to subdocs using Schema.index().\n   * These indexes need their paths prefixed properly.\n   *\n   * schema._indexes = [ [indexObj, options], [indexObj, options] ..]\n   * @param {Schema} schema\n   * @param {String} prefix\n   * @api private\n   */\n\n  function fixSubIndexPaths(schema, prefix) {\n    const subindexes = schema._indexes;\n    const len = subindexes.length;\n    for (let i = 0; i < len; ++i) {\n      const indexObj = subindexes[i][0];\n      const indexOptions = subindexes[i][1];\n      const keys = Object.keys(indexObj);\n      const klen = keys.length;\n      const newindex = {};\n\n      // use forward iteration, order matters\n      for (let j = 0; j < klen; ++j) {\n        const key = keys[j];\n        newindex[prefix + key] = indexObj[key];\n      }\n\n      const newIndexOptions = Object.assign({}, indexOptions);\n      if (indexOptions != null && indexOptions.partialFilterExpression != null) {\n        newIndexOptions.partialFilterExpression = {};\n        const partialFilterExpression = indexOptions.partialFilterExpression;\n        for (const key of Object.keys(partialFilterExpression)) {\n          newIndexOptions.partialFilterExpression[prefix + key] =\n            partialFilterExpression[key];\n        }\n      }\n\n      indexes.push([newindex, newIndexOptions]);\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/schema/getIndexes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/schema/getKeysInSchemaOrder.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/schema/getKeysInSchemaOrder.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst get = __webpack_require__(/*! ../get */ \"(ssr)/./node_modules/mongoose/lib/helpers/get.js\");\n\nmodule.exports = function getKeysInSchemaOrder(schema, val, path) {\n  const schemaKeys = path != null ? Object.keys(get(schema.tree, path, {})) : Object.keys(schema.tree);\n  const valKeys = new Set(Object.keys(val));\n\n  let keys;\n  if (valKeys.size > 1) {\n    keys = new Set();\n    for (const key of schemaKeys) {\n      if (valKeys.has(key)) {\n        keys.add(key);\n      }\n    }\n    for (const key of valKeys) {\n      if (!keys.has(key)) {\n        keys.add(key);\n      }\n    }\n    keys = Array.from(keys);\n  } else {\n    keys = Array.from(valKeys);\n  }\n\n  return keys;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvc2NoZW1hL2dldEtleXNJblNjaGVtYU9yZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQyxnRUFBUTs7QUFFNUI7QUFDQSx5RUFBeUU7QUFDekU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL3NjaGVtYS9nZXRLZXlzSW5TY2hlbWFPcmRlci5qcz9kMzA4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZ2V0ID0gcmVxdWlyZSgnLi4vZ2V0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0S2V5c0luU2NoZW1hT3JkZXIoc2NoZW1hLCB2YWwsIHBhdGgpIHtcbiAgY29uc3Qgc2NoZW1hS2V5cyA9IHBhdGggIT0gbnVsbCA/IE9iamVjdC5rZXlzKGdldChzY2hlbWEudHJlZSwgcGF0aCwge30pKSA6IE9iamVjdC5rZXlzKHNjaGVtYS50cmVlKTtcbiAgY29uc3QgdmFsS2V5cyA9IG5ldyBTZXQoT2JqZWN0LmtleXModmFsKSk7XG5cbiAgbGV0IGtleXM7XG4gIGlmICh2YWxLZXlzLnNpemUgPiAxKSB7XG4gICAga2V5cyA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBzY2hlbWFLZXlzKSB7XG4gICAgICBpZiAodmFsS2V5cy5oYXMoa2V5KSkge1xuICAgICAgICBrZXlzLmFkZChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBvZiB2YWxLZXlzKSB7XG4gICAgICBpZiAoIWtleXMuaGFzKGtleSkpIHtcbiAgICAgICAga2V5cy5hZGQoa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gICAga2V5cyA9IEFycmF5LmZyb20oa2V5cyk7XG4gIH0gZWxzZSB7XG4gICAga2V5cyA9IEFycmF5LmZyb20odmFsS2V5cyk7XG4gIH1cblxuICByZXR1cm4ga2V5cztcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/schema/getKeysInSchemaOrder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/schema/getPath.js":
/*!*************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/schema/getPath.js ***!
  \*************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nconst numberRE = /^\\d+$/;\n\n/**\n * Behaves like `Schema#path()`, except for it also digs into arrays without\n * needing to put `.0.`, so `getPath(schema, 'docArr.elProp')` works.\n * @api private\n */\n\nmodule.exports = function getPath(schema, path) {\n  let schematype = schema.path(path);\n  if (schematype != null) {\n    return schematype;\n  }\n  const pieces = path.split('.');\n  let cur = '';\n  let isArray = false;\n\n  for (const piece of pieces) {\n    if (isArray && numberRE.test(piece)) {\n      continue;\n    }\n    cur = cur.length === 0 ? piece : cur + '.' + piece;\n\n    schematype = schema.path(cur);\n    if (schematype != null && schematype.schema) {\n      schema = schematype.schema;\n      cur = '';\n      if (!isArray && schematype.$isMongooseDocumentArray) {\n        isArray = true;\n      }\n    }\n  }\n\n  return schematype;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvc2NoZW1hL2dldFBhdGguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL3NjaGVtYS9nZXRQYXRoLmpzP2I0ZDciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBudW1iZXJSRSA9IC9eXFxkKyQvO1xuXG4vKipcbiAqIEJlaGF2ZXMgbGlrZSBgU2NoZW1hI3BhdGgoKWAsIGV4Y2VwdCBmb3IgaXQgYWxzbyBkaWdzIGludG8gYXJyYXlzIHdpdGhvdXRcbiAqIG5lZWRpbmcgdG8gcHV0IGAuMC5gLCBzbyBgZ2V0UGF0aChzY2hlbWEsICdkb2NBcnIuZWxQcm9wJylgIHdvcmtzLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQYXRoKHNjaGVtYSwgcGF0aCkge1xuICBsZXQgc2NoZW1hdHlwZSA9IHNjaGVtYS5wYXRoKHBhdGgpO1xuICBpZiAoc2NoZW1hdHlwZSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHNjaGVtYXR5cGU7XG4gIH1cbiAgY29uc3QgcGllY2VzID0gcGF0aC5zcGxpdCgnLicpO1xuICBsZXQgY3VyID0gJyc7XG4gIGxldCBpc0FycmF5ID0gZmFsc2U7XG5cbiAgZm9yIChjb25zdCBwaWVjZSBvZiBwaWVjZXMpIHtcbiAgICBpZiAoaXNBcnJheSAmJiBudW1iZXJSRS50ZXN0KHBpZWNlKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGN1ciA9IGN1ci5sZW5ndGggPT09IDAgPyBwaWVjZSA6IGN1ciArICcuJyArIHBpZWNlO1xuXG4gICAgc2NoZW1hdHlwZSA9IHNjaGVtYS5wYXRoKGN1cik7XG4gICAgaWYgKHNjaGVtYXR5cGUgIT0gbnVsbCAmJiBzY2hlbWF0eXBlLnNjaGVtYSkge1xuICAgICAgc2NoZW1hID0gc2NoZW1hdHlwZS5zY2hlbWE7XG4gICAgICBjdXIgPSAnJztcbiAgICAgIGlmICghaXNBcnJheSAmJiBzY2hlbWF0eXBlLiRpc01vbmdvb3NlRG9jdW1lbnRBcnJheSkge1xuICAgICAgICBpc0FycmF5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gc2NoZW1hdHlwZTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/schema/getPath.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/schema/getSubdocumentStrictValue.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/schema/getSubdocumentStrictValue.js ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Find the `strict` mode setting for the deepest subdocument along a given path\n * to ensure we have the correct default value for `strict`. When setting values\n * underneath a subdocument, we should use the subdocument's `strict` setting by\n * default, not the top-level document's.\n *\n * @param {Schema} schema\n * @param {String[]} parts\n * @returns {boolean | 'throw' | undefined}\n */\n\nmodule.exports = function getSubdocumentStrictValue(schema, parts) {\n  if (parts.length === 1) {\n    return undefined;\n  }\n  let cur = parts[0];\n  let strict = undefined;\n  for (let i = 0; i < parts.length - 1; ++i) {\n    const curSchemaType = schema.path(cur);\n    if (curSchemaType && curSchemaType.schema) {\n      strict = curSchemaType.schema.options.strict;\n      schema = curSchemaType.schema;\n      cur = curSchemaType.$isMongooseDocumentArray && !isNaN(parts[i + 1]) ? '' : parts[i + 1];\n    } else {\n      cur += cur.length ? ('.' + parts[i + 1]) : parts[i + 1];\n    }\n  }\n\n  return strict;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvc2NoZW1hL2dldFN1YmRvY3VtZW50U3RyaWN0VmFsdWUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsVUFBVTtBQUNyQixhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHNCQUFzQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9zY2hlbWEvZ2V0U3ViZG9jdW1lbnRTdHJpY3RWYWx1ZS5qcz85NTEyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBGaW5kIHRoZSBgc3RyaWN0YCBtb2RlIHNldHRpbmcgZm9yIHRoZSBkZWVwZXN0IHN1YmRvY3VtZW50IGFsb25nIGEgZ2l2ZW4gcGF0aFxuICogdG8gZW5zdXJlIHdlIGhhdmUgdGhlIGNvcnJlY3QgZGVmYXVsdCB2YWx1ZSBmb3IgYHN0cmljdGAuIFdoZW4gc2V0dGluZyB2YWx1ZXNcbiAqIHVuZGVybmVhdGggYSBzdWJkb2N1bWVudCwgd2Ugc2hvdWxkIHVzZSB0aGUgc3ViZG9jdW1lbnQncyBgc3RyaWN0YCBzZXR0aW5nIGJ5XG4gKiBkZWZhdWx0LCBub3QgdGhlIHRvcC1sZXZlbCBkb2N1bWVudCdzLlxuICpcbiAqIEBwYXJhbSB7U2NoZW1hfSBzY2hlbWFcbiAqIEBwYXJhbSB7U3RyaW5nW119IHBhcnRzXG4gKiBAcmV0dXJucyB7Ym9vbGVhbiB8ICd0aHJvdycgfCB1bmRlZmluZWR9XG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRTdWJkb2N1bWVudFN0cmljdFZhbHVlKHNjaGVtYSwgcGFydHMpIHtcbiAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgbGV0IGN1ciA9IHBhcnRzWzBdO1xuICBsZXQgc3RyaWN0ID0gdW5kZWZpbmVkO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aCAtIDE7ICsraSkge1xuICAgIGNvbnN0IGN1clNjaGVtYVR5cGUgPSBzY2hlbWEucGF0aChjdXIpO1xuICAgIGlmIChjdXJTY2hlbWFUeXBlICYmIGN1clNjaGVtYVR5cGUuc2NoZW1hKSB7XG4gICAgICBzdHJpY3QgPSBjdXJTY2hlbWFUeXBlLnNjaGVtYS5vcHRpb25zLnN0cmljdDtcbiAgICAgIHNjaGVtYSA9IGN1clNjaGVtYVR5cGUuc2NoZW1hO1xuICAgICAgY3VyID0gY3VyU2NoZW1hVHlwZS4kaXNNb25nb29zZURvY3VtZW50QXJyYXkgJiYgIWlzTmFOKHBhcnRzW2kgKyAxXSkgPyAnJyA6IHBhcnRzW2kgKyAxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VyICs9IGN1ci5sZW5ndGggPyAoJy4nICsgcGFydHNbaSArIDFdKSA6IHBhcnRzW2kgKyAxXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RyaWN0O1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/schema/getSubdocumentStrictValue.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/schema/handleIdOption.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/schema/handleIdOption.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst addAutoId = __webpack_require__(/*! ./addAutoId */ \"(ssr)/./node_modules/mongoose/lib/helpers/schema/addAutoId.js\");\n\nmodule.exports = function handleIdOption(schema, options) {\n  if (options == null || options._id == null) {\n    return schema;\n  }\n\n  schema = schema.clone();\n  if (!options._id) {\n    schema.remove('_id');\n    schema.options._id = false;\n  } else if (!schema.paths['_id']) {\n    addAutoId(schema);\n    schema.options._id = true;\n  }\n\n  return schema;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvc2NoZW1hL2hhbmRsZUlkT3B0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGtCQUFrQixtQkFBTyxDQUFDLGtGQUFhOztBQUV2QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvc2NoZW1hL2hhbmRsZUlkT3B0aW9uLmpzPzA3ZTIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBhZGRBdXRvSWQgPSByZXF1aXJlKCcuL2FkZEF1dG9JZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhbmRsZUlkT3B0aW9uKHNjaGVtYSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PSBudWxsIHx8IG9wdGlvbnMuX2lkID09IG51bGwpIHtcbiAgICByZXR1cm4gc2NoZW1hO1xuICB9XG5cbiAgc2NoZW1hID0gc2NoZW1hLmNsb25lKCk7XG4gIGlmICghb3B0aW9ucy5faWQpIHtcbiAgICBzY2hlbWEucmVtb3ZlKCdfaWQnKTtcbiAgICBzY2hlbWEub3B0aW9ucy5faWQgPSBmYWxzZTtcbiAgfSBlbHNlIGlmICghc2NoZW1hLnBhdGhzWydfaWQnXSkge1xuICAgIGFkZEF1dG9JZChzY2hlbWEpO1xuICAgIHNjaGVtYS5vcHRpb25zLl9pZCA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gc2NoZW1hO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/schema/handleIdOption.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/schema/handleTimestampOption.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/schema/handleTimestampOption.js ***!
  \***************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = handleTimestampOption;\n\n/*!\n * ignore\n */\n\nfunction handleTimestampOption(arg, prop) {\n  if (arg == null) {\n    return null;\n  }\n\n  if (typeof arg === 'boolean') {\n    return prop;\n  }\n  if (typeof arg[prop] === 'boolean') {\n    return arg[prop] ? prop : null;\n  }\n  if (!(prop in arg)) {\n    return prop;\n  }\n  return arg[prop];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvc2NoZW1hL2hhbmRsZVRpbWVzdGFtcE9wdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvc2NoZW1hL2hhbmRsZVRpbWVzdGFtcE9wdGlvbi5qcz8zYjg2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBoYW5kbGVUaW1lc3RhbXBPcHRpb247XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxuZnVuY3Rpb24gaGFuZGxlVGltZXN0YW1wT3B0aW9uKGFyZywgcHJvcCkge1xuICBpZiAoYXJnID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnYm9vbGVhbicpIHtcbiAgICByZXR1cm4gcHJvcDtcbiAgfVxuICBpZiAodHlwZW9mIGFyZ1twcm9wXSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgcmV0dXJuIGFyZ1twcm9wXSA/IHByb3AgOiBudWxsO1xuICB9XG4gIGlmICghKHByb3AgaW4gYXJnKSkge1xuICAgIHJldHVybiBwcm9wO1xuICB9XG4gIHJldHVybiBhcmdbcHJvcF07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/schema/handleTimestampOption.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/schema/idGetter.js":
/*!**************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/schema/idGetter.js ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/*!\n * ignore\n */\n\nmodule.exports = function addIdGetter(schema) {\n  // ensure the documents receive an id getter unless disabled\n  const autoIdGetter = !schema.paths['id'] &&\n    schema.paths['_id'] &&\n    schema.options.id;\n  if (!autoIdGetter) {\n    return schema;\n  }\n  if (schema.aliases && schema.aliases.id) {\n    return schema;\n  }\n  schema.virtual('id').get(idGetter);\n\n  return schema;\n};\n\n/**\n * Returns this documents _id cast to a string.\n * @api private\n */\n\nfunction idGetter() {\n  if (this._id != null) {\n    return String(this._id);\n  }\n\n  return null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvc2NoZW1hL2lkR2V0dGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy9zY2hlbWEvaWRHZXR0ZXIuanM/NzQxMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBhZGRJZEdldHRlcihzY2hlbWEpIHtcbiAgLy8gZW5zdXJlIHRoZSBkb2N1bWVudHMgcmVjZWl2ZSBhbiBpZCBnZXR0ZXIgdW5sZXNzIGRpc2FibGVkXG4gIGNvbnN0IGF1dG9JZEdldHRlciA9ICFzY2hlbWEucGF0aHNbJ2lkJ10gJiZcbiAgICBzY2hlbWEucGF0aHNbJ19pZCddICYmXG4gICAgc2NoZW1hLm9wdGlvbnMuaWQ7XG4gIGlmICghYXV0b0lkR2V0dGVyKSB7XG4gICAgcmV0dXJuIHNjaGVtYTtcbiAgfVxuICBpZiAoc2NoZW1hLmFsaWFzZXMgJiYgc2NoZW1hLmFsaWFzZXMuaWQpIHtcbiAgICByZXR1cm4gc2NoZW1hO1xuICB9XG4gIHNjaGVtYS52aXJ0dWFsKCdpZCcpLmdldChpZEdldHRlcik7XG5cbiAgcmV0dXJuIHNjaGVtYTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGlzIGRvY3VtZW50cyBfaWQgY2FzdCB0byBhIHN0cmluZy5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGlkR2V0dGVyKCkge1xuICBpZiAodGhpcy5faWQgIT0gbnVsbCkge1xuICAgIHJldHVybiBTdHJpbmcodGhpcy5faWQpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/schema/idGetter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/schema/merge.js":
/*!***********************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/schema/merge.js ***!
  \***********************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function merge(s1, s2, skipConflictingPaths) {\n  const paths = Object.keys(s2.tree);\n  const pathsToAdd = {};\n  for (const key of paths) {\n    if (skipConflictingPaths && (s1.paths[key] || s1.nested[key] || s1.singleNestedPaths[key])) {\n      continue;\n    }\n    pathsToAdd[key] = s2.tree[key];\n  }\n  s1.options._isMerging = true;\n  s1.add(pathsToAdd, null);\n  delete s1.options._isMerging;\n\n  s1.callQueue = s1.callQueue.concat(s2.callQueue);\n  s1.method(s2.methods);\n  s1.static(s2.statics);\n\n  for (const [option, value] of Object.entries(s2._userProvidedOptions)) {\n    if (!(option in s1._userProvidedOptions)) {\n      s1.set(option, value);\n    }\n  }\n\n  for (const query in s2.query) {\n    s1.query[query] = s2.query[query];\n  }\n\n  for (const virtual in s2.virtuals) {\n    s1.virtuals[virtual] = s2.virtuals[virtual].clone();\n  }\n\n  s1._indexes = s1._indexes.concat(s2._indexes || []);\n  s1.s.hooks.merge(s2.s.hooks, false);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvc2NoZW1hL21lcmdlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvc2NoZW1hL21lcmdlLmpzPzJlN2QiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlKHMxLCBzMiwgc2tpcENvbmZsaWN0aW5nUGF0aHMpIHtcbiAgY29uc3QgcGF0aHMgPSBPYmplY3Qua2V5cyhzMi50cmVlKTtcbiAgY29uc3QgcGF0aHNUb0FkZCA9IHt9O1xuICBmb3IgKGNvbnN0IGtleSBvZiBwYXRocykge1xuICAgIGlmIChza2lwQ29uZmxpY3RpbmdQYXRocyAmJiAoczEucGF0aHNba2V5XSB8fCBzMS5uZXN0ZWRba2V5XSB8fCBzMS5zaW5nbGVOZXN0ZWRQYXRoc1trZXldKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHBhdGhzVG9BZGRba2V5XSA9IHMyLnRyZWVba2V5XTtcbiAgfVxuICBzMS5vcHRpb25zLl9pc01lcmdpbmcgPSB0cnVlO1xuICBzMS5hZGQocGF0aHNUb0FkZCwgbnVsbCk7XG4gIGRlbGV0ZSBzMS5vcHRpb25zLl9pc01lcmdpbmc7XG5cbiAgczEuY2FsbFF1ZXVlID0gczEuY2FsbFF1ZXVlLmNvbmNhdChzMi5jYWxsUXVldWUpO1xuICBzMS5tZXRob2QoczIubWV0aG9kcyk7XG4gIHMxLnN0YXRpYyhzMi5zdGF0aWNzKTtcblxuICBmb3IgKGNvbnN0IFtvcHRpb24sIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhzMi5fdXNlclByb3ZpZGVkT3B0aW9ucykpIHtcbiAgICBpZiAoIShvcHRpb24gaW4gczEuX3VzZXJQcm92aWRlZE9wdGlvbnMpKSB7XG4gICAgICBzMS5zZXQob3B0aW9uLCB2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgZm9yIChjb25zdCBxdWVyeSBpbiBzMi5xdWVyeSkge1xuICAgIHMxLnF1ZXJ5W3F1ZXJ5XSA9IHMyLnF1ZXJ5W3F1ZXJ5XTtcbiAgfVxuXG4gIGZvciAoY29uc3QgdmlydHVhbCBpbiBzMi52aXJ0dWFscykge1xuICAgIHMxLnZpcnR1YWxzW3ZpcnR1YWxdID0gczIudmlydHVhbHNbdmlydHVhbF0uY2xvbmUoKTtcbiAgfVxuXG4gIHMxLl9pbmRleGVzID0gczEuX2luZGV4ZXMuY29uY2F0KHMyLl9pbmRleGVzIHx8IFtdKTtcbiAgczEucy5ob29rcy5tZXJnZShzMi5zLmhvb2tzLCBmYWxzZSk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/schema/merge.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/schematype/handleImmutable.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/schematype/handleImmutable.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst StrictModeError = __webpack_require__(/*! ../../error/strict */ \"(ssr)/./node_modules/mongoose/lib/error/strict.js\");\n\n/*!\n * ignore\n */\n\nmodule.exports = function(schematype) {\n  if (schematype.$immutable) {\n    schematype.$immutableSetter = createImmutableSetter(schematype.path,\n      schematype.options.immutable);\n    schematype.set(schematype.$immutableSetter);\n  } else if (schematype.$immutableSetter) {\n    schematype.setters = schematype.setters.\n      filter(fn => fn !== schematype.$immutableSetter);\n    delete schematype.$immutableSetter;\n  }\n};\n\nfunction createImmutableSetter(path, immutable) {\n  return function immutableSetter(v, _priorVal, _doc, options) {\n    if (this == null || this.$__ == null) {\n      return v;\n    }\n    if (this.isNew) {\n      return v;\n    }\n    if (options && options.overwriteImmutable) {\n      return v;\n    }\n\n    const _immutable = typeof immutable === 'function' ?\n      immutable.call(this, this) :\n      immutable;\n    if (!_immutable) {\n      return v;\n    }\n\n    const _value = this.$__.priorDoc != null ?\n      this.$__.priorDoc.$__getValue(path) :\n      this.$__getValue(path);\n    if (this.$__.strictMode === 'throw' && v !== _value) {\n      throw new StrictModeError(path, 'Path `' + path + '` is immutable ' +\n        'and strict mode is set to throw.', true);\n    }\n\n    return _value;\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvc2NoZW1hdHlwZS9oYW5kbGVJbW11dGFibGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsd0JBQXdCLG1CQUFPLENBQUMsNkVBQW9COztBQUVwRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvc2NoZW1hdHlwZS9oYW5kbGVJbW11dGFibGUuanM/YTcwOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFN0cmljdE1vZGVFcnJvciA9IHJlcXVpcmUoJy4uLy4uL2Vycm9yL3N0cmljdCcpO1xuXG4vKiFcbiAqIGlnbm9yZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oc2NoZW1hdHlwZSkge1xuICBpZiAoc2NoZW1hdHlwZS4kaW1tdXRhYmxlKSB7XG4gICAgc2NoZW1hdHlwZS4kaW1tdXRhYmxlU2V0dGVyID0gY3JlYXRlSW1tdXRhYmxlU2V0dGVyKHNjaGVtYXR5cGUucGF0aCxcbiAgICAgIHNjaGVtYXR5cGUub3B0aW9ucy5pbW11dGFibGUpO1xuICAgIHNjaGVtYXR5cGUuc2V0KHNjaGVtYXR5cGUuJGltbXV0YWJsZVNldHRlcik7XG4gIH0gZWxzZSBpZiAoc2NoZW1hdHlwZS4kaW1tdXRhYmxlU2V0dGVyKSB7XG4gICAgc2NoZW1hdHlwZS5zZXR0ZXJzID0gc2NoZW1hdHlwZS5zZXR0ZXJzLlxuICAgICAgZmlsdGVyKGZuID0+IGZuICE9PSBzY2hlbWF0eXBlLiRpbW11dGFibGVTZXR0ZXIpO1xuICAgIGRlbGV0ZSBzY2hlbWF0eXBlLiRpbW11dGFibGVTZXR0ZXI7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUltbXV0YWJsZVNldHRlcihwYXRoLCBpbW11dGFibGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGltbXV0YWJsZVNldHRlcih2LCBfcHJpb3JWYWwsIF9kb2MsIG9wdGlvbnMpIHtcbiAgICBpZiAodGhpcyA9PSBudWxsIHx8IHRoaXMuJF9fID09IG51bGwpIHtcbiAgICAgIHJldHVybiB2O1xuICAgIH1cbiAgICBpZiAodGhpcy5pc05ldykge1xuICAgICAgcmV0dXJuIHY7XG4gICAgfVxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMub3ZlcndyaXRlSW1tdXRhYmxlKSB7XG4gICAgICByZXR1cm4gdjtcbiAgICB9XG5cbiAgICBjb25zdCBfaW1tdXRhYmxlID0gdHlwZW9mIGltbXV0YWJsZSA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgICBpbW11dGFibGUuY2FsbCh0aGlzLCB0aGlzKSA6XG4gICAgICBpbW11dGFibGU7XG4gICAgaWYgKCFfaW1tdXRhYmxlKSB7XG4gICAgICByZXR1cm4gdjtcbiAgICB9XG5cbiAgICBjb25zdCBfdmFsdWUgPSB0aGlzLiRfXy5wcmlvckRvYyAhPSBudWxsID9cbiAgICAgIHRoaXMuJF9fLnByaW9yRG9jLiRfX2dldFZhbHVlKHBhdGgpIDpcbiAgICAgIHRoaXMuJF9fZ2V0VmFsdWUocGF0aCk7XG4gICAgaWYgKHRoaXMuJF9fLnN0cmljdE1vZGUgPT09ICd0aHJvdycgJiYgdiAhPT0gX3ZhbHVlKSB7XG4gICAgICB0aHJvdyBuZXcgU3RyaWN0TW9kZUVycm9yKHBhdGgsICdQYXRoIGAnICsgcGF0aCArICdgIGlzIGltbXV0YWJsZSAnICtcbiAgICAgICAgJ2FuZCBzdHJpY3QgbW9kZSBpcyBzZXQgdG8gdGhyb3cuJywgdHJ1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF92YWx1ZTtcbiAgfTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/schematype/handleImmutable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/setDefaultsOnInsert.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/setDefaultsOnInsert.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst modifiedPaths = (__webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongoose/lib/helpers/common.js\").modifiedPaths);\nconst get = __webpack_require__(/*! ./get */ \"(ssr)/./node_modules/mongoose/lib/helpers/get.js\");\n\n/**\n * Applies defaults to update and findOneAndUpdate operations.\n *\n * @param {Object} filter\n * @param {Schema} schema\n * @param {Object} castedDoc\n * @param {Object} options\n * @method setDefaultsOnInsert\n * @api private\n */\n\nmodule.exports = function(filter, schema, castedDoc, options) {\n  options = options || {};\n\n  const shouldSetDefaultsOnInsert =\n    options.setDefaultsOnInsert != null ?\n      options.setDefaultsOnInsert :\n      schema.base.options.setDefaultsOnInsert;\n\n  if (!options.upsert || shouldSetDefaultsOnInsert === false) {\n    return castedDoc;\n  }\n\n  const keys = Object.keys(castedDoc || {});\n  const updatedKeys = {};\n  const updatedValues = {};\n  const numKeys = keys.length;\n  const modified = {};\n\n  let hasDollarUpdate = false;\n\n  for (let i = 0; i < numKeys; ++i) {\n    if (keys[i].startsWith('$')) {\n      modifiedPaths(castedDoc[keys[i]], '', modified);\n      hasDollarUpdate = true;\n    }\n  }\n\n  if (!hasDollarUpdate) {\n    modifiedPaths(castedDoc, '', modified);\n  }\n\n  const paths = Object.keys(filter);\n  const numPaths = paths.length;\n  for (let i = 0; i < numPaths; ++i) {\n    const path = paths[i];\n    const condition = filter[path];\n    if (condition && typeof condition === 'object') {\n      const conditionKeys = Object.keys(condition);\n      const numConditionKeys = conditionKeys.length;\n      let hasDollarKey = false;\n      for (let j = 0; j < numConditionKeys; ++j) {\n        if (conditionKeys[j].startsWith('$')) {\n          hasDollarKey = true;\n          break;\n        }\n      }\n      if (hasDollarKey) {\n        continue;\n      }\n    }\n    updatedKeys[path] = true;\n    modified[path] = true;\n  }\n\n  if (options && options.overwrite && !hasDollarUpdate) {\n    // Defaults will be set later, since we're overwriting we'll cast\n    // the whole update to a document\n    return castedDoc;\n  }\n\n  schema.eachPath(function(path, schemaType) {\n    // Skip single nested paths if underneath a map\n    if (schemaType.path === '_id' && schemaType.options.auto) {\n      return;\n    }\n    const def = schemaType.getDefault(null, true);\n    if (isModified(modified, path)) {\n      return;\n    }\n    if (typeof def === 'undefined') {\n      return;\n    }\n    if (schemaType.splitPath().includes('$*')) {\n      // Skip defaults underneath maps. We should never do `$setOnInsert` on a path with `$*`\n      return;\n    }\n\n    castedDoc = castedDoc || {};\n    castedDoc.$setOnInsert = castedDoc.$setOnInsert || {};\n    if (get(castedDoc, path) == null) {\n      castedDoc.$setOnInsert[path] = def;\n    }\n    updatedValues[path] = def;\n  });\n\n  return castedDoc;\n};\n\nfunction isModified(modified, path) {\n  if (modified[path]) {\n    return true;\n  }\n\n  // Is any parent path of `path` modified?\n  const sp = path.split('.');\n  let cur = sp[0];\n  for (let i = 1; i < sp.length; ++i) {\n    if (modified[cur]) {\n      return true;\n    }\n    cur += '.' + sp[i];\n  }\n\n  // Is any child of `path` modified?\n  const modifiedKeys = Object.keys(modified);\n  if (modifiedKeys.length) {\n    const parentPath = path + '.';\n\n    for (const modifiedPath of modifiedKeys) {\n      if (modifiedPath.slice(0, path.length + 1) === parentPath) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvc2V0RGVmYXVsdHNPbkluc2VydC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLHNCQUFzQiwwR0FBaUM7QUFDdkQsWUFBWSxtQkFBTyxDQUFDLCtEQUFPOztBQUUzQjtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxrQkFBa0IsYUFBYTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCLGNBQWM7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNCQUFzQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGVBQWU7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvc2V0RGVmYXVsdHNPbkluc2VydC5qcz8yZjliIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IG1vZGlmaWVkUGF0aHMgPSByZXF1aXJlKCcuL2NvbW1vbicpLm1vZGlmaWVkUGF0aHM7XG5jb25zdCBnZXQgPSByZXF1aXJlKCcuL2dldCcpO1xuXG4vKipcbiAqIEFwcGxpZXMgZGVmYXVsdHMgdG8gdXBkYXRlIGFuZCBmaW5kT25lQW5kVXBkYXRlIG9wZXJhdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGZpbHRlclxuICogQHBhcmFtIHtTY2hlbWF9IHNjaGVtYVxuICogQHBhcmFtIHtPYmplY3R9IGNhc3RlZERvY1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBtZXRob2Qgc2V0RGVmYXVsdHNPbkluc2VydFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmaWx0ZXIsIHNjaGVtYSwgY2FzdGVkRG9jLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIGNvbnN0IHNob3VsZFNldERlZmF1bHRzT25JbnNlcnQgPVxuICAgIG9wdGlvbnMuc2V0RGVmYXVsdHNPbkluc2VydCAhPSBudWxsID9cbiAgICAgIG9wdGlvbnMuc2V0RGVmYXVsdHNPbkluc2VydCA6XG4gICAgICBzY2hlbWEuYmFzZS5vcHRpb25zLnNldERlZmF1bHRzT25JbnNlcnQ7XG5cbiAgaWYgKCFvcHRpb25zLnVwc2VydCB8fCBzaG91bGRTZXREZWZhdWx0c09uSW5zZXJ0ID09PSBmYWxzZSkge1xuICAgIHJldHVybiBjYXN0ZWREb2M7XG4gIH1cblxuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoY2FzdGVkRG9jIHx8IHt9KTtcbiAgY29uc3QgdXBkYXRlZEtleXMgPSB7fTtcbiAgY29uc3QgdXBkYXRlZFZhbHVlcyA9IHt9O1xuICBjb25zdCBudW1LZXlzID0ga2V5cy5sZW5ndGg7XG4gIGNvbnN0IG1vZGlmaWVkID0ge307XG5cbiAgbGV0IGhhc0RvbGxhclVwZGF0ZSA9IGZhbHNlO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtS2V5czsgKytpKSB7XG4gICAgaWYgKGtleXNbaV0uc3RhcnRzV2l0aCgnJCcpKSB7XG4gICAgICBtb2RpZmllZFBhdGhzKGNhc3RlZERvY1trZXlzW2ldXSwgJycsIG1vZGlmaWVkKTtcbiAgICAgIGhhc0RvbGxhclVwZGF0ZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFoYXNEb2xsYXJVcGRhdGUpIHtcbiAgICBtb2RpZmllZFBhdGhzKGNhc3RlZERvYywgJycsIG1vZGlmaWVkKTtcbiAgfVxuXG4gIGNvbnN0IHBhdGhzID0gT2JqZWN0LmtleXMoZmlsdGVyKTtcbiAgY29uc3QgbnVtUGF0aHMgPSBwYXRocy5sZW5ndGg7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtUGF0aHM7ICsraSkge1xuICAgIGNvbnN0IHBhdGggPSBwYXRoc1tpXTtcbiAgICBjb25zdCBjb25kaXRpb24gPSBmaWx0ZXJbcGF0aF07XG4gICAgaWYgKGNvbmRpdGlvbiAmJiB0eXBlb2YgY29uZGl0aW9uID09PSAnb2JqZWN0Jykge1xuICAgICAgY29uc3QgY29uZGl0aW9uS2V5cyA9IE9iamVjdC5rZXlzKGNvbmRpdGlvbik7XG4gICAgICBjb25zdCBudW1Db25kaXRpb25LZXlzID0gY29uZGl0aW9uS2V5cy5sZW5ndGg7XG4gICAgICBsZXQgaGFzRG9sbGFyS2V5ID0gZmFsc2U7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG51bUNvbmRpdGlvbktleXM7ICsraikge1xuICAgICAgICBpZiAoY29uZGl0aW9uS2V5c1tqXS5zdGFydHNXaXRoKCckJykpIHtcbiAgICAgICAgICBoYXNEb2xsYXJLZXkgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaGFzRG9sbGFyS2V5KSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cbiAgICB1cGRhdGVkS2V5c1twYXRoXSA9IHRydWU7XG4gICAgbW9kaWZpZWRbcGF0aF0gPSB0cnVlO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5vdmVyd3JpdGUgJiYgIWhhc0RvbGxhclVwZGF0ZSkge1xuICAgIC8vIERlZmF1bHRzIHdpbGwgYmUgc2V0IGxhdGVyLCBzaW5jZSB3ZSdyZSBvdmVyd3JpdGluZyB3ZSdsbCBjYXN0XG4gICAgLy8gdGhlIHdob2xlIHVwZGF0ZSB0byBhIGRvY3VtZW50XG4gICAgcmV0dXJuIGNhc3RlZERvYztcbiAgfVxuXG4gIHNjaGVtYS5lYWNoUGF0aChmdW5jdGlvbihwYXRoLCBzY2hlbWFUeXBlKSB7XG4gICAgLy8gU2tpcCBzaW5nbGUgbmVzdGVkIHBhdGhzIGlmIHVuZGVybmVhdGggYSBtYXBcbiAgICBpZiAoc2NoZW1hVHlwZS5wYXRoID09PSAnX2lkJyAmJiBzY2hlbWFUeXBlLm9wdGlvbnMuYXV0bykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBkZWYgPSBzY2hlbWFUeXBlLmdldERlZmF1bHQobnVsbCwgdHJ1ZSk7XG4gICAgaWYgKGlzTW9kaWZpZWQobW9kaWZpZWQsIHBhdGgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGVmID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoc2NoZW1hVHlwZS5zcGxpdFBhdGgoKS5pbmNsdWRlcygnJConKSkge1xuICAgICAgLy8gU2tpcCBkZWZhdWx0cyB1bmRlcm5lYXRoIG1hcHMuIFdlIHNob3VsZCBuZXZlciBkbyBgJHNldE9uSW5zZXJ0YCBvbiBhIHBhdGggd2l0aCBgJCpgXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2FzdGVkRG9jID0gY2FzdGVkRG9jIHx8IHt9O1xuICAgIGNhc3RlZERvYy4kc2V0T25JbnNlcnQgPSBjYXN0ZWREb2MuJHNldE9uSW5zZXJ0IHx8IHt9O1xuICAgIGlmIChnZXQoY2FzdGVkRG9jLCBwYXRoKSA9PSBudWxsKSB7XG4gICAgICBjYXN0ZWREb2MuJHNldE9uSW5zZXJ0W3BhdGhdID0gZGVmO1xuICAgIH1cbiAgICB1cGRhdGVkVmFsdWVzW3BhdGhdID0gZGVmO1xuICB9KTtcblxuICByZXR1cm4gY2FzdGVkRG9jO1xufTtcblxuZnVuY3Rpb24gaXNNb2RpZmllZChtb2RpZmllZCwgcGF0aCkge1xuICBpZiAobW9kaWZpZWRbcGF0aF0pIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIElzIGFueSBwYXJlbnQgcGF0aCBvZiBgcGF0aGAgbW9kaWZpZWQ/XG4gIGNvbnN0IHNwID0gcGF0aC5zcGxpdCgnLicpO1xuICBsZXQgY3VyID0gc3BbMF07XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgc3AubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobW9kaWZpZWRbY3VyXSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGN1ciArPSAnLicgKyBzcFtpXTtcbiAgfVxuXG4gIC8vIElzIGFueSBjaGlsZCBvZiBgcGF0aGAgbW9kaWZpZWQ/XG4gIGNvbnN0IG1vZGlmaWVkS2V5cyA9IE9iamVjdC5rZXlzKG1vZGlmaWVkKTtcbiAgaWYgKG1vZGlmaWVkS2V5cy5sZW5ndGgpIHtcbiAgICBjb25zdCBwYXJlbnRQYXRoID0gcGF0aCArICcuJztcblxuICAgIGZvciAoY29uc3QgbW9kaWZpZWRQYXRoIG9mIG1vZGlmaWVkS2V5cykge1xuICAgICAgaWYgKG1vZGlmaWVkUGF0aC5zbGljZSgwLCBwYXRoLmxlbmd0aCArIDEpID09PSBwYXJlbnRQYXRoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/setDefaultsOnInsert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/specialProperties.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/specialProperties.js ***!
  \****************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = new Set(['__proto__', 'constructor', 'prototype']);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvc3BlY2lhbFByb3BlcnRpZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL3NwZWNpYWxQcm9wZXJ0aWVzLmpzP2FkMTAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBTZXQoWydfX3Byb3RvX18nLCAnY29uc3RydWN0b3InLCAncHJvdG90eXBlJ10pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/specialProperties.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/symbols.js":
/*!******************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/symbols.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.arrayAtomicsBackupSymbol = Symbol('mongoose#Array#atomicsBackup');\nexports.arrayAtomicsSymbol = Symbol('mongoose#Array#_atomics');\nexports.arrayParentSymbol = Symbol('mongoose#Array#_parent');\nexports.arrayPathSymbol = Symbol('mongoose#Array#_path');\nexports.arraySchemaSymbol = Symbol('mongoose#Array#_schema');\nexports.documentArrayParent = Symbol('mongoose#documentArrayParent');\nexports.documentIsSelected = Symbol('mongoose#Document#isSelected');\nexports.documentIsModified = Symbol('mongoose#Document#isModified');\nexports.documentModifiedPaths = Symbol('mongoose#Document#modifiedPaths');\nexports.documentSchemaSymbol = Symbol('mongoose#Document#schema');\nexports.getSymbol = Symbol('mongoose#Document#get');\nexports.modelSymbol = Symbol('mongoose#Model');\nexports.objectIdSymbol = Symbol('mongoose#ObjectId');\nexports.populateModelSymbol = Symbol('mongoose#PopulateOptions#Model');\nexports.schemaTypeSymbol = Symbol('mongoose#schemaType');\nexports.sessionNewDocuments = Symbol('mongoose#ClientSession#newDocuments');\nexports.scopeSymbol = Symbol('mongoose#Document#scope');\nexports.validatorErrorSymbol = Symbol('mongoose#validatorError');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvc3ltYm9scy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixnQ0FBZ0M7QUFDaEMsMEJBQTBCO0FBQzFCLHlCQUF5QjtBQUN6Qix1QkFBdUI7QUFDdkIseUJBQXlCO0FBQ3pCLDJCQUEyQjtBQUMzQiwwQkFBMEI7QUFDMUIsMEJBQTBCO0FBQzFCLDZCQUE2QjtBQUM3Qiw0QkFBNEI7QUFDNUIsaUJBQWlCO0FBQ2pCLG1CQUFtQjtBQUNuQixzQkFBc0I7QUFDdEIsMkJBQTJCO0FBQzNCLHdCQUF3QjtBQUN4QiwyQkFBMkI7QUFDM0IsbUJBQW1CO0FBQ25CLDRCQUE0QiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvc3ltYm9scy5qcz9jMDE5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5hcnJheUF0b21pY3NCYWNrdXBTeW1ib2wgPSBTeW1ib2woJ21vbmdvb3NlI0FycmF5I2F0b21pY3NCYWNrdXAnKTtcbmV4cG9ydHMuYXJyYXlBdG9taWNzU3ltYm9sID0gU3ltYm9sKCdtb25nb29zZSNBcnJheSNfYXRvbWljcycpO1xuZXhwb3J0cy5hcnJheVBhcmVudFN5bWJvbCA9IFN5bWJvbCgnbW9uZ29vc2UjQXJyYXkjX3BhcmVudCcpO1xuZXhwb3J0cy5hcnJheVBhdGhTeW1ib2wgPSBTeW1ib2woJ21vbmdvb3NlI0FycmF5I19wYXRoJyk7XG5leHBvcnRzLmFycmF5U2NoZW1hU3ltYm9sID0gU3ltYm9sKCdtb25nb29zZSNBcnJheSNfc2NoZW1hJyk7XG5leHBvcnRzLmRvY3VtZW50QXJyYXlQYXJlbnQgPSBTeW1ib2woJ21vbmdvb3NlI2RvY3VtZW50QXJyYXlQYXJlbnQnKTtcbmV4cG9ydHMuZG9jdW1lbnRJc1NlbGVjdGVkID0gU3ltYm9sKCdtb25nb29zZSNEb2N1bWVudCNpc1NlbGVjdGVkJyk7XG5leHBvcnRzLmRvY3VtZW50SXNNb2RpZmllZCA9IFN5bWJvbCgnbW9uZ29vc2UjRG9jdW1lbnQjaXNNb2RpZmllZCcpO1xuZXhwb3J0cy5kb2N1bWVudE1vZGlmaWVkUGF0aHMgPSBTeW1ib2woJ21vbmdvb3NlI0RvY3VtZW50I21vZGlmaWVkUGF0aHMnKTtcbmV4cG9ydHMuZG9jdW1lbnRTY2hlbWFTeW1ib2wgPSBTeW1ib2woJ21vbmdvb3NlI0RvY3VtZW50I3NjaGVtYScpO1xuZXhwb3J0cy5nZXRTeW1ib2wgPSBTeW1ib2woJ21vbmdvb3NlI0RvY3VtZW50I2dldCcpO1xuZXhwb3J0cy5tb2RlbFN5bWJvbCA9IFN5bWJvbCgnbW9uZ29vc2UjTW9kZWwnKTtcbmV4cG9ydHMub2JqZWN0SWRTeW1ib2wgPSBTeW1ib2woJ21vbmdvb3NlI09iamVjdElkJyk7XG5leHBvcnRzLnBvcHVsYXRlTW9kZWxTeW1ib2wgPSBTeW1ib2woJ21vbmdvb3NlI1BvcHVsYXRlT3B0aW9ucyNNb2RlbCcpO1xuZXhwb3J0cy5zY2hlbWFUeXBlU3ltYm9sID0gU3ltYm9sKCdtb25nb29zZSNzY2hlbWFUeXBlJyk7XG5leHBvcnRzLnNlc3Npb25OZXdEb2N1bWVudHMgPSBTeW1ib2woJ21vbmdvb3NlI0NsaWVudFNlc3Npb24jbmV3RG9jdW1lbnRzJyk7XG5leHBvcnRzLnNjb3BlU3ltYm9sID0gU3ltYm9sKCdtb25nb29zZSNEb2N1bWVudCNzY29wZScpO1xuZXhwb3J0cy52YWxpZGF0b3JFcnJvclN5bWJvbCA9IFN5bWJvbCgnbW9uZ29vc2UjdmFsaWRhdG9yRXJyb3InKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/timers.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/timers.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.setTimeout = setTimeout;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvdGltZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGtCQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvdGltZXJzLmpzP2U0M2YiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/timers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/timestamps/setDocumentTimestamps.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/timestamps/setDocumentTimestamps.js ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function setDocumentTimestamps(doc, timestampOption, currentTime, createdAt, updatedAt) {\n  const skipUpdatedAt = timestampOption != null && timestampOption.updatedAt === false;\n  const skipCreatedAt = timestampOption != null && timestampOption.createdAt === false;\n\n  const defaultTimestamp = currentTime != null ?\n    currentTime() :\n    doc.ownerDocument().constructor.base.now();\n\n  if (!skipCreatedAt &&\n      (doc.isNew || doc.$isSubdocument) &&\n      createdAt &&\n      !doc.$__getValue(createdAt) &&\n      doc.$__isSelected(createdAt)) {\n    doc.$set(createdAt, defaultTimestamp, undefined, { overwriteImmutable: true });\n  }\n\n  if (!skipUpdatedAt && updatedAt && (doc.isNew || doc.$isModified())) {\n    let ts = defaultTimestamp;\n    if (doc.isNew && createdAt != null) {\n      ts = doc.$__getValue(createdAt);\n    }\n    doc.$set(updatedAt, ts);\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvdGltZXN0YW1wcy9zZXREb2N1bWVudFRpbWVzdGFtcHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELDBCQUEwQjtBQUNqRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaGVscGVycy90aW1lc3RhbXBzL3NldERvY3VtZW50VGltZXN0YW1wcy5qcz82NzA1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXREb2N1bWVudFRpbWVzdGFtcHMoZG9jLCB0aW1lc3RhbXBPcHRpb24sIGN1cnJlbnRUaW1lLCBjcmVhdGVkQXQsIHVwZGF0ZWRBdCkge1xuICBjb25zdCBza2lwVXBkYXRlZEF0ID0gdGltZXN0YW1wT3B0aW9uICE9IG51bGwgJiYgdGltZXN0YW1wT3B0aW9uLnVwZGF0ZWRBdCA9PT0gZmFsc2U7XG4gIGNvbnN0IHNraXBDcmVhdGVkQXQgPSB0aW1lc3RhbXBPcHRpb24gIT0gbnVsbCAmJiB0aW1lc3RhbXBPcHRpb24uY3JlYXRlZEF0ID09PSBmYWxzZTtcblxuICBjb25zdCBkZWZhdWx0VGltZXN0YW1wID0gY3VycmVudFRpbWUgIT0gbnVsbCA/XG4gICAgY3VycmVudFRpbWUoKSA6XG4gICAgZG9jLm93bmVyRG9jdW1lbnQoKS5jb25zdHJ1Y3Rvci5iYXNlLm5vdygpO1xuXG4gIGlmICghc2tpcENyZWF0ZWRBdCAmJlxuICAgICAgKGRvYy5pc05ldyB8fCBkb2MuJGlzU3ViZG9jdW1lbnQpICYmXG4gICAgICBjcmVhdGVkQXQgJiZcbiAgICAgICFkb2MuJF9fZ2V0VmFsdWUoY3JlYXRlZEF0KSAmJlxuICAgICAgZG9jLiRfX2lzU2VsZWN0ZWQoY3JlYXRlZEF0KSkge1xuICAgIGRvYy4kc2V0KGNyZWF0ZWRBdCwgZGVmYXVsdFRpbWVzdGFtcCwgdW5kZWZpbmVkLCB7IG92ZXJ3cml0ZUltbXV0YWJsZTogdHJ1ZSB9KTtcbiAgfVxuXG4gIGlmICghc2tpcFVwZGF0ZWRBdCAmJiB1cGRhdGVkQXQgJiYgKGRvYy5pc05ldyB8fCBkb2MuJGlzTW9kaWZpZWQoKSkpIHtcbiAgICBsZXQgdHMgPSBkZWZhdWx0VGltZXN0YW1wO1xuICAgIGlmIChkb2MuaXNOZXcgJiYgY3JlYXRlZEF0ICE9IG51bGwpIHtcbiAgICAgIHRzID0gZG9jLiRfX2dldFZhbHVlKGNyZWF0ZWRBdCk7XG4gICAgfVxuICAgIGRvYy4kc2V0KHVwZGF0ZWRBdCwgdHMpO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/timestamps/setDocumentTimestamps.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/timestamps/setupTimestamps.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/timestamps/setupTimestamps.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst applyTimestampsToChildren = __webpack_require__(/*! ../update/applyTimestampsToChildren */ \"(ssr)/./node_modules/mongoose/lib/helpers/update/applyTimestampsToChildren.js\");\nconst applyTimestampsToUpdate = __webpack_require__(/*! ../update/applyTimestampsToUpdate */ \"(ssr)/./node_modules/mongoose/lib/helpers/update/applyTimestampsToUpdate.js\");\nconst get = __webpack_require__(/*! ../get */ \"(ssr)/./node_modules/mongoose/lib/helpers/get.js\");\nconst handleTimestampOption = __webpack_require__(/*! ../schema/handleTimestampOption */ \"(ssr)/./node_modules/mongoose/lib/helpers/schema/handleTimestampOption.js\");\nconst setDocumentTimestamps = __webpack_require__(/*! ./setDocumentTimestamps */ \"(ssr)/./node_modules/mongoose/lib/helpers/timestamps/setDocumentTimestamps.js\");\nconst symbols = __webpack_require__(/*! ../../schema/symbols */ \"(ssr)/./node_modules/mongoose/lib/schema/symbols.js\");\n\nconst replaceOps = new Set([\n  'replaceOne',\n  'findOneAndReplace'\n]);\n\nmodule.exports = function setupTimestamps(schema, timestamps) {\n  const childHasTimestamp = schema.childSchemas.find(withTimestamp);\n  function withTimestamp(s) {\n    const ts = s.schema.options.timestamps;\n    return !!ts;\n  }\n  if (!timestamps && !childHasTimestamp) {\n    return;\n  }\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n  const currentTime = timestamps != null && timestamps.hasOwnProperty('currentTime') ?\n    timestamps.currentTime :\n    null;\n  const schemaAdditions = {};\n\n  schema.$timestamps = { createdAt: createdAt, updatedAt: updatedAt };\n\n  if (createdAt && !schema.paths[createdAt]) {\n    const baseImmutableCreatedAt = schema.base != null ? schema.base.get('timestamps.createdAt.immutable') : null;\n    const immutable = baseImmutableCreatedAt != null ? baseImmutableCreatedAt : true;\n    schemaAdditions[createdAt] = { [schema.options.typeKey || 'type']: Date, immutable };\n  }\n\n  if (updatedAt && !schema.paths[updatedAt]) {\n    schemaAdditions[updatedAt] = Date;\n  }\n\n  schema.add(schemaAdditions);\n\n  schema.pre('save', function timestampsPreSave(next) {\n    const timestampOption = get(this, '$__.saveOptions.timestamps');\n    if (timestampOption === false) {\n      return next();\n    }\n\n    setDocumentTimestamps(this, timestampOption, currentTime, createdAt, updatedAt);\n\n    next();\n  });\n\n  schema.methods.initializeTimestamps = function() {\n    const ts = currentTime != null ?\n      currentTime() : this.constructor.base.now();\n\n\n    if (createdAt && !this.get(createdAt)) {\n      this.$set(createdAt, ts);\n    }\n    if (updatedAt && !this.get(updatedAt)) {\n      this.$set(updatedAt, ts);\n    }\n    if (this.$isSubdocument) {\n      return this;\n    }\n\n    const subdocs = this.$getAllSubdocs();\n    for (const subdoc of subdocs) {\n      if (subdoc.initializeTimestamps) {\n        subdoc.initializeTimestamps();\n      }\n    }\n\n    return this;\n  };\n\n  _setTimestampsOnUpdate[symbols.builtInMiddleware] = true;\n\n  const opts = { query: true, model: false };\n  schema.pre('findOneAndReplace', opts, _setTimestampsOnUpdate);\n  schema.pre('findOneAndUpdate', opts, _setTimestampsOnUpdate);\n  schema.pre('replaceOne', opts, _setTimestampsOnUpdate);\n  schema.pre('update', opts, _setTimestampsOnUpdate);\n  schema.pre('updateOne', opts, _setTimestampsOnUpdate);\n  schema.pre('updateMany', opts, _setTimestampsOnUpdate);\n\n  function _setTimestampsOnUpdate(next) {\n    const now = currentTime != null ?\n      currentTime() :\n      this.model.base.now();\n    // Replacing with null update should still trigger timestamps\n    if (replaceOps.has(this.op) && this.getUpdate() == null) {\n      this.setUpdate({});\n    }\n    applyTimestampsToUpdate(\n      now,\n      createdAt,\n      updatedAt,\n      this.getUpdate(),\n      this._mongooseOptions,\n      replaceOps.has(this.op)\n    );\n    applyTimestampsToChildren(now, this.getUpdate(), this.model.schema);\n    next();\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvdGltZXN0YW1wcy9zZXR1cFRpbWVzdGFtcHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0NBQWtDLG1CQUFPLENBQUMsMEhBQXFDO0FBQy9FLGdDQUFnQyxtQkFBTyxDQUFDLHNIQUFtQztBQUMzRSxZQUFZLG1CQUFPLENBQUMsZ0VBQVE7QUFDNUIsOEJBQThCLG1CQUFPLENBQUMsa0hBQWlDO0FBQ3ZFLDhCQUE4QixtQkFBTyxDQUFDLDhHQUF5QjtBQUMvRCxnQkFBZ0IsbUJBQU8sQ0FBQyxpRkFBc0I7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx5QkFBeUI7O0FBRXpCO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL3RpbWVzdGFtcHMvc2V0dXBUaW1lc3RhbXBzLmpzP2E1NWUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBhcHBseVRpbWVzdGFtcHNUb0NoaWxkcmVuID0gcmVxdWlyZSgnLi4vdXBkYXRlL2FwcGx5VGltZXN0YW1wc1RvQ2hpbGRyZW4nKTtcbmNvbnN0IGFwcGx5VGltZXN0YW1wc1RvVXBkYXRlID0gcmVxdWlyZSgnLi4vdXBkYXRlL2FwcGx5VGltZXN0YW1wc1RvVXBkYXRlJyk7XG5jb25zdCBnZXQgPSByZXF1aXJlKCcuLi9nZXQnKTtcbmNvbnN0IGhhbmRsZVRpbWVzdGFtcE9wdGlvbiA9IHJlcXVpcmUoJy4uL3NjaGVtYS9oYW5kbGVUaW1lc3RhbXBPcHRpb24nKTtcbmNvbnN0IHNldERvY3VtZW50VGltZXN0YW1wcyA9IHJlcXVpcmUoJy4vc2V0RG9jdW1lbnRUaW1lc3RhbXBzJyk7XG5jb25zdCBzeW1ib2xzID0gcmVxdWlyZSgnLi4vLi4vc2NoZW1hL3N5bWJvbHMnKTtcblxuY29uc3QgcmVwbGFjZU9wcyA9IG5ldyBTZXQoW1xuICAncmVwbGFjZU9uZScsXG4gICdmaW5kT25lQW5kUmVwbGFjZSdcbl0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHVwVGltZXN0YW1wcyhzY2hlbWEsIHRpbWVzdGFtcHMpIHtcbiAgY29uc3QgY2hpbGRIYXNUaW1lc3RhbXAgPSBzY2hlbWEuY2hpbGRTY2hlbWFzLmZpbmQod2l0aFRpbWVzdGFtcCk7XG4gIGZ1bmN0aW9uIHdpdGhUaW1lc3RhbXAocykge1xuICAgIGNvbnN0IHRzID0gcy5zY2hlbWEub3B0aW9ucy50aW1lc3RhbXBzO1xuICAgIHJldHVybiAhIXRzO1xuICB9XG4gIGlmICghdGltZXN0YW1wcyAmJiAhY2hpbGRIYXNUaW1lc3RhbXApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgY3JlYXRlZEF0ID0gaGFuZGxlVGltZXN0YW1wT3B0aW9uKHRpbWVzdGFtcHMsICdjcmVhdGVkQXQnKTtcbiAgY29uc3QgdXBkYXRlZEF0ID0gaGFuZGxlVGltZXN0YW1wT3B0aW9uKHRpbWVzdGFtcHMsICd1cGRhdGVkQXQnKTtcbiAgY29uc3QgY3VycmVudFRpbWUgPSB0aW1lc3RhbXBzICE9IG51bGwgJiYgdGltZXN0YW1wcy5oYXNPd25Qcm9wZXJ0eSgnY3VycmVudFRpbWUnKSA/XG4gICAgdGltZXN0YW1wcy5jdXJyZW50VGltZSA6XG4gICAgbnVsbDtcbiAgY29uc3Qgc2NoZW1hQWRkaXRpb25zID0ge307XG5cbiAgc2NoZW1hLiR0aW1lc3RhbXBzID0geyBjcmVhdGVkQXQ6IGNyZWF0ZWRBdCwgdXBkYXRlZEF0OiB1cGRhdGVkQXQgfTtcblxuICBpZiAoY3JlYXRlZEF0ICYmICFzY2hlbWEucGF0aHNbY3JlYXRlZEF0XSkge1xuICAgIGNvbnN0IGJhc2VJbW11dGFibGVDcmVhdGVkQXQgPSBzY2hlbWEuYmFzZSAhPSBudWxsID8gc2NoZW1hLmJhc2UuZ2V0KCd0aW1lc3RhbXBzLmNyZWF0ZWRBdC5pbW11dGFibGUnKSA6IG51bGw7XG4gICAgY29uc3QgaW1tdXRhYmxlID0gYmFzZUltbXV0YWJsZUNyZWF0ZWRBdCAhPSBudWxsID8gYmFzZUltbXV0YWJsZUNyZWF0ZWRBdCA6IHRydWU7XG4gICAgc2NoZW1hQWRkaXRpb25zW2NyZWF0ZWRBdF0gPSB7IFtzY2hlbWEub3B0aW9ucy50eXBlS2V5IHx8ICd0eXBlJ106IERhdGUsIGltbXV0YWJsZSB9O1xuICB9XG5cbiAgaWYgKHVwZGF0ZWRBdCAmJiAhc2NoZW1hLnBhdGhzW3VwZGF0ZWRBdF0pIHtcbiAgICBzY2hlbWFBZGRpdGlvbnNbdXBkYXRlZEF0XSA9IERhdGU7XG4gIH1cblxuICBzY2hlbWEuYWRkKHNjaGVtYUFkZGl0aW9ucyk7XG5cbiAgc2NoZW1hLnByZSgnc2F2ZScsIGZ1bmN0aW9uIHRpbWVzdGFtcHNQcmVTYXZlKG5leHQpIHtcbiAgICBjb25zdCB0aW1lc3RhbXBPcHRpb24gPSBnZXQodGhpcywgJyRfXy5zYXZlT3B0aW9ucy50aW1lc3RhbXBzJyk7XG4gICAgaWYgKHRpbWVzdGFtcE9wdGlvbiA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgfVxuXG4gICAgc2V0RG9jdW1lbnRUaW1lc3RhbXBzKHRoaXMsIHRpbWVzdGFtcE9wdGlvbiwgY3VycmVudFRpbWUsIGNyZWF0ZWRBdCwgdXBkYXRlZEF0KTtcblxuICAgIG5leHQoKTtcbiAgfSk7XG5cbiAgc2NoZW1hLm1ldGhvZHMuaW5pdGlhbGl6ZVRpbWVzdGFtcHMgPSBmdW5jdGlvbigpIHtcbiAgICBjb25zdCB0cyA9IGN1cnJlbnRUaW1lICE9IG51bGwgP1xuICAgICAgY3VycmVudFRpbWUoKSA6IHRoaXMuY29uc3RydWN0b3IuYmFzZS5ub3coKTtcblxuXG4gICAgaWYgKGNyZWF0ZWRBdCAmJiAhdGhpcy5nZXQoY3JlYXRlZEF0KSkge1xuICAgICAgdGhpcy4kc2V0KGNyZWF0ZWRBdCwgdHMpO1xuICAgIH1cbiAgICBpZiAodXBkYXRlZEF0ICYmICF0aGlzLmdldCh1cGRhdGVkQXQpKSB7XG4gICAgICB0aGlzLiRzZXQodXBkYXRlZEF0LCB0cyk7XG4gICAgfVxuICAgIGlmICh0aGlzLiRpc1N1YmRvY3VtZW50KSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjb25zdCBzdWJkb2NzID0gdGhpcy4kZ2V0QWxsU3ViZG9jcygpO1xuICAgIGZvciAoY29uc3Qgc3ViZG9jIG9mIHN1YmRvY3MpIHtcbiAgICAgIGlmIChzdWJkb2MuaW5pdGlhbGl6ZVRpbWVzdGFtcHMpIHtcbiAgICAgICAgc3ViZG9jLmluaXRpYWxpemVUaW1lc3RhbXBzKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3NldFRpbWVzdGFtcHNPblVwZGF0ZVtzeW1ib2xzLmJ1aWx0SW5NaWRkbGV3YXJlXSA9IHRydWU7XG5cbiAgY29uc3Qgb3B0cyA9IHsgcXVlcnk6IHRydWUsIG1vZGVsOiBmYWxzZSB9O1xuICBzY2hlbWEucHJlKCdmaW5kT25lQW5kUmVwbGFjZScsIG9wdHMsIF9zZXRUaW1lc3RhbXBzT25VcGRhdGUpO1xuICBzY2hlbWEucHJlKCdmaW5kT25lQW5kVXBkYXRlJywgb3B0cywgX3NldFRpbWVzdGFtcHNPblVwZGF0ZSk7XG4gIHNjaGVtYS5wcmUoJ3JlcGxhY2VPbmUnLCBvcHRzLCBfc2V0VGltZXN0YW1wc09uVXBkYXRlKTtcbiAgc2NoZW1hLnByZSgndXBkYXRlJywgb3B0cywgX3NldFRpbWVzdGFtcHNPblVwZGF0ZSk7XG4gIHNjaGVtYS5wcmUoJ3VwZGF0ZU9uZScsIG9wdHMsIF9zZXRUaW1lc3RhbXBzT25VcGRhdGUpO1xuICBzY2hlbWEucHJlKCd1cGRhdGVNYW55Jywgb3B0cywgX3NldFRpbWVzdGFtcHNPblVwZGF0ZSk7XG5cbiAgZnVuY3Rpb24gX3NldFRpbWVzdGFtcHNPblVwZGF0ZShuZXh0KSB7XG4gICAgY29uc3Qgbm93ID0gY3VycmVudFRpbWUgIT0gbnVsbCA/XG4gICAgICBjdXJyZW50VGltZSgpIDpcbiAgICAgIHRoaXMubW9kZWwuYmFzZS5ub3coKTtcbiAgICAvLyBSZXBsYWNpbmcgd2l0aCBudWxsIHVwZGF0ZSBzaG91bGQgc3RpbGwgdHJpZ2dlciB0aW1lc3RhbXBzXG4gICAgaWYgKHJlcGxhY2VPcHMuaGFzKHRoaXMub3ApICYmIHRoaXMuZ2V0VXBkYXRlKCkgPT0gbnVsbCkge1xuICAgICAgdGhpcy5zZXRVcGRhdGUoe30pO1xuICAgIH1cbiAgICBhcHBseVRpbWVzdGFtcHNUb1VwZGF0ZShcbiAgICAgIG5vdyxcbiAgICAgIGNyZWF0ZWRBdCxcbiAgICAgIHVwZGF0ZWRBdCxcbiAgICAgIHRoaXMuZ2V0VXBkYXRlKCksXG4gICAgICB0aGlzLl9tb25nb29zZU9wdGlvbnMsXG4gICAgICByZXBsYWNlT3BzLmhhcyh0aGlzLm9wKVxuICAgICk7XG4gICAgYXBwbHlUaW1lc3RhbXBzVG9DaGlsZHJlbihub3csIHRoaXMuZ2V0VXBkYXRlKCksIHRoaXMubW9kZWwuc2NoZW1hKTtcbiAgICBuZXh0KCk7XG4gIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/timestamps/setupTimestamps.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/topology/allServersUnknown.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/topology/allServersUnknown.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst getConstructorName = __webpack_require__(/*! ../getConstructorName */ \"(ssr)/./node_modules/mongoose/lib/helpers/getConstructorName.js\");\n\nmodule.exports = function allServersUnknown(topologyDescription) {\n  if (getConstructorName(topologyDescription) !== 'TopologyDescription') {\n    return false;\n  }\n\n  const servers = Array.from(topologyDescription.servers.values());\n  return servers.length > 0 && servers.every(server => server.type === 'Unknown');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvdG9wb2xvZ3kvYWxsU2VydmVyc1Vua25vd24uanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsMkJBQTJCLG1CQUFPLENBQUMsOEZBQXVCOztBQUUxRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL3RvcG9sb2d5L2FsbFNlcnZlcnNVbmtub3duLmpzPzc5OGIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBnZXRDb25zdHJ1Y3Rvck5hbWUgPSByZXF1aXJlKCcuLi9nZXRDb25zdHJ1Y3Rvck5hbWUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBhbGxTZXJ2ZXJzVW5rbm93bih0b3BvbG9neURlc2NyaXB0aW9uKSB7XG4gIGlmIChnZXRDb25zdHJ1Y3Rvck5hbWUodG9wb2xvZ3lEZXNjcmlwdGlvbikgIT09ICdUb3BvbG9neURlc2NyaXB0aW9uJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHNlcnZlcnMgPSBBcnJheS5mcm9tKHRvcG9sb2d5RGVzY3JpcHRpb24uc2VydmVycy52YWx1ZXMoKSk7XG4gIHJldHVybiBzZXJ2ZXJzLmxlbmd0aCA+IDAgJiYgc2VydmVycy5ldmVyeShzZXJ2ZXIgPT4gc2VydmVyLnR5cGUgPT09ICdVbmtub3duJyk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/topology/allServersUnknown.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/topology/isAtlas.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/topology/isAtlas.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst getConstructorName = __webpack_require__(/*! ../getConstructorName */ \"(ssr)/./node_modules/mongoose/lib/helpers/getConstructorName.js\");\n\n/**\n * @typedef { import('mongodb').TopologyDescription } TopologyDescription\n */\n\n/**\n * Checks if topologyDescription contains servers connected to an atlas instance\n *\n * @param  {TopologyDescription} topologyDescription\n * @returns {boolean}\n */\nmodule.exports = function isAtlas(topologyDescription) {\n  if (getConstructorName(topologyDescription) !== 'TopologyDescription') {\n    return false;\n  }\n\n  if (topologyDescription.servers.size === 0) {\n    return false;\n  }\n\n  for (const server of topologyDescription.servers.values()) {\n    if (server.host.endsWith('.mongodb.net') === false || server.port !== 27017) {\n      return false;\n    }\n  }\n\n  return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvdG9wb2xvZ3kvaXNBdGxhcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiwyQkFBMkIsbUJBQU8sQ0FBQyw4RkFBdUI7O0FBRTFEO0FBQ0EsY0FBYyx3Q0FBd0M7QUFDdEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWSxxQkFBcUI7QUFDakMsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvdG9wb2xvZ3kvaXNBdGxhcy5qcz9iY2E3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZ2V0Q29uc3RydWN0b3JOYW1lID0gcmVxdWlyZSgnLi4vZ2V0Q29uc3RydWN0b3JOYW1lJyk7XG5cbi8qKlxuICogQHR5cGVkZWYgeyBpbXBvcnQoJ21vbmdvZGInKS5Ub3BvbG9neURlc2NyaXB0aW9uIH0gVG9wb2xvZ3lEZXNjcmlwdGlvblxuICovXG5cbi8qKlxuICogQ2hlY2tzIGlmIHRvcG9sb2d5RGVzY3JpcHRpb24gY29udGFpbnMgc2VydmVycyBjb25uZWN0ZWQgdG8gYW4gYXRsYXMgaW5zdGFuY2VcbiAqXG4gKiBAcGFyYW0gIHtUb3BvbG9neURlc2NyaXB0aW9ufSB0b3BvbG9neURlc2NyaXB0aW9uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0F0bGFzKHRvcG9sb2d5RGVzY3JpcHRpb24pIHtcbiAgaWYgKGdldENvbnN0cnVjdG9yTmFtZSh0b3BvbG9neURlc2NyaXB0aW9uKSAhPT0gJ1RvcG9sb2d5RGVzY3JpcHRpb24nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHRvcG9sb2d5RGVzY3JpcHRpb24uc2VydmVycy5zaXplID09PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yIChjb25zdCBzZXJ2ZXIgb2YgdG9wb2xvZ3lEZXNjcmlwdGlvbi5zZXJ2ZXJzLnZhbHVlcygpKSB7XG4gICAgaWYgKHNlcnZlci5ob3N0LmVuZHNXaXRoKCcubW9uZ29kYi5uZXQnKSA9PT0gZmFsc2UgfHwgc2VydmVyLnBvcnQgIT09IDI3MDE3KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/topology/isAtlas.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/topology/isSSLError.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/topology/isSSLError.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst getConstructorName = __webpack_require__(/*! ../getConstructorName */ \"(ssr)/./node_modules/mongoose/lib/helpers/getConstructorName.js\");\n\nconst nonSSLMessage = 'Client network socket disconnected before secure TLS ' +\n  'connection was established';\n\nmodule.exports = function isSSLError(topologyDescription) {\n  if (getConstructorName(topologyDescription) !== 'TopologyDescription') {\n    return false;\n  }\n\n  const descriptions = Array.from(topologyDescription.servers.values());\n  return descriptions.length > 0 &&\n    descriptions.every(descr => descr.error && descr.error.message.indexOf(nonSSLMessage) !== -1);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvdG9wb2xvZ3kvaXNTU0xFcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiwyQkFBMkIsbUJBQU8sQ0FBQyw4RkFBdUI7O0FBRTFEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL3RvcG9sb2d5L2lzU1NMRXJyb3IuanM/OTc5OSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGdldENvbnN0cnVjdG9yTmFtZSA9IHJlcXVpcmUoJy4uL2dldENvbnN0cnVjdG9yTmFtZScpO1xuXG5jb25zdCBub25TU0xNZXNzYWdlID0gJ0NsaWVudCBuZXR3b3JrIHNvY2tldCBkaXNjb25uZWN0ZWQgYmVmb3JlIHNlY3VyZSBUTFMgJyArXG4gICdjb25uZWN0aW9uIHdhcyBlc3RhYmxpc2hlZCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNTU0xFcnJvcih0b3BvbG9neURlc2NyaXB0aW9uKSB7XG4gIGlmIChnZXRDb25zdHJ1Y3Rvck5hbWUodG9wb2xvZ3lEZXNjcmlwdGlvbikgIT09ICdUb3BvbG9neURlc2NyaXB0aW9uJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IGRlc2NyaXB0aW9ucyA9IEFycmF5LmZyb20odG9wb2xvZ3lEZXNjcmlwdGlvbi5zZXJ2ZXJzLnZhbHVlcygpKTtcbiAgcmV0dXJuIGRlc2NyaXB0aW9ucy5sZW5ndGggPiAwICYmXG4gICAgZGVzY3JpcHRpb25zLmV2ZXJ5KGRlc2NyID0+IGRlc2NyLmVycm9yICYmIGRlc2NyLmVycm9yLm1lc3NhZ2UuaW5kZXhPZihub25TU0xNZXNzYWdlKSAhPT0gLTEpO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/topology/isSSLError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/update/applyTimestampsToChildren.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/update/applyTimestampsToChildren.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst cleanPositionalOperators = __webpack_require__(/*! ../schema/cleanPositionalOperators */ \"(ssr)/./node_modules/mongoose/lib/helpers/schema/cleanPositionalOperators.js\");\nconst handleTimestampOption = __webpack_require__(/*! ../schema/handleTimestampOption */ \"(ssr)/./node_modules/mongoose/lib/helpers/schema/handleTimestampOption.js\");\n\nmodule.exports = applyTimestampsToChildren;\n\n/*!\n * ignore\n */\n\nfunction applyTimestampsToChildren(now, update, schema) {\n  if (update == null) {\n    return;\n  }\n\n  const keys = Object.keys(update);\n  const hasDollarKey = keys.some(key => key[0] === '$');\n\n  if (hasDollarKey) {\n    if (update.$push) {\n      _applyTimestampToUpdateOperator(update.$push);\n    }\n    if (update.$addToSet) {\n      _applyTimestampToUpdateOperator(update.$addToSet);\n    }\n    if (update.$set != null) {\n      const keys = Object.keys(update.$set);\n      for (const key of keys) {\n        applyTimestampsToUpdateKey(schema, key, update.$set, now);\n      }\n    }\n    if (update.$setOnInsert != null) {\n      const keys = Object.keys(update.$setOnInsert);\n      for (const key of keys) {\n        applyTimestampsToUpdateKey(schema, key, update.$setOnInsert, now);\n      }\n    }\n  }\n\n  const updateKeys = Object.keys(update).filter(key => key[0] !== '$');\n  for (const key of updateKeys) {\n    applyTimestampsToUpdateKey(schema, key, update, now);\n  }\n\n  function _applyTimestampToUpdateOperator(op) {\n    for (const key of Object.keys(op)) {\n      const $path = schema.path(key.replace(/\\.\\$\\./i, '.').replace(/.\\$$/, ''));\n      if (op[key] &&\n          $path &&\n          $path.$isMongooseDocumentArray &&\n          $path.schema.options.timestamps) {\n        const timestamps = $path.schema.options.timestamps;\n        const createdAt = handleTimestampOption(timestamps, 'createdAt');\n        const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n        if (op[key].$each) {\n          op[key].$each.forEach(function(subdoc) {\n            if (updatedAt != null) {\n              subdoc[updatedAt] = now;\n            }\n            if (createdAt != null) {\n              subdoc[createdAt] = now;\n            }\n\n            applyTimestampsToChildren(now, subdoc, $path.schema);\n          });\n        } else {\n          if (updatedAt != null) {\n            op[key][updatedAt] = now;\n          }\n          if (createdAt != null) {\n            op[key][createdAt] = now;\n          }\n\n          applyTimestampsToChildren(now, op[key], $path.schema);\n        }\n      }\n    }\n  }\n}\n\nfunction applyTimestampsToDocumentArray(arr, schematype, now) {\n  const timestamps = schematype.schema.options.timestamps;\n\n  const len = arr.length;\n\n  if (!timestamps) {\n    for (let i = 0; i < len; ++i) {\n      applyTimestampsToChildren(now, arr[i], schematype.schema);\n    }\n    return;\n  }\n\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n  for (let i = 0; i < len; ++i) {\n    if (updatedAt != null) {\n      arr[i][updatedAt] = now;\n    }\n    if (createdAt != null) {\n      arr[i][createdAt] = now;\n    }\n\n    applyTimestampsToChildren(now, arr[i], schematype.schema);\n  }\n}\n\nfunction applyTimestampsToSingleNested(subdoc, schematype, now) {\n  const timestamps = schematype.schema.options.timestamps;\n  if (!timestamps) {\n    applyTimestampsToChildren(now, subdoc, schematype.schema);\n    return;\n  }\n\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n  if (updatedAt != null) {\n    subdoc[updatedAt] = now;\n  }\n  if (createdAt != null) {\n    subdoc[createdAt] = now;\n  }\n\n  applyTimestampsToChildren(now, subdoc, schematype.schema);\n}\n\nfunction applyTimestampsToUpdateKey(schema, key, update, now) {\n  // Replace positional operator `$` and array filters `$[]` and `$[.*]`\n  const keyToSearch = cleanPositionalOperators(key);\n  const path = schema.path(keyToSearch);\n  if (!path) {\n    return;\n  }\n\n  const parentSchemaTypes = [];\n  const pieces = keyToSearch.split('.');\n  for (let i = pieces.length - 1; i > 0; --i) {\n    const s = schema.path(pieces.slice(0, i).join('.'));\n    if (s != null &&\n      (s.$isMongooseDocumentArray || s.$isSingleNested)) {\n      parentSchemaTypes.push({ parentPath: key.split('.').slice(0, i).join('.'), parentSchemaType: s });\n    }\n  }\n\n  if (Array.isArray(update[key]) && path.$isMongooseDocumentArray) {\n    applyTimestampsToDocumentArray(update[key], path, now);\n  } else if (update[key] && path.$isSingleNested) {\n    applyTimestampsToSingleNested(update[key], path, now);\n  } else if (parentSchemaTypes.length > 0) {\n    for (const item of parentSchemaTypes) {\n      const parentPath = item.parentPath;\n      const parentSchemaType = item.parentSchemaType;\n      const timestamps = parentSchemaType.schema.options.timestamps;\n      const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n      if (!timestamps || updatedAt == null) {\n        continue;\n      }\n\n      if (parentSchemaType.$isSingleNested) {\n        // Single nested is easy\n        update[parentPath + '.' + updatedAt] = now;\n      } else if (parentSchemaType.$isMongooseDocumentArray) {\n        let childPath = key.substring(parentPath.length + 1);\n\n        if (/^\\d+$/.test(childPath)) {\n          update[parentPath + '.' + childPath][updatedAt] = now;\n          continue;\n        }\n\n        const firstDot = childPath.indexOf('.');\n        childPath = firstDot !== -1 ? childPath.substring(0, firstDot) : childPath;\n\n        update[parentPath + '.' + childPath + '.' + updatedAt] = now;\n      }\n    }\n  } else if (path.schema != null && path.schema != schema && update[key]) {\n    const timestamps = path.schema.options.timestamps;\n    const createdAt = handleTimestampOption(timestamps, 'createdAt');\n    const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n    if (!timestamps) {\n      return;\n    }\n\n    if (updatedAt != null) {\n      update[key][updatedAt] = now;\n    }\n    if (createdAt != null) {\n      update[key][createdAt] = now;\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/update/applyTimestampsToChildren.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/update/applyTimestampsToUpdate.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/update/applyTimestampsToUpdate.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * ignore\n */\n\nconst get = __webpack_require__(/*! ../get */ \"(ssr)/./node_modules/mongoose/lib/helpers/get.js\");\n\nmodule.exports = applyTimestampsToUpdate;\n\n/*!\n * ignore\n */\n\nfunction applyTimestampsToUpdate(now, createdAt, updatedAt, currentUpdate, options, isReplace) {\n  const updates = currentUpdate;\n  let _updates = updates;\n  const timestamps = get(options, 'timestamps', true);\n\n  // Support skipping timestamps at the query level, see gh-6980\n  if (!timestamps || updates == null) {\n    return currentUpdate;\n  }\n\n  const skipCreatedAt = timestamps != null && timestamps.createdAt === false;\n  const skipUpdatedAt = timestamps != null && timestamps.updatedAt === false;\n\n  if (isReplace) {\n    if (currentUpdate && currentUpdate.$set) {\n      currentUpdate = currentUpdate.$set;\n      updates.$set = {};\n      _updates = updates.$set;\n    }\n    if (!skipUpdatedAt && updatedAt && !currentUpdate[updatedAt]) {\n      _updates[updatedAt] = now;\n    }\n    if (!skipCreatedAt && createdAt && !currentUpdate[createdAt]) {\n      _updates[createdAt] = now;\n    }\n    return updates;\n  }\n  currentUpdate = currentUpdate || {};\n\n  if (Array.isArray(updates)) {\n    // Update with aggregation pipeline\n    if (updatedAt == null) {\n      return updates;\n    }\n    updates.push({ $set: { [updatedAt]: now } });\n    return updates;\n  }\n  updates.$set = updates.$set || {};\n  if (!skipUpdatedAt && updatedAt &&\n      (!currentUpdate.$currentDate || !currentUpdate.$currentDate[updatedAt])) {\n    let timestampSet = false;\n    if (updatedAt.indexOf('.') !== -1) {\n      const pieces = updatedAt.split('.');\n      for (let i = 1; i < pieces.length; ++i) {\n        const remnant = pieces.slice(-i).join('.');\n        const start = pieces.slice(0, -i).join('.');\n        if (currentUpdate[start] != null) {\n          currentUpdate[start][remnant] = now;\n          timestampSet = true;\n          break;\n        } else if (currentUpdate.$set && currentUpdate.$set[start]) {\n          currentUpdate.$set[start][remnant] = now;\n          timestampSet = true;\n          break;\n        }\n      }\n    }\n\n    if (!timestampSet) {\n      updates.$set[updatedAt] = now;\n    }\n\n    if (updates.hasOwnProperty(updatedAt)) {\n      delete updates[updatedAt];\n    }\n  }\n\n  if (!skipCreatedAt && createdAt) {\n    if (currentUpdate[createdAt]) {\n      delete currentUpdate[createdAt];\n    }\n    if (currentUpdate.$set && currentUpdate.$set[createdAt]) {\n      delete currentUpdate.$set[createdAt];\n    }\n    let timestampSet = false;\n    if (createdAt.indexOf('.') !== -1) {\n      const pieces = createdAt.split('.');\n      for (let i = 1; i < pieces.length; ++i) {\n        const remnant = pieces.slice(-i).join('.');\n        const start = pieces.slice(0, -i).join('.');\n        if (currentUpdate[start] != null) {\n          currentUpdate[start][remnant] = now;\n          timestampSet = true;\n          break;\n        } else if (currentUpdate.$set && currentUpdate.$set[start]) {\n          currentUpdate.$set[start][remnant] = now;\n          timestampSet = true;\n          break;\n        }\n      }\n    }\n\n    if (!timestampSet) {\n      updates.$setOnInsert = updates.$setOnInsert || {};\n      updates.$setOnInsert[createdAt] = now;\n    }\n  }\n\n  if (Object.keys(updates.$set).length === 0) {\n    delete updates.$set;\n  }\n  return updates;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvdXBkYXRlL2FwcGx5VGltZXN0YW1wc1RvVXBkYXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTs7QUFFQSxZQUFZLG1CQUFPLENBQUMsZ0VBQVE7O0FBRTVCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFFBQVEsb0JBQW9CO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsbUJBQW1CO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLG1CQUFtQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvdXBkYXRlL2FwcGx5VGltZXN0YW1wc1RvVXBkYXRlLmpzP2IwOTIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKiFcbiAqIGlnbm9yZVxuICovXG5cbmNvbnN0IGdldCA9IHJlcXVpcmUoJy4uL2dldCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFwcGx5VGltZXN0YW1wc1RvVXBkYXRlO1xuXG4vKiFcbiAqIGlnbm9yZVxuICovXG5cbmZ1bmN0aW9uIGFwcGx5VGltZXN0YW1wc1RvVXBkYXRlKG5vdywgY3JlYXRlZEF0LCB1cGRhdGVkQXQsIGN1cnJlbnRVcGRhdGUsIG9wdGlvbnMsIGlzUmVwbGFjZSkge1xuICBjb25zdCB1cGRhdGVzID0gY3VycmVudFVwZGF0ZTtcbiAgbGV0IF91cGRhdGVzID0gdXBkYXRlcztcbiAgY29uc3QgdGltZXN0YW1wcyA9IGdldChvcHRpb25zLCAndGltZXN0YW1wcycsIHRydWUpO1xuXG4gIC8vIFN1cHBvcnQgc2tpcHBpbmcgdGltZXN0YW1wcyBhdCB0aGUgcXVlcnkgbGV2ZWwsIHNlZSBnaC02OTgwXG4gIGlmICghdGltZXN0YW1wcyB8fCB1cGRhdGVzID09IG51bGwpIHtcbiAgICByZXR1cm4gY3VycmVudFVwZGF0ZTtcbiAgfVxuXG4gIGNvbnN0IHNraXBDcmVhdGVkQXQgPSB0aW1lc3RhbXBzICE9IG51bGwgJiYgdGltZXN0YW1wcy5jcmVhdGVkQXQgPT09IGZhbHNlO1xuICBjb25zdCBza2lwVXBkYXRlZEF0ID0gdGltZXN0YW1wcyAhPSBudWxsICYmIHRpbWVzdGFtcHMudXBkYXRlZEF0ID09PSBmYWxzZTtcblxuICBpZiAoaXNSZXBsYWNlKSB7XG4gICAgaWYgKGN1cnJlbnRVcGRhdGUgJiYgY3VycmVudFVwZGF0ZS4kc2V0KSB7XG4gICAgICBjdXJyZW50VXBkYXRlID0gY3VycmVudFVwZGF0ZS4kc2V0O1xuICAgICAgdXBkYXRlcy4kc2V0ID0ge307XG4gICAgICBfdXBkYXRlcyA9IHVwZGF0ZXMuJHNldDtcbiAgICB9XG4gICAgaWYgKCFza2lwVXBkYXRlZEF0ICYmIHVwZGF0ZWRBdCAmJiAhY3VycmVudFVwZGF0ZVt1cGRhdGVkQXRdKSB7XG4gICAgICBfdXBkYXRlc1t1cGRhdGVkQXRdID0gbm93O1xuICAgIH1cbiAgICBpZiAoIXNraXBDcmVhdGVkQXQgJiYgY3JlYXRlZEF0ICYmICFjdXJyZW50VXBkYXRlW2NyZWF0ZWRBdF0pIHtcbiAgICAgIF91cGRhdGVzW2NyZWF0ZWRBdF0gPSBub3c7XG4gICAgfVxuICAgIHJldHVybiB1cGRhdGVzO1xuICB9XG4gIGN1cnJlbnRVcGRhdGUgPSBjdXJyZW50VXBkYXRlIHx8IHt9O1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHVwZGF0ZXMpKSB7XG4gICAgLy8gVXBkYXRlIHdpdGggYWdncmVnYXRpb24gcGlwZWxpbmVcbiAgICBpZiAodXBkYXRlZEF0ID09IG51bGwpIHtcbiAgICAgIHJldHVybiB1cGRhdGVzO1xuICAgIH1cbiAgICB1cGRhdGVzLnB1c2goeyAkc2V0OiB7IFt1cGRhdGVkQXRdOiBub3cgfSB9KTtcbiAgICByZXR1cm4gdXBkYXRlcztcbiAgfVxuICB1cGRhdGVzLiRzZXQgPSB1cGRhdGVzLiRzZXQgfHwge307XG4gIGlmICghc2tpcFVwZGF0ZWRBdCAmJiB1cGRhdGVkQXQgJiZcbiAgICAgICghY3VycmVudFVwZGF0ZS4kY3VycmVudERhdGUgfHwgIWN1cnJlbnRVcGRhdGUuJGN1cnJlbnREYXRlW3VwZGF0ZWRBdF0pKSB7XG4gICAgbGV0IHRpbWVzdGFtcFNldCA9IGZhbHNlO1xuICAgIGlmICh1cGRhdGVkQXQuaW5kZXhPZignLicpICE9PSAtMSkge1xuICAgICAgY29uc3QgcGllY2VzID0gdXBkYXRlZEF0LnNwbGl0KCcuJyk7XG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHBpZWNlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCByZW1uYW50ID0gcGllY2VzLnNsaWNlKC1pKS5qb2luKCcuJyk7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gcGllY2VzLnNsaWNlKDAsIC1pKS5qb2luKCcuJyk7XG4gICAgICAgIGlmIChjdXJyZW50VXBkYXRlW3N0YXJ0XSAhPSBudWxsKSB7XG4gICAgICAgICAgY3VycmVudFVwZGF0ZVtzdGFydF1bcmVtbmFudF0gPSBub3c7XG4gICAgICAgICAgdGltZXN0YW1wU2V0ID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50VXBkYXRlLiRzZXQgJiYgY3VycmVudFVwZGF0ZS4kc2V0W3N0YXJ0XSkge1xuICAgICAgICAgIGN1cnJlbnRVcGRhdGUuJHNldFtzdGFydF1bcmVtbmFudF0gPSBub3c7XG4gICAgICAgICAgdGltZXN0YW1wU2V0ID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdGltZXN0YW1wU2V0KSB7XG4gICAgICB1cGRhdGVzLiRzZXRbdXBkYXRlZEF0XSA9IG5vdztcbiAgICB9XG5cbiAgICBpZiAodXBkYXRlcy5oYXNPd25Qcm9wZXJ0eSh1cGRhdGVkQXQpKSB7XG4gICAgICBkZWxldGUgdXBkYXRlc1t1cGRhdGVkQXRdO1xuICAgIH1cbiAgfVxuXG4gIGlmICghc2tpcENyZWF0ZWRBdCAmJiBjcmVhdGVkQXQpIHtcbiAgICBpZiAoY3VycmVudFVwZGF0ZVtjcmVhdGVkQXRdKSB7XG4gICAgICBkZWxldGUgY3VycmVudFVwZGF0ZVtjcmVhdGVkQXRdO1xuICAgIH1cbiAgICBpZiAoY3VycmVudFVwZGF0ZS4kc2V0ICYmIGN1cnJlbnRVcGRhdGUuJHNldFtjcmVhdGVkQXRdKSB7XG4gICAgICBkZWxldGUgY3VycmVudFVwZGF0ZS4kc2V0W2NyZWF0ZWRBdF07XG4gICAgfVxuICAgIGxldCB0aW1lc3RhbXBTZXQgPSBmYWxzZTtcbiAgICBpZiAoY3JlYXRlZEF0LmluZGV4T2YoJy4nKSAhPT0gLTEpIHtcbiAgICAgIGNvbnN0IHBpZWNlcyA9IGNyZWF0ZWRBdC5zcGxpdCgnLicpO1xuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBwaWVjZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgcmVtbmFudCA9IHBpZWNlcy5zbGljZSgtaSkuam9pbignLicpO1xuICAgICAgICBjb25zdCBzdGFydCA9IHBpZWNlcy5zbGljZSgwLCAtaSkuam9pbignLicpO1xuICAgICAgICBpZiAoY3VycmVudFVwZGF0ZVtzdGFydF0gIT0gbnVsbCkge1xuICAgICAgICAgIGN1cnJlbnRVcGRhdGVbc3RhcnRdW3JlbW5hbnRdID0gbm93O1xuICAgICAgICAgIHRpbWVzdGFtcFNldCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFVwZGF0ZS4kc2V0ICYmIGN1cnJlbnRVcGRhdGUuJHNldFtzdGFydF0pIHtcbiAgICAgICAgICBjdXJyZW50VXBkYXRlLiRzZXRbc3RhcnRdW3JlbW5hbnRdID0gbm93O1xuICAgICAgICAgIHRpbWVzdGFtcFNldCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRpbWVzdGFtcFNldCkge1xuICAgICAgdXBkYXRlcy4kc2V0T25JbnNlcnQgPSB1cGRhdGVzLiRzZXRPbkluc2VydCB8fCB7fTtcbiAgICAgIHVwZGF0ZXMuJHNldE9uSW5zZXJ0W2NyZWF0ZWRBdF0gPSBub3c7XG4gICAgfVxuICB9XG5cbiAgaWYgKE9iamVjdC5rZXlzKHVwZGF0ZXMuJHNldCkubGVuZ3RoID09PSAwKSB7XG4gICAgZGVsZXRlIHVwZGF0ZXMuJHNldDtcbiAgfVxuICByZXR1cm4gdXBkYXRlcztcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/update/applyTimestampsToUpdate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/update/castArrayFilters.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/update/castArrayFilters.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst castFilterPath = __webpack_require__(/*! ../query/castFilterPath */ \"(ssr)/./node_modules/mongoose/lib/helpers/query/castFilterPath.js\");\nconst cleanPositionalOperators = __webpack_require__(/*! ../schema/cleanPositionalOperators */ \"(ssr)/./node_modules/mongoose/lib/helpers/schema/cleanPositionalOperators.js\");\nconst getPath = __webpack_require__(/*! ../schema/getPath */ \"(ssr)/./node_modules/mongoose/lib/helpers/schema/getPath.js\");\nconst updatedPathsByArrayFilter = __webpack_require__(/*! ./updatedPathsByArrayFilter */ \"(ssr)/./node_modules/mongoose/lib/helpers/update/updatedPathsByArrayFilter.js\");\n\nmodule.exports = function castArrayFilters(query) {\n  const arrayFilters = query.options.arrayFilters;\n  const update = query.getUpdate();\n  const schema = query.schema;\n  const updatedPathsByFilter = updatedPathsByArrayFilter(update);\n\n  let strictQuery = schema.options.strict;\n  if (query._mongooseOptions.strict != null) {\n    strictQuery = query._mongooseOptions.strict;\n  }\n  if (query.model && query.model.base.options.strictQuery != null) {\n    strictQuery = query.model.base.options.strictQuery;\n  }\n  if (schema._userProvidedOptions.strictQuery != null) {\n    strictQuery = schema._userProvidedOptions.strictQuery;\n  }\n  if (query._mongooseOptions.strictQuery != null) {\n    strictQuery = query._mongooseOptions.strictQuery;\n  }\n\n  _castArrayFilters(arrayFilters, schema, strictQuery, updatedPathsByFilter, query);\n};\n\nfunction _castArrayFilters(arrayFilters, schema, strictQuery, updatedPathsByFilter, query) {\n  if (!Array.isArray(arrayFilters)) {\n    return;\n  }\n\n  for (const filter of arrayFilters) {\n    if (filter == null) {\n      throw new Error(`Got null array filter in ${arrayFilters}`);\n    }\n    const keys = Object.keys(filter).filter(key => filter[key] != null);\n    if (keys.length === 0) {\n      continue;\n    }\n\n    const firstKey = keys[0];\n    if (firstKey === '$and' || firstKey === '$or') {\n      for (const key of keys) {\n        _castArrayFilters(filter[key], schema, strictQuery, updatedPathsByFilter, query);\n      }\n      continue;\n    }\n    const dot = firstKey.indexOf('.');\n    const filterWildcardPath = dot === -1 ? firstKey : firstKey.substring(0, dot);\n    if (updatedPathsByFilter[filterWildcardPath] == null) {\n      continue;\n    }\n    const baseFilterPath = cleanPositionalOperators(\n      updatedPathsByFilter[filterWildcardPath]\n    );\n\n    const baseSchematype = getPath(schema, baseFilterPath);\n    let filterBaseSchema = baseSchematype != null ? baseSchematype.schema : null;\n    if (filterBaseSchema != null &&\n        filterBaseSchema.discriminators != null &&\n        filter[filterWildcardPath + '.' + filterBaseSchema.options.discriminatorKey]) {\n      filterBaseSchema = filterBaseSchema.discriminators[filter[filterWildcardPath + '.' + filterBaseSchema.options.discriminatorKey]] || filterBaseSchema;\n    }\n\n    for (const key of keys) {\n      if (updatedPathsByFilter[key] === null) {\n        continue;\n      }\n      if (Object.keys(updatedPathsByFilter).length === 0) {\n        continue;\n      }\n      const dot = key.indexOf('.');\n\n      let filterPathRelativeToBase = dot === -1 ? null : key.substring(dot);\n      let schematype;\n      if (filterPathRelativeToBase == null || filterBaseSchema == null) {\n        schematype = baseSchematype;\n      } else {\n        // If there are multiple array filters in the path being updated, make sure\n        // to replace them so we can get the schema path.\n        filterPathRelativeToBase = cleanPositionalOperators(filterPathRelativeToBase);\n        schematype = getPath(filterBaseSchema, filterPathRelativeToBase);\n      }\n\n      if (schematype == null) {\n        if (!strictQuery) {\n          return;\n        }\n        const filterPath = filterPathRelativeToBase == null ?\n          baseFilterPath + '.0' :\n          baseFilterPath + '.0' + filterPathRelativeToBase;\n        // For now, treat `strictQuery = true` and `strictQuery = 'throw'` as\n        // equivalent for casting array filters. `strictQuery = true` doesn't\n        // quite work in this context because we never want to silently strip out\n        // array filters, even if the path isn't in the schema.\n        throw new Error(`Could not find path \"${filterPath}\" in schema`);\n      }\n      if (typeof filter[key] === 'object') {\n        filter[key] = castFilterPath(query, schematype, filter[key]);\n      } else {\n        filter[key] = schematype.castForQuery(null, filter[key]);\n      }\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvdXBkYXRlL2Nhc3RBcnJheUZpbHRlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsdUJBQXVCLG1CQUFPLENBQUMsa0dBQXlCO0FBQ3hELGlDQUFpQyxtQkFBTyxDQUFDLHdIQUFvQztBQUM3RSxnQkFBZ0IsbUJBQU8sQ0FBQyxzRkFBbUI7QUFDM0Msa0NBQWtDLG1CQUFPLENBQUMsa0hBQTZCOztBQUV2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtEQUFrRCxhQUFhO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELFdBQVc7QUFDM0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL3VwZGF0ZS9jYXN0QXJyYXlGaWx0ZXJzLmpzP2I3ZDYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjYXN0RmlsdGVyUGF0aCA9IHJlcXVpcmUoJy4uL3F1ZXJ5L2Nhc3RGaWx0ZXJQYXRoJyk7XG5jb25zdCBjbGVhblBvc2l0aW9uYWxPcGVyYXRvcnMgPSByZXF1aXJlKCcuLi9zY2hlbWEvY2xlYW5Qb3NpdGlvbmFsT3BlcmF0b3JzJyk7XG5jb25zdCBnZXRQYXRoID0gcmVxdWlyZSgnLi4vc2NoZW1hL2dldFBhdGgnKTtcbmNvbnN0IHVwZGF0ZWRQYXRoc0J5QXJyYXlGaWx0ZXIgPSByZXF1aXJlKCcuL3VwZGF0ZWRQYXRoc0J5QXJyYXlGaWx0ZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjYXN0QXJyYXlGaWx0ZXJzKHF1ZXJ5KSB7XG4gIGNvbnN0IGFycmF5RmlsdGVycyA9IHF1ZXJ5Lm9wdGlvbnMuYXJyYXlGaWx0ZXJzO1xuICBjb25zdCB1cGRhdGUgPSBxdWVyeS5nZXRVcGRhdGUoKTtcbiAgY29uc3Qgc2NoZW1hID0gcXVlcnkuc2NoZW1hO1xuICBjb25zdCB1cGRhdGVkUGF0aHNCeUZpbHRlciA9IHVwZGF0ZWRQYXRoc0J5QXJyYXlGaWx0ZXIodXBkYXRlKTtcblxuICBsZXQgc3RyaWN0UXVlcnkgPSBzY2hlbWEub3B0aW9ucy5zdHJpY3Q7XG4gIGlmIChxdWVyeS5fbW9uZ29vc2VPcHRpb25zLnN0cmljdCAhPSBudWxsKSB7XG4gICAgc3RyaWN0UXVlcnkgPSBxdWVyeS5fbW9uZ29vc2VPcHRpb25zLnN0cmljdDtcbiAgfVxuICBpZiAocXVlcnkubW9kZWwgJiYgcXVlcnkubW9kZWwuYmFzZS5vcHRpb25zLnN0cmljdFF1ZXJ5ICE9IG51bGwpIHtcbiAgICBzdHJpY3RRdWVyeSA9IHF1ZXJ5Lm1vZGVsLmJhc2Uub3B0aW9ucy5zdHJpY3RRdWVyeTtcbiAgfVxuICBpZiAoc2NoZW1hLl91c2VyUHJvdmlkZWRPcHRpb25zLnN0cmljdFF1ZXJ5ICE9IG51bGwpIHtcbiAgICBzdHJpY3RRdWVyeSA9IHNjaGVtYS5fdXNlclByb3ZpZGVkT3B0aW9ucy5zdHJpY3RRdWVyeTtcbiAgfVxuICBpZiAocXVlcnkuX21vbmdvb3NlT3B0aW9ucy5zdHJpY3RRdWVyeSAhPSBudWxsKSB7XG4gICAgc3RyaWN0UXVlcnkgPSBxdWVyeS5fbW9uZ29vc2VPcHRpb25zLnN0cmljdFF1ZXJ5O1xuICB9XG5cbiAgX2Nhc3RBcnJheUZpbHRlcnMoYXJyYXlGaWx0ZXJzLCBzY2hlbWEsIHN0cmljdFF1ZXJ5LCB1cGRhdGVkUGF0aHNCeUZpbHRlciwgcXVlcnkpO1xufTtcblxuZnVuY3Rpb24gX2Nhc3RBcnJheUZpbHRlcnMoYXJyYXlGaWx0ZXJzLCBzY2hlbWEsIHN0cmljdFF1ZXJ5LCB1cGRhdGVkUGF0aHNCeUZpbHRlciwgcXVlcnkpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5RmlsdGVycykpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBmb3IgKGNvbnN0IGZpbHRlciBvZiBhcnJheUZpbHRlcnMpIHtcbiAgICBpZiAoZmlsdGVyID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgR290IG51bGwgYXJyYXkgZmlsdGVyIGluICR7YXJyYXlGaWx0ZXJzfWApO1xuICAgIH1cbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZmlsdGVyKS5maWx0ZXIoa2V5ID0+IGZpbHRlcltrZXldICE9IG51bGwpO1xuICAgIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgY29uc3QgZmlyc3RLZXkgPSBrZXlzWzBdO1xuICAgIGlmIChmaXJzdEtleSA9PT0gJyRhbmQnIHx8IGZpcnN0S2V5ID09PSAnJG9yJykge1xuICAgICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgICAgICBfY2FzdEFycmF5RmlsdGVycyhmaWx0ZXJba2V5XSwgc2NoZW1hLCBzdHJpY3RRdWVyeSwgdXBkYXRlZFBhdGhzQnlGaWx0ZXIsIHF1ZXJ5KTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCBkb3QgPSBmaXJzdEtleS5pbmRleE9mKCcuJyk7XG4gICAgY29uc3QgZmlsdGVyV2lsZGNhcmRQYXRoID0gZG90ID09PSAtMSA/IGZpcnN0S2V5IDogZmlyc3RLZXkuc3Vic3RyaW5nKDAsIGRvdCk7XG4gICAgaWYgKHVwZGF0ZWRQYXRoc0J5RmlsdGVyW2ZpbHRlcldpbGRjYXJkUGF0aF0gPT0gbnVsbCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IGJhc2VGaWx0ZXJQYXRoID0gY2xlYW5Qb3NpdGlvbmFsT3BlcmF0b3JzKFxuICAgICAgdXBkYXRlZFBhdGhzQnlGaWx0ZXJbZmlsdGVyV2lsZGNhcmRQYXRoXVxuICAgICk7XG5cbiAgICBjb25zdCBiYXNlU2NoZW1hdHlwZSA9IGdldFBhdGgoc2NoZW1hLCBiYXNlRmlsdGVyUGF0aCk7XG4gICAgbGV0IGZpbHRlckJhc2VTY2hlbWEgPSBiYXNlU2NoZW1hdHlwZSAhPSBudWxsID8gYmFzZVNjaGVtYXR5cGUuc2NoZW1hIDogbnVsbDtcbiAgICBpZiAoZmlsdGVyQmFzZVNjaGVtYSAhPSBudWxsICYmXG4gICAgICAgIGZpbHRlckJhc2VTY2hlbWEuZGlzY3JpbWluYXRvcnMgIT0gbnVsbCAmJlxuICAgICAgICBmaWx0ZXJbZmlsdGVyV2lsZGNhcmRQYXRoICsgJy4nICsgZmlsdGVyQmFzZVNjaGVtYS5vcHRpb25zLmRpc2NyaW1pbmF0b3JLZXldKSB7XG4gICAgICBmaWx0ZXJCYXNlU2NoZW1hID0gZmlsdGVyQmFzZVNjaGVtYS5kaXNjcmltaW5hdG9yc1tmaWx0ZXJbZmlsdGVyV2lsZGNhcmRQYXRoICsgJy4nICsgZmlsdGVyQmFzZVNjaGVtYS5vcHRpb25zLmRpc2NyaW1pbmF0b3JLZXldXSB8fCBmaWx0ZXJCYXNlU2NoZW1hO1xuICAgIH1cblxuICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICAgIGlmICh1cGRhdGVkUGF0aHNCeUZpbHRlcltrZXldID09PSBudWxsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKE9iamVjdC5rZXlzKHVwZGF0ZWRQYXRoc0J5RmlsdGVyKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCBkb3QgPSBrZXkuaW5kZXhPZignLicpO1xuXG4gICAgICBsZXQgZmlsdGVyUGF0aFJlbGF0aXZlVG9CYXNlID0gZG90ID09PSAtMSA/IG51bGwgOiBrZXkuc3Vic3RyaW5nKGRvdCk7XG4gICAgICBsZXQgc2NoZW1hdHlwZTtcbiAgICAgIGlmIChmaWx0ZXJQYXRoUmVsYXRpdmVUb0Jhc2UgPT0gbnVsbCB8fCBmaWx0ZXJCYXNlU2NoZW1hID09IG51bGwpIHtcbiAgICAgICAgc2NoZW1hdHlwZSA9IGJhc2VTY2hlbWF0eXBlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG11bHRpcGxlIGFycmF5IGZpbHRlcnMgaW4gdGhlIHBhdGggYmVpbmcgdXBkYXRlZCwgbWFrZSBzdXJlXG4gICAgICAgIC8vIHRvIHJlcGxhY2UgdGhlbSBzbyB3ZSBjYW4gZ2V0IHRoZSBzY2hlbWEgcGF0aC5cbiAgICAgICAgZmlsdGVyUGF0aFJlbGF0aXZlVG9CYXNlID0gY2xlYW5Qb3NpdGlvbmFsT3BlcmF0b3JzKGZpbHRlclBhdGhSZWxhdGl2ZVRvQmFzZSk7XG4gICAgICAgIHNjaGVtYXR5cGUgPSBnZXRQYXRoKGZpbHRlckJhc2VTY2hlbWEsIGZpbHRlclBhdGhSZWxhdGl2ZVRvQmFzZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzY2hlbWF0eXBlID09IG51bGwpIHtcbiAgICAgICAgaWYgKCFzdHJpY3RRdWVyeSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmaWx0ZXJQYXRoID0gZmlsdGVyUGF0aFJlbGF0aXZlVG9CYXNlID09IG51bGwgP1xuICAgICAgICAgIGJhc2VGaWx0ZXJQYXRoICsgJy4wJyA6XG4gICAgICAgICAgYmFzZUZpbHRlclBhdGggKyAnLjAnICsgZmlsdGVyUGF0aFJlbGF0aXZlVG9CYXNlO1xuICAgICAgICAvLyBGb3Igbm93LCB0cmVhdCBgc3RyaWN0UXVlcnkgPSB0cnVlYCBhbmQgYHN0cmljdFF1ZXJ5ID0gJ3Rocm93J2AgYXNcbiAgICAgICAgLy8gZXF1aXZhbGVudCBmb3IgY2FzdGluZyBhcnJheSBmaWx0ZXJzLiBgc3RyaWN0UXVlcnkgPSB0cnVlYCBkb2Vzbid0XG4gICAgICAgIC8vIHF1aXRlIHdvcmsgaW4gdGhpcyBjb250ZXh0IGJlY2F1c2Ugd2UgbmV2ZXIgd2FudCB0byBzaWxlbnRseSBzdHJpcCBvdXRcbiAgICAgICAgLy8gYXJyYXkgZmlsdGVycywgZXZlbiBpZiB0aGUgcGF0aCBpc24ndCBpbiB0aGUgc2NoZW1hLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBmaW5kIHBhdGggXCIke2ZpbHRlclBhdGh9XCIgaW4gc2NoZW1hYCk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGZpbHRlcltrZXldID09PSAnb2JqZWN0Jykge1xuICAgICAgICBmaWx0ZXJba2V5XSA9IGNhc3RGaWx0ZXJQYXRoKHF1ZXJ5LCBzY2hlbWF0eXBlLCBmaWx0ZXJba2V5XSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaWx0ZXJba2V5XSA9IHNjaGVtYXR5cGUuY2FzdEZvclF1ZXJ5KG51bGwsIGZpbHRlcltrZXldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/update/castArrayFilters.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/update/decorateUpdateWithVersionKey.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/update/decorateUpdateWithVersionKey.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst modifiedPaths = __webpack_require__(/*! ./modifiedPaths */ \"(ssr)/./node_modules/mongoose/lib/helpers/update/modifiedPaths.js\");\n\n/**\n * Decorate the update with a version key, if necessary\n * @api private\n */\n\nmodule.exports = function decorateUpdateWithVersionKey(update, options, versionKey) {\n  if (!versionKey || !(options && options.upsert || false)) {\n    return;\n  }\n\n  const updatedPaths = modifiedPaths(update);\n  if (!updatedPaths[versionKey]) {\n    if (options.overwrite) {\n      update[versionKey] = 0;\n    } else {\n      if (!update.$setOnInsert) {\n        update.$setOnInsert = {};\n      }\n      update.$setOnInsert[versionKey] = 0;\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvdXBkYXRlL2RlY29yYXRlVXBkYXRlV2l0aFZlcnNpb25LZXkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsc0JBQXNCLG1CQUFPLENBQUMsMEZBQWlCOztBQUUvQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvdXBkYXRlL2RlY29yYXRlVXBkYXRlV2l0aFZlcnNpb25LZXkuanM/YTcyMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IG1vZGlmaWVkUGF0aHMgPSByZXF1aXJlKCcuL21vZGlmaWVkUGF0aHMnKTtcblxuLyoqXG4gKiBEZWNvcmF0ZSB0aGUgdXBkYXRlIHdpdGggYSB2ZXJzaW9uIGtleSwgaWYgbmVjZXNzYXJ5XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlY29yYXRlVXBkYXRlV2l0aFZlcnNpb25LZXkodXBkYXRlLCBvcHRpb25zLCB2ZXJzaW9uS2V5KSB7XG4gIGlmICghdmVyc2lvbktleSB8fCAhKG9wdGlvbnMgJiYgb3B0aW9ucy51cHNlcnQgfHwgZmFsc2UpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgdXBkYXRlZFBhdGhzID0gbW9kaWZpZWRQYXRocyh1cGRhdGUpO1xuICBpZiAoIXVwZGF0ZWRQYXRoc1t2ZXJzaW9uS2V5XSkge1xuICAgIGlmIChvcHRpb25zLm92ZXJ3cml0ZSkge1xuICAgICAgdXBkYXRlW3ZlcnNpb25LZXldID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCF1cGRhdGUuJHNldE9uSW5zZXJ0KSB7XG4gICAgICAgIHVwZGF0ZS4kc2V0T25JbnNlcnQgPSB7fTtcbiAgICAgIH1cbiAgICAgIHVwZGF0ZS4kc2V0T25JbnNlcnRbdmVyc2lvbktleV0gPSAwO1xuICAgIH1cbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/update/decorateUpdateWithVersionKey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/update/modifiedPaths.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/update/modifiedPaths.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst _modifiedPaths = (__webpack_require__(/*! ../common */ \"(ssr)/./node_modules/mongoose/lib/helpers/common.js\").modifiedPaths);\n\n/**\n * Given an update document with potential update operators (`$set`, etc.)\n * returns an object whose keys are the directly modified paths.\n *\n * If there are any top-level keys that don't start with `$`, we assume those\n * will get wrapped in a `$set`. The Mongoose Query is responsible for wrapping\n * top-level keys in `$set`.\n *\n * @param {Object} update\n * @return {Object} modified\n */\n\nmodule.exports = function modifiedPaths(update) {\n  const keys = Object.keys(update);\n  const res = {};\n\n  const withoutDollarKeys = {};\n  for (const key of keys) {\n    if (key.startsWith('$')) {\n      _modifiedPaths(update[key], '', res);\n      continue;\n    }\n    withoutDollarKeys[key] = update[key];\n  }\n\n  _modifiedPaths(withoutDollarKeys, '', res);\n\n  return res;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvdXBkYXRlL21vZGlmaWVkUGF0aHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsdUJBQXVCLDJHQUFrQzs7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZLFFBQVE7QUFDcEI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvdXBkYXRlL21vZGlmaWVkUGF0aHMuanM/Y2NiZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IF9tb2RpZmllZFBhdGhzID0gcmVxdWlyZSgnLi4vY29tbW9uJykubW9kaWZpZWRQYXRocztcblxuLyoqXG4gKiBHaXZlbiBhbiB1cGRhdGUgZG9jdW1lbnQgd2l0aCBwb3RlbnRpYWwgdXBkYXRlIG9wZXJhdG9ycyAoYCRzZXRgLCBldGMuKVxuICogcmV0dXJucyBhbiBvYmplY3Qgd2hvc2Uga2V5cyBhcmUgdGhlIGRpcmVjdGx5IG1vZGlmaWVkIHBhdGhzLlxuICpcbiAqIElmIHRoZXJlIGFyZSBhbnkgdG9wLWxldmVsIGtleXMgdGhhdCBkb24ndCBzdGFydCB3aXRoIGAkYCwgd2UgYXNzdW1lIHRob3NlXG4gKiB3aWxsIGdldCB3cmFwcGVkIGluIGEgYCRzZXRgLiBUaGUgTW9uZ29vc2UgUXVlcnkgaXMgcmVzcG9uc2libGUgZm9yIHdyYXBwaW5nXG4gKiB0b3AtbGV2ZWwga2V5cyBpbiBgJHNldGAuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHVwZGF0ZVxuICogQHJldHVybiB7T2JqZWN0fSBtb2RpZmllZFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbW9kaWZpZWRQYXRocyh1cGRhdGUpIHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHVwZGF0ZSk7XG4gIGNvbnN0IHJlcyA9IHt9O1xuXG4gIGNvbnN0IHdpdGhvdXREb2xsYXJLZXlzID0ge307XG4gIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoJyQnKSkge1xuICAgICAgX21vZGlmaWVkUGF0aHModXBkYXRlW2tleV0sICcnLCByZXMpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHdpdGhvdXREb2xsYXJLZXlzW2tleV0gPSB1cGRhdGVba2V5XTtcbiAgfVxuXG4gIF9tb2RpZmllZFBhdGhzKHdpdGhvdXREb2xsYXJLZXlzLCAnJywgcmVzKTtcblxuICByZXR1cm4gcmVzO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/update/modifiedPaths.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/update/moveImmutableProperties.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/update/moveImmutableProperties.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst get = __webpack_require__(/*! ../get */ \"(ssr)/./node_modules/mongoose/lib/helpers/get.js\");\n\n/**\n * Given an update, move all $set on immutable properties to $setOnInsert.\n * This should only be called for upserts, because $setOnInsert bypasses the\n * strictness check for immutable properties.\n */\n\nmodule.exports = function moveImmutableProperties(schema, update, ctx) {\n  if (update == null) {\n    return;\n  }\n\n  const keys = Object.keys(update);\n  for (const key of keys) {\n    const isDollarKey = key.startsWith('$');\n\n    if (key === '$set') {\n      const updatedPaths = Object.keys(update[key]);\n      for (const path of updatedPaths) {\n        _walkUpdatePath(schema, update[key], path, update, ctx);\n      }\n    } else if (!isDollarKey) {\n      _walkUpdatePath(schema, update, key, update, ctx);\n    }\n\n  }\n};\n\nfunction _walkUpdatePath(schema, op, path, update, ctx) {\n  const schematype = schema.path(path);\n  if (schematype == null) {\n    return;\n  }\n\n  let immutable = get(schematype, 'options.immutable', null);\n  if (immutable == null) {\n    return;\n  }\n  if (typeof immutable === 'function') {\n    immutable = immutable.call(ctx, ctx);\n  }\n\n  if (!immutable) {\n    return;\n  }\n\n  update.$setOnInsert = update.$setOnInsert || {};\n  update.$setOnInsert[path] = op[path];\n  delete op[path];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvdXBkYXRlL21vdmVJbW11dGFibGVQcm9wZXJ0aWVzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQyxnRUFBUTs7QUFFNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL3VwZGF0ZS9tb3ZlSW1tdXRhYmxlUHJvcGVydGllcy5qcz8yMjI5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZ2V0ID0gcmVxdWlyZSgnLi4vZ2V0Jyk7XG5cbi8qKlxuICogR2l2ZW4gYW4gdXBkYXRlLCBtb3ZlIGFsbCAkc2V0IG9uIGltbXV0YWJsZSBwcm9wZXJ0aWVzIHRvICRzZXRPbkluc2VydC5cbiAqIFRoaXMgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGZvciB1cHNlcnRzLCBiZWNhdXNlICRzZXRPbkluc2VydCBieXBhc3NlcyB0aGVcbiAqIHN0cmljdG5lc3MgY2hlY2sgZm9yIGltbXV0YWJsZSBwcm9wZXJ0aWVzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbW92ZUltbXV0YWJsZVByb3BlcnRpZXMoc2NoZW1hLCB1cGRhdGUsIGN0eCkge1xuICBpZiAodXBkYXRlID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModXBkYXRlKTtcbiAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgIGNvbnN0IGlzRG9sbGFyS2V5ID0ga2V5LnN0YXJ0c1dpdGgoJyQnKTtcblxuICAgIGlmIChrZXkgPT09ICckc2V0Jykge1xuICAgICAgY29uc3QgdXBkYXRlZFBhdGhzID0gT2JqZWN0LmtleXModXBkYXRlW2tleV0pO1xuICAgICAgZm9yIChjb25zdCBwYXRoIG9mIHVwZGF0ZWRQYXRocykge1xuICAgICAgICBfd2Fsa1VwZGF0ZVBhdGgoc2NoZW1hLCB1cGRhdGVba2V5XSwgcGF0aCwgdXBkYXRlLCBjdHgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWlzRG9sbGFyS2V5KSB7XG4gICAgICBfd2Fsa1VwZGF0ZVBhdGgoc2NoZW1hLCB1cGRhdGUsIGtleSwgdXBkYXRlLCBjdHgpO1xuICAgIH1cblxuICB9XG59O1xuXG5mdW5jdGlvbiBfd2Fsa1VwZGF0ZVBhdGgoc2NoZW1hLCBvcCwgcGF0aCwgdXBkYXRlLCBjdHgpIHtcbiAgY29uc3Qgc2NoZW1hdHlwZSA9IHNjaGVtYS5wYXRoKHBhdGgpO1xuICBpZiAoc2NoZW1hdHlwZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGltbXV0YWJsZSA9IGdldChzY2hlbWF0eXBlLCAnb3B0aW9ucy5pbW11dGFibGUnLCBudWxsKTtcbiAgaWYgKGltbXV0YWJsZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0eXBlb2YgaW1tdXRhYmxlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaW1tdXRhYmxlID0gaW1tdXRhYmxlLmNhbGwoY3R4LCBjdHgpO1xuICB9XG5cbiAgaWYgKCFpbW11dGFibGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB1cGRhdGUuJHNldE9uSW5zZXJ0ID0gdXBkYXRlLiRzZXRPbkluc2VydCB8fCB7fTtcbiAgdXBkYXRlLiRzZXRPbkluc2VydFtwYXRoXSA9IG9wW3BhdGhdO1xuICBkZWxldGUgb3BbcGF0aF07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/update/moveImmutableProperties.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/update/removeUnusedArrayFilters.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/update/removeUnusedArrayFilters.js ***!
  \******************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * MongoDB throws an error if there's unused array filters. That is, if `options.arrayFilters` defines\n * a filter, but none of the `update` keys use it. This should be enough to filter out all unused array\n * filters.\n */\n\nmodule.exports = function removeUnusedArrayFilters(update, arrayFilters) {\n  const updateKeys = Object.keys(update).\n    map(key => Object.keys(update[key])).\n    reduce((cur, arr) => cur.concat(arr), []);\n  return arrayFilters.filter(obj => {\n    return _checkSingleFilterKey(obj, updateKeys);\n  });\n};\n\nfunction _checkSingleFilterKey(arrayFilter, updateKeys) {\n  const firstKey = Object.keys(arrayFilter)[0];\n\n  if (firstKey === '$and' || firstKey === '$or') {\n    if (!Array.isArray(arrayFilter[firstKey])) {\n      return false;\n    }\n    return arrayFilter[firstKey].find(filter => _checkSingleFilterKey(filter, updateKeys)) != null;\n  }\n\n  const firstDot = firstKey.indexOf('.');\n  const arrayFilterKey = firstDot === -1 ? firstKey : firstKey.slice(0, firstDot);\n\n  return updateKeys.find(key => key.includes('$[' + arrayFilterKey + ']')) != null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvdXBkYXRlL3JlbW92ZVVudXNlZEFycmF5RmlsdGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9oZWxwZXJzL3VwZGF0ZS9yZW1vdmVVbnVzZWRBcnJheUZpbHRlcnMuanM/ZmVlMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTW9uZ29EQiB0aHJvd3MgYW4gZXJyb3IgaWYgdGhlcmUncyB1bnVzZWQgYXJyYXkgZmlsdGVycy4gVGhhdCBpcywgaWYgYG9wdGlvbnMuYXJyYXlGaWx0ZXJzYCBkZWZpbmVzXG4gKiBhIGZpbHRlciwgYnV0IG5vbmUgb2YgdGhlIGB1cGRhdGVgIGtleXMgdXNlIGl0LiBUaGlzIHNob3VsZCBiZSBlbm91Z2ggdG8gZmlsdGVyIG91dCBhbGwgdW51c2VkIGFycmF5XG4gKiBmaWx0ZXJzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVtb3ZlVW51c2VkQXJyYXlGaWx0ZXJzKHVwZGF0ZSwgYXJyYXlGaWx0ZXJzKSB7XG4gIGNvbnN0IHVwZGF0ZUtleXMgPSBPYmplY3Qua2V5cyh1cGRhdGUpLlxuICAgIG1hcChrZXkgPT4gT2JqZWN0LmtleXModXBkYXRlW2tleV0pKS5cbiAgICByZWR1Y2UoKGN1ciwgYXJyKSA9PiBjdXIuY29uY2F0KGFyciksIFtdKTtcbiAgcmV0dXJuIGFycmF5RmlsdGVycy5maWx0ZXIob2JqID0+IHtcbiAgICByZXR1cm4gX2NoZWNrU2luZ2xlRmlsdGVyS2V5KG9iaiwgdXBkYXRlS2V5cyk7XG4gIH0pO1xufTtcblxuZnVuY3Rpb24gX2NoZWNrU2luZ2xlRmlsdGVyS2V5KGFycmF5RmlsdGVyLCB1cGRhdGVLZXlzKSB7XG4gIGNvbnN0IGZpcnN0S2V5ID0gT2JqZWN0LmtleXMoYXJyYXlGaWx0ZXIpWzBdO1xuXG4gIGlmIChmaXJzdEtleSA9PT0gJyRhbmQnIHx8IGZpcnN0S2V5ID09PSAnJG9yJykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhcnJheUZpbHRlcltmaXJzdEtleV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBhcnJheUZpbHRlcltmaXJzdEtleV0uZmluZChmaWx0ZXIgPT4gX2NoZWNrU2luZ2xlRmlsdGVyS2V5KGZpbHRlciwgdXBkYXRlS2V5cykpICE9IG51bGw7XG4gIH1cblxuICBjb25zdCBmaXJzdERvdCA9IGZpcnN0S2V5LmluZGV4T2YoJy4nKTtcbiAgY29uc3QgYXJyYXlGaWx0ZXJLZXkgPSBmaXJzdERvdCA9PT0gLTEgPyBmaXJzdEtleSA6IGZpcnN0S2V5LnNsaWNlKDAsIGZpcnN0RG90KTtcblxuICByZXR1cm4gdXBkYXRlS2V5cy5maW5kKGtleSA9PiBrZXkuaW5jbHVkZXMoJyRbJyArIGFycmF5RmlsdGVyS2V5ICsgJ10nKSkgIT0gbnVsbDtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/update/removeUnusedArrayFilters.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/update/updatedPathsByArrayFilter.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/update/updatedPathsByArrayFilter.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst modifiedPaths = __webpack_require__(/*! ./modifiedPaths */ \"(ssr)/./node_modules/mongoose/lib/helpers/update/modifiedPaths.js\");\n\nmodule.exports = function updatedPathsByArrayFilter(update) {\n  if (update == null) {\n    return {};\n  }\n  const updatedPaths = modifiedPaths(update);\n\n  return Object.keys(updatedPaths).reduce((cur, path) => {\n    const matches = path.match(/\\$\\[[^\\]]+\\]/g);\n    if (matches == null) {\n      return cur;\n    }\n    for (const match of matches) {\n      const firstMatch = path.indexOf(match);\n      if (firstMatch !== path.lastIndexOf(match)) {\n        throw new Error(`Path '${path}' contains the same array filter multiple times`);\n      }\n      cur[match.substring(2, match.length - 1)] = path.\n        substring(0, firstMatch - 1).\n        replace(/\\$\\[[^\\]]+\\]/g, '0');\n    }\n    return cur;\n  }, {});\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvdXBkYXRlL3VwZGF0ZWRQYXRoc0J5QXJyYXlGaWx0ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsc0JBQXNCLG1CQUFPLENBQUMsMEZBQWlCOztBQUUvQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsS0FBSztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLElBQUk7QUFDUCIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2hlbHBlcnMvdXBkYXRlL3VwZGF0ZWRQYXRoc0J5QXJyYXlGaWx0ZXIuanM/MzdkMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IG1vZGlmaWVkUGF0aHMgPSByZXF1aXJlKCcuL21vZGlmaWVkUGF0aHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB1cGRhdGVkUGF0aHNCeUFycmF5RmlsdGVyKHVwZGF0ZSkge1xuICBpZiAodXBkYXRlID09IG51bGwpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgY29uc3QgdXBkYXRlZFBhdGhzID0gbW9kaWZpZWRQYXRocyh1cGRhdGUpO1xuXG4gIHJldHVybiBPYmplY3Qua2V5cyh1cGRhdGVkUGF0aHMpLnJlZHVjZSgoY3VyLCBwYXRoKSA9PiB7XG4gICAgY29uc3QgbWF0Y2hlcyA9IHBhdGgubWF0Y2goL1xcJFxcW1teXFxdXStcXF0vZyk7XG4gICAgaWYgKG1hdGNoZXMgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGN1cjtcbiAgICB9XG4gICAgZm9yIChjb25zdCBtYXRjaCBvZiBtYXRjaGVzKSB7XG4gICAgICBjb25zdCBmaXJzdE1hdGNoID0gcGF0aC5pbmRleE9mKG1hdGNoKTtcbiAgICAgIGlmIChmaXJzdE1hdGNoICE9PSBwYXRoLmxhc3RJbmRleE9mKG1hdGNoKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFBhdGggJyR7cGF0aH0nIGNvbnRhaW5zIHRoZSBzYW1lIGFycmF5IGZpbHRlciBtdWx0aXBsZSB0aW1lc2ApO1xuICAgICAgfVxuICAgICAgY3VyW21hdGNoLnN1YnN0cmluZygyLCBtYXRjaC5sZW5ndGggLSAxKV0gPSBwYXRoLlxuICAgICAgICBzdWJzdHJpbmcoMCwgZmlyc3RNYXRjaCAtIDEpLlxuICAgICAgICByZXBsYWNlKC9cXCRcXFtbXlxcXV0rXFxdL2csICcwJyk7XG4gICAgfVxuICAgIHJldHVybiBjdXI7XG4gIH0sIHt9KTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/update/updatedPathsByArrayFilter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/helpers/updateValidators.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongoose/lib/helpers/updateValidators.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\nconst ValidationError = __webpack_require__(/*! ../error/validation */ \"(ssr)/./node_modules/mongoose/lib/error/validation.js\");\nconst cleanPositionalOperators = __webpack_require__(/*! ./schema/cleanPositionalOperators */ \"(ssr)/./node_modules/mongoose/lib/helpers/schema/cleanPositionalOperators.js\");\nconst flatten = (__webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongoose/lib/helpers/common.js\").flatten);\nconst modifiedPaths = (__webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongoose/lib/helpers/common.js\").modifiedPaths);\n\n/**\n * Applies validators and defaults to update and findOneAndUpdate operations,\n * specifically passing a null doc as `this` to validators and defaults\n *\n * @param {Query} query\n * @param {Schema} schema\n * @param {Object} castedDoc\n * @param {Object} options\n * @method runValidatorsOnUpdate\n * @api private\n */\n\nmodule.exports = function(query, schema, castedDoc, options, callback) {\n  const keys = Object.keys(castedDoc || {});\n  let updatedKeys = {};\n  let updatedValues = {};\n  const isPull = {};\n  const arrayAtomicUpdates = {};\n  const numKeys = keys.length;\n  let hasDollarUpdate = false;\n  const modified = {};\n  let currentUpdate;\n  let key;\n  let i;\n\n  for (i = 0; i < numKeys; ++i) {\n    if (keys[i].startsWith('$')) {\n      hasDollarUpdate = true;\n      if (keys[i] === '$push' || keys[i] === '$addToSet') {\n        const _keys = Object.keys(castedDoc[keys[i]]);\n        for (let ii = 0; ii < _keys.length; ++ii) {\n          currentUpdate = castedDoc[keys[i]][_keys[ii]];\n          if (currentUpdate && currentUpdate.$each) {\n            arrayAtomicUpdates[_keys[ii]] = (arrayAtomicUpdates[_keys[ii]] || []).\n              concat(currentUpdate.$each);\n          } else {\n            arrayAtomicUpdates[_keys[ii]] = (arrayAtomicUpdates[_keys[ii]] || []).\n              concat([currentUpdate]);\n          }\n        }\n        continue;\n      }\n      modifiedPaths(castedDoc[keys[i]], '', modified);\n      const flat = flatten(castedDoc[keys[i]], null, null, schema);\n      const paths = Object.keys(flat);\n      const numPaths = paths.length;\n      for (let j = 0; j < numPaths; ++j) {\n        const updatedPath = cleanPositionalOperators(paths[j]);\n        key = keys[i];\n        // With `$pull` we might flatten `$in`. Skip stuff nested under `$in`\n        // for the rest of the logic, it will get handled later.\n        if (updatedPath.includes('$')) {\n          continue;\n        }\n        if (key === '$set' || key === '$setOnInsert' ||\n            key === '$pull' || key === '$pullAll') {\n          updatedValues[updatedPath] = flat[paths[j]];\n          isPull[updatedPath] = key === '$pull' || key === '$pullAll';\n        } else if (key === '$unset') {\n          updatedValues[updatedPath] = undefined;\n        }\n        updatedKeys[updatedPath] = true;\n      }\n    }\n  }\n\n  if (!hasDollarUpdate) {\n    modifiedPaths(castedDoc, '', modified);\n    updatedValues = flatten(castedDoc, null, null, schema);\n    updatedKeys = Object.keys(updatedValues);\n  }\n\n  const updates = Object.keys(updatedValues);\n  const numUpdates = updates.length;\n  const validatorsToExecute = [];\n  const validationErrors = [];\n\n  const alreadyValidated = [];\n\n  const context = query;\n  function iter(i, v) {\n    const schemaPath = schema._getSchema(updates[i]);\n    if (schemaPath == null) {\n      return;\n    }\n    if (schemaPath.instance === 'Mixed' && schemaPath.path !== updates[i]) {\n      return;\n    }\n\n    if (v && Array.isArray(v.$in)) {\n      v.$in.forEach((v, i) => {\n        validatorsToExecute.push(function(callback) {\n          schemaPath.doValidate(\n            v,\n            function(err) {\n              if (err) {\n                err.path = updates[i] + '.$in.' + i;\n                validationErrors.push(err);\n              }\n              callback(null);\n            },\n            context,\n            { updateValidator: true });\n        });\n      });\n    } else {\n      if (isPull[updates[i]] &&\n          schemaPath.$isMongooseArray) {\n        return;\n      }\n\n      if (schemaPath.$isMongooseDocumentArrayElement && v != null && v.$__ != null) {\n        alreadyValidated.push(updates[i]);\n        validatorsToExecute.push(function(callback) {\n          schemaPath.doValidate(v, function(err) {\n            if (err) {\n              if (err.errors) {\n                for (const key of Object.keys(err.errors)) {\n                  const _err = err.errors[key];\n                  _err.path = updates[i] + '.' + key;\n                  validationErrors.push(_err);\n                }\n              } else {\n                err.path = updates[i];\n                validationErrors.push(err);\n              }\n            }\n\n            return callback(null);\n          }, context, { updateValidator: true });\n        });\n      } else {\n        validatorsToExecute.push(function(callback) {\n          for (const path of alreadyValidated) {\n            if (updates[i].startsWith(path + '.')) {\n              return callback(null);\n            }\n          }\n\n          schemaPath.doValidate(v, function(err) {\n            if (schemaPath.schema != null &&\n                schemaPath.schema.options.storeSubdocValidationError === false &&\n                err instanceof ValidationError) {\n              return callback(null);\n            }\n\n            if (err) {\n              err.path = updates[i];\n              validationErrors.push(err);\n            }\n            callback(null);\n          }, context, { updateValidator: true });\n        });\n      }\n    }\n  }\n  for (i = 0; i < numUpdates; ++i) {\n    iter(i, updatedValues[updates[i]]);\n  }\n\n  const arrayUpdates = Object.keys(arrayAtomicUpdates);\n  for (const arrayUpdate of arrayUpdates) {\n    let schemaPath = schema._getSchema(arrayUpdate);\n    if (schemaPath && schemaPath.$isMongooseDocumentArray) {\n      validatorsToExecute.push(function(callback) {\n        schemaPath.doValidate(\n          arrayAtomicUpdates[arrayUpdate],\n          getValidationCallback(arrayUpdate, validationErrors, callback),\n          options && options.context === 'query' ? query : null);\n      });\n    } else {\n      schemaPath = schema._getSchema(arrayUpdate + '.0');\n      for (const atomicUpdate of arrayAtomicUpdates[arrayUpdate]) {\n        validatorsToExecute.push(function(callback) {\n          schemaPath.doValidate(\n            atomicUpdate,\n            getValidationCallback(arrayUpdate, validationErrors, callback),\n            options && options.context === 'query' ? query : null,\n            { updateValidator: true });\n        });\n      }\n    }\n  }\n\n  if (callback != null) {\n    let numValidators = validatorsToExecute.length;\n    if (numValidators === 0) {\n      return _done(callback);\n    }\n    for (const validator of validatorsToExecute) {\n      validator(function() {\n        if (--numValidators <= 0) {\n          _done(callback);\n        }\n      });\n    }\n\n    return;\n  }\n\n  return function(callback) {\n    let numValidators = validatorsToExecute.length;\n    if (numValidators === 0) {\n      return _done(callback);\n    }\n    for (const validator of validatorsToExecute) {\n      validator(function() {\n        if (--numValidators <= 0) {\n          _done(callback);\n        }\n      });\n    }\n  };\n\n  function _done(callback) {\n    if (validationErrors.length) {\n      const err = new ValidationError(null);\n\n      for (const validationError of validationErrors) {\n        err.addError(validationError.path, validationError);\n      }\n\n      return callback(err);\n    }\n    callback(null);\n  }\n\n  function getValidationCallback(arrayUpdate, validationErrors, callback) {\n    return function(err) {\n      if (err) {\n        err.path = arrayUpdate;\n        validationErrors.push(err);\n      }\n      callback(null);\n    };\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/helpers/updateValidators.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/index.js":
/*!********************************************!*\
  !*** ./node_modules/mongoose/lib/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\n(__webpack_require__(/*! ./driver */ \"(ssr)/./node_modules/mongoose/lib/driver.js\").set)(__webpack_require__(/*! ./drivers/node-mongodb-native */ \"(ssr)/./node_modules/mongoose/lib/drivers/node-mongodb-native/index.js\"));\n\nconst mongoose = __webpack_require__(/*! ./mongoose */ \"(ssr)/./node_modules/mongoose/lib/mongoose.js\");\n\nmongoose.Mongoose.prototype.mongo = __webpack_require__(/*! mongodb */ \"(ssr)/./node_modules/mongodb/lib/index.js\");\n\nmodule.exports = mongoose;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTs7QUFFQSx3RkFBdUIsQ0FBQyxtQkFBTyxDQUFDLDZHQUErQjs7QUFFL0QsaUJBQWlCLG1CQUFPLENBQUMsaUVBQVk7O0FBRXJDLG9DQUFvQyxtQkFBTyxDQUFDLDBEQUFTOztBQUVyRCIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2luZGV4LmpzP2RiNDQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKiFcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxucmVxdWlyZSgnLi9kcml2ZXInKS5zZXQocmVxdWlyZSgnLi9kcml2ZXJzL25vZGUtbW9uZ29kYi1uYXRpdmUnKSk7XG5cbmNvbnN0IG1vbmdvb3NlID0gcmVxdWlyZSgnLi9tb25nb29zZScpO1xuXG5tb25nb29zZS5Nb25nb29zZS5wcm90b3R5cGUubW9uZ28gPSByZXF1aXJlKCdtb25nb2RiJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbW9uZ29vc2U7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/internal.js":
/*!***********************************************!*\
  !*** ./node_modules/mongoose/lib/internal.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Dependencies\n */\n\n\n\nconst StateMachine = __webpack_require__(/*! ./stateMachine */ \"(ssr)/./node_modules/mongoose/lib/stateMachine.js\");\nconst ActiveRoster = StateMachine.ctor('require', 'modify', 'init', 'default', 'ignore');\n\nmodule.exports = exports = InternalCache;\n\nfunction InternalCache() {\n  this.activePaths = new ActiveRoster();\n}\n\nInternalCache.prototype.strictMode = true;\n\nInternalCache.prototype.fullPath = undefined;\nInternalCache.prototype.selected = undefined;\nInternalCache.prototype.shardval = undefined;\nInternalCache.prototype.saveError = undefined;\nInternalCache.prototype.validationError = undefined;\nInternalCache.prototype.adhocPaths = undefined;\nInternalCache.prototype.removing = undefined;\nInternalCache.prototype.inserting = undefined;\nInternalCache.prototype.saving = undefined;\nInternalCache.prototype.version = undefined;\nInternalCache.prototype._id = undefined;\nInternalCache.prototype.ownerDocument = undefined;\nInternalCache.prototype.populate = undefined; // what we want to populate in this doc\nInternalCache.prototype.populated = undefined;// the _ids that have been populated\nInternalCache.prototype.primitiveAtomics = undefined;\n\n/**\n * If `false`, this document was not the result of population.\n * If `true`, this document is a populated doc underneath another doc\n * If an object, this document is a populated doc and the `value` property of the\n * object contains the original depopulated value.\n */\nInternalCache.prototype.wasPopulated = false;\n\nInternalCache.prototype.scope = undefined;\n\nInternalCache.prototype.session = null;\nInternalCache.prototype.pathsToScopes = null;\nInternalCache.prototype.cachedRequired = null;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL2ludGVybmFsLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYixxQkFBcUIsbUJBQU8sQ0FBQyx5RUFBZ0I7QUFDN0M7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QztBQUM5Qyw4Q0FBOEM7QUFDOUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvaW50ZXJuYWwuanM/OTU2YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIERlcGVuZGVuY2llc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgU3RhdGVNYWNoaW5lID0gcmVxdWlyZSgnLi9zdGF0ZU1hY2hpbmUnKTtcbmNvbnN0IEFjdGl2ZVJvc3RlciA9IFN0YXRlTWFjaGluZS5jdG9yKCdyZXF1aXJlJywgJ21vZGlmeScsICdpbml0JywgJ2RlZmF1bHQnLCAnaWdub3JlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IEludGVybmFsQ2FjaGU7XG5cbmZ1bmN0aW9uIEludGVybmFsQ2FjaGUoKSB7XG4gIHRoaXMuYWN0aXZlUGF0aHMgPSBuZXcgQWN0aXZlUm9zdGVyKCk7XG59XG5cbkludGVybmFsQ2FjaGUucHJvdG90eXBlLnN0cmljdE1vZGUgPSB0cnVlO1xuXG5JbnRlcm5hbENhY2hlLnByb3RvdHlwZS5mdWxsUGF0aCA9IHVuZGVmaW5lZDtcbkludGVybmFsQ2FjaGUucHJvdG90eXBlLnNlbGVjdGVkID0gdW5kZWZpbmVkO1xuSW50ZXJuYWxDYWNoZS5wcm90b3R5cGUuc2hhcmR2YWwgPSB1bmRlZmluZWQ7XG5JbnRlcm5hbENhY2hlLnByb3RvdHlwZS5zYXZlRXJyb3IgPSB1bmRlZmluZWQ7XG5JbnRlcm5hbENhY2hlLnByb3RvdHlwZS52YWxpZGF0aW9uRXJyb3IgPSB1bmRlZmluZWQ7XG5JbnRlcm5hbENhY2hlLnByb3RvdHlwZS5hZGhvY1BhdGhzID0gdW5kZWZpbmVkO1xuSW50ZXJuYWxDYWNoZS5wcm90b3R5cGUucmVtb3ZpbmcgPSB1bmRlZmluZWQ7XG5JbnRlcm5hbENhY2hlLnByb3RvdHlwZS5pbnNlcnRpbmcgPSB1bmRlZmluZWQ7XG5JbnRlcm5hbENhY2hlLnByb3RvdHlwZS5zYXZpbmcgPSB1bmRlZmluZWQ7XG5JbnRlcm5hbENhY2hlLnByb3RvdHlwZS52ZXJzaW9uID0gdW5kZWZpbmVkO1xuSW50ZXJuYWxDYWNoZS5wcm90b3R5cGUuX2lkID0gdW5kZWZpbmVkO1xuSW50ZXJuYWxDYWNoZS5wcm90b3R5cGUub3duZXJEb2N1bWVudCA9IHVuZGVmaW5lZDtcbkludGVybmFsQ2FjaGUucHJvdG90eXBlLnBvcHVsYXRlID0gdW5kZWZpbmVkOyAvLyB3aGF0IHdlIHdhbnQgdG8gcG9wdWxhdGUgaW4gdGhpcyBkb2NcbkludGVybmFsQ2FjaGUucHJvdG90eXBlLnBvcHVsYXRlZCA9IHVuZGVmaW5lZDsvLyB0aGUgX2lkcyB0aGF0IGhhdmUgYmVlbiBwb3B1bGF0ZWRcbkludGVybmFsQ2FjaGUucHJvdG90eXBlLnByaW1pdGl2ZUF0b21pY3MgPSB1bmRlZmluZWQ7XG5cbi8qKlxuICogSWYgYGZhbHNlYCwgdGhpcyBkb2N1bWVudCB3YXMgbm90IHRoZSByZXN1bHQgb2YgcG9wdWxhdGlvbi5cbiAqIElmIGB0cnVlYCwgdGhpcyBkb2N1bWVudCBpcyBhIHBvcHVsYXRlZCBkb2MgdW5kZXJuZWF0aCBhbm90aGVyIGRvY1xuICogSWYgYW4gb2JqZWN0LCB0aGlzIGRvY3VtZW50IGlzIGEgcG9wdWxhdGVkIGRvYyBhbmQgdGhlIGB2YWx1ZWAgcHJvcGVydHkgb2YgdGhlXG4gKiBvYmplY3QgY29udGFpbnMgdGhlIG9yaWdpbmFsIGRlcG9wdWxhdGVkIHZhbHVlLlxuICovXG5JbnRlcm5hbENhY2hlLnByb3RvdHlwZS53YXNQb3B1bGF0ZWQgPSBmYWxzZTtcblxuSW50ZXJuYWxDYWNoZS5wcm90b3R5cGUuc2NvcGUgPSB1bmRlZmluZWQ7XG5cbkludGVybmFsQ2FjaGUucHJvdG90eXBlLnNlc3Npb24gPSBudWxsO1xuSW50ZXJuYWxDYWNoZS5wcm90b3R5cGUucGF0aHNUb1Njb3BlcyA9IG51bGw7XG5JbnRlcm5hbENhY2hlLnByb3RvdHlwZS5jYWNoZWRSZXF1aXJlZCA9IG51bGw7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/internal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/model.js":
/*!********************************************!*\
  !*** ./node_modules/mongoose/lib/model.js ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\nconst Aggregate = __webpack_require__(/*! ./aggregate */ \"(ssr)/./node_modules/mongoose/lib/aggregate.js\");\nconst ChangeStream = __webpack_require__(/*! ./cursor/changeStream */ \"(ssr)/./node_modules/mongoose/lib/cursor/changeStream.js\");\nconst Document = __webpack_require__(/*! ./document */ \"(ssr)/./node_modules/mongoose/lib/document.js\");\nconst DocumentNotFoundError = __webpack_require__(/*! ./error/notFound */ \"(ssr)/./node_modules/mongoose/lib/error/notFound.js\");\nconst DivergentArrayError = __webpack_require__(/*! ./error/divergentArray */ \"(ssr)/./node_modules/mongoose/lib/error/divergentArray.js\");\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst Kareem = __webpack_require__(/*! kareem */ \"(ssr)/./node_modules/kareem/index.js\");\nconst MongooseBuffer = __webpack_require__(/*! ./types/buffer */ \"(ssr)/./node_modules/mongoose/lib/types/buffer.js\");\nconst MongooseError = __webpack_require__(/*! ./error/index */ \"(ssr)/./node_modules/mongoose/lib/error/index.js\");\nconst ObjectParameterError = __webpack_require__(/*! ./error/objectParameter */ \"(ssr)/./node_modules/mongoose/lib/error/objectParameter.js\");\nconst OverwriteModelError = __webpack_require__(/*! ./error/overwriteModel */ \"(ssr)/./node_modules/mongoose/lib/error/overwriteModel.js\");\nconst Query = __webpack_require__(/*! ./query */ \"(ssr)/./node_modules/mongoose/lib/query.js\");\nconst SaveOptions = __webpack_require__(/*! ./options/saveOptions */ \"(ssr)/./node_modules/mongoose/lib/options/saveOptions.js\");\nconst Schema = __webpack_require__(/*! ./schema */ \"(ssr)/./node_modules/mongoose/lib/schema.js\");\nconst ValidationError = __webpack_require__(/*! ./error/validation */ \"(ssr)/./node_modules/mongoose/lib/error/validation.js\");\nconst VersionError = __webpack_require__(/*! ./error/version */ \"(ssr)/./node_modules/mongoose/lib/error/version.js\");\nconst ParallelSaveError = __webpack_require__(/*! ./error/parallelSave */ \"(ssr)/./node_modules/mongoose/lib/error/parallelSave.js\");\nconst applyDefaultsHelper = __webpack_require__(/*! ./helpers/document/applyDefaults */ \"(ssr)/./node_modules/mongoose/lib/helpers/document/applyDefaults.js\");\nconst applyDefaultsToPOJO = __webpack_require__(/*! ./helpers/model/applyDefaultsToPOJO */ \"(ssr)/./node_modules/mongoose/lib/helpers/model/applyDefaultsToPOJO.js\");\nconst applyHooks = __webpack_require__(/*! ./helpers/model/applyHooks */ \"(ssr)/./node_modules/mongoose/lib/helpers/model/applyHooks.js\");\nconst applyMethods = __webpack_require__(/*! ./helpers/model/applyMethods */ \"(ssr)/./node_modules/mongoose/lib/helpers/model/applyMethods.js\");\nconst applyProjection = __webpack_require__(/*! ./helpers/projection/applyProjection */ \"(ssr)/./node_modules/mongoose/lib/helpers/projection/applyProjection.js\");\nconst applySchemaCollation = __webpack_require__(/*! ./helpers/indexes/applySchemaCollation */ \"(ssr)/./node_modules/mongoose/lib/helpers/indexes/applySchemaCollation.js\");\nconst applyStaticHooks = __webpack_require__(/*! ./helpers/model/applyStaticHooks */ \"(ssr)/./node_modules/mongoose/lib/helpers/model/applyStaticHooks.js\");\nconst applyStatics = __webpack_require__(/*! ./helpers/model/applyStatics */ \"(ssr)/./node_modules/mongoose/lib/helpers/model/applyStatics.js\");\nconst applyWriteConcern = __webpack_require__(/*! ./helpers/schema/applyWriteConcern */ \"(ssr)/./node_modules/mongoose/lib/helpers/schema/applyWriteConcern.js\");\nconst assignVals = __webpack_require__(/*! ./helpers/populate/assignVals */ \"(ssr)/./node_modules/mongoose/lib/helpers/populate/assignVals.js\");\nconst castBulkWrite = __webpack_require__(/*! ./helpers/model/castBulkWrite */ \"(ssr)/./node_modules/mongoose/lib/helpers/model/castBulkWrite.js\");\nconst clone = __webpack_require__(/*! ./helpers/clone */ \"(ssr)/./node_modules/mongoose/lib/helpers/clone.js\");\nconst createPopulateQueryFilter = __webpack_require__(/*! ./helpers/populate/createPopulateQueryFilter */ \"(ssr)/./node_modules/mongoose/lib/helpers/populate/createPopulateQueryFilter.js\");\nconst decorateUpdateWithVersionKey = __webpack_require__(/*! ./helpers/update/decorateUpdateWithVersionKey */ \"(ssr)/./node_modules/mongoose/lib/helpers/update/decorateUpdateWithVersionKey.js\");\nconst getDefaultBulkwriteResult = __webpack_require__(/*! ./helpers/getDefaultBulkwriteResult */ \"(ssr)/./node_modules/mongoose/lib/helpers/getDefaultBulkwriteResult.js\");\nconst getSchemaDiscriminatorByValue = __webpack_require__(/*! ./helpers/discriminator/getSchemaDiscriminatorByValue */ \"(ssr)/./node_modules/mongoose/lib/helpers/discriminator/getSchemaDiscriminatorByValue.js\");\nconst discriminator = __webpack_require__(/*! ./helpers/model/discriminator */ \"(ssr)/./node_modules/mongoose/lib/helpers/model/discriminator.js\");\nconst firstKey = __webpack_require__(/*! ./helpers/firstKey */ \"(ssr)/./node_modules/mongoose/lib/helpers/firstKey.js\");\nconst each = __webpack_require__(/*! ./helpers/each */ \"(ssr)/./node_modules/mongoose/lib/helpers/each.js\");\nconst get = __webpack_require__(/*! ./helpers/get */ \"(ssr)/./node_modules/mongoose/lib/helpers/get.js\");\nconst getConstructorName = __webpack_require__(/*! ./helpers/getConstructorName */ \"(ssr)/./node_modules/mongoose/lib/helpers/getConstructorName.js\");\nconst getDiscriminatorByValue = __webpack_require__(/*! ./helpers/discriminator/getDiscriminatorByValue */ \"(ssr)/./node_modules/mongoose/lib/helpers/discriminator/getDiscriminatorByValue.js\");\nconst getModelsMapForPopulate = __webpack_require__(/*! ./helpers/populate/getModelsMapForPopulate */ \"(ssr)/./node_modules/mongoose/lib/helpers/populate/getModelsMapForPopulate.js\");\nconst immediate = __webpack_require__(/*! ./helpers/immediate */ \"(ssr)/./node_modules/mongoose/lib/helpers/immediate.js\");\nconst internalToObjectOptions = (__webpack_require__(/*! ./options */ \"(ssr)/./node_modules/mongoose/lib/options.js\").internalToObjectOptions);\nconst isDefaultIdIndex = __webpack_require__(/*! ./helpers/indexes/isDefaultIdIndex */ \"(ssr)/./node_modules/mongoose/lib/helpers/indexes/isDefaultIdIndex.js\");\nconst isIndexEqual = __webpack_require__(/*! ./helpers/indexes/isIndexEqual */ \"(ssr)/./node_modules/mongoose/lib/helpers/indexes/isIndexEqual.js\");\nconst {\n  getRelatedDBIndexes,\n  getRelatedSchemaIndexes\n} = __webpack_require__(/*! ./helpers/indexes/getRelatedIndexes */ \"(ssr)/./node_modules/mongoose/lib/helpers/indexes/getRelatedIndexes.js\");\nconst isPathExcluded = __webpack_require__(/*! ./helpers/projection/isPathExcluded */ \"(ssr)/./node_modules/mongoose/lib/helpers/projection/isPathExcluded.js\");\nconst decorateDiscriminatorIndexOptions = __webpack_require__(/*! ./helpers/indexes/decorateDiscriminatorIndexOptions */ \"(ssr)/./node_modules/mongoose/lib/helpers/indexes/decorateDiscriminatorIndexOptions.js\");\nconst isPathSelectedInclusive = __webpack_require__(/*! ./helpers/projection/isPathSelectedInclusive */ \"(ssr)/./node_modules/mongoose/lib/helpers/projection/isPathSelectedInclusive.js\");\nconst leanPopulateMap = __webpack_require__(/*! ./helpers/populate/leanPopulateMap */ \"(ssr)/./node_modules/mongoose/lib/helpers/populate/leanPopulateMap.js\");\nconst parallelLimit = __webpack_require__(/*! ./helpers/parallelLimit */ \"(ssr)/./node_modules/mongoose/lib/helpers/parallelLimit.js\");\nconst parentPaths = __webpack_require__(/*! ./helpers/path/parentPaths */ \"(ssr)/./node_modules/mongoose/lib/helpers/path/parentPaths.js\");\nconst prepareDiscriminatorPipeline = __webpack_require__(/*! ./helpers/aggregate/prepareDiscriminatorPipeline */ \"(ssr)/./node_modules/mongoose/lib/helpers/aggregate/prepareDiscriminatorPipeline.js\");\nconst pushNestedArrayPaths = __webpack_require__(/*! ./helpers/model/pushNestedArrayPaths */ \"(ssr)/./node_modules/mongoose/lib/helpers/model/pushNestedArrayPaths.js\");\nconst removeDeselectedForeignField = __webpack_require__(/*! ./helpers/populate/removeDeselectedForeignField */ \"(ssr)/./node_modules/mongoose/lib/helpers/populate/removeDeselectedForeignField.js\");\nconst setDottedPath = __webpack_require__(/*! ./helpers/path/setDottedPath */ \"(ssr)/./node_modules/mongoose/lib/helpers/path/setDottedPath.js\");\nconst STATES = __webpack_require__(/*! ./connectionState */ \"(ssr)/./node_modules/mongoose/lib/connectionState.js\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\nconst MongooseBulkWriteError = __webpack_require__(/*! ./error/bulkWriteError */ \"(ssr)/./node_modules/mongoose/lib/error/bulkWriteError.js\");\nconst minimize = __webpack_require__(/*! ./helpers/minimize */ \"(ssr)/./node_modules/mongoose/lib/helpers/minimize.js\");\n\nconst VERSION_WHERE = 1;\nconst VERSION_INC = 2;\nconst VERSION_ALL = VERSION_WHERE | VERSION_INC;\n\nconst arrayAtomicsSymbol = (__webpack_require__(/*! ./helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").arrayAtomicsSymbol);\nconst modelCollectionSymbol = Symbol('mongoose#Model#collection');\nconst modelDbSymbol = Symbol('mongoose#Model#db');\nconst modelSymbol = (__webpack_require__(/*! ./helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").modelSymbol);\nconst subclassedSymbol = Symbol('mongoose#Model#subclassed');\n\nconst saveToObjectOptions = Object.assign({}, internalToObjectOptions, {\n  bson: true,\n  flattenObjectIds: false\n});\n\n/**\n * A Model is a class that's your primary tool for interacting with MongoDB.\n * An instance of a Model is called a [Document](https://mongoosejs.com/docs/api/document.html#Document).\n *\n * In Mongoose, the term \"Model\" refers to subclasses of the `mongoose.Model`\n * class. You should not use the `mongoose.Model` class directly. The\n * [`mongoose.model()`](https://mongoosejs.com/docs/api/mongoose.html#Mongoose.prototype.model()) and\n * [`connection.model()`](https://mongoosejs.com/docs/api/connection.html#Connection.prototype.model()) functions\n * create subclasses of `mongoose.Model` as shown below.\n *\n * #### Example:\n *\n *     // `UserModel` is a \"Model\", a subclass of `mongoose.Model`.\n *     const UserModel = mongoose.model('User', new Schema({ name: String }));\n *\n *     // You can use a Model to create new documents using `new`:\n *     const userDoc = new UserModel({ name: 'Foo' });\n *     await userDoc.save();\n *\n *     // You also use a model to create queries:\n *     const userFromDb = await UserModel.findOne({ name: 'Foo' });\n *\n * @param {Object} doc values for initial set\n * @param {Object} [fields] optional object containing the fields that were selected in the query which returned this document. You do **not** need to set this parameter to ensure Mongoose handles your [query projection](https://mongoosejs.com/docs/api/query.html#Query.prototype.select()).\n * @param {Boolean} [skipId=false] optional boolean. If true, mongoose doesn't add an `_id` field to the document.\n * @inherits Document https://mongoosejs.com/docs/api/document.html\n * @event `error`: If listening to this event, 'error' is emitted when a document was saved and an `error` occurred. If not listening, the event bubbles to the connection used to create this Model.\n * @event `index`: Emitted after `Model#ensureIndexes` completes. If an error occurred it is passed with the event.\n * @event `index-single-start`: Emitted when an individual index starts within `Model#ensureIndexes`. The fields and options being used to build the index are also passed with the event.\n * @event `index-single-done`: Emitted when an individual index finishes within `Model#ensureIndexes`. If an error occurred it is passed with the event. The fields, options, and index name are also passed.\n * @api public\n */\n\nfunction Model(doc, fields, skipId) {\n  if (fields instanceof Schema) {\n    throw new TypeError('2nd argument to `Model` constructor must be a POJO or string, ' +\n      '**not** a schema. Make sure you\\'re calling `mongoose.model()`, not ' +\n      '`mongoose.Model()`.');\n  }\n  if (typeof doc === 'string') {\n    throw new TypeError('First argument to `Model` constructor must be an object, ' +\n      '**not** a string. Make sure you\\'re calling `mongoose.model()`, not ' +\n      '`mongoose.Model()`.');\n  }\n  Document.call(this, doc, fields, skipId);\n}\n\n/**\n * Inherits from Document.\n *\n * All Model.prototype features are available on\n * top level (non-sub) documents.\n * @api private\n */\n\nObject.setPrototypeOf(Model.prototype, Document.prototype);\nModel.prototype.$isMongooseModelPrototype = true;\n\n/**\n * Connection the model uses.\n *\n * @api public\n * @property db\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.db;\n\n/**\n * The collection instance this model uses.\n * A Mongoose collection is a thin wrapper around a [MongoDB Node.js driver collection]([MongoDB Node.js driver collection](https://mongodb.github.io/node-mongodb-native/Next/classes/Collection.html)).\n * Using `Model.collection` means you bypass Mongoose middleware, validation, and casting.\n *\n * This property is read-only. Modifying this property is a no-op.\n *\n * @api public\n * @property collection\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.collection;\n\n/**\n * Internal collection the model uses.\n *\n * This property is read-only. Modifying this property is a no-op.\n *\n * @api private\n * @property collection\n * @memberOf Model\n * @instance\n */\n\n\nModel.prototype.$__collection;\n\n/**\n * The name of the model\n *\n * @api public\n * @property modelName\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.modelName;\n\n/**\n * Additional properties to attach to the query when calling `save()` and\n * `isNew` is false.\n *\n * @api public\n * @property $where\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.$where;\n\n/**\n * If this is a discriminator model, `baseModelName` is the name of\n * the base model.\n *\n * @api public\n * @property baseModelName\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.baseModelName;\n\n/**\n * Event emitter that reports any errors that occurred. Useful for global error\n * handling.\n *\n * #### Example:\n *\n *     MyModel.events.on('error', err => console.log(err.message));\n *\n *     // Prints a 'CastError' because of the above handler\n *     await MyModel.findOne({ _id: 'Not a valid ObjectId' }).catch(noop);\n *\n * @api public\n * @property events\n * @fires error whenever any query or model function errors\n * @memberOf Model\n * @static\n */\n\nModel.events;\n\n/**\n * Compiled middleware for this model. Set in `applyHooks()`.\n *\n * @api private\n * @property _middleware\n * @memberOf Model\n * @static\n */\n\nModel._middleware;\n\n/*!\n * ignore\n */\n\nfunction _applyCustomWhere(doc, where) {\n  if (doc.$where == null) {\n    return;\n  }\n  for (const key of Object.keys(doc.$where)) {\n    where[key] = doc.$where[key];\n  }\n}\n\n/*!\n * ignore\n */\n\nModel.prototype.$__handleSave = function(options, callback) {\n  const saveOptions = {};\n\n  applyWriteConcern(this.$__schema, options);\n  if (typeof options.writeConcern !== 'undefined') {\n    saveOptions.writeConcern = {};\n    if ('w' in options.writeConcern) {\n      saveOptions.writeConcern.w = options.writeConcern.w;\n    }\n    if ('j' in options.writeConcern) {\n      saveOptions.writeConcern.j = options.writeConcern.j;\n    }\n    if ('wtimeout' in options.writeConcern) {\n      saveOptions.writeConcern.wtimeout = options.writeConcern.wtimeout;\n    }\n  } else {\n    if ('w' in options) {\n      saveOptions.w = options.w;\n    }\n    if ('j' in options) {\n      saveOptions.j = options.j;\n    }\n    if ('wtimeout' in options) {\n      saveOptions.wtimeout = options.wtimeout;\n    }\n  }\n  if ('checkKeys' in options) {\n    saveOptions.checkKeys = options.checkKeys;\n  }\n\n  const session = this.$session();\n  if (!saveOptions.hasOwnProperty('session') && session != null) {\n    saveOptions.session = session;\n  }\n\n  if (this.$isNew) {\n    // send entire doc\n    const obj = this.toObject(saveToObjectOptions);\n    if ((obj || {})._id === void 0) {\n      // documents must have an _id else mongoose won't know\n      // what to update later if more changes are made. the user\n      // wouldn't know what _id was generated by mongodb either\n      // nor would the ObjectId generated by mongodb necessarily\n      // match the schema definition.\n      immediate(function() {\n        callback(new MongooseError('document must have an _id before saving'));\n      });\n      return;\n    }\n\n    this.$__version(true, obj);\n    this[modelCollectionSymbol].insertOne(obj, saveOptions).then(\n      ret => callback(null, ret),\n      err => {\n        _setIsNew(this, true);\n\n        callback(err, null);\n      }\n    );\n\n    this.$__reset();\n    _setIsNew(this, false);\n    // Make it possible to retry the insert\n    this.$__.inserting = true;\n    return;\n  }\n\n  // Make sure we don't treat it as a new object on error,\n  // since it already exists\n  this.$__.inserting = false;\n  const delta = this.$__delta();\n  if (delta) {\n    if (delta instanceof MongooseError) {\n      callback(delta);\n      return;\n    }\n\n    const where = this.$__where(delta[0]);\n    if (where instanceof MongooseError) {\n      callback(where);\n      return;\n    }\n\n    _applyCustomWhere(this, where);\n\n    const update = delta[1];\n    if (this.$__schema.options.minimize) {\n      minimize(update);\n      // minimize might leave us with an empty object, which would\n      // lead to MongoDB throwing a \"Update document requires atomic operators\" error\n      if (Object.keys(update).length === 0) {\n        handleEmptyUpdate.call(this);\n        return;\n      }\n    }\n\n    this[modelCollectionSymbol].updateOne(where, update, saveOptions).then(\n      ret => {\n        ret.$where = where;\n        callback(null, ret);\n      },\n      err => {\n        this.$__undoReset();\n\n        callback(err);\n      }\n    );\n  } else {\n    handleEmptyUpdate.call(this);\n    return;\n  }\n\n  // store the modified paths before the document is reset\n  this.$__.modifiedPaths = this.modifiedPaths();\n  this.$__reset();\n\n  _setIsNew(this, false);\n\n  function handleEmptyUpdate() {\n    const optionsWithCustomValues = Object.assign({}, options, saveOptions);\n    const where = this.$__where();\n    const optimisticConcurrency = this.$__schema.options.optimisticConcurrency;\n    if (optimisticConcurrency && !Array.isArray(optimisticConcurrency)) {\n      const key = this.$__schema.options.versionKey;\n      const val = this.$__getValue(key);\n      if (val != null) {\n        where[key] = val;\n      }\n    }\n    this.constructor.collection.findOne(where, optionsWithCustomValues)\n      .then(documentExists => {\n        const matchedCount = !documentExists ? 0 : 1;\n        callback(null, { $where: where, matchedCount });\n      })\n      .catch(callback);\n  }\n};\n\n/*!\n * ignore\n */\n\nModel.prototype.$__save = function(options, callback) {\n  this.$__handleSave(options, (error, result) => {\n    if (error) {\n      const hooks = this.$__schema.s.hooks;\n      return hooks.execPost('save:error', this, [this], { error: error }, (error) => {\n        callback(error, this);\n      });\n    }\n    let numAffected = 0;\n    const writeConcern = options != null ?\n      options.writeConcern != null ?\n        options.writeConcern.w :\n        options.w :\n      0;\n    if (writeConcern !== 0) {\n      // Skip checking if write succeeded if writeConcern is set to\n      // unacknowledged writes, because otherwise `numAffected` will always be 0\n      if (result != null) {\n        if (Array.isArray(result)) {\n          numAffected = result.length;\n        } else if (result.matchedCount != null) {\n          numAffected = result.matchedCount;\n        } else {\n          numAffected = result;\n        }\n      }\n\n      const versionBump = this.$__.version;\n      // was this an update that required a version bump?\n      if (versionBump && !this.$__.inserting) {\n        const doIncrement = VERSION_INC === (VERSION_INC & this.$__.version);\n        this.$__.version = undefined;\n        const key = this.$__schema.options.versionKey;\n        const version = this.$__getValue(key) || 0;\n        if (numAffected <= 0) {\n          // the update failed. pass an error back\n          this.$__undoReset();\n          const err = this.$__.$versionError ||\n            new VersionError(this, version, this.$__.modifiedPaths);\n          return callback(err);\n        }\n\n        // increment version if was successful\n        if (doIncrement) {\n          this.$__setValue(key, version + 1);\n        }\n      }\n      if (result != null && numAffected <= 0) {\n        this.$__undoReset();\n        error = new DocumentNotFoundError(result.$where,\n          this.constructor.modelName, numAffected, result);\n        const hooks = this.$__schema.s.hooks;\n        return hooks.execPost('save:error', this, [this], { error: error }, (error) => {\n          callback(error, this);\n        });\n      }\n    }\n    this.$__.saving = undefined;\n    this.$__.savedState = {};\n    this.$emit('save', this, numAffected);\n    this.constructor.emit('save', this, numAffected);\n    callback(null, this);\n  });\n};\n\n/*!\n * ignore\n */\n\nfunction generateVersionError(doc, modifiedPaths) {\n  const key = doc.$__schema.options.versionKey;\n  if (!key) {\n    return null;\n  }\n  const version = doc.$__getValue(key) || 0;\n  return new VersionError(doc, version, modifiedPaths);\n}\n\n/**\n * Saves this document by inserting a new document into the database if [document.isNew](https://mongoosejs.com/docs/api/document.html#Document.prototype.isNew) is `true`,\n * or sends an [updateOne](https://mongoosejs.com/docs/api/document.html#Document.prototype.updateOne()) operation with just the modified paths if `isNew` is `false`.\n *\n * #### Example:\n *\n *     product.sold = Date.now();\n *     product = await product.save();\n *\n * If save is successful, the returned promise will fulfill with the document\n * saved.\n *\n * #### Example:\n *\n *     const newProduct = await product.save();\n *     newProduct === product; // true\n *\n * @param {Object} [options] options optional options\n * @param {Session} [options.session=null] the [session](https://www.mongodb.com/docs/manual/reference/server-sessions/) associated with this save operation. If not specified, defaults to the [document's associated session](https://mongoosejs.com/docs/api/document.html#Document.prototype.session()).\n * @param {Object} [options.safe] (DEPRECATED) overrides [schema's safe option](https://mongoosejs.com/docs/guide.html#safe). Use the `w` option instead.\n * @param {Boolean} [options.validateBeforeSave] set to false to save without validating.\n * @param {Boolean} [options.validateModifiedOnly=false] if `true`, Mongoose will only validate modified paths, as opposed to modified paths and `required` paths.\n * @param {Number|String} [options.w] set the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/#w-option). Overrides the [schema-level `writeConcern` option](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Boolean} [options.j] set to true for MongoDB to wait until this `save()` has been [journaled before resolving the returned promise](https://www.mongodb.com/docs/manual/reference/write-concern/#j-option). Overrides the [schema-level `writeConcern` option](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Number} [options.wtimeout] sets a [timeout for the write concern](https://www.mongodb.com/docs/manual/reference/write-concern/#wtimeout). Overrides the [schema-level `writeConcern` option](https://mongoosejs.com/docs/guide.html#writeConcern).\n * @param {Boolean} [options.checkKeys=true] the MongoDB driver prevents you from saving keys that start with '$' or contain '.' by default. Set this option to `false` to skip that check. See [restrictions on field names](https://docs.mongodb.com/manual/reference/limits/#mongodb-limit-Restrictions-on-Field-Names)\n * @param {Boolean} [options.timestamps=true] if `false` and [timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this `save()`.\n * @throws {DocumentNotFoundError} if this [save updates an existing document](https://mongoosejs.com/docs/api/document.html#Document.prototype.isNew) but the document doesn't exist in the database. For example, you will get this error if the document is [deleted between when you retrieved the document and when you saved it](documents.html#updating).\n * @return {Promise}\n * @api public\n * @see middleware https://mongoosejs.com/docs/middleware.html\n */\n\nModel.prototype.save = async function save(options) {\n  if (typeof options === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.prototype.save() no longer accepts a callback');\n  }\n\n  let parallelSave;\n  this.$op = 'save';\n\n  if (this.$__.saving) {\n    parallelSave = new ParallelSaveError(this);\n  } else {\n    this.$__.saving = new ParallelSaveError(this);\n  }\n\n  options = new SaveOptions(options);\n  if (options.hasOwnProperty('session')) {\n    this.$session(options.session);\n  }\n  if (this.$__.timestamps != null) {\n    options.timestamps = this.$__.timestamps;\n  }\n  this.$__.$versionError = generateVersionError(this, this.modifiedPaths());\n\n  if (parallelSave) {\n    this.$__handleReject(parallelSave);\n    throw parallelSave;\n  }\n\n  this.$__.saveOptions = options;\n\n  await new Promise((resolve, reject) => {\n    this.$__save(options, error => {\n      this.$__.saving = null;\n      this.$__.saveOptions = null;\n      this.$__.$versionError = null;\n      this.$op = null;\n      if (error != null) {\n        this.$__handleReject(error);\n        return reject(error);\n      }\n\n      resolve();\n    });\n  });\n\n  return this;\n};\n\nModel.prototype.$save = Model.prototype.save;\n\n/**\n * Determines whether versioning should be skipped for the given path\n *\n * @param {Document} self\n * @param {String} path\n * @return {Boolean} true if versioning should be skipped for the given path\n * @api private\n */\nfunction shouldSkipVersioning(self, path) {\n  const skipVersioning = self.$__schema.options.skipVersioning;\n  if (!skipVersioning) return false;\n\n  // Remove any array indexes from the path\n  path = path.replace(/\\.\\d+\\./, '.');\n\n  return skipVersioning[path];\n}\n\n/**\n * Apply the operation to the delta (update) clause as\n * well as track versioning for our where clause.\n *\n * @param {Document} self\n * @param {Object} where Unused\n * @param {Object} delta\n * @param {Object} data\n * @param {Mixed} val\n * @param {String} [op]\n * @api private\n */\n\nfunction operand(self, where, delta, data, val, op) {\n  // delta\n  op || (op = '$set');\n  if (!delta[op]) delta[op] = {};\n  delta[op][data.path] = val;\n  // disabled versioning?\n  if (self.$__schema.options.versionKey === false) return;\n\n  // path excluded from versioning?\n  if (shouldSkipVersioning(self, data.path)) return;\n\n  // already marked for versioning?\n  if (VERSION_ALL === (VERSION_ALL & self.$__.version)) return;\n\n  if (self.$__schema.options.optimisticConcurrency) {\n    return;\n  }\n\n  switch (op) {\n    case '$set':\n    case '$unset':\n    case '$pop':\n    case '$pull':\n    case '$pullAll':\n    case '$push':\n    case '$addToSet':\n    case '$inc':\n      break;\n    default:\n      // nothing to do\n      return;\n  }\n\n  // ensure updates sent with positional notation are\n  // editing the correct array element.\n  // only increment the version if an array position changes.\n  // modifying elements of an array is ok if position does not change.\n  if (op === '$push' || op === '$addToSet' || op === '$pullAll' || op === '$pull') {\n    if (/\\.\\d+\\.|\\.\\d+$/.test(data.path)) {\n      increment.call(self);\n    } else {\n      self.$__.version = VERSION_INC;\n    }\n  } else if (/^\\$p/.test(op)) {\n    // potentially changing array positions\n    increment.call(self);\n  } else if (Array.isArray(val)) {\n    // $set an array\n    increment.call(self);\n  } else if (/\\.\\d+\\.|\\.\\d+$/.test(data.path)) {\n    // now handling $set, $unset\n    // subpath of array\n    self.$__.version = VERSION_WHERE;\n  }\n}\n\n/**\n * Compiles an update and where clause for a `val` with _atomics.\n *\n * @param {Document} self\n * @param {Object} where\n * @param {Object} delta\n * @param {Object} data\n * @param {Array} value\n * @api private\n */\n\nfunction handleAtomics(self, where, delta, data, value) {\n  if (delta.$set && delta.$set[data.path]) {\n    // $set has precedence over other atomics\n    return;\n  }\n\n  if (typeof value.$__getAtomics === 'function') {\n    value.$__getAtomics().forEach(function(atomic) {\n      const op = atomic[0];\n      const val = atomic[1];\n      operand(self, where, delta, data, val, op);\n    });\n    return;\n  }\n\n  // legacy support for plugins\n\n  const atomics = value[arrayAtomicsSymbol];\n  const ops = Object.keys(atomics);\n  let i = ops.length;\n  let val;\n  let op;\n\n  if (i === 0) {\n    // $set\n\n    if (utils.isMongooseObject(value)) {\n      value = value.toObject({ depopulate: 1, _isNested: true });\n    } else if (value.valueOf) {\n      value = value.valueOf();\n    }\n\n    return operand(self, where, delta, data, value);\n  }\n\n  function iter(mem) {\n    return utils.isMongooseObject(mem)\n      ? mem.toObject({ depopulate: 1, _isNested: true })\n      : mem;\n  }\n\n  while (i--) {\n    op = ops[i];\n    val = atomics[op];\n\n    if (utils.isMongooseObject(val)) {\n      val = val.toObject({ depopulate: true, transform: false, _isNested: true });\n    } else if (Array.isArray(val)) {\n      val = val.map(iter);\n    } else if (val.valueOf) {\n      val = val.valueOf();\n    }\n\n    if (op === '$addToSet') {\n      val = { $each: val };\n    }\n\n    operand(self, where, delta, data, val, op);\n  }\n}\n\n/**\n * Produces a special query document of the modified properties used in updates.\n *\n * @api private\n * @method $__delta\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.$__delta = function() {\n  const dirty = this.$__dirty();\n\n  const optimisticConcurrency = this.$__schema.options.optimisticConcurrency;\n  if (optimisticConcurrency) {\n    if (Array.isArray(optimisticConcurrency)) {\n      const optCon = new Set(optimisticConcurrency);\n      const modPaths = this.modifiedPaths();\n      if (modPaths.find(path => optCon.has(path))) {\n        this.$__.version = dirty.length ? VERSION_ALL : VERSION_WHERE;\n      }\n    } else {\n      this.$__.version = dirty.length ? VERSION_ALL : VERSION_WHERE;\n    }\n  }\n\n  if (!dirty.length && VERSION_ALL !== this.$__.version) {\n    return;\n  }\n  const where = {};\n  const delta = {};\n  const len = dirty.length;\n  const divergent = [];\n  let d = 0;\n\n  where._id = this._doc._id;\n  // If `_id` is an object, need to depopulate, but also need to be careful\n  // because `_id` can technically be null (see gh-6406)\n  if ((where && where._id && where._id.$__ || null) != null) {\n    where._id = where._id.toObject({ transform: false, depopulate: true });\n  }\n  for (; d < len; ++d) {\n    const data = dirty[d];\n    let value = data.value;\n    const match = checkDivergentArray(this, data.path, value);\n    if (match) {\n      divergent.push(match);\n      continue;\n    }\n\n    const pop = this.$populated(data.path, true);\n    if (!pop && this.$__.selected) {\n      // If any array was selected using an $elemMatch projection, we alter the path and where clause\n      // NOTE: MongoDB only supports projected $elemMatch on top level array.\n      const pathSplit = data.path.split('.');\n      const top = pathSplit[0];\n      if (this.$__.selected[top] && this.$__.selected[top].$elemMatch) {\n        // If the selected array entry was modified\n        if (pathSplit.length > 1 && pathSplit[1] == 0 && typeof where[top] === 'undefined') {\n          where[top] = this.$__.selected[top];\n          pathSplit[1] = '$';\n          data.path = pathSplit.join('.');\n        }\n        // if the selected array was modified in any other way throw an error\n        else {\n          divergent.push(data.path);\n          continue;\n        }\n      }\n    }\n\n    // If this path is set to default, and either this path or one of\n    // its parents is excluded, don't treat this path as dirty.\n    if (this.$isDefault(data.path) && this.$__.selected) {\n      if (data.path.indexOf('.') === -1 && isPathExcluded(this.$__.selected, data.path)) {\n        continue;\n      }\n\n      const pathsToCheck = parentPaths(data.path);\n      if (pathsToCheck.find(path => isPathExcluded(this.$__.isSelected, path))) {\n        continue;\n      }\n    }\n\n    if (divergent.length) continue;\n    if (value === undefined) {\n      operand(this, where, delta, data, 1, '$unset');\n    } else if (value === null) {\n      operand(this, where, delta, data, null);\n    } else if (utils.isMongooseArray(value) && value.$path() && value[arrayAtomicsSymbol]) {\n      // arrays and other custom types (support plugins etc)\n      handleAtomics(this, where, delta, data, value);\n    } else if (value[MongooseBuffer.pathSymbol] && Buffer.isBuffer(value)) {\n      // MongooseBuffer\n      value = value.toObject();\n      operand(this, where, delta, data, value);\n    } else {\n      if (this.$__.primitiveAtomics && this.$__.primitiveAtomics[data.path] != null) {\n        const val = this.$__.primitiveAtomics[data.path];\n        const op = firstKey(val);\n        operand(this, where, delta, data, val[op], op);\n      } else {\n        value = clone(value, {\n          depopulate: true,\n          transform: false,\n          virtuals: false,\n          getters: false,\n          omitUndefined: true,\n          _isNested: true\n        });\n        operand(this, where, delta, data, value);\n      }\n    }\n  }\n\n  if (divergent.length) {\n    return new DivergentArrayError(divergent);\n  }\n\n  if (this.$__.version) {\n    this.$__version(where, delta);\n  }\n\n  if (Object.keys(delta).length === 0) {\n    return [where, null];\n  }\n\n  return [where, delta];\n};\n\n/**\n * Determine if array was populated with some form of filter and is now\n * being updated in a manner which could overwrite data unintentionally.\n *\n * @see https://github.com/Automattic/mongoose/issues/1334\n * @param {Document} doc\n * @param {String} path\n * @param {Any} array\n * @return {String|undefined}\n * @api private\n */\n\nfunction checkDivergentArray(doc, path, array) {\n  // see if we populated this path\n  const pop = doc.$populated(path, true);\n\n  if (!pop && doc.$__.selected) {\n    // If any array was selected using an $elemMatch projection, we deny the update.\n    // NOTE: MongoDB only supports projected $elemMatch on top level array.\n    const top = path.split('.')[0];\n    if (doc.$__.selected[top + '.$']) {\n      return top;\n    }\n  }\n\n  if (!(pop && utils.isMongooseArray(array))) return;\n\n  // If the array was populated using options that prevented all\n  // documents from being returned (match, skip, limit) or they\n  // deselected the _id field, $pop and $set of the array are\n  // not safe operations. If _id was deselected, we do not know\n  // how to remove elements. $pop will pop off the _id from the end\n  // of the array in the db which is not guaranteed to be the\n  // same as the last element we have here. $set of the entire array\n  // would be similarly destructive as we never received all\n  // elements of the array and potentially would overwrite data.\n  const check = pop.options.match ||\n      pop.options.options && utils.object.hasOwnProperty(pop.options.options, 'limit') || // 0 is not permitted\n      pop.options.options && pop.options.options.skip || // 0 is permitted\n      pop.options.select && // deselected _id?\n      (pop.options.select._id === 0 ||\n      /\\s?-_id\\s?/.test(pop.options.select));\n\n  if (check) {\n    const atomics = array[arrayAtomicsSymbol];\n    if (Object.keys(atomics).length === 0 || atomics.$set || atomics.$pop) {\n      return path;\n    }\n  }\n}\n\n/**\n * Appends versioning to the where and update clauses.\n *\n * @api private\n * @method $__version\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.$__version = function(where, delta) {\n  const key = this.$__schema.options.versionKey;\n  if (where === true) {\n    // this is an insert\n    if (key) {\n      setDottedPath(delta, key, 0);\n      this.$__setValue(key, 0);\n    }\n    return;\n  }\n\n  if (key === false) {\n    return;\n  }\n\n  // updates\n\n  // only apply versioning if our versionKey was selected. else\n  // there is no way to select the correct version. we could fail\n  // fast here and force them to include the versionKey but\n  // thats a bit intrusive. can we do this automatically?\n\n  if (!this.$__isSelected(key)) {\n    return;\n  }\n\n  // $push $addToSet don't need the where clause set\n  if (VERSION_WHERE === (VERSION_WHERE & this.$__.version)) {\n    const value = this.$__getValue(key);\n    if (value != null) where[key] = value;\n  }\n\n  if (VERSION_INC === (VERSION_INC & this.$__.version)) {\n    if (get(delta.$set, key, null) != null) {\n      // Version key is getting set, means we'll increment the doc's version\n      // after a successful save, so we should set the incremented version so\n      // future saves don't fail (gh-5779)\n      ++delta.$set[key];\n    } else {\n      delta.$inc = delta.$inc || {};\n      delta.$inc[key] = 1;\n    }\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction increment() {\n  this.$__.version = VERSION_ALL;\n  return this;\n}\n\n/**\n * Signal that we desire an increment of this documents version.\n *\n * #### Example:\n *\n *     const doc = await Model.findById(id);\n *     doc.increment();\n *     await doc.save();\n *\n * @see versionKeys https://mongoosejs.com/docs/guide.html#versionKey\n * @memberOf Model\n * @method increment\n * @api public\n */\n\nModel.prototype.increment = increment;\n\n/**\n * Returns a query object\n *\n * @api private\n * @method $__where\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.$__where = function _where(where) {\n  where || (where = {});\n\n  if (!where._id) {\n    where._id = this._doc._id;\n  }\n\n  if (this._doc._id === void 0) {\n    return new MongooseError('No _id found on document!');\n  }\n\n  return where;\n};\n\n/**\n * Delete this document from the db.\n *\n * #### Example:\n *\n *     await product.deleteOne();\n *     await Product.findById(product._id); // null\n *\n * @return {Query} Query\n * @api public\n */\n\nModel.prototype.deleteOne = function deleteOne(options) {\n  if (typeof options === 'function' ||\n      typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.prototype.deleteOne() no longer accepts a callback');\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  if (options.hasOwnProperty('session')) {\n    this.$session(options.session);\n  }\n\n  const self = this;\n  const where = this.$__where();\n  if (where instanceof Error) {\n    throw where;\n  }\n  const query = self.constructor.deleteOne(where, options);\n\n  if (this.$session() != null) {\n    if (!('session' in query.options)) {\n      query.options.session = this.$session();\n    }\n  }\n\n  query.pre(function queryPreDeleteOne(cb) {\n    self.constructor._middleware.execPre('deleteOne', self, [self], cb);\n  });\n  query.pre(function callSubdocPreHooks(cb) {\n    each(self.$getAllSubdocs(), (subdoc, cb) => {\n      subdoc.constructor._middleware.execPre('deleteOne', subdoc, [subdoc], cb);\n    }, cb);\n  });\n  query.pre(function skipIfAlreadyDeleted(cb) {\n    if (self.$__.isDeleted) {\n      return cb(Kareem.skipWrappedFunction());\n    }\n    return cb();\n  });\n  query.post(function callSubdocPostHooks(cb) {\n    each(self.$getAllSubdocs(), (subdoc, cb) => {\n      subdoc.constructor._middleware.execPost('deleteOne', subdoc, [subdoc], {}, cb);\n    }, cb);\n  });\n  query.post(function queryPostDeleteOne(cb) {\n    self.constructor._middleware.execPost('deleteOne', self, [self], {}, cb);\n  });\n\n  return query;\n};\n\n/**\n * Returns the model instance used to create this document if no `name` specified.\n * If `name` specified, returns the model with the given `name`.\n *\n * #### Example:\n *\n *     const doc = new Tank({});\n *     doc.$model() === Tank; // true\n *     await doc.$model('User').findById(id);\n *\n * @param {String} [name] model name\n * @method $model\n * @api public\n * @return {Model}\n */\n\nModel.prototype.$model = function $model(name) {\n  if (arguments.length === 0) {\n    return this.constructor;\n  }\n  return this[modelDbSymbol].model(name);\n};\n\n/**\n * Returns the model instance used to create this document if no `name` specified.\n * If `name` specified, returns the model with the given `name`.\n *\n * #### Example:\n *\n *     const doc = new Tank({});\n *     doc.$model() === Tank; // true\n *     await doc.$model('User').findById(id);\n *\n * @param {String} [name] model name\n * @method model\n * @api public\n * @return {Model}\n */\n\nModel.prototype.model = Model.prototype.$model;\n\n/**\n * Returns a document with `_id` only if at least one document exists in the database that matches\n * the given `filter`, and `null` otherwise.\n *\n * Under the hood, `MyModel.exists({ answer: 42 })` is equivalent to\n * `MyModel.findOne({ answer: 42 }).select({ _id: 1 }).lean()`\n *\n * #### Example:\n *\n *     await Character.deleteMany({});\n *     await Character.create({ name: 'Jean-Luc Picard' });\n *\n *     await Character.exists({ name: /picard/i }); // { _id: ... }\n *     await Character.exists({ name: /riker/i }); // null\n *\n * This function triggers the following middleware.\n *\n * - `findOne()`\n *\n * @param {Object} filter\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @return {Query}\n */\n\nModel.exists = function exists(filter, options) {\n  _checkContext(this, 'exists');\n  if (typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.exists() no longer accepts a callback');\n  }\n\n  const query = this.findOne(filter).\n    select({ _id: 1 }).\n    lean().\n    setOptions(options);\n\n  return query;\n};\n\n/**\n * Adds a discriminator type.\n *\n * #### Example:\n *\n *     function BaseSchema() {\n *       Schema.apply(this, arguments);\n *\n *       this.add({\n *         name: String,\n *         createdAt: Date\n *       });\n *     }\n *     util.inherits(BaseSchema, Schema);\n *\n *     const PersonSchema = new BaseSchema();\n *     const BossSchema = new BaseSchema({ department: String });\n *\n *     const Person = mongoose.model('Person', PersonSchema);\n *     const Boss = Person.discriminator('Boss', BossSchema);\n *     new Boss().__t; // \"Boss\". `__t` is the default `discriminatorKey`\n *\n *     const employeeSchema = new Schema({ boss: ObjectId });\n *     const Employee = Person.discriminator('Employee', employeeSchema, 'staff');\n *     new Employee().__t; // \"staff\" because of 3rd argument above\n *\n * @param {String} name discriminator model name\n * @param {Schema} schema discriminator model schema\n * @param {Object|String} [options] If string, same as `options.value`.\n * @param {String} [options.value] the string stored in the `discriminatorKey` property. If not specified, Mongoose uses the `name` parameter.\n * @param {Boolean} [options.clone=true] By default, `discriminator()` clones the given `schema`. Set to `false` to skip cloning.\n * @param {Boolean} [options.overwriteModels=false] by default, Mongoose does not allow you to define a discriminator with the same name as another discriminator. Set this to allow overwriting discriminators with the same name.\n * @param {Boolean} [options.mergeHooks=true] By default, Mongoose merges the base schema's hooks with the discriminator schema's hooks. Set this option to `false` to make Mongoose use the discriminator schema's hooks instead.\n * @param {Boolean} [options.mergePlugins=true] By default, Mongoose merges the base schema's plugins with the discriminator schema's plugins. Set this option to `false` to make Mongoose use the discriminator schema's plugins instead.\n * @return {Model} The newly created discriminator model\n * @api public\n */\n\nModel.discriminator = function(name, schema, options) {\n  let model;\n  if (typeof name === 'function') {\n    model = name;\n    name = utils.getFunctionName(model);\n    if (!(model.prototype instanceof Model)) {\n      throw new MongooseError('The provided class ' + name + ' must extend Model');\n    }\n  }\n\n  options = options || {};\n  const value = utils.isPOJO(options) ? options.value : options;\n  const clone = typeof options.clone === 'boolean' ? options.clone : true;\n  const mergePlugins = typeof options.mergePlugins === 'boolean' ? options.mergePlugins : true;\n\n  _checkContext(this, 'discriminator');\n\n  if (utils.isObject(schema) && !schema.instanceOfSchema) {\n    schema = new Schema(schema);\n  }\n  if (schema instanceof Schema && clone) {\n    schema = schema.clone();\n  }\n\n  schema = discriminator(this, name, schema, value, mergePlugins, options.mergeHooks);\n  if (this.db.models[name] && !schema.options.overwriteModels) {\n    throw new OverwriteModelError(name);\n  }\n\n  schema.$isRootDiscriminator = true;\n  schema.$globalPluginsApplied = true;\n\n  model = this.db.model(model || name, schema, this.$__collection.name);\n  this.discriminators[name] = model;\n  const d = this.discriminators[name];\n  Object.setPrototypeOf(d.prototype, this.prototype);\n  Object.defineProperty(d, 'baseModelName', {\n    value: this.modelName,\n    configurable: true,\n    writable: false\n  });\n\n  // apply methods and statics\n  applyMethods(d, schema);\n  applyStatics(d, schema);\n\n  if (this[subclassedSymbol] != null) {\n    for (const submodel of this[subclassedSymbol]) {\n      submodel.discriminators = submodel.discriminators || {};\n      submodel.discriminators[name] =\n        model.__subclass(model.db, schema, submodel.collection.name);\n    }\n  }\n\n  return d;\n};\n\n/**\n * Make sure `this` is a model\n * @api private\n */\n\nfunction _checkContext(ctx, fnName) {\n  // Check context, because it is easy to mistakenly type\n  // `new Model.discriminator()` and get an incomprehensible error\n  if (ctx == null || ctx === global) {\n    throw new MongooseError('`Model.' + fnName + '()` cannot run without a ' +\n      'model as `this`. Make sure you are calling `MyModel.' + fnName + '()` ' +\n      'where `MyModel` is a Mongoose model.');\n  } else if (ctx[modelSymbol] == null) {\n    throw new MongooseError('`Model.' + fnName + '()` cannot run without a ' +\n      'model as `this`. Make sure you are not calling ' +\n      '`new Model.' + fnName + '()`');\n  }\n}\n\n// Model (class) features\n\n/*!\n * Give the constructor the ability to emit events.\n */\n\nfor (const i in EventEmitter.prototype) {\n  Model[i] = EventEmitter.prototype[i];\n}\n\n/**\n * This function is responsible for initializing the underlying connection in MongoDB based on schema options.\n * This function performs the following operations:\n *\n * - `createCollection()` unless [`autoCreate`](https://mongoosejs.com/docs/guide.html#autoCreate) option is turned off\n * - `ensureIndexes()` unless [`autoIndex`](https://mongoosejs.com/docs/guide.html#autoIndex) option is turned off\n * - `createSearchIndex()` on all schema search indexes if `autoSearchIndex` is enabled.\n *\n * Mongoose calls this function automatically when a model is a created using\n * [`mongoose.model()`](https://mongoosejs.com/docs/api/mongoose.html#Mongoose.prototype.model()) or\n * [`connection.model()`](https://mongoosejs.com/docs/api/connection.html#Connection.prototype.model()), so you\n * don't need to call `init()` to trigger index builds.\n *\n * However, you _may_ need to call `init()`  to get back a promise that will resolve when your indexes are finished.\n * Calling `await Model.init()` is helpful if you need to wait for indexes to build before continuing.\n * For example, if you want to wait for unique indexes to build before continuing with a test case.\n *\n * #### Example:\n *\n *     const eventSchema = new Schema({ thing: { type: 'string', unique: true } })\n *     // This calls `Event.init()` implicitly, so you don't need to call\n *     // `Event.init()` on your own.\n *     const Event = mongoose.model('Event', eventSchema);\n *\n *     await Event.init();\n *     console.log('Indexes are done building!');\n *\n * @api public\n * @returns {Promise}\n */\n\nModel.init = function init() {\n  _checkContext(this, 'init');\n  if (typeof arguments[0] === 'function') {\n    throw new MongooseError('Model.init() no longer accepts a callback');\n  }\n\n  this.schema.emit('init', this);\n\n  if (this.$init != null) {\n    return this.$init;\n  }\n\n  const conn = this.db;\n  const _ensureIndexes = async() => {\n    const autoIndex = utils.getOption(\n      'autoIndex',\n      this.schema.options,\n      conn.config,\n      conn.base.options\n    );\n    if (!autoIndex) {\n      return;\n    }\n    return await this.ensureIndexes({ _automatic: true });\n  };\n  const _createSearchIndexes = async() => {\n    const autoSearchIndex = utils.getOption(\n      'autoSearchIndex',\n      this.schema.options,\n      conn.config,\n      conn.base.options\n    );\n    if (!autoSearchIndex) {\n      return;\n    }\n\n    const results = [];\n    for (const searchIndex of this.schema._searchIndexes) {\n      results.push(await this.createSearchIndex(searchIndex));\n    }\n    return results;\n  };\n  const _createCollection = async() => {\n    if ((conn.readyState === STATES.connecting || conn.readyState === STATES.disconnected) && conn._shouldBufferCommands()) {\n      await new Promise(resolve => {\n        conn._queue.push({ fn: resolve });\n      });\n    }\n    const autoCreate = utils.getOption(\n      'autoCreate',\n      this.schema.options,\n      conn.config,\n      conn.base.options\n    );\n    if (!autoCreate) {\n      return;\n    }\n    return await this.createCollection();\n  };\n\n  this.$init = _createCollection().\n    then(() => _ensureIndexes()).\n    then(() => _createSearchIndexes());\n\n  const _catch = this.$init.catch;\n  const _this = this;\n  this.$init.catch = function() {\n    _this.$caught = true;\n    return _catch.apply(_this.$init, arguments);\n  };\n\n  return this.$init;\n};\n\n\n/**\n * Create the collection for this model. By default, if no indexes are specified,\n * mongoose will not create the collection for the model until any documents are\n * created. Use this method to create the collection explicitly.\n *\n * Note 1: You may need to call this before starting a transaction\n * See https://www.mongodb.com/docs/manual/core/transactions/#transactions-and-operations\n *\n * Note 2: You don't have to call this if your schema contains index or unique field.\n * In that case, just use `Model.init()`\n *\n * #### Example:\n *\n *     const userSchema = new Schema({ name: String })\n *     const User = mongoose.model('User', userSchema);\n *\n *     User.createCollection().then(function(collection) {\n *       console.log('Collection is created!');\n *     });\n *\n * @api public\n * @param {Object} [options] see [MongoDB driver docs](https://mongodb.github.io/node-mongodb-native/4.9/classes/Db.html#createCollection)\n * @returns {Promise}\n */\n\nModel.createCollection = async function createCollection(options) {\n  _checkContext(this, 'createCollection');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.createCollection() no longer accepts a callback');\n  }\n\n  const shouldSkip = await new Promise((resolve, reject) => {\n    this.hooks.execPre('createCollection', this, [options], (err) => {\n      if (err != null) {\n        if (err instanceof Kareem.skipWrappedFunction) {\n          return resolve(true);\n        }\n        return reject(err);\n      }\n      resolve();\n    });\n  });\n\n  const collectionOptions = this &&\n    this.schema &&\n    this.schema.options &&\n    this.schema.options.collectionOptions;\n  if (collectionOptions != null) {\n    options = Object.assign({}, collectionOptions, options);\n  }\n\n  const schemaCollation = this &&\n    this.schema &&\n    this.schema.options &&\n    this.schema.options.collation;\n  if (schemaCollation != null) {\n    options = Object.assign({ collation: schemaCollation }, options);\n  }\n  const capped = this &&\n    this.schema &&\n    this.schema.options &&\n    this.schema.options.capped;\n  if (capped != null) {\n    if (typeof capped === 'number') {\n      options = Object.assign({ capped: true, size: capped }, options);\n    } else if (typeof capped === 'object') {\n      options = Object.assign({ capped: true }, capped, options);\n    }\n  }\n  const timeseries = this &&\n    this.schema &&\n    this.schema.options &&\n    this.schema.options.timeseries;\n  if (timeseries != null) {\n    options = Object.assign({ timeseries }, options);\n    if (options.expireAfterSeconds != null) {\n      // do nothing\n    } else if (options.expires != null) {\n      utils.expires(options);\n    } else if (this.schema.options.expireAfterSeconds != null) {\n      options.expireAfterSeconds = this.schema.options.expireAfterSeconds;\n    } else if (this.schema.options.expires != null) {\n      options.expires = this.schema.options.expires;\n      utils.expires(options);\n    }\n  }\n\n  const clusteredIndex = this &&\n    this.schema &&\n    this.schema.options &&\n    this.schema.options.clusteredIndex;\n  if (clusteredIndex != null) {\n    options = Object.assign({ clusteredIndex: { ...clusteredIndex, unique: true } }, options);\n  }\n\n  try {\n    if (!shouldSkip) {\n      await this.db.createCollection(this.$__collection.collectionName, options);\n    }\n  } catch (err) {\n    if (err != null && (err.name !== 'MongoServerError' || err.code !== 48)) {\n      await new Promise((resolve, reject) => {\n        const _opts = { error: err };\n        this.hooks.execPost('createCollection', this, [null], _opts, (err) => {\n          if (err != null) {\n            return reject(err);\n          }\n          resolve();\n        });\n      });\n    }\n  }\n\n  await new Promise((resolve, reject) => {\n    this.hooks.execPost('createCollection', this, [this.$__collection], (err) => {\n      if (err != null) {\n        return reject(err);\n      }\n      resolve();\n    });\n  });\n\n  return this.$__collection;\n};\n\n/**\n * Makes the indexes in MongoDB match the indexes defined in this model's\n * schema. This function will drop any indexes that are not defined in\n * the model's schema except the `_id` index, and build any indexes that\n * are in your schema but not in MongoDB.\n *\n * See the [introductory blog post](https://thecodebarbarian.com/whats-new-in-mongoose-5-2-syncindexes)\n * for more information.\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: { type: String, unique: true } });\n *     const Customer = mongoose.model('Customer', schema);\n *     await Customer.collection.createIndex({ age: 1 }); // Index is not in schema\n *     // Will drop the 'age' index and create an index on `name`\n *     await Customer.syncIndexes();\n *\n * You should be careful about running `syncIndexes()` on production applications under heavy load,\n * because index builds are expensive operations, and unexpected index drops can lead to degraded\n * performance. Before running `syncIndexes()`, you can use the [`diffIndexes()` function](#Model.diffIndexes())\n * to check what indexes `syncIndexes()` will drop and create.\n *\n * #### Example:\n *\n *     const { toDrop, toCreate } = await Model.diffIndexes();\n *     toDrop; // Array of strings containing names of indexes that `syncIndexes()` will drop\n *     toCreate; // Array of strings containing names of indexes that `syncIndexes()` will create\n *\n * @param {Object} [options] options to pass to `ensureIndexes()`\n * @param {Boolean} [options.background=null] if specified, overrides each index's `background` property\n * @return {Promise}\n * @api public\n */\n\nModel.syncIndexes = async function syncIndexes(options) {\n  _checkContext(this, 'syncIndexes');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.syncIndexes() no longer accepts a callback');\n  }\n\n  const model = this;\n\n  try {\n    await model.createCollection();\n  } catch (err) {\n    if (err != null && (err.name !== 'MongoServerError' || err.code !== 48)) {\n      throw err;\n    }\n  }\n\n  const diffIndexesResult = await model.diffIndexes();\n  const dropped = await model.cleanIndexes({ ...options, toDrop: diffIndexesResult.toDrop });\n  await model.createIndexes({ ...options, toCreate: diffIndexesResult.toCreate });\n\n  return dropped;\n};\n\n/**\n * Create an [Atlas search index](https://www.mongodb.com/docs/atlas/atlas-search/create-index/).\n * This function only works when connected to MongoDB Atlas.\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: { type: String, unique: true } });\n *     const Customer = mongoose.model('Customer', schema);\n *     await Customer.createSearchIndex({ name: 'test', definition: { mappings: { dynamic: true } } });\n *\n * @param {Object} description index options, including `name` and `definition`\n * @param {String} description.name\n * @param {Object} description.definition\n * @return {Promise}\n * @api public\n */\n\nModel.createSearchIndex = async function createSearchIndex(description) {\n  _checkContext(this, 'createSearchIndex');\n\n  return await this.$__collection.createSearchIndex(description);\n};\n\n/**\n * Update an existing [Atlas search index](https://www.mongodb.com/docs/atlas/atlas-search/create-index/).\n * This function only works when connected to MongoDB Atlas.\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: { type: String, unique: true } });\n *     const Customer = mongoose.model('Customer', schema);\n *     await Customer.updateSearchIndex('test', { mappings: { dynamic: true } });\n *\n * @param {String} name\n * @param {Object} definition\n * @return {Promise}\n * @api public\n */\n\nModel.updateSearchIndex = async function updateSearchIndex(name, definition) {\n  _checkContext(this, 'updateSearchIndex');\n\n  return await this.$__collection.updateSearchIndex(name, definition);\n};\n\n/**\n * Delete an existing [Atlas search index](https://www.mongodb.com/docs/atlas/atlas-search/create-index/) by name.\n * This function only works when connected to MongoDB Atlas.\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: { type: String, unique: true } });\n *     const Customer = mongoose.model('Customer', schema);\n *     await Customer.dropSearchIndex('test');\n *\n * @param {String} name\n * @return {Promise}\n * @api public\n */\n\nModel.dropSearchIndex = async function dropSearchIndex(name) {\n  _checkContext(this, 'dropSearchIndex');\n\n  return await this.$__collection.dropSearchIndex(name);\n};\n\n/**\n * Does a dry-run of `Model.syncIndexes()`, returning the indexes that `syncIndexes()` would drop and create if you were to run `syncIndexes()`.\n *\n * #### Example:\n *\n *     const { toDrop, toCreate } = await Model.diffIndexes();\n *     toDrop; // Array of strings containing names of indexes that `syncIndexes()` will drop\n *     toCreate; // Array of strings containing names of indexes that `syncIndexes()` will create\n *\n * @param {Object} [options]\n * @return {Promise<Object>} contains the indexes that would be dropped in MongoDB and indexes that would be created in MongoDB as `{ toDrop: string[], toCreate: string[] }`.\n */\n\nModel.diffIndexes = async function diffIndexes() {\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.syncIndexes() no longer accepts a callback');\n  }\n\n  const model = this;\n\n  let dbIndexes = await model.listIndexes().catch(err => {\n    if (err.codeName == 'NamespaceNotFound') {\n      return undefined;\n    }\n    throw err;\n  });\n  if (dbIndexes === undefined) {\n    dbIndexes = [];\n  }\n  dbIndexes = getRelatedDBIndexes(model, dbIndexes);\n\n  const schema = model.schema;\n  const schemaIndexes = getRelatedSchemaIndexes(model, schema.indexes());\n\n  const toDrop = getIndexesToDrop(schema, schemaIndexes, dbIndexes);\n  const toCreate = getIndexesToCreate(schema, schemaIndexes, dbIndexes, toDrop);\n\n  return { toDrop, toCreate };\n};\n\nfunction getIndexesToCreate(schema, schemaIndexes, dbIndexes, toDrop) {\n  const toCreate = [];\n\n  for (const [schemaIndexKeysObject, schemaIndexOptions] of schemaIndexes) {\n    let found = false;\n\n    const options = decorateDiscriminatorIndexOptions(schema, clone(schemaIndexOptions));\n\n    for (const index of dbIndexes) {\n      if (isDefaultIdIndex(index)) {\n        continue;\n      }\n      if (\n        isIndexEqual(schemaIndexKeysObject, options, index) &&\n        !toDrop.includes(index.name)\n      ) {\n        found = true;\n        break;\n      }\n    }\n\n    if (!found) {\n      toCreate.push(schemaIndexKeysObject);\n    }\n  }\n\n  return toCreate;\n}\n\nfunction getIndexesToDrop(schema, schemaIndexes, dbIndexes) {\n  const toDrop = [];\n\n  for (const dbIndex of dbIndexes) {\n    let found = false;\n    // Never try to drop `_id` index, MongoDB server doesn't allow it\n    if (isDefaultIdIndex(dbIndex)) {\n      continue;\n    }\n\n    for (const [schemaIndexKeysObject, schemaIndexOptions] of schemaIndexes) {\n      const options = decorateDiscriminatorIndexOptions(schema, clone(schemaIndexOptions));\n      applySchemaCollation(schemaIndexKeysObject, options, schema.options);\n\n      if (isIndexEqual(schemaIndexKeysObject, options, dbIndex)) {\n        found = true;\n        break;\n      }\n    }\n\n    if (!found) {\n      toDrop.push(dbIndex.name);\n    }\n  }\n\n  return toDrop;\n}\n/**\n * Deletes all indexes that aren't defined in this model's schema. Used by\n * `syncIndexes()`.\n *\n * The returned promise resolves to a list of the dropped indexes' names as an array\n *\n * @param {Function} [callback] optional callback\n * @return {Promise|undefined} Returns `undefined` if callback is specified, returns a promise if no callback.\n * @api public\n */\n\nModel.cleanIndexes = async function cleanIndexes(options) {\n  _checkContext(this, 'cleanIndexes');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.cleanIndexes() no longer accepts a callback');\n  }\n  const model = this;\n\n  const collection = model.$__collection;\n\n  if (Array.isArray(options && options.toDrop)) {\n    const res = await _dropIndexes(options.toDrop, collection);\n    return res;\n  }\n\n  const res = await model.diffIndexes();\n  return await _dropIndexes(res.toDrop, collection);\n};\n\nasync function _dropIndexes(toDrop, collection) {\n  if (toDrop.length === 0) {\n    return [];\n  }\n\n  await Promise.all(toDrop.map(indexName => collection.dropIndex(indexName)));\n  return toDrop;\n}\n\n/**\n * Lists the indexes currently defined in MongoDB. This may or may not be\n * the same as the indexes defined in your schema depending on whether you\n * use the [`autoIndex` option](https://mongoosejs.com/docs/guide.html#autoIndex) and if you\n * build indexes manually.\n *\n * @return {Promise}\n * @api public\n */\n\nModel.listIndexes = async function listIndexes() {\n  _checkContext(this, 'listIndexes');\n  if (typeof arguments[0] === 'function') {\n    throw new MongooseError('Model.listIndexes() no longer accepts a callback');\n  }\n\n  if (this.$__collection.buffer) {\n    await new Promise(resolve => {\n      this.$__collection.addQueue(resolve);\n    });\n  }\n\n  return this.$__collection.listIndexes().toArray();\n};\n\n/**\n * Sends `createIndex` commands to mongo for each index declared in the schema.\n * The `createIndex` commands are sent in series.\n *\n * #### Example:\n *\n *     await Event.ensureIndexes();\n *\n * After completion, an `index` event is emitted on this `Model` passing an error if one occurred.\n *\n * #### Example:\n *\n *     const eventSchema = new Schema({ thing: { type: 'string', unique: true } })\n *     const Event = mongoose.model('Event', eventSchema);\n *\n *     Event.on('index', function (err) {\n *       if (err) console.error(err); // error occurred during index creation\n *     });\n *\n * _NOTE: It is not recommended that you run this in production. Index creation may impact database performance depending on your load. Use with caution._\n *\n * @param {Object} [options] internal options\n * @return {Promise}\n * @api public\n */\n\nModel.ensureIndexes = async function ensureIndexes(options) {\n  _checkContext(this, 'ensureIndexes');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.ensureIndexes() no longer accepts a callback');\n  }\n\n  await new Promise((resolve, reject) => {\n    _ensureIndexes(this, options, (err) => {\n      if (err != null) {\n        return reject(err);\n      }\n      resolve();\n    });\n  });\n};\n\n/**\n * Similar to `ensureIndexes()`, except for it uses the [`createIndex`](https://mongodb.github.io/node-mongodb-native/4.9/classes/Db.html#createIndex)\n * function.\n *\n * @param {Object} [options] internal options\n * @return {Promise}\n * @api public\n */\n\nModel.createIndexes = async function createIndexes(options) {\n  _checkContext(this, 'createIndexes');\n\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.createIndexes() no longer accepts a callback');\n  }\n\n  return this.ensureIndexes(options);\n};\n\n\n/*!\n * ignore\n */\n\nfunction _ensureIndexes(model, options, callback) {\n  const indexes = model.schema.indexes();\n  let indexError;\n\n  options = options || {};\n  const done = function(err) {\n    if (err && !model.$caught) {\n      model.emit('error', err);\n    }\n    model.emit('index', err || indexError);\n    callback && callback(err || indexError);\n  };\n\n  for (const index of indexes) {\n    if (isDefaultIdIndex(index)) {\n      utils.warn('mongoose: Cannot specify a custom index on `_id` for ' +\n        'model name \"' + model.modelName + '\", ' +\n        'MongoDB does not allow overwriting the default `_id` index. See ' +\n        'https://bit.ly/mongodb-id-index');\n    }\n  }\n\n  if (!indexes.length) {\n    immediate(function() {\n      done();\n    });\n    return;\n  }\n  // Indexes are created one-by-one to support how MongoDB < 2.4 deals\n  // with background indexes.\n\n  const indexSingleDone = function(err, fields, options, name) {\n    model.emit('index-single-done', err, fields, options, name);\n  };\n  const indexSingleStart = function(fields, options) {\n    model.emit('index-single-start', fields, options);\n  };\n\n  const baseSchema = model.schema._baseSchema;\n  const baseSchemaIndexes = baseSchema ? baseSchema.indexes() : [];\n\n  immediate(function() {\n    // If buffering is off, do this manually.\n    if (options._automatic && !model.collection.collection) {\n      model.collection.addQueue(create, []);\n    } else {\n      create();\n    }\n  });\n\n\n  function create() {\n    if (options._automatic) {\n      if (model.schema.options.autoIndex === false ||\n          (model.schema.options.autoIndex == null && model.db.config.autoIndex === false)) {\n        return done();\n      }\n    }\n\n    const index = indexes.shift();\n    if (!index) {\n      return done();\n    }\n    if (options._automatic && index[1]._autoIndex === false) {\n      return create();\n    }\n\n    if (baseSchemaIndexes.find(i => utils.deepEqual(i, index))) {\n      return create();\n    }\n\n    const indexFields = clone(index[0]);\n    const indexOptions = clone(index[1]);\n\n    delete indexOptions._autoIndex;\n    decorateDiscriminatorIndexOptions(model.schema, indexOptions);\n    applyWriteConcern(model.schema, indexOptions);\n    applySchemaCollation(indexFields, indexOptions, model.schema.options);\n\n    indexSingleStart(indexFields, options);\n\n    if ('background' in options) {\n      indexOptions.background = options.background;\n    }\n\n    if ('toCreate' in options) {\n      if (options.toCreate.length === 0) {\n        return done();\n      }\n    }\n\n    model.collection.createIndex(indexFields, indexOptions).then(\n      name => {\n        indexSingleDone(null, indexFields, indexOptions, name);\n        create();\n      },\n      err => {\n        if (!indexError) {\n          indexError = err;\n        }\n        if (!model.$caught) {\n          model.emit('error', err);\n        }\n\n        indexSingleDone(err, indexFields, indexOptions);\n        create();\n      }\n    );\n  }\n}\n\n/**\n * Schema the model uses.\n *\n * @property schema\n * @static\n * @api public\n * @memberOf Model\n */\n\nModel.schema;\n\n/**\n * Connection instance the model uses.\n *\n * @property db\n * @static\n * @api public\n * @memberOf Model\n */\n\nModel.db;\n\n/**\n * Collection the model uses.\n *\n * @property collection\n * @api public\n * @memberOf Model\n */\n\nModel.collection;\n\n/**\n * Internal collection the model uses.\n *\n * @property collection\n * @api private\n * @memberOf Model\n */\nModel.$__collection;\n\n/**\n * Base Mongoose instance the model uses.\n *\n * @property base\n * @api public\n * @memberOf Model\n */\n\nModel.base;\n\n/**\n * Registered discriminators for this model.\n *\n * @property discriminators\n * @api public\n * @memberOf Model\n */\n\nModel.discriminators;\n\n/**\n * Translate any aliases fields/conditions so the final query or document object is pure\n *\n * #### Example:\n *\n *     await Character.find(Character.translateAliases({\n *        '名': 'Eddard Stark' // Alias for 'name'\n *     });\n *\n * By default, `translateAliases()` overwrites raw fields with aliased fields.\n * So if `n` is an alias for `name`, `{ n: 'alias', name: 'raw' }` will resolve to `{ name: 'alias' }`.\n * However, you can set the `errorOnDuplicates` option to throw an error if there are potentially conflicting paths.\n * The `translateAliases` option for queries uses `errorOnDuplicates`.\n *\n * #### Note:\n *\n * Only translate arguments of object type anything else is returned raw\n *\n * @param {Object} fields fields/conditions that may contain aliased keys\n * @param {Boolean} [errorOnDuplicates] if true, throw an error if there's both a key and an alias for that key in `fields`\n * @return {Object} the translated 'pure' fields/conditions\n */\nModel.translateAliases = function translateAliases(fields, errorOnDuplicates) {\n  _checkContext(this, 'translateAliases');\n\n  const translate = (key, value) => {\n    let alias;\n    const translated = [];\n    const fieldKeys = key.split('.');\n    let currentSchema = this.schema;\n    for (const i in fieldKeys) {\n      const name = fieldKeys[i];\n      if (currentSchema && currentSchema.aliases[name]) {\n        alias = currentSchema.aliases[name];\n        if (errorOnDuplicates && alias in fields) {\n          throw new MongooseError(`Provided object has both field \"${name}\" and its alias \"${alias}\"`);\n        }\n        // Alias found,\n        translated.push(alias);\n      } else {\n        alias = name;\n        // Alias not found, so treat as un-aliased key\n        translated.push(name);\n      }\n\n      // Check if aliased path is a schema\n      if (currentSchema && currentSchema.paths[alias]) {\n        currentSchema = currentSchema.paths[alias].schema;\n      }\n      else\n        currentSchema = null;\n    }\n\n    const translatedKey = translated.join('.');\n    if (fields instanceof Map)\n      fields.set(translatedKey, value);\n    else\n      fields[translatedKey] = value;\n\n    if (translatedKey !== key) {\n      // We'll be using the translated key instead\n      if (fields instanceof Map) {\n        // Delete from map\n        fields.delete(key);\n      } else {\n        // Delete from object\n        delete fields[key]; // We'll be using the translated key instead\n      }\n    }\n    return fields;\n  };\n\n  if (typeof fields === 'object') {\n    // Fields is an object (query conditions or document fields)\n    if (fields instanceof Map) {\n      // A Map was supplied\n      for (const field of new Map(fields)) {\n        fields = translate(field[0], field[1]);\n      }\n    } else {\n      // Infer a regular object was supplied\n      for (const key of Object.keys(fields)) {\n        fields = translate(key, fields[key]);\n        if (key[0] === '$') {\n          if (Array.isArray(fields[key])) {\n            for (const i in fields[key]) {\n              // Recursively translate nested queries\n              fields[key][i] = this.translateAliases(fields[key][i]);\n            }\n          } else {\n            this.translateAliases(fields[key]);\n          }\n        }\n      }\n    }\n\n    return fields;\n  } else {\n    // Don't know typeof fields\n    return fields;\n  }\n};\n\n/**\n * Deletes the first document that matches `conditions` from the collection.\n * It returns an object with the property `deletedCount` indicating how many documents were deleted.\n * Behaves like `remove()`, but deletes at most one document regardless of the\n * `single` option.\n *\n * #### Example:\n *\n *     await Character.deleteOne({ name: 'Eddard Stark' }); // returns {deletedCount: 1}\n *\n * #### Note:\n *\n * This function triggers `deleteOne` query hooks. Read the\n * [middleware docs](https://mongoosejs.com/docs/middleware.html#naming) to learn more.\n *\n * @param {Object} conditions\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @api public\n */\n\nModel.deleteOne = function deleteOne(conditions, options) {\n  _checkContext(this, 'deleteOne');\n\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.prototype.deleteOne() no longer accepts a callback');\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.setOptions(options);\n\n  return mq.deleteOne(conditions);\n};\n\n/**\n * Deletes all of the documents that match `conditions` from the collection.\n * It returns an object with the property `deletedCount` containing the number of documents deleted.\n * Behaves like `remove()`, but deletes all documents that match `conditions`\n * regardless of the `single` option.\n *\n * #### Example:\n *\n *     await Character.deleteMany({ name: /Stark/, age: { $gte: 18 } }); // returns {deletedCount: x} where x is the number of documents deleted.\n *\n * #### Note:\n *\n * This function triggers `deleteMany` query hooks. Read the\n * [middleware docs](https://mongoosejs.com/docs/middleware.html#naming) to learn more.\n *\n * @param {Object} conditions\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @api public\n */\n\nModel.deleteMany = function deleteMany(conditions, options) {\n  _checkContext(this, 'deleteMany');\n\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.deleteMany() no longer accepts a callback');\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.setOptions(options);\n\n  return mq.deleteMany(conditions);\n};\n\n/**\n * Finds documents.\n *\n * Mongoose casts the `filter` to match the model's schema before the command is sent.\n * See our [query casting tutorial](https://mongoosejs.com/docs/tutorials/query_casting.html) for\n * more information on how Mongoose casts `filter`.\n *\n * #### Example:\n *\n *     // find all documents\n *     await MyModel.find({});\n *\n *     // find all documents named john and at least 18\n *     await MyModel.find({ name: 'john', age: { $gte: 18 } }).exec();\n *\n *     // executes, name LIKE john and only selecting the \"name\" and \"friends\" fields\n *     await MyModel.find({ name: /john/i }, 'name friends').exec();\n *\n *     // passing options\n *     await MyModel.find({ name: /john/i }, null, { skip: 10 }).exec();\n *\n * @param {Object|ObjectId} filter\n * @param {Object|String|String[]} [projection] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @see field selection https://mongoosejs.com/docs/api/query.html#Query.prototype.select()\n * @see query casting https://mongoosejs.com/docs/tutorials/query_casting.html\n * @api public\n */\n\nModel.find = function find(conditions, projection, options) {\n  _checkContext(this, 'find');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function' || typeof arguments[3] === 'function') {\n    throw new MongooseError('Model.find() no longer accepts a callback');\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(projection);\n  mq.setOptions(options);\n\n  return mq.find(conditions);\n};\n\n/**\n * Finds a single document by its _id field. `findById(id)` is almost*\n * equivalent to `findOne({ _id: id })`. If you want to query by a document's\n * `_id`, use `findById()` instead of `findOne()`.\n *\n * The `id` is cast based on the Schema before sending the command.\n *\n * This function triggers the following middleware.\n *\n * - `findOne()`\n *\n * \\* Except for how it treats `undefined`. If you use `findOne()`, you'll see\n * that `findOne(undefined)` and `findOne({ _id: undefined })` are equivalent\n * to `findOne({})` and return arbitrary documents. However, mongoose\n * translates `findById(undefined)` into `findOne({ _id: null })`.\n *\n * #### Example:\n *\n *     // Find the adventure with the given `id`, or `null` if not found\n *     await Adventure.findById(id).exec();\n *\n *     // select only the adventures name and length\n *     await Adventure.findById(id, 'name length').exec();\n *\n * @param {Any} id value of `_id` to query by\n * @param {Object|String|String[]} [projection] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @return {Query}\n * @see field selection https://mongoosejs.com/docs/api/query.html#Query.prototype.select()\n * @see lean queries https://mongoosejs.com/docs/tutorials/lean.html\n * @see findById in Mongoose https://masteringjs.io/tutorials/mongoose/find-by-id\n * @api public\n */\n\nModel.findById = function findById(id, projection, options) {\n  _checkContext(this, 'findById');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.findById() no longer accepts a callback');\n  }\n\n  if (typeof id === 'undefined') {\n    id = null;\n  }\n\n  return this.findOne({ _id: id }, projection, options);\n};\n\n/**\n * Finds one document.\n *\n * The `conditions` are cast to their respective SchemaTypes before the command is sent.\n *\n * *Note:* `conditions` is optional, and if `conditions` is null or undefined,\n * mongoose will send an empty `findOne` command to MongoDB, which will return\n * an arbitrary document. If you're querying by `_id`, use `findById()` instead.\n *\n * #### Example:\n *\n *     // Find one adventure whose `country` is 'Croatia', otherwise `null`\n *     await Adventure.findOne({ country: 'Croatia' }).exec();\n *\n *     // Model.findOne() no longer accepts a callback\n *\n *     // Select only the adventures name and length\n *     await Adventure.findOne({ country: 'Croatia' }, 'name length').exec();\n *\n * @param {Object} [conditions]\n * @param {Object|String|String[]} [projection] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @see field selection https://mongoosejs.com/docs/api/query.html#Query.prototype.select()\n * @see lean queries https://mongoosejs.com/docs/tutorials/lean.html\n * @api public\n */\n\nModel.findOne = function findOne(conditions, projection, options) {\n  _checkContext(this, 'findOne');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.findOne() no longer accepts a callback');\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(projection);\n  mq.setOptions(options);\n\n  return mq.findOne(conditions);\n};\n\n/**\n * Estimates the number of documents in the MongoDB collection. Faster than\n * using `countDocuments()` for large collections because\n * `estimatedDocumentCount()` uses collection metadata rather than scanning\n * the entire collection.\n *\n * #### Example:\n *\n *     const numAdventures = await Adventure.estimatedDocumentCount();\n *\n * @param {Object} [options]\n * @return {Query}\n * @api public\n */\n\nModel.estimatedDocumentCount = function estimatedDocumentCount(options) {\n  _checkContext(this, 'estimatedDocumentCount');\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n\n  return mq.estimatedDocumentCount(options);\n};\n\n/**\n * Counts number of documents matching `filter` in a database collection.\n *\n * #### Example:\n *\n *     Adventure.countDocuments({ type: 'jungle' }, function (err, count) {\n *       console.log('there are %d jungle adventures', count);\n *     });\n *\n * If you want to count all documents in a large collection,\n * use the [`estimatedDocumentCount()` function](https://mongoosejs.com/docs/api/model.html#Model.estimatedDocumentCount())\n * instead. If you call `countDocuments({})`, MongoDB will always execute\n * a full collection scan and **not** use any indexes.\n *\n * The `countDocuments()` function is similar to `count()`, but there are a\n * [few operators that `countDocuments()` does not support](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#countDocuments).\n * Below are the operators that `count()` supports but `countDocuments()` does not,\n * and the suggested replacement:\n *\n * - `$where`: [`$expr`](https://www.mongodb.com/docs/manual/reference/operator/query/expr/)\n * - `$near`: [`$geoWithin`](https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/) with [`$center`](https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center)\n * - `$nearSphere`: [`$geoWithin`](https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/) with [`$centerSphere`](https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere)\n *\n * @param {Object} filter\n * @return {Query}\n * @api public\n */\n\nModel.countDocuments = function countDocuments(conditions, options) {\n  _checkContext(this, 'countDocuments');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.countDocuments() no longer accepts a callback');\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  if (options != null) {\n    mq.setOptions(options);\n  }\n\n  return mq.countDocuments(conditions);\n};\n\n\n/**\n * Creates a Query for a `distinct` operation.\n *\n * #### Example:\n *\n *     const query = Link.distinct('url');\n *     query.exec();\n *\n * @param {String} field\n * @param {Object} [conditions] optional\n * @return {Query}\n * @api public\n */\n\nModel.distinct = function distinct(field, conditions) {\n  _checkContext(this, 'distinct');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.distinct() no longer accepts a callback');\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n\n  return mq.distinct(field, conditions);\n};\n\n/**\n * Creates a Query, applies the passed conditions, and returns the Query.\n *\n * For example, instead of writing:\n *\n *     User.find({ age: { $gte: 21, $lte: 65 } });\n *\n * we can instead write:\n *\n *     User.where('age').gte(21).lte(65).exec();\n *\n * Since the Query class also supports `where` you can continue chaining\n *\n *     User\n *     .where('age').gte(21).lte(65)\n *     .where('name', /^b/i)\n *     ... etc\n *\n * @param {String} path\n * @param {Object} [val] optional value\n * @return {Query}\n * @api public\n */\n\nModel.where = function where(path, val) {\n  _checkContext(this, 'where');\n\n  void val; // eslint\n  const mq = new this.Query({}, {}, this, this.$__collection).find({});\n  return mq.where.apply(mq, arguments);\n};\n\n/**\n * Creates a `Query` and specifies a `$where` condition.\n *\n * Sometimes you need to query for things in mongodb using a JavaScript expression. You can do so via `find({ $where: javascript })`, or you can use the mongoose shortcut method $where via a Query chain or from your mongoose Model.\n *\n *     Blog.$where('this.username.indexOf(\"val\") !== -1').exec(function (err, docs) {});\n *\n * @param {String|Function} argument is a javascript string or anonymous function\n * @method $where\n * @memberOf Model\n * @return {Query}\n * @see Query.$where https://mongoosejs.com/docs/api/query.html#Query.prototype.$where\n * @api public\n */\n\nModel.$where = function $where() {\n  _checkContext(this, '$where');\n\n  const mq = new this.Query({}, {}, this, this.$__collection).find({});\n  return mq.$where.apply(mq, arguments);\n};\n\n/**\n * Issues a mongodb findOneAndUpdate command.\n *\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found document (if any) to the callback. The query executes if `callback` is passed else a Query object is returned.\n *\n * #### Example:\n *\n *     A.findOneAndUpdate(conditions, update, options)  // returns Query\n *     A.findOneAndUpdate(conditions, update)           // returns Query\n *     A.findOneAndUpdate()                             // returns Query\n *\n * #### Note:\n *\n * All top level update keys which are not `atomic` operation names are treated as set operations:\n *\n * #### Example:\n *\n *     const query = { name: 'borne' };\n *     Model.findOneAndUpdate(query, { name: 'jason bourne' }, options)\n *\n *     // is sent as\n *     Model.findOneAndUpdate(query, { $set: { name: 'jason bourne' }}, options)\n *\n * #### Note:\n *\n * `findOneAndX` and `findByIdAndX` functions support limited validation that\n * you can enable by setting the `runValidators` option.\n *\n * If you need full-fledged validation, use the traditional approach of first\n * retrieving the document.\n *\n *     const doc = await Model.findById(id);\n *     doc.name = 'jason bourne';\n *     await doc.save();\n *\n * @param {Object} [conditions]\n * @param {Object} [update]\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {String} [options.returnDocument='before'] Has two possible values, `'before'` and `'after'`. By default, it will return the document before the update was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.lean()) and [the Mongoose lean tutorial](https://mongoosejs.com/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object|String|String[]} [options.projection=null] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {Boolean} [options.new=false] if true, return the modified document rather than the original\n * @param {Object|String} [options.fields] Field selection. Equivalent to `.select(fields).findOneAndUpdate()`\n * @param {Number} [options.maxTimeMS] puts a time limit on the query - requires mongodb >= 2.6.0\n * @param {Object|String} [options.sort] if multiple docs are found by the conditions, sets the sort order to choose which doc to update.\n * @param {Boolean} [options.runValidators] if true, runs [update validators](https://mongoosejs.com/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema\n * @param {Boolean} [options.setDefaultsOnInsert=true] If `setDefaultsOnInsert` and `upsert` are true, mongoose will apply the [defaults](https://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created\n * @param {Boolean} [options.includeResultMetadata] if true, returns the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html)\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @param {Boolean} [options.overwriteDiscriminatorKey=false] Mongoose removes discriminator key updates from `update` by default, set `overwriteDiscriminatorKey` to `true` to allow updating the discriminator key\n * @return {Query}\n * @see Tutorial https://mongoosejs.com/docs/tutorials/findoneandupdate.html\n * @see mongodb https://www.mongodb.com/docs/manual/reference/command/findAndModify/\n * @api public\n */\n\nModel.findOneAndUpdate = function(conditions, update, options) {\n  _checkContext(this, 'findOneAndUpdate');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function' || typeof arguments[3] === 'function') {\n    throw new MongooseError('Model.findOneAndUpdate() no longer accepts a callback');\n  }\n\n  if (arguments.length === 1) {\n    update = conditions;\n    conditions = null;\n    options = null;\n  }\n\n  let fields;\n  if (options) {\n    fields = options.fields || options.projection;\n  }\n\n  update = clone(update, {\n    depopulate: true,\n    _isNested: true\n  });\n\n  decorateUpdateWithVersionKey(update, options, this.schema.options.versionKey);\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(fields);\n\n  return mq.findOneAndUpdate(conditions, update, options);\n};\n\n/**\n * Issues a mongodb findOneAndUpdate command by a document's _id field.\n * `findByIdAndUpdate(id, ...)` is equivalent to `findOneAndUpdate({ _id: id }, ...)`.\n *\n * Finds a matching document, updates it according to the `update` arg,\n * passing any `options`, and returns the found document (if any).\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndUpdate()`\n *\n * #### Example:\n *\n *     A.findByIdAndUpdate(id, update, options)  // returns Query\n *     A.findByIdAndUpdate(id, update)           // returns Query\n *     A.findByIdAndUpdate()                     // returns Query\n *\n * #### Note:\n *\n * All top level update keys which are not `atomic` operation names are treated as set operations:\n *\n * #### Example:\n *\n *     Model.findByIdAndUpdate(id, { name: 'jason bourne' }, options)\n *\n *     // is sent as\n *     Model.findByIdAndUpdate(id, { $set: { name: 'jason bourne' }}, options)\n *\n * #### Note:\n *\n * `findOneAndX` and `findByIdAndX` functions support limited validation. You can\n * enable validation by setting the `runValidators` option.\n *\n * If you need full-fledged validation, use the traditional approach of first\n * retrieving the document.\n *\n *     const doc = await Model.findById(id)\n *     doc.name = 'jason bourne';\n *     await doc.save();\n *\n * @param {Object|Number|String} id value of `_id` to query by\n * @param {Object} [update]\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {String} [options.returnDocument='before'] Has two possible values, `'before'` and `'after'`. By default, it will return the document before the update was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.lean()) and [the Mongoose lean tutorial](https://mongoosejs.com/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Object|String} [options.sort] if multiple docs are found by the conditions, sets the sort order to choose which doc to update.\n * @param {Boolean} [options.runValidators] if true, runs [update validators](https://mongoosejs.com/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema\n * @param {Boolean} [options.setDefaultsOnInsert=true] If `setDefaultsOnInsert` and `upsert` are true, mongoose will apply the [defaults](https://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created\n * @param {Boolean} [options.includeResultMetadata] if true, returns the full [ModifyResult from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html) rather than just the document\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Boolean} [options.new=false] if true, return the modified document rather than the original\n * @param {Object|String} [options.select] sets the document fields to return.\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @param {Boolean} [options.overwriteDiscriminatorKey=false] Mongoose removes discriminator key updates from `update` by default, set `overwriteDiscriminatorKey` to `true` to allow updating the discriminator key\n * @return {Query}\n * @see Model.findOneAndUpdate https://mongoosejs.com/docs/api/model.html#Model.findOneAndUpdate()\n * @see mongodb https://www.mongodb.com/docs/manual/reference/command/findAndModify/\n * @api public\n */\n\nModel.findByIdAndUpdate = function(id, update, options) {\n  _checkContext(this, 'findByIdAndUpdate');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function' || typeof arguments[3] === 'function') {\n    throw new MongooseError('Model.findByIdAndUpdate() no longer accepts a callback');\n  }\n\n  // if a model is passed in instead of an id\n  if (id instanceof Document) {\n    id = id._id;\n  }\n\n  return this.findOneAndUpdate.call(this, { _id: id }, update, options);\n};\n\n/**\n * Issue a MongoDB `findOneAndDelete()` command.\n *\n * Finds a matching document, removes it, and returns the found document (if any).\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndDelete()`\n *\n * #### Example:\n *\n *     A.findOneAndDelete(conditions, options)  // return Query\n *     A.findOneAndDelete(conditions) // returns Query\n *     A.findOneAndDelete()           // returns Query\n *\n * `findOneAndX` and `findByIdAndX` functions support limited validation. You can\n * enable validation by setting the `runValidators` option.\n *\n * If you need full-fledged validation, use the traditional approach of first\n * retrieving the document.\n *\n *     const doc = await Model.findById(id)\n *     doc.name = 'jason bourne';\n *     await doc.save();\n *\n * @param {Object} conditions\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Object|String|String[]} [options.projection=null] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {Boolean} [options.includeResultMetadata] if true, returns the full [ModifyResult from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html) rather than just the document\n * @param {Object|String} [options.sort] if multiple docs are found by the conditions, sets the sort order to choose which doc to update.\n * @param {Object|String} [options.select] sets the document fields to return.\n * @param {Number} [options.maxTimeMS] puts a time limit on the query - requires mongodb >= 2.6.0\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @api public\n */\n\nModel.findOneAndDelete = function(conditions, options) {\n  _checkContext(this, 'findOneAndDelete');\n\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.findOneAndDelete() no longer accepts a callback');\n  }\n\n  let fields;\n  if (options) {\n    fields = options.select;\n    options.select = undefined;\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(fields);\n\n  return mq.findOneAndDelete(conditions, options);\n};\n\n/**\n * Issue a MongoDB `findOneAndDelete()` command by a document's _id field.\n * In other words, `findByIdAndDelete(id)` is a shorthand for\n * `findOneAndDelete({ _id: id })`.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndDelete()`\n *\n * @param {Object|Number|String} id value of `_id` to query by\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @see Model.findOneAndDelete https://mongoosejs.com/docs/api/model.html#Model.findOneAndDelete()\n * @see mongodb https://www.mongodb.com/docs/manual/reference/command/findAndModify/\n */\n\nModel.findByIdAndDelete = function(id, options) {\n  _checkContext(this, 'findByIdAndDelete');\n\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.findByIdAndDelete() no longer accepts a callback');\n  }\n\n  return this.findOneAndDelete({ _id: id }, options);\n};\n\n/**\n * Issue a MongoDB `findOneAndReplace()` command.\n *\n * Finds a matching document, replaces it with the provided doc, and returns the document.\n *\n * This function triggers the following query middleware.\n *\n * - `findOneAndReplace()`\n *\n * #### Example:\n *\n *     A.findOneAndReplace(filter, replacement, options)  // return Query\n *     A.findOneAndReplace(filter, replacement) // returns Query\n *     A.findOneAndReplace()                    // returns Query\n *\n * @param {Object} filter Replace the first document that matches this filter\n * @param {Object} [replacement] Replace with this document\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {String} [options.returnDocument='before'] Has two possible values, `'before'` and `'after'`. By default, it will return the document before the update was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.lean()) and [the Mongoose lean tutorial](https://mongoosejs.com/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Object|String|String[]} [options.projection=null] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {Object|String} [options.sort] if multiple docs are found by the conditions, sets the sort order to choose which doc to update.\n * @param {Boolean} [options.includeResultMetadata] if true, returns the full [ModifyResult from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html) rather than just the document\n * @param {Object|String} [options.select] sets the document fields to return.\n * @param {Number} [options.maxTimeMS] puts a time limit on the query - requires mongodb >= 2.6.0\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @api public\n */\n\nModel.findOneAndReplace = function(filter, replacement, options) {\n  _checkContext(this, 'findOneAndReplace');\n\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function' || typeof arguments[3] === 'function') {\n    throw new MongooseError('Model.findOneAndReplace() no longer accepts a callback');\n  }\n\n  let fields;\n  if (options) {\n    fields = options.select;\n    options.select = undefined;\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(fields);\n\n  return mq.findOneAndReplace(filter, replacement, options);\n};\n\n/**\n * Shortcut for saving one or more documents to the database.\n * `MyModel.create(docs)` does `new MyModel(doc).save()` for every doc in\n * docs.\n *\n * This function triggers the following middleware.\n *\n * - `save()`\n *\n * #### Example:\n *\n *     // Insert one new `Character` document\n *     await Character.create({ name: 'Jean-Luc Picard' });\n *\n *     // Insert multiple new `Character` documents\n *     await Character.create([{ name: 'Will Riker' }, { name: 'Geordi LaForge' }]);\n *\n *     // Create a new character within a transaction. Note that you **must**\n *     // pass an array as the first parameter to `create()` if you want to\n *     // specify options.\n *     await Character.create([{ name: 'Jean-Luc Picard' }], { session });\n *\n * @param {Array|Object} docs Documents to insert, as a spread or array\n * @param {Object} [options] Options passed down to `save()`. To specify `options`, `docs` **must** be an array, not a spread. See [Model.save](https://mongoosejs.com/docs/api/model.html#Model.prototype.save()) for available options.\n * @param {Boolean} [options.ordered] saves the docs in series rather than parallel.\n * @param {Boolean} [options.aggregateErrors] Aggregate Errors instead of throwing the first one that occurs. Default: false\n * @return {Promise}\n * @api public\n */\n\nModel.create = async function create(doc, options) {\n  if (typeof options === 'function' ||\n      typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.create() no longer accepts a callback');\n  }\n\n  _checkContext(this, 'create');\n\n  let args;\n  const discriminatorKey = this.schema.options.discriminatorKey;\n\n  if (Array.isArray(doc)) {\n    args = doc;\n    options = options != null && typeof options === 'object' ? options : {};\n  } else {\n    const last = arguments[arguments.length - 1];\n    options = {};\n    const hasCallback = typeof last === 'function' ||\n      typeof options === 'function' ||\n      typeof arguments[2] === 'function';\n    if (hasCallback) {\n      throw new MongooseError('Model.create() no longer accepts a callback');\n    } else {\n      args = [...arguments];\n      // For backwards compatibility with 6.x, because of gh-5061 Mongoose 6.x and\n      // older would treat a falsy last arg as a callback. We don't want to throw\n      // an error here, because it would look strange if `Test.create({}, void 0)`\n      // threw a callback error. But we also don't want to create an unnecessary document.\n      if (args.length > 1 && !last) {\n        args.pop();\n      }\n    }\n\n    if (args.length === 2 &&\n        args[0] != null &&\n        args[1] != null &&\n        args[0].session == null &&\n        last &&\n        getConstructorName(last.session) === 'ClientSession' &&\n        !this.schema.path('session')) {\n      // Probably means the user is running into the common mistake of trying\n      // to use a spread to specify options, see gh-7535\n      utils.warn('WARNING: to pass a `session` to `Model.create()` in ' +\n        'Mongoose, you **must** pass an array as the first argument. See: ' +\n        'https://mongoosejs.com/docs/api/model.html#Model.create()');\n    }\n  }\n\n  if (args.length === 0) {\n    return Array.isArray(doc) ? [] : null;\n  }\n  let res = [];\n  const immediateError = typeof options.aggregateErrors === 'boolean' ? !options.aggregateErrors : true;\n\n  delete options.aggregateErrors; // dont pass on the option to \"$save\"\n\n  if (options.ordered) {\n    for (let i = 0; i < args.length; i++) {\n      try {\n        const doc = args[i];\n        const Model = this.discriminators && doc[discriminatorKey] != null ?\n          this.discriminators[doc[discriminatorKey]] || getDiscriminatorByValue(this.discriminators, doc[discriminatorKey]) :\n          this;\n        if (Model == null) {\n          throw new MongooseError(`Discriminator \"${doc[discriminatorKey]}\" not ` +\n          `found for model \"${this.modelName}\"`);\n        }\n        let toSave = doc;\n        if (!(toSave instanceof Model)) {\n          toSave = new Model(toSave);\n        }\n\n        await toSave.$save(options);\n        res.push(toSave);\n      } catch (err) {\n        if (!immediateError) {\n          res.push(err);\n        } else {\n          throw err;\n        }\n      }\n    }\n    return res;\n  } else if (!immediateError) {\n    res = await Promise.allSettled(args.map(async doc => {\n      const Model = this.discriminators && doc[discriminatorKey] != null ?\n        this.discriminators[doc[discriminatorKey]] || getDiscriminatorByValue(this.discriminators, doc[discriminatorKey]) :\n        this;\n      if (Model == null) {\n        throw new MongooseError(`Discriminator \"${doc[discriminatorKey]}\" not ` +\n            `found for model \"${this.modelName}\"`);\n      }\n      let toSave = doc;\n\n      if (!(toSave instanceof Model)) {\n        toSave = new Model(toSave);\n      }\n\n      await toSave.$save(options);\n\n      return toSave;\n    }));\n    res = res.map(result => result.status === 'fulfilled' ? result.value : result.reason);\n  } else {\n    let firstError = null;\n    res = await Promise.all(args.map(async doc => {\n      const Model = this.discriminators && doc[discriminatorKey] != null ?\n        this.discriminators[doc[discriminatorKey]] || getDiscriminatorByValue(this.discriminators, doc[discriminatorKey]) :\n        this;\n      if (Model == null) {\n        throw new MongooseError(`Discriminator \"${doc[discriminatorKey]}\" not ` +\n            `found for model \"${this.modelName}\"`);\n      }\n      try {\n        let toSave = doc;\n\n        if (!(toSave instanceof Model)) {\n          toSave = new Model(toSave);\n        }\n\n        await toSave.$save(options);\n\n        return toSave;\n      } catch (err) {\n        if (!firstError) {\n          firstError = err;\n        }\n      }\n    }));\n    if (firstError) {\n      throw firstError;\n    }\n  }\n\n\n  if (!Array.isArray(doc) && args.length === 1) {\n    return res[0];\n  }\n\n  return res;\n};\n\n/**\n * _Requires a replica set running MongoDB >= 3.6.0._ Watches the\n * underlying collection for changes using\n * [MongoDB change streams](https://www.mongodb.com/docs/manual/changeStreams/).\n *\n * This function does **not** trigger any middleware. In particular, it\n * does **not** trigger aggregate middleware.\n *\n * The ChangeStream object is an event emitter that emits the following events:\n *\n * - 'change': A change occurred, see below example\n * - 'error': An unrecoverable error occurred. In particular, change streams currently error out if they lose connection to the replica set primary. Follow [this GitHub issue](https://github.com/Automattic/mongoose/issues/6799) for updates.\n * - 'end': Emitted if the underlying stream is closed\n * - 'close': Emitted if the underlying stream is closed\n *\n * #### Example:\n *\n *     const doc = await Person.create({ name: 'Ned Stark' });\n *     const changeStream = Person.watch().on('change', change => console.log(change));\n *     // Will print from the above `console.log()`:\n *     // { _id: { _data: ... },\n *     //   operationType: 'delete',\n *     //   ns: { db: 'mydb', coll: 'Person' },\n *     //   documentKey: { _id: 5a51b125c5500f5aa094c7bd } }\n *     await doc.remove();\n *\n * @param {Array} [pipeline]\n * @param {Object} [options] see the [mongodb driver options](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#watch)\n * @param {Boolean} [options.hydrate=false] if true and `fullDocument: 'updateLookup'` is set, Mongoose will automatically hydrate `fullDocument` into a fully fledged Mongoose document\n * @return {ChangeStream} mongoose-specific change stream wrapper, inherits from EventEmitter\n * @api public\n */\n\nModel.watch = function(pipeline, options) {\n  _checkContext(this, 'watch');\n\n  const changeStreamThunk = cb => {\n    pipeline = pipeline || [];\n    prepareDiscriminatorPipeline(pipeline, this.schema, 'fullDocument');\n    if (this.$__collection.buffer) {\n      this.$__collection.addQueue(() => {\n        if (this.closed) {\n          return;\n        }\n        const driverChangeStream = this.$__collection.watch(pipeline, options);\n        cb(null, driverChangeStream);\n      });\n    } else {\n      const driverChangeStream = this.$__collection.watch(pipeline, options);\n      cb(null, driverChangeStream);\n    }\n  };\n\n  options = options || {};\n  options.model = this;\n\n  return new ChangeStream(changeStreamThunk, pipeline, options);\n};\n\n/**\n * _Requires MongoDB >= 3.6.0._ Starts a [MongoDB session](https://www.mongodb.com/docs/manual/release-notes/3.6/#client-sessions)\n * for benefits like causal consistency, [retryable writes](https://www.mongodb.com/docs/manual/core/retryable-writes/),\n * and [transactions](https://thecodebarbarian.com/a-node-js-perspective-on-mongodb-4-transactions.html).\n *\n * Calling `MyModel.startSession()` is equivalent to calling `MyModel.db.startSession()`.\n *\n * This function does not trigger any middleware.\n *\n * #### Example:\n *\n *     const session = await Person.startSession();\n *     let doc = await Person.findOne({ name: 'Ned Stark' }, null, { session });\n *     await doc.remove();\n *     // `doc` will always be null, even if reading from a replica set\n *     // secondary. Without causal consistency, it is possible to\n *     // get a doc back from the below query if the query reads from a\n *     // secondary that is experiencing replication lag.\n *     doc = await Person.findOne({ name: 'Ned Stark' }, null, { session, readPreference: 'secondary' });\n *\n * @param {Object} [options] see the [mongodb driver options](https://mongodb.github.io/node-mongodb-native/4.9/classes/MongoClient.html#startSession)\n * @param {Boolean} [options.causalConsistency=true] set to false to disable causal consistency\n * @return {Promise<ClientSession>} promise that resolves to a MongoDB driver `ClientSession`\n * @api public\n */\n\nModel.startSession = function() {\n  _checkContext(this, 'startSession');\n\n  return this.db.startSession.apply(this.db, arguments);\n};\n\n/**\n * Shortcut for validating an array of documents and inserting them into\n * MongoDB if they're all valid. This function is faster than `.create()`\n * because it only sends one operation to the server, rather than one for each\n * document.\n *\n * Mongoose always validates each document **before** sending `insertMany`\n * to MongoDB. So if one document has a validation error, no documents will\n * be saved, unless you set\n * [the `ordered` option to false](https://www.mongodb.com/docs/manual/reference/method/db.collection.insertMany/#error-handling).\n *\n * This function does **not** trigger save middleware.\n *\n * This function triggers the following middleware.\n *\n * - `insertMany()`\n *\n * #### Example:\n *\n *     await Movies.insertMany([\n *       { name: 'Star Wars' },\n *       { name: 'The Empire Strikes Back' }\n *     ]);\n *\n * @param {Array|Object|*} doc(s)\n * @param {Object} [options] see the [mongodb driver options](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#insertMany)\n * @param {Boolean} [options.ordered=true] if true, will fail fast on the first error encountered. If false, will insert all the documents it can and report errors later. An `insertMany()` with `ordered = false` is called an \"unordered\" `insertMany()`.\n * @param {Boolean} [options.rawResult=false] if false, the returned promise resolves to the documents that passed mongoose document validation. If `true`, will return the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/InsertManyResult.html) with a `mongoose` property that contains `validationErrors` and `results` if this is an unordered `insertMany`.\n * @param {Boolean} [options.lean=false] if `true`, skips hydrating and validating the documents. This option is useful if you need the extra performance, but Mongoose won't validate the documents before inserting.\n * @param {Number} [options.limit=null] this limits the number of documents being processed (validation/casting) by mongoose in parallel, this does **NOT** send the documents in batches to MongoDB. Use this option if you're processing a large number of documents and your app is running out of memory.\n * @param {String|Object|Array} [options.populate=null] populates the result documents. This option is a no-op if `rawResult` is set.\n * @param {Boolean} [options.throwOnValidationError=false] If true and `ordered: false`, throw an error if one of the operations failed validation, but all valid operations completed successfully.\n * @return {Promise} resolving to the raw result from the MongoDB driver if `options.rawResult` was `true`, or the documents that passed validation, otherwise\n * @api public\n */\n\nModel.insertMany = async function insertMany(arr, options) {\n  _checkContext(this, 'insertMany');\n  if (typeof options === 'function' ||\n    typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.insertMany() no longer accepts a callback');\n  }\n\n  return new Promise((resolve, reject) => {\n    this.$__insertMany(arr, options, (err, res) => {\n      if (err != null) {\n        return reject(err);\n      }\n      resolve(res);\n    });\n  });\n};\n\n/**\n * ignore\n *\n * @param {Array} arr\n * @param {Object} options\n * @param {Function} callback\n * @api private\n * @memberOf Model\n * @method $__insertMany\n * @static\n */\n\nModel.$__insertMany = function(arr, options, callback) {\n  const _this = this;\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  callback = callback || utils.noop;\n  options = options || {};\n  const limit = options.limit || 1000;\n  const rawResult = !!options.rawResult;\n  const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n  const throwOnValidationError = typeof options.throwOnValidationError === 'boolean' ? options.throwOnValidationError : false;\n  const lean = !!options.lean;\n\n  if (!Array.isArray(arr)) {\n    arr = [arr];\n  }\n\n  const validationErrors = [];\n  const validationErrorsToOriginalOrder = new Map();\n  const results = ordered ? null : new Array(arr.length);\n  const toExecute = arr.map((doc, index) =>\n    callback => {\n      if (!(doc instanceof _this)) {\n        if (doc != null && typeof doc !== 'object') {\n          return callback(new ObjectParameterError(doc, 'arr.' + index, 'insertMany'));\n        }\n        try {\n          doc = new _this(doc);\n        } catch (err) {\n          return callback(err);\n        }\n      }\n      if (options.session != null) {\n        doc.$session(options.session);\n      }\n      // If option `lean` is set to true bypass validation\n      if (lean) {\n        // we have to execute callback at the nextTick to be compatible\n        // with parallelLimit, as `results` variable has TDZ issue if we\n        // execute the callback synchronously\n        return immediate(() => callback(null, doc));\n      }\n      doc.$validate().then(\n        () => { callback(null, doc); },\n        error => {\n          if (ordered === false) {\n            validationErrors.push(error);\n            validationErrorsToOriginalOrder.set(error, index);\n            results[index] = error;\n            return callback(null, null);\n          }\n          callback(error);\n        }\n      );\n    });\n\n  parallelLimit(toExecute, limit, function(error, docs) {\n    if (error) {\n      callback(error, null);\n      return;\n    }\n\n    const originalDocIndex = new Map();\n    const validDocIndexToOriginalIndex = new Map();\n    for (let i = 0; i < docs.length; ++i) {\n      originalDocIndex.set(docs[i], i);\n    }\n\n    // We filter all failed pre-validations by removing nulls\n    const docAttributes = docs.filter(function(doc) {\n      return doc != null;\n    });\n    for (let i = 0; i < docAttributes.length; ++i) {\n      validDocIndexToOriginalIndex.set(i, originalDocIndex.get(docAttributes[i]));\n    }\n\n    // Make sure validation errors are in the same order as the\n    // original documents, so if both doc1 and doc2 both fail validation,\n    // `Model.insertMany([doc1, doc2])` will always have doc1's validation\n    // error before doc2's. Re: gh-12791.\n    if (validationErrors.length > 0) {\n      validationErrors.sort((err1, err2) => {\n        return validationErrorsToOriginalOrder.get(err1) - validationErrorsToOriginalOrder.get(err2);\n      });\n    }\n\n    // Quickly escape while there aren't any valid docAttributes\n    if (docAttributes.length === 0) {\n      if (rawResult) {\n        const res = {\n          acknowledged: true,\n          insertedCount: 0,\n          insertedIds: {},\n          mongoose: {\n            validationErrors: validationErrors\n          }\n        };\n        return callback(null, res);\n      }\n      callback(null, []);\n      return;\n    }\n    const docObjects = docAttributes.map(function(doc) {\n      if (doc.$__schema.options.versionKey) {\n        doc[doc.$__schema.options.versionKey] = 0;\n      }\n      const shouldSetTimestamps = (!options || options.timestamps !== false) && doc.initializeTimestamps && (!doc.$__ || doc.$__.timestamps !== false);\n      if (shouldSetTimestamps) {\n        return doc.initializeTimestamps().toObject(internalToObjectOptions);\n      }\n      return doc.toObject(internalToObjectOptions);\n    });\n\n    _this.$__collection.insertMany(docObjects, options).then(\n      res => {\n        for (const attribute of docAttributes) {\n          attribute.$__reset();\n          _setIsNew(attribute, false);\n        }\n\n        if (ordered === false && throwOnValidationError && validationErrors.length > 0) {\n          for (let i = 0; i < results.length; ++i) {\n            if (results[i] === void 0) {\n              results[i] = docs[i];\n            }\n          }\n          return callback(new MongooseBulkWriteError(\n            validationErrors,\n            results,\n            res,\n            'insertMany'\n          ));\n        }\n\n        if (rawResult) {\n          if (ordered === false) {\n            for (let i = 0; i < results.length; ++i) {\n              if (results[i] === void 0) {\n                results[i] = docs[i];\n              }\n            }\n\n            // Decorate with mongoose validation errors in case of unordered,\n            // because then still do `insertMany()`\n            res.mongoose = {\n              validationErrors: validationErrors,\n              results: results\n            };\n          }\n          return callback(null, res);\n        }\n\n        if (options.populate != null) {\n          return _this.populate(docAttributes, options.populate).then(\n            docs => { callback(null, docs); },\n            err => {\n              if (err != null) {\n                err.insertedDocs = docAttributes;\n              }\n              throw err;\n            }\n          );\n        }\n\n        callback(null, docAttributes);\n      },\n      error => {\n        // `writeErrors` is a property reported by the MongoDB driver,\n        // just not if there's only 1 error.\n        if (error.writeErrors == null &&\n            (error.result && error.result.result && error.result.result.writeErrors) != null) {\n          error.writeErrors = error.result.result.writeErrors;\n        }\n\n        // `insertedDocs` is a Mongoose-specific property\n        const hasWriteErrors = error && error.writeErrors;\n        const erroredIndexes = new Set((error && error.writeErrors || []).map(err => err.index));\n\n        if (error.writeErrors != null) {\n          for (let i = 0; i < error.writeErrors.length; ++i) {\n            const originalIndex = validDocIndexToOriginalIndex.get(error.writeErrors[i].index);\n            error.writeErrors[i] = {\n              ...error.writeErrors[i],\n              index: originalIndex\n            };\n            if (!ordered) {\n              results[originalIndex] = error.writeErrors[i];\n            }\n          }\n        }\n\n        if (!ordered) {\n          for (let i = 0; i < results.length; ++i) {\n            if (results[i] === void 0) {\n              results[i] = docs[i];\n            }\n          }\n\n          error.results = results;\n        }\n\n        let firstErroredIndex = -1;\n        error.insertedDocs = docAttributes.\n          filter((doc, i) => {\n            const isErrored = !hasWriteErrors || erroredIndexes.has(i);\n\n            if (ordered) {\n              if (firstErroredIndex > -1) {\n                return i < firstErroredIndex;\n              }\n\n              if (isErrored) {\n                firstErroredIndex = i;\n              }\n            }\n\n            return !isErrored;\n          }).\n          map(function setIsNewForInsertedDoc(doc) {\n            doc.$__reset();\n            _setIsNew(doc, false);\n            return doc;\n          });\n\n        if (rawResult && ordered === false) {\n          error.mongoose = {\n            validationErrors: validationErrors,\n            results: results\n          };\n        }\n\n        callback(error, null);\n      }\n    );\n  });\n};\n\n/*!\n * ignore\n */\n\nfunction _setIsNew(doc, val) {\n  doc.$isNew = val;\n  doc.$emit('isNew', val);\n  doc.constructor.emit('isNew', val);\n\n  const subdocs = doc.$getAllSubdocs();\n  for (const subdoc of subdocs) {\n    subdoc.$isNew = val;\n    subdoc.$emit('isNew', val);\n  }\n}\n\n/**\n * Sends multiple `insertOne`, `updateOne`, `updateMany`, `replaceOne`,\n * `deleteOne`, and/or `deleteMany` operations to the MongoDB server in one\n * command. This is faster than sending multiple independent operations (e.g.\n * if you use `create()`) because with `bulkWrite()` there is only one round\n * trip to MongoDB.\n *\n * Mongoose will perform casting on all operations you provide.\n *\n * This function does **not** trigger any middleware, neither `save()`, nor `update()`.\n * If you need to trigger\n * `save()` middleware for every document use [`create()`](https://mongoosejs.com/docs/api/model.html#Model.create()) instead.\n *\n * #### Example:\n *\n *     Character.bulkWrite([\n *       {\n *         insertOne: {\n *           document: {\n *             name: 'Eddard Stark',\n *             title: 'Warden of the North'\n *           }\n *         }\n *       },\n *       {\n *         updateOne: {\n *           filter: { name: 'Eddard Stark' },\n *           // If you were using the MongoDB driver directly, you'd need to do\n *           // `update: { $set: { title: ... } }` but mongoose adds $set for\n *           // you.\n *           update: { title: 'Hand of the King' }\n *         }\n *       },\n *       {\n *         deleteOne: {\n *           filter: { name: 'Eddard Stark' }\n *         }\n *       }\n *     ]).then(res => {\n *      // Prints \"1 1 1\"\n *      console.log(res.insertedCount, res.modifiedCount, res.deletedCount);\n *     });\n *\n * The [supported operations](https://www.mongodb.com/docs/manual/reference/method/db.collection.bulkWrite/#db.collection.bulkWrite) are:\n *\n * - `insertOne`\n * - `updateOne`\n * - `updateMany`\n * - `deleteOne`\n * - `deleteMany`\n * - `replaceOne`\n *\n * @param {Array} ops\n * @param {Object} [ops.insertOne.document] The document to insert\n * @param {Object} [ops.updateOne.filter] Update the first document that matches this filter\n * @param {Object} [ops.updateOne.update] An object containing [update operators](https://www.mongodb.com/docs/manual/reference/operator/update/)\n * @param {Boolean} [ops.updateOne.upsert=false] If true, insert a doc if none match\n * @param {Boolean} [ops.updateOne.timestamps=true] If false, do not apply [timestamps](https://mongoosejs.com/docs/guide.html#timestamps) to the operation\n * @param {Object} [ops.updateOne.collation] The [MongoDB collation](https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-34-collations) to use\n * @param {Array} [ops.updateOne.arrayFilters] The [array filters](https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-36-array-filters.html) used in `update`\n * @param {Object} [ops.updateMany.filter] Update all the documents that match this filter\n * @param {Object} [ops.updateMany.update] An object containing [update operators](https://www.mongodb.com/docs/manual/reference/operator/update/)\n * @param {Boolean} [ops.updateMany.upsert=false] If true, insert a doc if no documents match `filter`\n * @param {Boolean} [ops.updateMany.timestamps=true] If false, do not apply [timestamps](https://mongoosejs.com/docs/guide.html#timestamps) to the operation\n * @param {Object} [ops.updateMany.collation] The [MongoDB collation](https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-34-collations) to use\n * @param {Array} [ops.updateMany.arrayFilters] The [array filters](https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-36-array-filters.html) used in `update`\n * @param {Object} [ops.deleteOne.filter] Delete the first document that matches this filter\n * @param {Object} [ops.deleteMany.filter] Delete all documents that match this filter\n * @param {Object} [ops.replaceOne.filter] Replace the first document that matches this filter\n * @param {Object} [ops.replaceOne.replacement] The replacement document\n * @param {Boolean} [ops.replaceOne.upsert=false] If true, insert a doc if no documents match `filter`\n * @param {Object} [options]\n * @param {Boolean} [options.ordered=true] If true, execute writes in order and stop at the first error. If false, execute writes in parallel and continue until all writes have either succeeded or errored.\n * @param {ClientSession} [options.session=null] The session associated with this bulk write. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {String|number} [options.w=1] The [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/). See [`Query#w()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.w()) for more information.\n * @param {number} [options.wtimeout=null] The [write concern timeout](https://www.mongodb.com/docs/manual/reference/write-concern/#wtimeout).\n * @param {Boolean} [options.j=true] If false, disable [journal acknowledgement](https://www.mongodb.com/docs/manual/reference/write-concern/#j-option)\n * @param {Boolean} [options.skipValidation=false] Set to true to skip Mongoose schema validation on bulk write operations. Mongoose currently runs validation on `insertOne` and `replaceOne` operations by default.\n * @param {Boolean} [options.bypassDocumentValidation=false] If true, disable [MongoDB server-side schema validation](https://www.mongodb.com/docs/manual/core/schema-validation/) for all writes in this bulk.\n * @param {Boolean} [options.throwOnValidationError=false] If true and `ordered: false`, throw an error if one of the operations failed validation, but all valid operations completed successfully.\n * @param {Boolean} [options.strict=null] Overwrites the [`strict` option](https://mongoosejs.com/docs/guide.html#strict) on schema. If false, allows filtering and writing fields not defined in the schema for all writes in this bulk.\n * @return {Promise} resolves to a [`BulkWriteOpResult`](https://mongodb.github.io/node-mongodb-native/4.9/classes/BulkWriteResult.html) if the operation succeeds\n * @api public\n */\n\nModel.bulkWrite = async function bulkWrite(ops, options) {\n  _checkContext(this, 'bulkWrite');\n\n  if (typeof options === 'function' ||\n      typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.bulkWrite() no longer accepts a callback');\n  }\n  options = options || {};\n\n  const shouldSkip = await new Promise((resolve, reject) => {\n    this.hooks.execPre('bulkWrite', this, [ops, options], (err) => {\n      if (err != null) {\n        if (err instanceof Kareem.skipWrappedFunction) {\n          return resolve(err);\n        }\n        return reject(err);\n      }\n      resolve();\n    });\n  });\n\n  if (shouldSkip) {\n    return shouldSkip.args[0];\n  }\n\n  const ordered = options.ordered == null ? true : options.ordered;\n\n  if (ops.length === 0) {\n    return getDefaultBulkwriteResult();\n  }\n\n  const validations = ops.map(op => castBulkWrite(this, op, options));\n\n  let res = null;\n  if (ordered) {\n    await new Promise((resolve, reject) => {\n      each(validations, (fn, cb) => fn(cb), error => {\n        if (error) {\n          return reject(error);\n        }\n\n        resolve();\n      });\n    });\n\n    try {\n      res = await this.$__collection.bulkWrite(ops, options);\n    } catch (error) {\n      await new Promise((resolve, reject) => {\n        const _opts = { error: error };\n        this.hooks.execPost('bulkWrite', this, [null], _opts, (err) => {\n          if (err != null) {\n            return reject(err);\n          }\n          resolve();\n        });\n      });\n    }\n  } else {\n    let remaining = validations.length;\n    let validOps = [];\n    let validationErrors = [];\n    const results = [];\n    await new Promise((resolve) => {\n      for (let i = 0; i < validations.length; ++i) {\n        validations[i]((err) => {\n          if (err == null) {\n            validOps.push(i);\n          } else {\n            validationErrors.push({ index: i, error: err });\n            results[i] = err;\n          }\n          if (--remaining <= 0) {\n            resolve();\n          }\n        });\n      }\n    });\n\n    validationErrors = validationErrors.\n      sort((v1, v2) => v1.index - v2.index).\n      map(v => v.error);\n\n    const validOpIndexes = validOps;\n    validOps = validOps.sort().map(index => ops[index]);\n\n    if (validOps.length === 0) {\n      return getDefaultBulkwriteResult();\n    }\n\n    let error;\n    [res, error] = await this.$__collection.bulkWrite(validOps, options).\n      then(res => ([res, null])).\n      catch(err => ([null, err]));\n\n    if (error) {\n      if (validationErrors.length > 0) {\n        error.mongoose = error.mongoose || {};\n        error.mongoose.validationErrors = validationErrors;\n      }\n\n      await new Promise((resolve, reject) => {\n        const _opts = { error: error };\n        this.hooks.execPost('bulkWrite', this, [null], _opts, (err) => {\n          if (err != null) {\n            return reject(err);\n          }\n          resolve();\n        });\n      });\n    }\n\n    for (let i = 0; i < validOpIndexes.length; ++i) {\n      results[validOpIndexes[i]] = null;\n    }\n    if (validationErrors.length > 0) {\n      if (options.throwOnValidationError) {\n        throw new MongooseBulkWriteError(\n          validationErrors,\n          results,\n          res,\n          'bulkWrite'\n        );\n      } else {\n        res.mongoose = res.mongoose || {};\n        res.mongoose.validationErrors = validationErrors;\n        res.mongoose.results = results;\n      }\n    }\n  }\n\n  await new Promise((resolve, reject) => {\n    this.hooks.execPost('bulkWrite', this, [res], (err) => {\n      if (err != null) {\n        return reject(err);\n      }\n      resolve();\n    });\n  });\n\n  return res;\n};\n\n/**\n *  takes an array of documents, gets the changes and inserts/updates documents in the database\n *  according to whether or not the document is new, or whether it has changes or not.\n *\n * `bulkSave` uses `bulkWrite` under the hood, so it's mostly useful when dealing with many documents (10K+)\n *\n * @param {Array<Document>} documents\n * @param {Object} [options] options passed to the underlying `bulkWrite()`\n * @param {Boolean} [options.timestamps] defaults to `null`, when set to false, mongoose will not add/update timestamps to the documents.\n * @param {ClientSession} [options.session=null] The session associated with this bulk write. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {String|number} [options.w=1] The [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/). See [`Query#w()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.w()) for more information.\n * @param {number} [options.wtimeout=null] The [write concern timeout](https://www.mongodb.com/docs/manual/reference/write-concern/#wtimeout).\n * @param {Boolean} [options.j=true] If false, disable [journal acknowledgement](https://www.mongodb.com/docs/manual/reference/write-concern/#j-option)\n *\n */\nModel.bulkSave = async function bulkSave(documents, options) {\n  options = options || {};\n\n  if (options.timestamps != null) {\n    for (const document of documents) {\n      document.$__.saveOptions = document.$__.saveOptions || {};\n      document.$__.saveOptions.timestamps = options.timestamps;\n    }\n  } else {\n    for (const document of documents) {\n      if (document.$__.timestamps != null) {\n        document.$__.saveOptions = document.$__.saveOptions || {};\n        document.$__.saveOptions.timestamps = document.$__.timestamps;\n      }\n    }\n  }\n\n  await Promise.all(documents.map(buildPreSavePromise));\n\n  const writeOperations = this.buildBulkWriteOperations(documents, { skipValidation: true, timestamps: options.timestamps });\n\n  const { bulkWriteResult, bulkWriteError } = await this.bulkWrite(writeOperations, options).then(\n    (res) => ({ bulkWriteResult: res, bulkWriteError: null }),\n    (err) => ({ bulkWriteResult: null, bulkWriteError: err })\n  );\n\n  await Promise.all(\n    documents.map(async(document) => {\n      const documentError = bulkWriteError && bulkWriteError.writeErrors.find(writeError => {\n        const writeErrorDocumentId = writeError.err.op._id || writeError.err.op.q._id;\n        return writeErrorDocumentId.toString() === document._id.toString();\n      });\n\n      if (documentError == null) {\n        await handleSuccessfulWrite(document);\n      }\n    })\n  );\n\n  if (bulkWriteError && bulkWriteError.writeErrors && bulkWriteError.writeErrors.length) {\n    throw bulkWriteError;\n  }\n\n  return bulkWriteResult;\n};\n\nfunction buildPreSavePromise(document) {\n  return new Promise((resolve, reject) => {\n    document.schema.s.hooks.execPre('save', document, (err) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve();\n    });\n  });\n}\n\nfunction handleSuccessfulWrite(document) {\n  return new Promise((resolve, reject) => {\n    if (document.$isNew) {\n      _setIsNew(document, false);\n    }\n\n    document.$__reset();\n    document.schema.s.hooks.execPost('save', document, [document], {}, (err) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve();\n    });\n\n  });\n}\n\n/**\n * Apply defaults to the given document or POJO.\n *\n * @param {Object|Document} obj object or document to apply defaults on\n * @returns {Object|Document}\n * @api public\n */\n\nModel.applyDefaults = function applyDefaults(doc) {\n  if (doc.$__ != null) {\n    applyDefaultsHelper(doc, doc.$__.fields, doc.$__.exclude);\n\n    for (const subdoc of doc.$getAllSubdocs()) {\n      applyDefaults(subdoc, subdoc.$__.fields, subdoc.$__.exclude);\n    }\n\n    return doc;\n  }\n\n  applyDefaultsToPOJO(doc, this.schema);\n\n  return doc;\n};\n\n/**\n * Cast the given POJO to the model's schema\n *\n * #### Example:\n *\n *     const Test = mongoose.model('Test', Schema({ num: Number }));\n *\n *     const obj = Test.castObject({ num: '42' });\n *     obj.num; // 42 as a number\n *\n *     Test.castObject({ num: 'not a number' }); // Throws a ValidationError\n *\n * @param {Object} obj object or document to cast\n * @param {Object} options options passed to castObject\n * @param {Boolean} options.ignoreCastErrors If set to `true` will not throw a ValidationError and only return values that were successfully cast.\n * @returns {Object} POJO casted to the model's schema\n * @throws {ValidationError} if casting failed for at least one path\n * @api public\n */\n\nModel.castObject = function castObject(obj, options) {\n  options = options || {};\n  const ret = {};\n\n  const schema = this.schema;\n  const paths = Object.keys(schema.paths);\n\n  for (const path of paths) {\n    const schemaType = schema.path(path);\n    if (!schemaType || !schemaType.$isMongooseArray) {\n      continue;\n    }\n\n    const val = get(obj, path);\n    pushNestedArrayPaths(paths, val, path);\n  }\n\n  let error = null;\n\n  for (const path of paths) {\n    const schemaType = schema.path(path);\n    if (schemaType == null) {\n      continue;\n    }\n\n    let val = get(obj, path, void 0);\n\n    if (val == null) {\n      continue;\n    }\n\n    const pieces = path.indexOf('.') === -1 ? [path] : path.split('.');\n    let cur = ret;\n    for (let i = 0; i < pieces.length - 1; ++i) {\n      if (cur[pieces[i]] == null) {\n        cur[pieces[i]] = isNaN(pieces[i + 1]) ? {} : [];\n      }\n      cur = cur[pieces[i]];\n    }\n\n    if (schemaType.$isMongooseDocumentArray) {\n      continue;\n    }\n    if (schemaType.$isSingleNested || schemaType.$isMongooseDocumentArrayElement) {\n      try {\n        val = Model.castObject.call(schemaType.caster, val);\n      } catch (err) {\n        if (!options.ignoreCastErrors) {\n          error = error || new ValidationError();\n          error.addError(path, err);\n        }\n        continue;\n      }\n\n      cur[pieces[pieces.length - 1]] = val;\n      continue;\n    }\n\n    try {\n      val = schemaType.cast(val);\n      cur[pieces[pieces.length - 1]] = val;\n    } catch (err) {\n      if (!options.ignoreCastErrors) {\n        error = error || new ValidationError();\n        error.addError(path, err);\n      }\n\n      continue;\n    }\n  }\n\n  if (error != null) {\n    throw error;\n  }\n\n  return ret;\n};\n\n/**\n * Build bulk write operations for `bulkSave()`.\n *\n * @param {Array<Document>} documents The array of documents to build write operations of\n * @param {Object} options\n * @param {Boolean} options.skipValidation defaults to `false`, when set to true, building the write operations will bypass validating the documents.\n * @param {Boolean} options.timestamps defaults to `null`, when set to false, mongoose will not add/update timestamps to the documents.\n * @return {Array<Promise>} Returns a array of all Promises the function executes to be awaited.\n * @api private\n */\n\nModel.buildBulkWriteOperations = function buildBulkWriteOperations(documents, options) {\n  if (!Array.isArray(documents)) {\n    throw new Error(`bulkSave expects an array of documents to be passed, received \\`${documents}\\` instead`);\n  }\n\n  setDefaultOptions();\n  const discriminatorKey = this.schema.options.discriminatorKey;\n\n  const writeOperations = documents.reduce((accumulator, document, i) => {\n    if (!options.skipValidation) {\n      if (!(document instanceof Document)) {\n        throw new Error(`documents.${i} was not a mongoose document, documents must be an array of mongoose documents (instanceof mongoose.Document).`);\n      }\n      const validationError = document.validateSync();\n      if (validationError) {\n        throw validationError;\n      }\n    }\n\n    const isANewDocument = document.isNew;\n    if (isANewDocument) {\n      const writeOperation = { insertOne: { document } };\n      utils.injectTimestampsOption(writeOperation.insertOne, options.timestamps);\n      accumulator.push(writeOperation);\n\n      return accumulator;\n    }\n\n    const delta = document.$__delta();\n    const isDocumentWithChanges = delta != null && !utils.isEmptyObject(delta[0]);\n\n    if (isDocumentWithChanges) {\n      const where = document.$__where(delta[0]);\n      const changes = delta[1];\n\n      _applyCustomWhere(document, where);\n\n      // Set the discriminator key, so bulk write casting knows which\n      // schema to use re: gh-13907\n      if (document[discriminatorKey] != null && !(discriminatorKey in where)) {\n        where[discriminatorKey] = document[discriminatorKey];\n      }\n\n      document.$__version(where, delta);\n      const writeOperation = { updateOne: { filter: where, update: changes } };\n      utils.injectTimestampsOption(writeOperation.updateOne, options.timestamps);\n      accumulator.push(writeOperation);\n\n      return accumulator;\n    }\n\n    return accumulator;\n  }, []);\n\n  return writeOperations;\n\n\n  function setDefaultOptions() {\n    options = options || {};\n    if (options.skipValidation == null) {\n      options.skipValidation = false;\n    }\n  }\n};\n\n\n/**\n * Shortcut for creating a new Document from existing raw data, pre-saved in the DB.\n * The document returned has no paths marked as modified initially.\n *\n * #### Example:\n *\n *     // hydrate previous data into a Mongoose document\n *     const mongooseCandy = Candy.hydrate({ _id: '54108337212ffb6d459f854c', type: 'jelly bean' });\n *\n * @param {Object} obj\n * @param {Object|String|String[]} [projection] optional projection containing which fields should be selected for this document\n * @param {Object} [options] optional options\n * @param {Boolean} [options.setters=false] if true, apply schema setters when hydrating\n * @param {Boolean} [options.hydratedPopulatedDocs=false] if true, populates the docs if passing pre-populated data\n * @return {Document} document instance\n * @api public\n */\n\nModel.hydrate = function(obj, projection, options) {\n  _checkContext(this, 'hydrate');\n\n  if (projection != null) {\n    if (obj != null && obj.$__ != null) {\n      obj = obj.toObject(internalToObjectOptions);\n    }\n    obj = applyProjection(obj, projection);\n  }\n  const document = (__webpack_require__(/*! ./queryHelpers */ \"(ssr)/./node_modules/mongoose/lib/queryHelpers.js\").createModel)(this, obj, projection);\n  document.$init(obj, options);\n  return document;\n};\n\n/**\n * Same as `updateOne()`, except MongoDB will update _all_ documents that match\n * `filter` (as opposed to just the first one) regardless of the value of\n * the `multi` option.\n *\n * **Note** updateMany will _not_ fire update middleware. Use `pre('updateMany')`\n * and `post('updateMany')` instead.\n *\n * #### Example:\n *\n *     const res = await Person.updateMany({ name: /Stark$/ }, { isDeleted: true });\n *     res.matchedCount; // Number of documents matched\n *     res.modifiedCount; // Number of documents modified\n *     res.acknowledged; // Boolean indicating everything went smoothly.\n *     res.upsertedId; // null or an id containing a document that had to be upserted.\n *     res.upsertedCount; // Number indicating how many documents had to be upserted. Will either be 0 or 1.\n *\n * This function triggers the following middleware.\n *\n * - `updateMany()`\n *\n * @param {Object} filter\n * @param {Object|Array} update\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @param {Boolean} [options.overwriteDiscriminatorKey=false] Mongoose removes discriminator key updates from `update` by default, set `overwriteDiscriminatorKey` to `true` to allow updating the discriminator key\n * @return {Query}\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see MongoDB docs https://www.mongodb.com/docs/manual/reference/command/update/#update-command-output\n * @see UpdateResult https://mongodb.github.io/node-mongodb-native/4.9/interfaces/UpdateResult.html\n * @api public\n */\n\nModel.updateMany = function updateMany(conditions, doc, options) {\n  _checkContext(this, 'updateMany');\n\n  return _update(this, 'updateMany', conditions, doc, options);\n};\n\n/**\n * Update _only_ the first document that matches `filter`.\n *\n * - Use `replaceOne()` if you want to overwrite an entire document rather than using atomic operators like `$set`.\n *\n * #### Example:\n *\n *     const res = await Person.updateOne({ name: 'Jean-Luc Picard' }, { ship: 'USS Enterprise' });\n *     res.matchedCount; // Number of documents matched\n *     res.modifiedCount; // Number of documents modified\n *     res.acknowledged; // Boolean indicating everything went smoothly.\n *     res.upsertedId; // null or an id containing a document that had to be upserted.\n *     res.upsertedCount; // Number indicating how many documents had to be upserted. Will either be 0 or 1.\n *\n * This function triggers the following middleware.\n *\n * - `updateOne()`\n *\n * @param {Object} filter\n * @param {Object|Array} update\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @param {Boolean} [options.overwriteDiscriminatorKey=false] Mongoose removes discriminator key updates from `update` by default, set `overwriteDiscriminatorKey` to `true` to allow updating the discriminator key\n * @return {Query}\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see MongoDB docs https://www.mongodb.com/docs/manual/reference/command/update/#update-command-output\n * @see UpdateResult https://mongodb.github.io/node-mongodb-native/4.9/interfaces/UpdateResult.html\n * @api public\n */\n\nModel.updateOne = function updateOne(conditions, doc, options) {\n  _checkContext(this, 'updateOne');\n\n  return _update(this, 'updateOne', conditions, doc, options);\n};\n\n/**\n * Replace the existing document with the given document (no atomic operators like `$set`).\n *\n * #### Example:\n *\n *     const res = await Person.replaceOne({ _id: 24601 }, { name: 'Jean Valjean' });\n *     res.matchedCount; // Number of documents matched\n *     res.modifiedCount; // Number of documents modified\n *     res.acknowledged; // Boolean indicating everything went smoothly.\n *     res.upsertedId; // null or an id containing a document that had to be upserted.\n *     res.upsertedCount; // Number indicating how many documents had to be upserted. Will either be 0 or 1.\n *\n * This function triggers the following middleware.\n *\n * - `replaceOne()`\n *\n * @param {Object} filter\n * @param {Object} doc\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see UpdateResult https://mongodb.github.io/node-mongodb-native/4.9/interfaces/UpdateResult.html\n * @return {Query}\n * @api public\n */\n\nModel.replaceOne = function replaceOne(conditions, doc, options) {\n  _checkContext(this, 'replaceOne');\n\n  const versionKey = this && this.schema && this.schema.options && this.schema.options.versionKey || null;\n  if (versionKey && !doc[versionKey]) {\n    doc[versionKey] = 0;\n  }\n\n  return _update(this, 'replaceOne', conditions, doc, options);\n};\n\n/**\n * Common code for `updateOne()`, `updateMany()`, `replaceOne()`, and `update()`\n * because they need to do the same thing\n * @api private\n */\n\nfunction _update(model, op, conditions, doc, options) {\n  const mq = new model.Query({}, {}, model, model.collection);\n\n  // gh-2406\n  // make local deep copy of conditions\n  if (conditions instanceof Document) {\n    conditions = conditions.toObject();\n  } else {\n    conditions = clone(conditions);\n  }\n  options = typeof options === 'function' ? options : clone(options);\n\n  const versionKey = model &&\n  model.schema &&\n  model.schema.options &&\n  model.schema.options.versionKey || null;\n  decorateUpdateWithVersionKey(doc, options, versionKey);\n\n  return mq[op](conditions, doc, options);\n}\n\n/**\n * Performs [aggregations](https://www.mongodb.com/docs/manual/aggregation/) on the models collection.\n *\n * If a `callback` is passed, the `aggregate` is executed and a `Promise` is returned. If a callback is not passed, the `aggregate` itself is returned.\n *\n * This function triggers the following middleware.\n *\n * - `aggregate()`\n *\n * #### Example:\n *\n *     // Find the max balance of all accounts\n *     const res = await Users.aggregate([\n *       { $group: { _id: null, maxBalance: { $max: '$balance' }}},\n *       { $project: { _id: 0, maxBalance: 1 }}\n *     ]);\n *\n *     console.log(res); // [ { maxBalance: 98000 } ]\n *\n *     // Or use the aggregation pipeline builder.\n *     const res = await Users.aggregate().\n *       group({ _id: null, maxBalance: { $max: '$balance' } }).\n *       project('-id maxBalance').\n *       exec();\n *     console.log(res); // [ { maxBalance: 98 } ]\n *\n * #### Note:\n *\n * - Mongoose does **not** cast aggregation pipelines to the model's schema because `$project` and `$group` operators allow redefining the \"shape\" of the documents at any stage of the pipeline, which may leave documents in an incompatible format. You can use the [mongoose-cast-aggregation plugin](https://github.com/AbdelrahmanHafez/mongoose-cast-aggregation) to enable minimal casting for aggregation pipelines.\n * - The documents returned are plain javascript objects, not mongoose documents (since any shape of document can be returned).\n *\n * #### More About Aggregations:\n *\n * - [Mongoose `Aggregate`](https://mongoosejs.com/docs/api/aggregate.html)\n * - [An Introduction to Mongoose Aggregate](https://masteringjs.io/tutorials/mongoose/aggregate)\n * - [MongoDB Aggregation docs](https://www.mongodb.com/docs/manual/applications/aggregation/)\n *\n * @see Aggregate https://mongoosejs.com/docs/api/aggregate.html#Aggregate()\n * @see MongoDB https://www.mongodb.com/docs/manual/applications/aggregation/\n * @param {Array} [pipeline] aggregation pipeline as an array of objects\n * @param {Object} [options] aggregation options\n * @return {Aggregate}\n * @api public\n */\n\nModel.aggregate = function aggregate(pipeline, options) {\n  _checkContext(this, 'aggregate');\n\n  if (typeof options === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.aggregate() no longer accepts a callback');\n  }\n\n  const aggregate = new Aggregate(pipeline || []);\n  aggregate.model(this);\n  if (options != null) {\n    aggregate.option(options);\n  }\n\n  if (typeof callback === 'undefined') {\n    return aggregate;\n  }\n\n  return aggregate;\n};\n\n/**\n * Casts and validates the given object against this model's schema, passing the\n * given `context` to custom validators.\n *\n * #### Example:\n *\n *     const Model = mongoose.model('Test', Schema({\n *       name: { type: String, required: true },\n *       age: { type: Number, required: true }\n *     });\n *\n *     try {\n *       await Model.validate({ name: null }, ['name'])\n *     } catch (err) {\n *       err instanceof mongoose.Error.ValidationError; // true\n *       Object.keys(err.errors); // ['name']\n *     }\n *\n * @param {Object} obj\n * @param {Object|Array|String} pathsOrOptions\n * @param {Object} [context]\n * @return {Promise<Object>} casted and validated copy of `obj` if validation succeeded\n * @api public\n */\n\nModel.validate = async function validate(obj, pathsOrOptions, context) {\n  if ((arguments.length < 3) || (arguments.length === 3 && typeof arguments[2] === 'function')) {\n    // For convenience, if we're validating a document or an object, make `context` default to\n    // the model so users don't have to always pass `context`, re: gh-10132, gh-10346\n    context = obj;\n  }\n  if (typeof context === 'function' || typeof arguments[3] === 'function') {\n    throw new MongooseError('Model.validate() no longer accepts a callback');\n  }\n\n  let schema = this.schema;\n  const discriminatorKey = schema.options.discriminatorKey;\n  if (schema.discriminators != null && obj != null && obj[discriminatorKey] != null) {\n    schema = getSchemaDiscriminatorByValue(schema, obj[discriminatorKey]) || schema;\n  }\n  let paths = Object.keys(schema.paths);\n\n  if (pathsOrOptions != null) {\n    const _pathsToValidate = typeof pathsOrOptions === 'string' ? new Set(pathsOrOptions.split(' ')) : Array.isArray(pathsOrOptions) ? new Set(pathsOrOptions) : new Set(paths);\n    paths = paths.filter(p => {\n      if (pathsOrOptions.pathsToSkip) {\n        if (Array.isArray(pathsOrOptions.pathsToSkip)) {\n          if (pathsOrOptions.pathsToSkip.find(x => x == p)) {\n            return false;\n          }\n        } else if (typeof pathsOrOptions.pathsToSkip == 'string') {\n          if (pathsOrOptions.pathsToSkip.includes(p)) {\n            return false;\n          }\n        }\n      }\n      const pieces = p.split('.');\n      let cur = pieces[0];\n\n      for (const piece of pieces) {\n        if (_pathsToValidate.has(cur)) {\n          return true;\n        }\n        cur += '.' + piece;\n      }\n\n      return _pathsToValidate.has(p);\n    });\n  }\n\n  for (const path of paths) {\n    const schemaType = schema.path(path);\n    if (!schemaType || !schemaType.$isMongooseArray || schemaType.$isMongooseDocumentArray) {\n      continue;\n    }\n\n    const val = get(obj, path);\n    pushNestedArrayPaths(paths, val, path);\n  }\n\n  let error = null;\n  paths = new Set(paths);\n\n  try {\n    obj = this.castObject(obj);\n  } catch (err) {\n    error = err;\n    for (const key of Object.keys(error.errors || {})) {\n      paths.delete(key);\n    }\n  }\n\n  let remaining = paths.size;\n\n  return new Promise((resolve, reject) => {\n    for (const path of paths) {\n      const schemaType = schema.path(path);\n      if (schemaType == null) {\n        _checkDone();\n        continue;\n      }\n\n      const pieces = path.indexOf('.') === -1 ? [path] : path.split('.');\n      let cur = obj;\n      for (let i = 0; i < pieces.length - 1; ++i) {\n        cur = cur[pieces[i]];\n      }\n\n      const val = get(obj, path, void 0);\n\n      schemaType.doValidate(val, err => {\n        if (err) {\n          error = error || new ValidationError();\n          error.addError(path, err);\n        }\n        _checkDone();\n      }, context, { path: path });\n    }\n\n    function _checkDone() {\n      if (--remaining <= 0) {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(obj);\n        }\n      }\n    }\n  });\n};\n\n/**\n * Populates document references.\n *\n * Changed in Mongoose 6: the model you call `populate()` on should be the\n * \"local field\" model, **not** the \"foreign field\" model.\n *\n * #### Available top-level options:\n *\n * - path: space delimited path(s) to populate\n * - select: optional fields to select\n * - match: optional query conditions to match\n * - model: optional name of the model to use for population\n * - options: optional query options like sort, limit, etc\n * - justOne: optional boolean, if true Mongoose will always set `path` to a document, or `null` if no document was found. If false, Mongoose will always set `path` to an array, which will be empty if no documents are found. Inferred from schema by default.\n * - strictPopulate: optional boolean, set to `false` to allow populating paths that aren't in the schema.\n *\n * #### Example:\n *\n *     const Dog = mongoose.model('Dog', new Schema({ name: String, breed: String }));\n *     const Person = mongoose.model('Person', new Schema({\n *       name: String,\n *       pet: { type: mongoose.ObjectId, ref: 'Dog' }\n *     }));\n *\n *     const pets = await Pet.create([\n *       { name: 'Daisy', breed: 'Beagle' },\n *       { name: 'Einstein', breed: 'Catalan Sheepdog' }\n *     ]);\n *\n *     // populate many plain objects\n *     const users = [\n *       { name: 'John Wick', dog: pets[0]._id },\n *       { name: 'Doc Brown', dog: pets[1]._id }\n *     ];\n *     await User.populate(users, { path: 'dog', select: 'name' });\n *     users[0].dog.name; // 'Daisy'\n *     users[0].dog.breed; // undefined because of `select`\n *\n * @param {Document|Array} docs Either a single document or array of documents to populate.\n * @param {Object|String} options Either the paths to populate or an object specifying all parameters\n * @param {string} [options.path=null] The path to populate.\n * @param {string|PopulateOptions} [options.populate=null] Recursively populate paths in the populated documents. See [deep populate docs](https://mongoosejs.com/docs/populate.html#deep-populate).\n * @param {boolean} [options.retainNullValues=false] By default, Mongoose removes null and undefined values from populated arrays. Use this option to make `populate()` retain `null` and `undefined` array entries.\n * @param {boolean} [options.getters=false] If true, Mongoose will call any getters defined on the `localField`. By default, Mongoose gets the raw value of `localField`. For example, you would need to set this option to `true` if you wanted to [add a `lowercase` getter to your `localField`](https://mongoosejs.com/docs/schematypes.html#schematype-options).\n * @param {boolean} [options.clone=false] When you do `BlogPost.find().populate('author')`, blog posts with the same author will share 1 copy of an `author` doc. Enable this option to make Mongoose clone populated docs before assigning them.\n * @param {Object|Function} [options.match=null] Add an additional filter to the populate query. Can be a filter object containing [MongoDB query syntax](https://www.mongodb.com/docs/manual/tutorial/query-documents/), or a function that returns a filter object.\n * @param {Boolean} [options.skipInvalidIds=false] By default, Mongoose throws a cast error if `localField` and `foreignField` schemas don't line up. If you enable this option, Mongoose will instead filter out any `localField` properties that cannot be casted to `foreignField`'s schema type.\n * @param {Number} [options.perDocumentLimit=null] For legacy reasons, `limit` with `populate()` may give incorrect results because it only executes a single query for every document being populated. If you set `perDocumentLimit`, Mongoose will ensure correct `limit` per document by executing a separate query for each document to `populate()`. For example, `.find().populate({ path: 'test', perDocumentLimit: 2 })` will execute 2 additional queries if `.find()` returns 2 documents.\n * @param {Boolean} [options.strictPopulate=true] Set to false to allow populating paths that aren't defined in the given model's schema.\n * @param {Object} [options.options=null] Additional options like `limit` and `lean`.\n * @param {Function} [options.transform=null] Function that Mongoose will call on every populated document that allows you to transform the populated document.\n * @param {Function} [callback(err,doc)] Optional callback, executed upon completion. Receives `err` and the `doc(s)`.\n * @return {Promise}\n * @api public\n */\n\nModel.populate = async function populate(docs, paths) {\n  _checkContext(this, 'populate');\n  if (typeof paths === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.populate() no longer accepts a callback');\n  }\n  const _this = this;\n  // normalized paths\n  paths = utils.populate(paths);\n  // data that should persist across subPopulate calls\n  const cache = {};\n\n  return new Promise((resolve, reject) => {\n    _populate(_this, docs, paths, cache, (err, res) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve(res);\n    });\n  });\n};\n\n/**\n * Populate helper\n *\n * @param {Model} model the model to use\n * @param {Document|Array} docs Either a single document or array of documents to populate.\n * @param {Object} paths\n * @param {never} cache Unused\n * @param {Function} [callback] Optional callback, executed upon completion. Receives `err` and the `doc(s)`.\n * @return {Function}\n * @api private\n */\n\nfunction _populate(model, docs, paths, cache, callback) {\n  let pending = paths.length;\n  if (paths.length === 0) {\n    return callback(null, docs);\n  }\n  // each path has its own query options and must be executed separately\n  for (const path of paths) {\n    populate(model, docs, path, next);\n  }\n\n  function next(err) {\n    if (err) {\n      return callback(err, null);\n    }\n    if (--pending) {\n      return;\n    }\n    callback(null, docs);\n  }\n}\n\n/*!\n * Populates `docs`\n */\nconst excludeIdReg = /\\s?-_id\\s?/;\nconst excludeIdRegGlobal = /\\s?-_id\\s?/g;\n\nfunction populate(model, docs, options, callback) {\n  const populateOptions = options;\n  if (options.strictPopulate == null) {\n    if (options._localModel != null && options._localModel.schema._userProvidedOptions.strictPopulate != null) {\n      populateOptions.strictPopulate = options._localModel.schema._userProvidedOptions.strictPopulate;\n    } else if (options._localModel != null && model.base.options.strictPopulate != null) {\n      populateOptions.strictPopulate = model.base.options.strictPopulate;\n    } else if (model.base.options.strictPopulate != null) {\n      populateOptions.strictPopulate = model.base.options.strictPopulate;\n    }\n  }\n\n  // normalize single / multiple docs passed\n  if (!Array.isArray(docs)) {\n    docs = [docs];\n  }\n  if (docs.length === 0 || docs.every(utils.isNullOrUndefined)) {\n    return callback();\n  }\n\n  const modelsMap = getModelsMapForPopulate(model, docs, populateOptions);\n\n  if (modelsMap instanceof MongooseError) {\n    return immediate(function() {\n      callback(modelsMap);\n    });\n  }\n  const len = modelsMap.length;\n  let vals = [];\n\n  function flatten(item) {\n    // no need to include undefined values in our query\n    return undefined !== item;\n  }\n\n  let _remaining = len;\n  let hasOne = false;\n  const params = [];\n  for (let i = 0; i < len; ++i) {\n    const mod = modelsMap[i];\n    let select = mod.options.select;\n    let ids = utils.array.flatten(mod.ids, flatten);\n    ids = utils.array.unique(ids);\n\n    const assignmentOpts = {};\n    assignmentOpts.sort = mod &&\n      mod.options &&\n      mod.options.options &&\n      mod.options.options.sort || void 0;\n    assignmentOpts.excludeId = excludeIdReg.test(select) || (select && select._id === 0);\n\n    // Lean transform may delete `_id`, which would cause assignment\n    // to fail. So delay running lean transform until _after_\n    // `_assign()`\n    if (mod.options &&\n        mod.options.options &&\n        mod.options.options.lean &&\n        mod.options.options.lean.transform) {\n      mod.options.options._leanTransform = mod.options.options.lean.transform;\n      mod.options.options.lean = true;\n    }\n\n    if (ids.length === 0 || ids.every(utils.isNullOrUndefined)) {\n      // Ensure that we set to 0 or empty array even\n      // if we don't actually execute a query to make sure there's a value\n      // and we know this path was populated for future sets. See gh-7731, gh-8230\n      --_remaining;\n      _assign(model, [], mod, assignmentOpts);\n      continue;\n    }\n\n    hasOne = true;\n    if (typeof populateOptions.foreignField === 'string') {\n      mod.foreignField.clear();\n      mod.foreignField.add(populateOptions.foreignField);\n    }\n    const match = createPopulateQueryFilter(ids, mod.match, mod.foreignField, mod.model, mod.options.skipInvalidIds);\n    if (assignmentOpts.excludeId) {\n      // override the exclusion from the query so we can use the _id\n      // for document matching during assignment. we'll delete the\n      // _id back off before returning the result.\n      if (typeof select === 'string') {\n        select = select.replace(excludeIdRegGlobal, ' ');\n      } else if (Array.isArray(select)) {\n        select = select.filter(field => field !== '-_id');\n      } else {\n        // preserve original select conditions by copying\n        select = { ...select };\n        delete select._id;\n      }\n    }\n\n    if (mod.options.options && mod.options.options.limit != null) {\n      assignmentOpts.originalLimit = mod.options.options.limit;\n    } else if (mod.options.limit != null) {\n      assignmentOpts.originalLimit = mod.options.limit;\n    }\n    params.push([mod, match, select, assignmentOpts, _next]);\n  }\n  if (!hasOne) {\n    // If models but no docs, skip further deep populate.\n    if (modelsMap.length !== 0) {\n      return callback();\n    }\n    // If no models to populate but we have a nested populate,\n    // keep trying, re: gh-8946\n    if (populateOptions.populate != null) {\n      const opts = utils.populate(populateOptions.populate).map(pop => Object.assign({}, pop, {\n        path: populateOptions.path + '.' + pop.path\n      }));\n      model.populate(docs, opts).then(res => { callback(null, res); }, err => { callback(err); });\n      return;\n    }\n    return callback();\n  }\n\n  for (const arr of params) {\n    _execPopulateQuery.apply(null, arr);\n  }\n  function _next(err, valsFromDb) {\n    if (err != null) {\n      return callback(err, null);\n    }\n    vals = vals.concat(valsFromDb);\n    if (--_remaining === 0) {\n      _done();\n    }\n  }\n\n  function _done() {\n    for (const arr of params) {\n      const mod = arr[0];\n      const assignmentOpts = arr[3];\n      for (const val of vals) {\n        mod.options._childDocs.push(val);\n      }\n      try {\n        _assign(model, vals, mod, assignmentOpts);\n      } catch (err) {\n        return callback(err);\n      }\n    }\n\n    for (const arr of params) {\n      removeDeselectedForeignField(arr[0].foreignField, arr[0].options, vals);\n    }\n    for (const arr of params) {\n      const mod = arr[0];\n      if (mod.options && mod.options.options && mod.options.options._leanTransform) {\n        for (const doc of vals) {\n          mod.options.options._leanTransform(doc);\n        }\n      }\n    }\n    callback();\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _execPopulateQuery(mod, match, select, assignmentOpts, callback) {\n  let subPopulate = clone(mod.options.populate);\n  const queryOptions = Object.assign({\n    skip: mod.options.skip,\n    limit: mod.options.limit,\n    perDocumentLimit: mod.options.perDocumentLimit\n  }, mod.options.options);\n\n  if (mod.count) {\n    delete queryOptions.skip;\n  }\n\n  if (queryOptions.perDocumentLimit != null) {\n    queryOptions.limit = queryOptions.perDocumentLimit;\n    delete queryOptions.perDocumentLimit;\n  } else if (queryOptions.limit != null) {\n    queryOptions.limit = queryOptions.limit * mod.ids.length;\n  }\n\n  const query = mod.model.find(match, select, queryOptions);\n  // If we're doing virtual populate and projection is inclusive and foreign\n  // field is not selected, automatically select it because mongoose needs it.\n  // If projection is exclusive and client explicitly unselected the foreign\n  // field, that's the client's fault.\n  for (const foreignField of mod.foreignField) {\n    if (foreignField !== '_id' &&\n        query.selectedInclusively() &&\n        !isPathSelectedInclusive(query._fields, foreignField)) {\n      query.select(foreignField);\n    }\n  }\n\n  // If using count, still need the `foreignField` so we can match counts\n  // to documents, otherwise we would need a separate `count()` for every doc.\n  if (mod.count) {\n    for (const foreignField of mod.foreignField) {\n      query.select(foreignField);\n    }\n  }\n\n  // If we need to sub-populate, call populate recursively\n  if (subPopulate) {\n    // If subpopulating on a discriminator, skip check for non-existent\n    // paths. Because the discriminator may not have the path defined.\n    if (mod.model.baseModelName != null) {\n      if (Array.isArray(subPopulate)) {\n        subPopulate.forEach(pop => { pop.strictPopulate = false; });\n      } else if (typeof subPopulate === 'string') {\n        subPopulate = { path: subPopulate, strictPopulate: false };\n      } else {\n        subPopulate.strictPopulate = false;\n      }\n    }\n    const basePath = mod.options._fullPath || mod.options.path;\n\n    if (Array.isArray(subPopulate)) {\n      for (const pop of subPopulate) {\n        pop._fullPath = basePath + '.' + pop.path;\n      }\n    } else if (typeof subPopulate === 'object') {\n      subPopulate._fullPath = basePath + '.' + subPopulate.path;\n    }\n\n    query.populate(subPopulate);\n  }\n\n  query.exec().then(\n    docs => {\n      for (const val of docs) {\n        leanPopulateMap.set(val, mod.model);\n      }\n      callback(null, docs);\n    },\n    err => {\n      callback(err);\n    }\n  );\n}\n\n/*!\n * ignore\n */\n\nfunction _assign(model, vals, mod, assignmentOpts) {\n  const options = mod.options;\n  const isVirtual = mod.isVirtual;\n  const justOne = mod.justOne;\n  let _val;\n  const lean = options &&\n    options.options &&\n    options.options.lean || false;\n  const len = vals.length;\n  const rawOrder = {};\n  const rawDocs = {};\n  let key;\n  let val;\n\n  // Clone because `assignRawDocsToIdStructure` will mutate the array\n  const allIds = clone(mod.allIds);\n  // optimization:\n  // record the document positions as returned by\n  // the query result.\n  for (let i = 0; i < len; i++) {\n    val = vals[i];\n    if (val == null) {\n      continue;\n    }\n    for (const foreignField of mod.foreignField) {\n      _val = utils.getValue(foreignField, val);\n      if (Array.isArray(_val)) {\n        _val = utils.array.unique(utils.array.flatten(_val));\n\n        for (let __val of _val) {\n          if (__val instanceof Document) {\n            __val = __val._id;\n          }\n          key = String(__val);\n          if (rawDocs[key]) {\n            if (Array.isArray(rawDocs[key])) {\n              rawDocs[key].push(val);\n              rawOrder[key].push(i);\n            } else {\n              rawDocs[key] = [rawDocs[key], val];\n              rawOrder[key] = [rawOrder[key], i];\n            }\n          } else {\n            if (isVirtual && !justOne) {\n              rawDocs[key] = [val];\n              rawOrder[key] = [i];\n            } else {\n              rawDocs[key] = val;\n              rawOrder[key] = i;\n            }\n          }\n        }\n      } else {\n        if (_val instanceof Document) {\n          _val = _val._id;\n        }\n        key = String(_val);\n        if (rawDocs[key]) {\n          if (Array.isArray(rawDocs[key])) {\n            rawDocs[key].push(val);\n            rawOrder[key].push(i);\n          } else if (isVirtual ||\n            rawDocs[key].constructor !== val.constructor ||\n            String(rawDocs[key]._id) !== String(val._id)) {\n            // May need to store multiple docs with the same id if there's multiple models\n            // if we have discriminators or a ref function. But avoid converting to an array\n            // if we have multiple queries on the same model because of `perDocumentLimit` re: gh-9906\n            rawDocs[key] = [rawDocs[key], val];\n            rawOrder[key] = [rawOrder[key], i];\n          }\n        } else {\n          rawDocs[key] = val;\n          rawOrder[key] = i;\n        }\n      }\n      // flag each as result of population\n      if (!lean) {\n        val.$__.wasPopulated = val.$__.wasPopulated || true;\n      }\n    }\n  }\n\n  assignVals({\n    originalModel: model,\n    // If virtual, make sure to not mutate original field\n    rawIds: mod.isVirtual ? allIds : mod.allIds,\n    allIds: allIds,\n    unpopulatedValues: mod.unpopulatedValues,\n    foreignField: mod.foreignField,\n    rawDocs: rawDocs,\n    rawOrder: rawOrder,\n    docs: mod.docs,\n    path: options.path,\n    options: assignmentOpts,\n    justOne: mod.justOne,\n    isVirtual: mod.isVirtual,\n    allOptions: mod,\n    populatedModel: mod.model,\n    lean: lean,\n    virtual: mod.virtual,\n    count: mod.count,\n    match: mod.match\n  });\n}\n\n/**\n * Compiler utility.\n *\n * @param {String|Function} name model name or class extending Model\n * @param {Schema} schema\n * @param {String} collectionName\n * @param {Connection} connection\n * @param {Mongoose} base mongoose instance\n * @api private\n */\n\nModel.compile = function compile(name, schema, collectionName, connection, base) {\n  const versioningEnabled = schema.options.versionKey !== false;\n\n  if (versioningEnabled && !schema.paths[schema.options.versionKey]) {\n    // add versioning to top level documents only\n    const o = {};\n    o[schema.options.versionKey] = Number;\n    schema.add(o);\n  }\n  let model;\n  if (typeof name === 'function' && name.prototype instanceof Model) {\n    model = name;\n    name = model.name;\n    schema.loadClass(model, false);\n    model.prototype.$isMongooseModelPrototype = true;\n  } else {\n    // generate new class\n    model = function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    };\n  }\n\n  model.hooks = schema.s.hooks.clone();\n  model.base = base;\n  model.modelName = name;\n\n  if (!(model.prototype instanceof Model)) {\n    Object.setPrototypeOf(model, Model);\n    Object.setPrototypeOf(model.prototype, Model.prototype);\n  }\n  model.model = function model(name) {\n    return this.db.model(name);\n  };\n\n  model.db = connection;\n  model.prototype.db = connection;\n  model.prototype[modelDbSymbol] = connection;\n  model.discriminators = model.prototype.discriminators = undefined;\n  model[modelSymbol] = true;\n  model.events = new EventEmitter();\n\n  schema._preCompile();\n\n  const _userProvidedOptions = schema._userProvidedOptions || {};\n\n  const collectionOptions = {\n    schemaUserProvidedOptions: _userProvidedOptions,\n    capped: schema.options.capped,\n    Promise: model.base.Promise,\n    modelName: name\n  };\n  if (schema.options.autoCreate !== void 0) {\n    collectionOptions.autoCreate = schema.options.autoCreate;\n  }\n\n  const collection = connection.collection(\n    collectionName,\n    collectionOptions\n  );\n\n  model.prototype.collection = collection;\n  model.prototype.$collection = collection;\n  model.prototype[modelCollectionSymbol] = collection;\n\n  model.prototype.$__setSchema(schema);\n\n  // apply methods and statics\n  applyMethods(model, schema);\n  applyStatics(model, schema);\n  applyHooks(model, schema);\n  applyStaticHooks(model, schema.s.hooks, schema.statics);\n\n  model.schema = model.prototype.$__schema;\n  model.collection = collection;\n  model.$__collection = collection;\n\n  // Create custom query constructor\n  model.Query = function() {\n    Query.apply(this, arguments);\n  };\n  Object.setPrototypeOf(model.Query.prototype, Query.prototype);\n  model.Query.base = Query.base;\n  model.Query.prototype.constructor = Query;\n  model._applyQueryMiddleware();\n  applyQueryMethods(model, schema.query);\n\n  return model;\n};\n\n/**\n * Register custom query methods for this model\n *\n * @param {Model} model\n * @param {Schema} schema\n * @api private\n */\n\nfunction applyQueryMethods(model, methods) {\n  for (const i in methods) {\n    model.Query.prototype[i] = methods[i];\n  }\n}\n\n/**\n * Subclass this model with `conn`, `schema`, and `collection` settings.\n *\n * @param {Connection} conn\n * @param {Schema} [schema]\n * @param {String} [collection]\n * @return {Model}\n * @api private\n * @memberOf Model\n * @static\n * @method __subclass\n */\n\nModel.__subclass = function subclass(conn, schema, collection) {\n  // subclass model using this connection and collection name\n  const _this = this;\n\n  const Model = function Model(doc, fields, skipId) {\n    if (!(this instanceof Model)) {\n      return new Model(doc, fields, skipId);\n    }\n    _this.call(this, doc, fields, skipId);\n  };\n\n  Object.setPrototypeOf(Model, _this);\n  Object.setPrototypeOf(Model.prototype, _this.prototype);\n  Model.db = conn;\n  Model.prototype.db = conn;\n  Model.prototype[modelDbSymbol] = conn;\n\n  _this[subclassedSymbol] = _this[subclassedSymbol] || [];\n  _this[subclassedSymbol].push(Model);\n  if (_this.discriminators != null) {\n    Model.discriminators = {};\n    for (const key of Object.keys(_this.discriminators)) {\n      Model.discriminators[key] = _this.discriminators[key].\n        __subclass(_this.db, _this.discriminators[key].schema, collection);\n    }\n  }\n\n  const s = schema && typeof schema !== 'string'\n    ? schema\n    : _this.prototype.$__schema;\n\n  const options = s.options || {};\n  const _userProvidedOptions = s._userProvidedOptions || {};\n\n  if (!collection) {\n    collection = _this.prototype.$__schema.get('collection') ||\n      utils.toCollectionName(_this.modelName, this.base.pluralize());\n  }\n\n  const collectionOptions = {\n    schemaUserProvidedOptions: _userProvidedOptions,\n    capped: s && options.capped\n  };\n\n  Model.prototype.collection = conn.collection(collection, collectionOptions);\n  Model.prototype.$collection = Model.prototype.collection;\n  Model.prototype[modelCollectionSymbol] = Model.prototype.collection;\n  Model.collection = Model.prototype.collection;\n  Model.$__collection = Model.collection;\n  // Errors handled internally, so ignore\n  Model.init().catch(() => {});\n  return Model;\n};\n\n/**\n * Apply changes made to this model's schema after this model was compiled.\n * By default, adding virtuals and other properties to a schema after the model is compiled does nothing.\n * Call this function to apply virtuals and properties that were added later.\n *\n * #### Example:\n *\n *     const schema = new mongoose.Schema({ field: String });\n *     const TestModel = mongoose.model('Test', schema);\n *     TestModel.schema.virtual('myVirtual').get(function() {\n *       return this.field + ' from myVirtual';\n *     });\n *     const doc = new TestModel({ field: 'Hello' });\n *     doc.myVirtual; // undefined\n *\n *     TestModel.recompileSchema();\n *     doc.myVirtual; // 'Hello from myVirtual'\n *\n * @return {undefined}\n * @api public\n * @memberOf Model\n * @static\n * @method recompileSchema\n */\n\nModel.recompileSchema = function recompileSchema() {\n  this.prototype.$__setSchema(this.schema);\n};\n\n/**\n * Helper for console.log. Given a model named 'MyModel', returns the string\n * `'Model { MyModel }'`.\n *\n * #### Example:\n *\n *     const MyModel = mongoose.model('Test', Schema({ name: String }));\n *     MyModel.inspect(); // 'Model { Test }'\n *     console.log(MyModel); // Prints 'Model { Test }'\n *\n * @api public\n */\n\nModel.inspect = function() {\n  return `Model { ${this.modelName} }`;\n};\n\nif (util.inspect.custom) {\n  // Avoid Node deprecation warning DEP0079\n  Model[util.inspect.custom] = Model.inspect;\n}\n\n/*!\n * Applies query middleware from this model's schema to this model's\n * Query constructor.\n */\n\nModel._applyQueryMiddleware = function _applyQueryMiddleware() {\n  const Query = this.Query;\n  const queryMiddleware = this.schema.s.hooks.filter(hook => {\n    const contexts = _getContexts(hook);\n    if (hook.name === 'validate') {\n      return !!contexts.query;\n    }\n    if (hook.name === 'deleteOne' || hook.name === 'updateOne') {\n      return !!contexts.query || Object.keys(contexts).length === 0;\n    }\n    if (hook.query != null || hook.document != null) {\n      return !!hook.query;\n    }\n    return true;\n  });\n\n  Query.prototype._queryMiddleware = queryMiddleware;\n};\n\nfunction _getContexts(hook) {\n  const ret = {};\n  if (hook.hasOwnProperty('query')) {\n    ret.query = hook.query;\n  }\n  if (hook.hasOwnProperty('document')) {\n    ret.document = hook.document;\n  }\n  return ret;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = Model;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL21vZGVsLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0IsbUJBQU8sQ0FBQyxtRUFBYTtBQUN2QyxxQkFBcUIsbUJBQU8sQ0FBQyx1RkFBdUI7QUFDcEQsaUJBQWlCLG1CQUFPLENBQUMsaUVBQVk7QUFDckMsOEJBQThCLG1CQUFPLENBQUMsNkVBQWtCO0FBQ3hELDRCQUE0QixtQkFBTyxDQUFDLHlGQUF3QjtBQUM1RCxxQkFBcUIsMERBQThCO0FBQ25ELGVBQWUsbUJBQU8sQ0FBQyxvREFBUTtBQUMvQix1QkFBdUIsbUJBQU8sQ0FBQyx5RUFBZ0I7QUFDL0Msc0JBQXNCLG1CQUFPLENBQUMsdUVBQWU7QUFDN0MsNkJBQTZCLG1CQUFPLENBQUMsMkZBQXlCO0FBQzlELDRCQUE0QixtQkFBTyxDQUFDLHlGQUF3QjtBQUM1RCxjQUFjLG1CQUFPLENBQUMsMkRBQVM7QUFDL0Isb0JBQW9CLG1CQUFPLENBQUMsdUZBQXVCO0FBQ25ELGVBQWUsbUJBQU8sQ0FBQyw2REFBVTtBQUNqQyx3QkFBd0IsbUJBQU8sQ0FBQyxpRkFBb0I7QUFDcEQscUJBQXFCLG1CQUFPLENBQUMsMkVBQWlCO0FBQzlDLDBCQUEwQixtQkFBTyxDQUFDLHFGQUFzQjtBQUN4RCw0QkFBNEIsbUJBQU8sQ0FBQyw2R0FBa0M7QUFDdEUsNEJBQTRCLG1CQUFPLENBQUMsbUhBQXFDO0FBQ3pFLG1CQUFtQixtQkFBTyxDQUFDLGlHQUE0QjtBQUN2RCxxQkFBcUIsbUJBQU8sQ0FBQyxxR0FBOEI7QUFDM0Qsd0JBQXdCLG1CQUFPLENBQUMscUhBQXNDO0FBQ3RFLDZCQUE2QixtQkFBTyxDQUFDLHlIQUF3QztBQUM3RSx5QkFBeUIsbUJBQU8sQ0FBQyw2R0FBa0M7QUFDbkUscUJBQXFCLG1CQUFPLENBQUMscUdBQThCO0FBQzNELDBCQUEwQixtQkFBTyxDQUFDLGlIQUFvQztBQUN0RSxtQkFBbUIsbUJBQU8sQ0FBQyx1R0FBK0I7QUFDMUQsc0JBQXNCLG1CQUFPLENBQUMsdUdBQStCO0FBQzdELGNBQWMsbUJBQU8sQ0FBQywyRUFBaUI7QUFDdkMsa0NBQWtDLG1CQUFPLENBQUMscUlBQThDO0FBQ3hGLHFDQUFxQyxtQkFBTyxDQUFDLHVJQUErQztBQUM1RixrQ0FBa0MsbUJBQU8sQ0FBQyxtSEFBcUM7QUFDL0Usc0NBQXNDLG1CQUFPLENBQUMsdUpBQXVEO0FBQ3JHLHNCQUFzQixtQkFBTyxDQUFDLHVHQUErQjtBQUM3RCxpQkFBaUIsbUJBQU8sQ0FBQyxpRkFBb0I7QUFDN0MsYUFBYSxtQkFBTyxDQUFDLHlFQUFnQjtBQUNyQyxZQUFZLG1CQUFPLENBQUMsdUVBQWU7QUFDbkMsMkJBQTJCLG1CQUFPLENBQUMscUdBQThCO0FBQ2pFLGdDQUFnQyxtQkFBTyxDQUFDLDJJQUFpRDtBQUN6RixnQ0FBZ0MsbUJBQU8sQ0FBQyxpSUFBNEM7QUFDcEYsa0JBQWtCLG1CQUFPLENBQUMsbUZBQXFCO0FBQy9DLGdDQUFnQyw4R0FBNEM7QUFDNUUseUJBQXlCLG1CQUFPLENBQUMsaUhBQW9DO0FBQ3JFLHFCQUFxQixtQkFBTyxDQUFDLHlHQUFnQztBQUM3RDtBQUNBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQyxtSEFBcUM7QUFDakQsdUJBQXVCLG1CQUFPLENBQUMsbUhBQXFDO0FBQ3BFLDBDQUEwQyxtQkFBTyxDQUFDLG1KQUFxRDtBQUN2RyxnQ0FBZ0MsbUJBQU8sQ0FBQyxxSUFBOEM7QUFDdEYsd0JBQXdCLG1CQUFPLENBQUMsaUhBQW9DO0FBQ3BFLHNCQUFzQixtQkFBTyxDQUFDLDJGQUF5QjtBQUN2RCxvQkFBb0IsbUJBQU8sQ0FBQyxpR0FBNEI7QUFDeEQscUNBQXFDLG1CQUFPLENBQUMsNklBQWtEO0FBQy9GLDZCQUE2QixtQkFBTyxDQUFDLHFIQUFzQztBQUMzRSxxQ0FBcUMsbUJBQU8sQ0FBQywySUFBaUQ7QUFDOUYsc0JBQXNCLG1CQUFPLENBQUMscUdBQThCO0FBQzVELGVBQWUsbUJBQU8sQ0FBQywrRUFBbUI7QUFDMUMsYUFBYSxtQkFBTyxDQUFDLGtCQUFNO0FBQzNCLGNBQWMsbUJBQU8sQ0FBQywyREFBUztBQUMvQiwrQkFBK0IsbUJBQU8sQ0FBQyx5RkFBd0I7QUFDL0QsaUJBQWlCLG1CQUFPLENBQUMsaUZBQW9COztBQUU3QztBQUNBO0FBQ0E7O0FBRUEsMkJBQTJCLHlIQUErQztBQUMxRTtBQUNBO0FBQ0Esb0JBQW9CLGtIQUF3QztBQUM1RDs7QUFFQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQsY0FBYztBQUMzRTtBQUNBO0FBQ0EsdUNBQXVDLGFBQWE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGFBQWE7QUFDakU7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLDZCQUE2QjtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsNkJBQTZCO0FBQ3RELE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBELGNBQWM7QUFDeEU7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsY0FBYztBQUMxRTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsZUFBZTtBQUMxQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsWUFBWSx1QkFBdUI7QUFDbkMsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsV0FBVyxRQUFRO0FBQ25CLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLE9BQU87QUFDbEIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsT0FBTztBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLCtCQUErQixnQ0FBZ0M7QUFDL0QsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQXVCLGdDQUFnQztBQUN2RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJCQUEyQixxREFBcUQ7QUFDaEYsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQSxjQUFjO0FBQ2Q7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLG9DQUFvQztBQUN6RTtBQUNBLFNBQVMsU0FBUztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsS0FBSztBQUNoQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNCQUFzQjs7QUFFdEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBLFlBQVksT0FBTztBQUNuQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsK0VBQStFO0FBQy9FLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQSx1RUFBdUU7QUFDdkUsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5Qiw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0EsWUFBWTtBQUNaOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUIsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBLFlBQVk7QUFDWjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxZQUFZO0FBQ2pELHNCQUFzQixZQUFZLFdBQVcsUUFBUTtBQUNyRDtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEMsZ0NBQWdDLHlCQUF5QjtBQUN6RDtBQUNBLGdDQUFnQyxpQkFBaUIsR0FBRyxLQUFLO0FBQ3pELGdDQUFnQyxnQkFBZ0IsR0FBRztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxvQkFBb0I7QUFDL0Q7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0EsMkNBQTJDLGdCQUFnQjtBQUMzRDtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxlQUFlO0FBQzFCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxTQUFTLGdDQUFnQztBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0Msa0JBQWtCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGFBQWE7QUFDeEMsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLGNBQWM7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsNEJBQTRCO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLDRCQUE0QjtBQUM1RCxNQUFNO0FBQ04sZ0NBQWdDLGNBQWM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsWUFBWTtBQUMxQztBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0JBQWtCLG1DQUFtQztBQUNuRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLFFBQVEsOEJBQThCO0FBQ3pFO0FBQ0EsK0NBQStDLFFBQVEsR0FBRztBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbUJBQW1CO0FBQ2xDLGVBQWU7QUFDZixpQkFBaUI7QUFDakI7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDZDQUE2Qyw4Q0FBOEM7QUFDM0YsOEJBQThCLGtEQUFrRDs7QUFFaEY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsUUFBUSw4QkFBOEI7QUFDekU7QUFDQSwwQ0FBMEMsNEJBQTRCLFlBQVksbUJBQW1CO0FBQ3JHO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxRQUFRLDhCQUE4QjtBQUN6RTtBQUNBLGtEQUFrRCxZQUFZLGlCQUFpQjtBQUMvRTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxRQUFRLDhCQUE4QjtBQUN6RTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG1CQUFtQjtBQUNsQyxlQUFlO0FBQ2YsaUJBQWlCO0FBQ2pCO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksaUJBQWlCLHlHQUF5RyxzQ0FBc0M7QUFDNUs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsV0FBVztBQUNYOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLFlBQVksbUJBQW1CO0FBQy9CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsU0FBUyxnQ0FBZ0M7QUFDakY7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRzs7O0FBR0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSx3Q0FBd0MseUJBQXlCLHFCQUFxQixlQUFlO0FBQ3JHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsU0FBUztBQUNwQixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUVBQXFFLEtBQUssbUJBQW1CLE1BQU07QUFDbkc7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLHNCQUFzQixHQUFHLFlBQVk7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsOEJBQThCLElBQUk7QUFDbEM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLHNCQUFzQixZQUFZLEdBQUcsWUFBWSxpQkFBaUI7QUFDdEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsOEJBQThCLElBQUk7QUFDbEM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0EsNEJBQTRCLHFCQUFxQixZQUFZO0FBQzdEO0FBQ0E7QUFDQSw0QkFBNEIsZUFBZTtBQUMzQztBQUNBO0FBQ0EsNEJBQTRCLGVBQWUsVUFBVSxVQUFVO0FBQy9EO0FBQ0EsV0FBVyxpQkFBaUI7QUFDNUIsV0FBVyx3QkFBd0I7QUFDbkMsV0FBVyxRQUFRO0FBQ25CLFdBQVcsU0FBUztBQUNwQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4QkFBOEIsSUFBSTtBQUNsQztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRCQUE0QixTQUFTO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxnQkFBZ0I7QUFDNUQsaUJBQWlCO0FBQ2pCLG9EQUFvRCxXQUFXO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLHdCQUF3QjtBQUNuQyxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsd0JBQXdCLFNBQVM7QUFDakM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLG9CQUFvQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxvQkFBb0I7QUFDckQ7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyx3QkFBd0I7QUFDbkMsV0FBVyxRQUFRO0FBQ25CLFdBQVcsU0FBUztBQUNwQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4QkFBOEIsSUFBSTtBQUNsQztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSw4QkFBOEIsSUFBSTs7QUFFbEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLGdCQUFnQjtBQUNsRDtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDhCQUE4QixJQUFJO0FBQ2xDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDhCQUE4QixJQUFJOztBQUVsQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsT0FBTyxzQkFBc0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBOztBQUVBLFlBQVk7QUFDWiw4QkFBOEIsSUFBSSxtQ0FBbUM7QUFDckU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw4R0FBOEcsb0JBQW9CO0FBQ2xJO0FBQ0Esc0ZBQXNGO0FBQ3RGO0FBQ0EsV0FBVyxpQkFBaUI7QUFDNUI7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSw4QkFBOEIsSUFBSSxtQ0FBbUM7QUFDckU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCLHVDQUF1QyxzQkFBc0I7QUFDN0Q7QUFDQTtBQUNBLHVDQUF1QyxRQUFRLHVCQUF1QjtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxlQUFlO0FBQzFCLFdBQVcsZ0JBQWdCO0FBQzNCLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsV0FBVyx3QkFBd0I7QUFDbkMsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsZUFBZTtBQUMxQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxlQUFlO0FBQzFCLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIOztBQUVBLDhCQUE4QixJQUFJO0FBQ2xDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHFFQUFxRSxTQUFTO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsc0JBQXNCO0FBQzNEO0FBQ0E7QUFDQSxxQ0FBcUMsUUFBUSx1QkFBdUI7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQyxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxlQUFlO0FBQzFCLFdBQVcsZ0JBQWdCO0FBQzNCLFdBQVcsU0FBUztBQUNwQixXQUFXLGVBQWU7QUFDMUIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixXQUFXLGVBQWU7QUFDMUIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0Q0FBNEMsU0FBUztBQUNyRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxnQkFBZ0I7QUFDM0IsV0FBVyx3QkFBd0I7QUFDbkMsV0FBVyxlQUFlO0FBQzFCLFdBQVcsU0FBUztBQUNwQixXQUFXLGVBQWU7QUFDMUIsV0FBVyxlQUFlO0FBQzFCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4QkFBOEIsSUFBSTtBQUNsQzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixTQUFTO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQyxXQUFXLFFBQVE7QUFDbkIsV0FBVyxnQkFBZ0I7QUFDM0IsV0FBVyxTQUFTO0FBQ3BCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsaUNBQWlDLFNBQVM7QUFDMUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLGVBQWU7QUFDMUIsV0FBVyxnQkFBZ0I7QUFDM0IsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsd0JBQXdCO0FBQ25DLFdBQVcsZUFBZTtBQUMxQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxlQUFlO0FBQzFCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4QkFBOEIsSUFBSTtBQUNsQzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyx5QkFBeUI7QUFDekQ7QUFDQTtBQUNBLGlDQUFpQyxvQkFBb0IsSUFBSSx3QkFBd0I7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMseUJBQXlCLEtBQUssU0FBUztBQUN4RTtBQUNBLFdBQVcsY0FBYztBQUN6QixXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RTtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQ0FBa0M7O0FBRWxDO0FBQ0Esb0JBQW9CLGlCQUFpQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsc0JBQXNCO0FBQzFFLDhCQUE4QixlQUFlO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxzQkFBc0I7QUFDeEUsZ0NBQWdDLGVBQWU7QUFDL0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELHNCQUFzQjtBQUN4RSxnQ0FBZ0MsZUFBZTtBQUMvQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLG1CQUFtQjtBQUM1RDtBQUNBO0FBQ0EsWUFBWSxPQUFPLFlBQVk7QUFDL0I7QUFDQSxrQkFBa0IsNEJBQTRCO0FBQzlDLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEIsWUFBWSxjQUFjO0FBQzFCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxtQkFBbUIsVUFBVSxTQUFTO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsbUJBQW1CLFVBQVUsc0NBQXNDO0FBQ3ZHO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsU0FBUztBQUNwQixZQUFZLHdCQUF3QjtBQUNwQztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxtQkFBbUI7QUFDOUIsV0FBVztBQUNYO0FBQ0E7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxRQUFRO0FBQ25CLFdBQVcscUJBQXFCO0FBQ2hDLFdBQVcsU0FBUztBQUNwQixZQUFZLFNBQVM7QUFDckI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHNCQUFzQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CLGlCQUFpQjtBQUNyQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxvQkFBb0IsMEJBQTBCO0FBQzlDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEJBQTBCLG9CQUFvQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0QkFBNEIsb0JBQW9CO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esc0JBQXNCLHVCQUF1QjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBCQUEwQiw4QkFBOEI7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwQkFBMEIsb0JBQW9CO0FBQzlDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSx1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0EsMkJBQTJCLFFBQVEsY0FBYztBQUNqRDtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsU0FBUztBQUNwQixXQUFXLGVBQWU7QUFDMUIsV0FBVyxlQUFlO0FBQzFCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCLFlBQVksU0FBUztBQUNyQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQLEtBQUs7O0FBRUw7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHdCQUF3QjtBQUM5QztBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1osb0NBQW9DLHNCQUFzQjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDs7QUFFQSxvQkFBb0IsMkJBQTJCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUJBQWlCO0FBQzVCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxlQUFlO0FBQzFCLFdBQVcsZUFBZTtBQUMxQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEscUVBQXFFLHNEQUFzRDs7QUFFM0gsVUFBVSxrQ0FBa0M7QUFDNUMsZ0JBQWdCLDRDQUE0QztBQUM1RCxnQkFBZ0IsNENBQTRDO0FBQzVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EscUVBQXFFO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGlCQUFpQjtBQUM1QixhQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGFBQWE7QUFDakU7QUFDQSxxQ0FBcUMsV0FBVztBQUNoRCxnQkFBZ0I7QUFDaEI7QUFDQSx5QkFBeUIscUJBQXFCLEdBQUc7QUFDakQ7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsU0FBUztBQUNwQixhQUFhLFFBQVE7QUFDckIsWUFBWSxpQkFBaUI7QUFDN0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CLHVCQUF1QjtBQUMzQztBQUNBLG1EQUFtRDtBQUNuRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGlCQUFpQjtBQUM1QixXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixZQUFZLGdCQUFnQjtBQUM1QjtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1RkFBdUYsVUFBVTtBQUNqRzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxHQUFHO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCLGFBQWE7QUFDNUM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwrQkFBK0IsYUFBYTtBQUM1QztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMscURBQXFEO0FBQ2xHO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsd0JBQXdCO0FBQ25DLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCLFlBQVksVUFBVTtBQUN0QjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDRHQUFxQztBQUN4RDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsZ0JBQWdCLElBQUksaUJBQWlCO0FBQ2xGLHlCQUF5QjtBQUN6QiwwQkFBMEI7QUFDMUIseUJBQXlCO0FBQ3pCLHVCQUF1QjtBQUN2QiwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLGNBQWM7QUFDekIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsZ0JBQWdCO0FBQzNCLFdBQVcsU0FBUztBQUNwQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLHlCQUF5QixJQUFJLHdCQUF3QjtBQUNqRyx5QkFBeUI7QUFDekIsMEJBQTBCO0FBQzFCLHlCQUF5QjtBQUN6Qix1QkFBdUI7QUFDdkIsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxjQUFjO0FBQ3pCLFdBQVcsUUFBUTtBQUNuQixXQUFXLGdCQUFnQjtBQUMzQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLFlBQVksSUFBSSxzQkFBc0I7QUFDbkYseUJBQXlCO0FBQ3pCLDBCQUEwQjtBQUMxQix5QkFBeUI7QUFDekIsdUJBQXVCO0FBQ3ZCLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxnQkFBZ0I7QUFDM0IsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCLFlBQVk7QUFDWjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwrQkFBK0IsSUFBSTs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVSx5QkFBeUIsb0JBQW9CO0FBQ2xFLFdBQVcsWUFBWTtBQUN2QjtBQUNBO0FBQ0EseUJBQXlCLE9BQU8sb0JBQW9CO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQix5QkFBeUIsb0JBQW9CO0FBQzlEO0FBQ0E7QUFDQSx5QkFBeUIsT0FBTyxpQkFBaUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiw4QkFBOEI7QUFDL0MsZ0JBQWdCO0FBQ2hCLFFBQVE7QUFDUjtBQUNBO0FBQ0EsZ0NBQWdDLFlBQVk7QUFDNUMsU0FBUztBQUNULHdEQUF3RDtBQUN4RCxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLHFCQUFxQjtBQUNoQyxXQUFXLFFBQVE7QUFDbkIsWUFBWSxpQkFBaUI7QUFDN0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNCQUFzQix1QkFBdUI7QUFDN0M7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLGFBQWEsWUFBWTtBQUNoQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsNkJBQTZCO0FBQ25GO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEIsUUFBUTtBQUNSO0FBQ0E7QUFDQSxXQUFXLGdDQUFnQztBQUMzQyxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHFDQUFxQztBQUNoRCxXQUFXO0FBQ1g7QUFDQSxvQ0FBb0MsNkJBQTZCO0FBQ2pFLDBCQUEwQjtBQUMxQiwyQkFBMkI7QUFDM0I7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQixXQUFXLGVBQWU7QUFDMUIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsd0JBQXdCO0FBQ25DLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsaUJBQWlCO0FBQzVCLFdBQVcsU0FBUztBQUNwQixXQUFXLFFBQVEsd1dBQXdXLG1DQUFtQztBQUM5WixXQUFXLFNBQVM7QUFDcEIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsVUFBVTtBQUNyQixXQUFXLFVBQVU7QUFDckIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxnQkFBZ0I7QUFDM0IsV0FBVyxRQUFRO0FBQ25CLFdBQVcsT0FBTztBQUNsQixXQUFXLFVBQVU7QUFDckIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsU0FBUztBQUMzQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUZBQXVGO0FBQ3ZGO0FBQ0EsT0FBTztBQUNQLCtDQUErQyxzQkFBc0IsV0FBVyxnQkFBZ0I7QUFDaEc7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyw2QkFBNkI7QUFDbEUsUUFBUTtBQUNSLHdCQUF3QjtBQUN4QixRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFNBQVM7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUJBQWlCO0FBQzVCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxZQUFZO0FBQ3ZCLFdBQVcsVUFBVTtBQUNyQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsUUFBUTtBQUNuQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxZQUFZO0FBQ3ZCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxlQUFlO0FBQzNEO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUixtQ0FBbUMsZ0JBQWdCO0FBQ25ELHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsdURBQXVELGNBQWM7QUFDckUsMEJBQTBCLFlBQVksTUFBTTtBQUM1Qyw2QkFBNkIsbUJBQW1CLE1BQU07QUFDdEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLEVBQUUsaUJBQWlCO0FBQ3JDOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvbW9kZWwuanM/MmNhMCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qIVxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG5jb25zdCBBZ2dyZWdhdGUgPSByZXF1aXJlKCcuL2FnZ3JlZ2F0ZScpO1xuY29uc3QgQ2hhbmdlU3RyZWFtID0gcmVxdWlyZSgnLi9jdXJzb3IvY2hhbmdlU3RyZWFtJyk7XG5jb25zdCBEb2N1bWVudCA9IHJlcXVpcmUoJy4vZG9jdW1lbnQnKTtcbmNvbnN0IERvY3VtZW50Tm90Rm91bmRFcnJvciA9IHJlcXVpcmUoJy4vZXJyb3Ivbm90Rm91bmQnKTtcbmNvbnN0IERpdmVyZ2VudEFycmF5RXJyb3IgPSByZXF1aXJlKCcuL2Vycm9yL2RpdmVyZ2VudEFycmF5Jyk7XG5jb25zdCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG5jb25zdCBLYXJlZW0gPSByZXF1aXJlKCdrYXJlZW0nKTtcbmNvbnN0IE1vbmdvb3NlQnVmZmVyID0gcmVxdWlyZSgnLi90eXBlcy9idWZmZXInKTtcbmNvbnN0IE1vbmdvb3NlRXJyb3IgPSByZXF1aXJlKCcuL2Vycm9yL2luZGV4Jyk7XG5jb25zdCBPYmplY3RQYXJhbWV0ZXJFcnJvciA9IHJlcXVpcmUoJy4vZXJyb3Ivb2JqZWN0UGFyYW1ldGVyJyk7XG5jb25zdCBPdmVyd3JpdGVNb2RlbEVycm9yID0gcmVxdWlyZSgnLi9lcnJvci9vdmVyd3JpdGVNb2RlbCcpO1xuY29uc3QgUXVlcnkgPSByZXF1aXJlKCcuL3F1ZXJ5Jyk7XG5jb25zdCBTYXZlT3B0aW9ucyA9IHJlcXVpcmUoJy4vb3B0aW9ucy9zYXZlT3B0aW9ucycpO1xuY29uc3QgU2NoZW1hID0gcmVxdWlyZSgnLi9zY2hlbWEnKTtcbmNvbnN0IFZhbGlkYXRpb25FcnJvciA9IHJlcXVpcmUoJy4vZXJyb3IvdmFsaWRhdGlvbicpO1xuY29uc3QgVmVyc2lvbkVycm9yID0gcmVxdWlyZSgnLi9lcnJvci92ZXJzaW9uJyk7XG5jb25zdCBQYXJhbGxlbFNhdmVFcnJvciA9IHJlcXVpcmUoJy4vZXJyb3IvcGFyYWxsZWxTYXZlJyk7XG5jb25zdCBhcHBseURlZmF1bHRzSGVscGVyID0gcmVxdWlyZSgnLi9oZWxwZXJzL2RvY3VtZW50L2FwcGx5RGVmYXVsdHMnKTtcbmNvbnN0IGFwcGx5RGVmYXVsdHNUb1BPSk8gPSByZXF1aXJlKCcuL2hlbHBlcnMvbW9kZWwvYXBwbHlEZWZhdWx0c1RvUE9KTycpO1xuY29uc3QgYXBwbHlIb29rcyA9IHJlcXVpcmUoJy4vaGVscGVycy9tb2RlbC9hcHBseUhvb2tzJyk7XG5jb25zdCBhcHBseU1ldGhvZHMgPSByZXF1aXJlKCcuL2hlbHBlcnMvbW9kZWwvYXBwbHlNZXRob2RzJyk7XG5jb25zdCBhcHBseVByb2plY3Rpb24gPSByZXF1aXJlKCcuL2hlbHBlcnMvcHJvamVjdGlvbi9hcHBseVByb2plY3Rpb24nKTtcbmNvbnN0IGFwcGx5U2NoZW1hQ29sbGF0aW9uID0gcmVxdWlyZSgnLi9oZWxwZXJzL2luZGV4ZXMvYXBwbHlTY2hlbWFDb2xsYXRpb24nKTtcbmNvbnN0IGFwcGx5U3RhdGljSG9va3MgPSByZXF1aXJlKCcuL2hlbHBlcnMvbW9kZWwvYXBwbHlTdGF0aWNIb29rcycpO1xuY29uc3QgYXBwbHlTdGF0aWNzID0gcmVxdWlyZSgnLi9oZWxwZXJzL21vZGVsL2FwcGx5U3RhdGljcycpO1xuY29uc3QgYXBwbHlXcml0ZUNvbmNlcm4gPSByZXF1aXJlKCcuL2hlbHBlcnMvc2NoZW1hL2FwcGx5V3JpdGVDb25jZXJuJyk7XG5jb25zdCBhc3NpZ25WYWxzID0gcmVxdWlyZSgnLi9oZWxwZXJzL3BvcHVsYXRlL2Fzc2lnblZhbHMnKTtcbmNvbnN0IGNhc3RCdWxrV3JpdGUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbW9kZWwvY2FzdEJ1bGtXcml0ZScpO1xuY29uc3QgY2xvbmUgPSByZXF1aXJlKCcuL2hlbHBlcnMvY2xvbmUnKTtcbmNvbnN0IGNyZWF0ZVBvcHVsYXRlUXVlcnlGaWx0ZXIgPSByZXF1aXJlKCcuL2hlbHBlcnMvcG9wdWxhdGUvY3JlYXRlUG9wdWxhdGVRdWVyeUZpbHRlcicpO1xuY29uc3QgZGVjb3JhdGVVcGRhdGVXaXRoVmVyc2lvbktleSA9IHJlcXVpcmUoJy4vaGVscGVycy91cGRhdGUvZGVjb3JhdGVVcGRhdGVXaXRoVmVyc2lvbktleScpO1xuY29uc3QgZ2V0RGVmYXVsdEJ1bGt3cml0ZVJlc3VsdCA9IHJlcXVpcmUoJy4vaGVscGVycy9nZXREZWZhdWx0QnVsa3dyaXRlUmVzdWx0Jyk7XG5jb25zdCBnZXRTY2hlbWFEaXNjcmltaW5hdG9yQnlWYWx1ZSA9IHJlcXVpcmUoJy4vaGVscGVycy9kaXNjcmltaW5hdG9yL2dldFNjaGVtYURpc2NyaW1pbmF0b3JCeVZhbHVlJyk7XG5jb25zdCBkaXNjcmltaW5hdG9yID0gcmVxdWlyZSgnLi9oZWxwZXJzL21vZGVsL2Rpc2NyaW1pbmF0b3InKTtcbmNvbnN0IGZpcnN0S2V5ID0gcmVxdWlyZSgnLi9oZWxwZXJzL2ZpcnN0S2V5Jyk7XG5jb25zdCBlYWNoID0gcmVxdWlyZSgnLi9oZWxwZXJzL2VhY2gnKTtcbmNvbnN0IGdldCA9IHJlcXVpcmUoJy4vaGVscGVycy9nZXQnKTtcbmNvbnN0IGdldENvbnN0cnVjdG9yTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9nZXRDb25zdHJ1Y3Rvck5hbWUnKTtcbmNvbnN0IGdldERpc2NyaW1pbmF0b3JCeVZhbHVlID0gcmVxdWlyZSgnLi9oZWxwZXJzL2Rpc2NyaW1pbmF0b3IvZ2V0RGlzY3JpbWluYXRvckJ5VmFsdWUnKTtcbmNvbnN0IGdldE1vZGVsc01hcEZvclBvcHVsYXRlID0gcmVxdWlyZSgnLi9oZWxwZXJzL3BvcHVsYXRlL2dldE1vZGVsc01hcEZvclBvcHVsYXRlJyk7XG5jb25zdCBpbW1lZGlhdGUgPSByZXF1aXJlKCcuL2hlbHBlcnMvaW1tZWRpYXRlJyk7XG5jb25zdCBpbnRlcm5hbFRvT2JqZWN0T3B0aW9ucyA9IHJlcXVpcmUoJy4vb3B0aW9ucycpLmludGVybmFsVG9PYmplY3RPcHRpb25zO1xuY29uc3QgaXNEZWZhdWx0SWRJbmRleCA9IHJlcXVpcmUoJy4vaGVscGVycy9pbmRleGVzL2lzRGVmYXVsdElkSW5kZXgnKTtcbmNvbnN0IGlzSW5kZXhFcXVhbCA9IHJlcXVpcmUoJy4vaGVscGVycy9pbmRleGVzL2lzSW5kZXhFcXVhbCcpO1xuY29uc3Qge1xuICBnZXRSZWxhdGVkREJJbmRleGVzLFxuICBnZXRSZWxhdGVkU2NoZW1hSW5kZXhlc1xufSA9IHJlcXVpcmUoJy4vaGVscGVycy9pbmRleGVzL2dldFJlbGF0ZWRJbmRleGVzJyk7XG5jb25zdCBpc1BhdGhFeGNsdWRlZCA9IHJlcXVpcmUoJy4vaGVscGVycy9wcm9qZWN0aW9uL2lzUGF0aEV4Y2x1ZGVkJyk7XG5jb25zdCBkZWNvcmF0ZURpc2NyaW1pbmF0b3JJbmRleE9wdGlvbnMgPSByZXF1aXJlKCcuL2hlbHBlcnMvaW5kZXhlcy9kZWNvcmF0ZURpc2NyaW1pbmF0b3JJbmRleE9wdGlvbnMnKTtcbmNvbnN0IGlzUGF0aFNlbGVjdGVkSW5jbHVzaXZlID0gcmVxdWlyZSgnLi9oZWxwZXJzL3Byb2plY3Rpb24vaXNQYXRoU2VsZWN0ZWRJbmNsdXNpdmUnKTtcbmNvbnN0IGxlYW5Qb3B1bGF0ZU1hcCA9IHJlcXVpcmUoJy4vaGVscGVycy9wb3B1bGF0ZS9sZWFuUG9wdWxhdGVNYXAnKTtcbmNvbnN0IHBhcmFsbGVsTGltaXQgPSByZXF1aXJlKCcuL2hlbHBlcnMvcGFyYWxsZWxMaW1pdCcpO1xuY29uc3QgcGFyZW50UGF0aHMgPSByZXF1aXJlKCcuL2hlbHBlcnMvcGF0aC9wYXJlbnRQYXRocycpO1xuY29uc3QgcHJlcGFyZURpc2NyaW1pbmF0b3JQaXBlbGluZSA9IHJlcXVpcmUoJy4vaGVscGVycy9hZ2dyZWdhdGUvcHJlcGFyZURpc2NyaW1pbmF0b3JQaXBlbGluZScpO1xuY29uc3QgcHVzaE5lc3RlZEFycmF5UGF0aHMgPSByZXF1aXJlKCcuL2hlbHBlcnMvbW9kZWwvcHVzaE5lc3RlZEFycmF5UGF0aHMnKTtcbmNvbnN0IHJlbW92ZURlc2VsZWN0ZWRGb3JlaWduRmllbGQgPSByZXF1aXJlKCcuL2hlbHBlcnMvcG9wdWxhdGUvcmVtb3ZlRGVzZWxlY3RlZEZvcmVpZ25GaWVsZCcpO1xuY29uc3Qgc2V0RG90dGVkUGF0aCA9IHJlcXVpcmUoJy4vaGVscGVycy9wYXRoL3NldERvdHRlZFBhdGgnKTtcbmNvbnN0IFNUQVRFUyA9IHJlcXVpcmUoJy4vY29ubmVjdGlvblN0YXRlJyk7XG5jb25zdCB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5jb25zdCBNb25nb29zZUJ1bGtXcml0ZUVycm9yID0gcmVxdWlyZSgnLi9lcnJvci9idWxrV3JpdGVFcnJvcicpO1xuY29uc3QgbWluaW1pemUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbWluaW1pemUnKTtcblxuY29uc3QgVkVSU0lPTl9XSEVSRSA9IDE7XG5jb25zdCBWRVJTSU9OX0lOQyA9IDI7XG5jb25zdCBWRVJTSU9OX0FMTCA9IFZFUlNJT05fV0hFUkUgfCBWRVJTSU9OX0lOQztcblxuY29uc3QgYXJyYXlBdG9taWNzU3ltYm9sID0gcmVxdWlyZSgnLi9oZWxwZXJzL3N5bWJvbHMnKS5hcnJheUF0b21pY3NTeW1ib2w7XG5jb25zdCBtb2RlbENvbGxlY3Rpb25TeW1ib2wgPSBTeW1ib2woJ21vbmdvb3NlI01vZGVsI2NvbGxlY3Rpb24nKTtcbmNvbnN0IG1vZGVsRGJTeW1ib2wgPSBTeW1ib2woJ21vbmdvb3NlI01vZGVsI2RiJyk7XG5jb25zdCBtb2RlbFN5bWJvbCA9IHJlcXVpcmUoJy4vaGVscGVycy9zeW1ib2xzJykubW9kZWxTeW1ib2w7XG5jb25zdCBzdWJjbGFzc2VkU3ltYm9sID0gU3ltYm9sKCdtb25nb29zZSNNb2RlbCNzdWJjbGFzc2VkJyk7XG5cbmNvbnN0IHNhdmVUb09iamVjdE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBpbnRlcm5hbFRvT2JqZWN0T3B0aW9ucywge1xuICBic29uOiB0cnVlLFxuICBmbGF0dGVuT2JqZWN0SWRzOiBmYWxzZVxufSk7XG5cbi8qKlxuICogQSBNb2RlbCBpcyBhIGNsYXNzIHRoYXQncyB5b3VyIHByaW1hcnkgdG9vbCBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBNb25nb0RCLlxuICogQW4gaW5zdGFuY2Ugb2YgYSBNb2RlbCBpcyBjYWxsZWQgYSBbRG9jdW1lbnRdKGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9hcGkvZG9jdW1lbnQuaHRtbCNEb2N1bWVudCkuXG4gKlxuICogSW4gTW9uZ29vc2UsIHRoZSB0ZXJtIFwiTW9kZWxcIiByZWZlcnMgdG8gc3ViY2xhc3NlcyBvZiB0aGUgYG1vbmdvb3NlLk1vZGVsYFxuICogY2xhc3MuIFlvdSBzaG91bGQgbm90IHVzZSB0aGUgYG1vbmdvb3NlLk1vZGVsYCBjbGFzcyBkaXJlY3RseS4gVGhlXG4gKiBbYG1vbmdvb3NlLm1vZGVsKClgXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvYXBpL21vbmdvb3NlLmh0bWwjTW9uZ29vc2UucHJvdG90eXBlLm1vZGVsKCkpIGFuZFxuICogW2Bjb25uZWN0aW9uLm1vZGVsKClgXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvYXBpL2Nvbm5lY3Rpb24uaHRtbCNDb25uZWN0aW9uLnByb3RvdHlwZS5tb2RlbCgpKSBmdW5jdGlvbnNcbiAqIGNyZWF0ZSBzdWJjbGFzc2VzIG9mIGBtb25nb29zZS5Nb2RlbGAgYXMgc2hvd24gYmVsb3cuXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICAvLyBgVXNlck1vZGVsYCBpcyBhIFwiTW9kZWxcIiwgYSBzdWJjbGFzcyBvZiBgbW9uZ29vc2UuTW9kZWxgLlxuICogICAgIGNvbnN0IFVzZXJNb2RlbCA9IG1vbmdvb3NlLm1vZGVsKCdVc2VyJywgbmV3IFNjaGVtYSh7IG5hbWU6IFN0cmluZyB9KSk7XG4gKlxuICogICAgIC8vIFlvdSBjYW4gdXNlIGEgTW9kZWwgdG8gY3JlYXRlIG5ldyBkb2N1bWVudHMgdXNpbmcgYG5ld2A6XG4gKiAgICAgY29uc3QgdXNlckRvYyA9IG5ldyBVc2VyTW9kZWwoeyBuYW1lOiAnRm9vJyB9KTtcbiAqICAgICBhd2FpdCB1c2VyRG9jLnNhdmUoKTtcbiAqXG4gKiAgICAgLy8gWW91IGFsc28gdXNlIGEgbW9kZWwgdG8gY3JlYXRlIHF1ZXJpZXM6XG4gKiAgICAgY29uc3QgdXNlckZyb21EYiA9IGF3YWl0IFVzZXJNb2RlbC5maW5kT25lKHsgbmFtZTogJ0ZvbycgfSk7XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRvYyB2YWx1ZXMgZm9yIGluaXRpYWwgc2V0XG4gKiBAcGFyYW0ge09iamVjdH0gW2ZpZWxkc10gb3B0aW9uYWwgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGZpZWxkcyB0aGF0IHdlcmUgc2VsZWN0ZWQgaW4gdGhlIHF1ZXJ5IHdoaWNoIHJldHVybmVkIHRoaXMgZG9jdW1lbnQuIFlvdSBkbyAqKm5vdCoqIG5lZWQgdG8gc2V0IHRoaXMgcGFyYW1ldGVyIHRvIGVuc3VyZSBNb25nb29zZSBoYW5kbGVzIHlvdXIgW3F1ZXJ5IHByb2plY3Rpb25dKGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9hcGkvcXVlcnkuaHRtbCNRdWVyeS5wcm90b3R5cGUuc2VsZWN0KCkpLlxuICogQHBhcmFtIHtCb29sZWFufSBbc2tpcElkPWZhbHNlXSBvcHRpb25hbCBib29sZWFuLiBJZiB0cnVlLCBtb25nb29zZSBkb2Vzbid0IGFkZCBhbiBgX2lkYCBmaWVsZCB0byB0aGUgZG9jdW1lbnQuXG4gKiBAaW5oZXJpdHMgRG9jdW1lbnQgaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2FwaS9kb2N1bWVudC5odG1sXG4gKiBAZXZlbnQgYGVycm9yYDogSWYgbGlzdGVuaW5nIHRvIHRoaXMgZXZlbnQsICdlcnJvcicgaXMgZW1pdHRlZCB3aGVuIGEgZG9jdW1lbnQgd2FzIHNhdmVkIGFuZCBhbiBgZXJyb3JgIG9jY3VycmVkLiBJZiBub3QgbGlzdGVuaW5nLCB0aGUgZXZlbnQgYnViYmxlcyB0byB0aGUgY29ubmVjdGlvbiB1c2VkIHRvIGNyZWF0ZSB0aGlzIE1vZGVsLlxuICogQGV2ZW50IGBpbmRleGA6IEVtaXR0ZWQgYWZ0ZXIgYE1vZGVsI2Vuc3VyZUluZGV4ZXNgIGNvbXBsZXRlcy4gSWYgYW4gZXJyb3Igb2NjdXJyZWQgaXQgaXMgcGFzc2VkIHdpdGggdGhlIGV2ZW50LlxuICogQGV2ZW50IGBpbmRleC1zaW5nbGUtc3RhcnRgOiBFbWl0dGVkIHdoZW4gYW4gaW5kaXZpZHVhbCBpbmRleCBzdGFydHMgd2l0aGluIGBNb2RlbCNlbnN1cmVJbmRleGVzYC4gVGhlIGZpZWxkcyBhbmQgb3B0aW9ucyBiZWluZyB1c2VkIHRvIGJ1aWxkIHRoZSBpbmRleCBhcmUgYWxzbyBwYXNzZWQgd2l0aCB0aGUgZXZlbnQuXG4gKiBAZXZlbnQgYGluZGV4LXNpbmdsZS1kb25lYDogRW1pdHRlZCB3aGVuIGFuIGluZGl2aWR1YWwgaW5kZXggZmluaXNoZXMgd2l0aGluIGBNb2RlbCNlbnN1cmVJbmRleGVzYC4gSWYgYW4gZXJyb3Igb2NjdXJyZWQgaXQgaXMgcGFzc2VkIHdpdGggdGhlIGV2ZW50LiBUaGUgZmllbGRzLCBvcHRpb25zLCBhbmQgaW5kZXggbmFtZSBhcmUgYWxzbyBwYXNzZWQuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIE1vZGVsKGRvYywgZmllbGRzLCBza2lwSWQpIHtcbiAgaWYgKGZpZWxkcyBpbnN0YW5jZW9mIFNjaGVtYSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJzJuZCBhcmd1bWVudCB0byBgTW9kZWxgIGNvbnN0cnVjdG9yIG11c3QgYmUgYSBQT0pPIG9yIHN0cmluZywgJyArXG4gICAgICAnKipub3QqKiBhIHNjaGVtYS4gTWFrZSBzdXJlIHlvdVxcJ3JlIGNhbGxpbmcgYG1vbmdvb3NlLm1vZGVsKClgLCBub3QgJyArXG4gICAgICAnYG1vbmdvb3NlLk1vZGVsKClgLicpO1xuICB9XG4gIGlmICh0eXBlb2YgZG9jID09PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IHRvIGBNb2RlbGAgY29uc3RydWN0b3IgbXVzdCBiZSBhbiBvYmplY3QsICcgK1xuICAgICAgJyoqbm90KiogYSBzdHJpbmcuIE1ha2Ugc3VyZSB5b3VcXCdyZSBjYWxsaW5nIGBtb25nb29zZS5tb2RlbCgpYCwgbm90ICcgK1xuICAgICAgJ2Btb25nb29zZS5Nb2RlbCgpYC4nKTtcbiAgfVxuICBEb2N1bWVudC5jYWxsKHRoaXMsIGRvYywgZmllbGRzLCBza2lwSWQpO1xufVxuXG4vKipcbiAqIEluaGVyaXRzIGZyb20gRG9jdW1lbnQuXG4gKlxuICogQWxsIE1vZGVsLnByb3RvdHlwZSBmZWF0dXJlcyBhcmUgYXZhaWxhYmxlIG9uXG4gKiB0b3AgbGV2ZWwgKG5vbi1zdWIpIGRvY3VtZW50cy5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk9iamVjdC5zZXRQcm90b3R5cGVPZihNb2RlbC5wcm90b3R5cGUsIERvY3VtZW50LnByb3RvdHlwZSk7XG5Nb2RlbC5wcm90b3R5cGUuJGlzTW9uZ29vc2VNb2RlbFByb3RvdHlwZSA9IHRydWU7XG5cbi8qKlxuICogQ29ubmVjdGlvbiB0aGUgbW9kZWwgdXNlcy5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICogQHByb3BlcnR5IGRiXG4gKiBAbWVtYmVyT2YgTW9kZWxcbiAqIEBpbnN0YW5jZVxuICovXG5cbk1vZGVsLnByb3RvdHlwZS5kYjtcblxuLyoqXG4gKiBUaGUgY29sbGVjdGlvbiBpbnN0YW5jZSB0aGlzIG1vZGVsIHVzZXMuXG4gKiBBIE1vbmdvb3NlIGNvbGxlY3Rpb24gaXMgYSB0aGluIHdyYXBwZXIgYXJvdW5kIGEgW01vbmdvREIgTm9kZS5qcyBkcml2ZXIgY29sbGVjdGlvbl0oW01vbmdvREIgTm9kZS5qcyBkcml2ZXIgY29sbGVjdGlvbl0oaHR0cHM6Ly9tb25nb2RiLmdpdGh1Yi5pby9ub2RlLW1vbmdvZGItbmF0aXZlL05leHQvY2xhc3Nlcy9Db2xsZWN0aW9uLmh0bWwpKS5cbiAqIFVzaW5nIGBNb2RlbC5jb2xsZWN0aW9uYCBtZWFucyB5b3UgYnlwYXNzIE1vbmdvb3NlIG1pZGRsZXdhcmUsIHZhbGlkYXRpb24sIGFuZCBjYXN0aW5nLlxuICpcbiAqIFRoaXMgcHJvcGVydHkgaXMgcmVhZC1vbmx5LiBNb2RpZnlpbmcgdGhpcyBwcm9wZXJ0eSBpcyBhIG5vLW9wLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKiBAcHJvcGVydHkgY29sbGVjdGlvblxuICogQG1lbWJlck9mIE1vZGVsXG4gKiBAaW5zdGFuY2VcbiAqL1xuXG5Nb2RlbC5wcm90b3R5cGUuY29sbGVjdGlvbjtcblxuLyoqXG4gKiBJbnRlcm5hbCBjb2xsZWN0aW9uIHRoZSBtb2RlbCB1c2VzLlxuICpcbiAqIFRoaXMgcHJvcGVydHkgaXMgcmVhZC1vbmx5LiBNb2RpZnlpbmcgdGhpcyBwcm9wZXJ0eSBpcyBhIG5vLW9wLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICogQHByb3BlcnR5IGNvbGxlY3Rpb25cbiAqIEBtZW1iZXJPZiBNb2RlbFxuICogQGluc3RhbmNlXG4gKi9cblxuXG5Nb2RlbC5wcm90b3R5cGUuJF9fY29sbGVjdGlvbjtcblxuLyoqXG4gKiBUaGUgbmFtZSBvZiB0aGUgbW9kZWxcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICogQHByb3BlcnR5IG1vZGVsTmFtZVxuICogQG1lbWJlck9mIE1vZGVsXG4gKiBAaW5zdGFuY2VcbiAqL1xuXG5Nb2RlbC5wcm90b3R5cGUubW9kZWxOYW1lO1xuXG4vKipcbiAqIEFkZGl0aW9uYWwgcHJvcGVydGllcyB0byBhdHRhY2ggdG8gdGhlIHF1ZXJ5IHdoZW4gY2FsbGluZyBgc2F2ZSgpYCBhbmRcbiAqIGBpc05ld2AgaXMgZmFsc2UuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqIEBwcm9wZXJ0eSAkd2hlcmVcbiAqIEBtZW1iZXJPZiBNb2RlbFxuICogQGluc3RhbmNlXG4gKi9cblxuTW9kZWwucHJvdG90eXBlLiR3aGVyZTtcblxuLyoqXG4gKiBJZiB0aGlzIGlzIGEgZGlzY3JpbWluYXRvciBtb2RlbCwgYGJhc2VNb2RlbE5hbWVgIGlzIHRoZSBuYW1lIG9mXG4gKiB0aGUgYmFzZSBtb2RlbC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICogQHByb3BlcnR5IGJhc2VNb2RlbE5hbWVcbiAqIEBtZW1iZXJPZiBNb2RlbFxuICogQGluc3RhbmNlXG4gKi9cblxuTW9kZWwucHJvdG90eXBlLmJhc2VNb2RlbE5hbWU7XG5cbi8qKlxuICogRXZlbnQgZW1pdHRlciB0aGF0IHJlcG9ydHMgYW55IGVycm9ycyB0aGF0IG9jY3VycmVkLiBVc2VmdWwgZm9yIGdsb2JhbCBlcnJvclxuICogaGFuZGxpbmcuXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBNeU1vZGVsLmV2ZW50cy5vbignZXJyb3InLCBlcnIgPT4gY29uc29sZS5sb2coZXJyLm1lc3NhZ2UpKTtcbiAqXG4gKiAgICAgLy8gUHJpbnRzIGEgJ0Nhc3RFcnJvcicgYmVjYXVzZSBvZiB0aGUgYWJvdmUgaGFuZGxlclxuICogICAgIGF3YWl0IE15TW9kZWwuZmluZE9uZSh7IF9pZDogJ05vdCBhIHZhbGlkIE9iamVjdElkJyB9KS5jYXRjaChub29wKTtcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICogQHByb3BlcnR5IGV2ZW50c1xuICogQGZpcmVzIGVycm9yIHdoZW5ldmVyIGFueSBxdWVyeSBvciBtb2RlbCBmdW5jdGlvbiBlcnJvcnNcbiAqIEBtZW1iZXJPZiBNb2RlbFxuICogQHN0YXRpY1xuICovXG5cbk1vZGVsLmV2ZW50cztcblxuLyoqXG4gKiBDb21waWxlZCBtaWRkbGV3YXJlIGZvciB0aGlzIG1vZGVsLiBTZXQgaW4gYGFwcGx5SG9va3MoKWAuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKiBAcHJvcGVydHkgX21pZGRsZXdhcmVcbiAqIEBtZW1iZXJPZiBNb2RlbFxuICogQHN0YXRpY1xuICovXG5cbk1vZGVsLl9taWRkbGV3YXJlO1xuXG4vKiFcbiAqIGlnbm9yZVxuICovXG5cbmZ1bmN0aW9uIF9hcHBseUN1c3RvbVdoZXJlKGRvYywgd2hlcmUpIHtcbiAgaWYgKGRvYy4kd2hlcmUgPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhkb2MuJHdoZXJlKSkge1xuICAgIHdoZXJlW2tleV0gPSBkb2MuJHdoZXJlW2tleV07XG4gIH1cbn1cblxuLyohXG4gKiBpZ25vcmVcbiAqL1xuXG5Nb2RlbC5wcm90b3R5cGUuJF9faGFuZGxlU2F2ZSA9IGZ1bmN0aW9uKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHNhdmVPcHRpb25zID0ge307XG5cbiAgYXBwbHlXcml0ZUNvbmNlcm4odGhpcy4kX19zY2hlbWEsIG9wdGlvbnMpO1xuICBpZiAodHlwZW9mIG9wdGlvbnMud3JpdGVDb25jZXJuICE9PSAndW5kZWZpbmVkJykge1xuICAgIHNhdmVPcHRpb25zLndyaXRlQ29uY2VybiA9IHt9O1xuICAgIGlmICgndycgaW4gb3B0aW9ucy53cml0ZUNvbmNlcm4pIHtcbiAgICAgIHNhdmVPcHRpb25zLndyaXRlQ29uY2Vybi53ID0gb3B0aW9ucy53cml0ZUNvbmNlcm4udztcbiAgICB9XG4gICAgaWYgKCdqJyBpbiBvcHRpb25zLndyaXRlQ29uY2Vybikge1xuICAgICAgc2F2ZU9wdGlvbnMud3JpdGVDb25jZXJuLmogPSBvcHRpb25zLndyaXRlQ29uY2Vybi5qO1xuICAgIH1cbiAgICBpZiAoJ3d0aW1lb3V0JyBpbiBvcHRpb25zLndyaXRlQ29uY2Vybikge1xuICAgICAgc2F2ZU9wdGlvbnMud3JpdGVDb25jZXJuLnd0aW1lb3V0ID0gb3B0aW9ucy53cml0ZUNvbmNlcm4ud3RpbWVvdXQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICgndycgaW4gb3B0aW9ucykge1xuICAgICAgc2F2ZU9wdGlvbnMudyA9IG9wdGlvbnMudztcbiAgICB9XG4gICAgaWYgKCdqJyBpbiBvcHRpb25zKSB7XG4gICAgICBzYXZlT3B0aW9ucy5qID0gb3B0aW9ucy5qO1xuICAgIH1cbiAgICBpZiAoJ3d0aW1lb3V0JyBpbiBvcHRpb25zKSB7XG4gICAgICBzYXZlT3B0aW9ucy53dGltZW91dCA9IG9wdGlvbnMud3RpbWVvdXQ7XG4gICAgfVxuICB9XG4gIGlmICgnY2hlY2tLZXlzJyBpbiBvcHRpb25zKSB7XG4gICAgc2F2ZU9wdGlvbnMuY2hlY2tLZXlzID0gb3B0aW9ucy5jaGVja0tleXM7XG4gIH1cblxuICBjb25zdCBzZXNzaW9uID0gdGhpcy4kc2Vzc2lvbigpO1xuICBpZiAoIXNhdmVPcHRpb25zLmhhc093blByb3BlcnR5KCdzZXNzaW9uJykgJiYgc2Vzc2lvbiAhPSBudWxsKSB7XG4gICAgc2F2ZU9wdGlvbnMuc2Vzc2lvbiA9IHNlc3Npb247XG4gIH1cblxuICBpZiAodGhpcy4kaXNOZXcpIHtcbiAgICAvLyBzZW5kIGVudGlyZSBkb2NcbiAgICBjb25zdCBvYmogPSB0aGlzLnRvT2JqZWN0KHNhdmVUb09iamVjdE9wdGlvbnMpO1xuICAgIGlmICgob2JqIHx8IHt9KS5faWQgPT09IHZvaWQgMCkge1xuICAgICAgLy8gZG9jdW1lbnRzIG11c3QgaGF2ZSBhbiBfaWQgZWxzZSBtb25nb29zZSB3b24ndCBrbm93XG4gICAgICAvLyB3aGF0IHRvIHVwZGF0ZSBsYXRlciBpZiBtb3JlIGNoYW5nZXMgYXJlIG1hZGUuIHRoZSB1c2VyXG4gICAgICAvLyB3b3VsZG4ndCBrbm93IHdoYXQgX2lkIHdhcyBnZW5lcmF0ZWQgYnkgbW9uZ29kYiBlaXRoZXJcbiAgICAgIC8vIG5vciB3b3VsZCB0aGUgT2JqZWN0SWQgZ2VuZXJhdGVkIGJ5IG1vbmdvZGIgbmVjZXNzYXJpbHlcbiAgICAgIC8vIG1hdGNoIHRoZSBzY2hlbWEgZGVmaW5pdGlvbi5cbiAgICAgIGltbWVkaWF0ZShmdW5jdGlvbigpIHtcbiAgICAgICAgY2FsbGJhY2sobmV3IE1vbmdvb3NlRXJyb3IoJ2RvY3VtZW50IG11c3QgaGF2ZSBhbiBfaWQgYmVmb3JlIHNhdmluZycpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuJF9fdmVyc2lvbih0cnVlLCBvYmopO1xuICAgIHRoaXNbbW9kZWxDb2xsZWN0aW9uU3ltYm9sXS5pbnNlcnRPbmUob2JqLCBzYXZlT3B0aW9ucykudGhlbihcbiAgICAgIHJldCA9PiBjYWxsYmFjayhudWxsLCByZXQpLFxuICAgICAgZXJyID0+IHtcbiAgICAgICAgX3NldElzTmV3KHRoaXMsIHRydWUpO1xuXG4gICAgICAgIGNhbGxiYWNrKGVyciwgbnVsbCk7XG4gICAgICB9XG4gICAgKTtcblxuICAgIHRoaXMuJF9fcmVzZXQoKTtcbiAgICBfc2V0SXNOZXcodGhpcywgZmFsc2UpO1xuICAgIC8vIE1ha2UgaXQgcG9zc2libGUgdG8gcmV0cnkgdGhlIGluc2VydFxuICAgIHRoaXMuJF9fLmluc2VydGluZyA9IHRydWU7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gTWFrZSBzdXJlIHdlIGRvbid0IHRyZWF0IGl0IGFzIGEgbmV3IG9iamVjdCBvbiBlcnJvcixcbiAgLy8gc2luY2UgaXQgYWxyZWFkeSBleGlzdHNcbiAgdGhpcy4kX18uaW5zZXJ0aW5nID0gZmFsc2U7XG4gIGNvbnN0IGRlbHRhID0gdGhpcy4kX19kZWx0YSgpO1xuICBpZiAoZGVsdGEpIHtcbiAgICBpZiAoZGVsdGEgaW5zdGFuY2VvZiBNb25nb29zZUVycm9yKSB7XG4gICAgICBjYWxsYmFjayhkZWx0YSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgd2hlcmUgPSB0aGlzLiRfX3doZXJlKGRlbHRhWzBdKTtcbiAgICBpZiAod2hlcmUgaW5zdGFuY2VvZiBNb25nb29zZUVycm9yKSB7XG4gICAgICBjYWxsYmFjayh3aGVyZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgX2FwcGx5Q3VzdG9tV2hlcmUodGhpcywgd2hlcmUpO1xuXG4gICAgY29uc3QgdXBkYXRlID0gZGVsdGFbMV07XG4gICAgaWYgKHRoaXMuJF9fc2NoZW1hLm9wdGlvbnMubWluaW1pemUpIHtcbiAgICAgIG1pbmltaXplKHVwZGF0ZSk7XG4gICAgICAvLyBtaW5pbWl6ZSBtaWdodCBsZWF2ZSB1cyB3aXRoIGFuIGVtcHR5IG9iamVjdCwgd2hpY2ggd291bGRcbiAgICAgIC8vIGxlYWQgdG8gTW9uZ29EQiB0aHJvd2luZyBhIFwiVXBkYXRlIGRvY3VtZW50IHJlcXVpcmVzIGF0b21pYyBvcGVyYXRvcnNcIiBlcnJvclxuICAgICAgaWYgKE9iamVjdC5rZXlzKHVwZGF0ZSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGhhbmRsZUVtcHR5VXBkYXRlLmNhbGwodGhpcyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzW21vZGVsQ29sbGVjdGlvblN5bWJvbF0udXBkYXRlT25lKHdoZXJlLCB1cGRhdGUsIHNhdmVPcHRpb25zKS50aGVuKFxuICAgICAgcmV0ID0+IHtcbiAgICAgICAgcmV0LiR3aGVyZSA9IHdoZXJlO1xuICAgICAgICBjYWxsYmFjayhudWxsLCByZXQpO1xuICAgICAgfSxcbiAgICAgIGVyciA9PiB7XG4gICAgICAgIHRoaXMuJF9fdW5kb1Jlc2V0KCk7XG5cbiAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgIH1cbiAgICApO1xuICB9IGVsc2Uge1xuICAgIGhhbmRsZUVtcHR5VXBkYXRlLmNhbGwodGhpcyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gc3RvcmUgdGhlIG1vZGlmaWVkIHBhdGhzIGJlZm9yZSB0aGUgZG9jdW1lbnQgaXMgcmVzZXRcbiAgdGhpcy4kX18ubW9kaWZpZWRQYXRocyA9IHRoaXMubW9kaWZpZWRQYXRocygpO1xuICB0aGlzLiRfX3Jlc2V0KCk7XG5cbiAgX3NldElzTmV3KHRoaXMsIGZhbHNlKTtcblxuICBmdW5jdGlvbiBoYW5kbGVFbXB0eVVwZGF0ZSgpIHtcbiAgICBjb25zdCBvcHRpb25zV2l0aEN1c3RvbVZhbHVlcyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHNhdmVPcHRpb25zKTtcbiAgICBjb25zdCB3aGVyZSA9IHRoaXMuJF9fd2hlcmUoKTtcbiAgICBjb25zdCBvcHRpbWlzdGljQ29uY3VycmVuY3kgPSB0aGlzLiRfX3NjaGVtYS5vcHRpb25zLm9wdGltaXN0aWNDb25jdXJyZW5jeTtcbiAgICBpZiAob3B0aW1pc3RpY0NvbmN1cnJlbmN5ICYmICFBcnJheS5pc0FycmF5KG9wdGltaXN0aWNDb25jdXJyZW5jeSkpIHtcbiAgICAgIGNvbnN0IGtleSA9IHRoaXMuJF9fc2NoZW1hLm9wdGlvbnMudmVyc2lvbktleTtcbiAgICAgIGNvbnN0IHZhbCA9IHRoaXMuJF9fZ2V0VmFsdWUoa2V5KTtcbiAgICAgIGlmICh2YWwgIT0gbnVsbCkge1xuICAgICAgICB3aGVyZVtrZXldID0gdmFsO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmNvbnN0cnVjdG9yLmNvbGxlY3Rpb24uZmluZE9uZSh3aGVyZSwgb3B0aW9uc1dpdGhDdXN0b21WYWx1ZXMpXG4gICAgICAudGhlbihkb2N1bWVudEV4aXN0cyA9PiB7XG4gICAgICAgIGNvbnN0IG1hdGNoZWRDb3VudCA9ICFkb2N1bWVudEV4aXN0cyA/IDAgOiAxO1xuICAgICAgICBjYWxsYmFjayhudWxsLCB7ICR3aGVyZTogd2hlcmUsIG1hdGNoZWRDb3VudCB9KTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goY2FsbGJhY2spO1xuICB9XG59O1xuXG4vKiFcbiAqIGlnbm9yZVxuICovXG5cbk1vZGVsLnByb3RvdHlwZS4kX19zYXZlID0gZnVuY3Rpb24ob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgdGhpcy4kX19oYW5kbGVTYXZlKG9wdGlvbnMsIChlcnJvciwgcmVzdWx0KSA9PiB7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBjb25zdCBob29rcyA9IHRoaXMuJF9fc2NoZW1hLnMuaG9va3M7XG4gICAgICByZXR1cm4gaG9va3MuZXhlY1Bvc3QoJ3NhdmU6ZXJyb3InLCB0aGlzLCBbdGhpc10sIHsgZXJyb3I6IGVycm9yIH0sIChlcnJvcikgPT4ge1xuICAgICAgICBjYWxsYmFjayhlcnJvciwgdGhpcyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgbGV0IG51bUFmZmVjdGVkID0gMDtcbiAgICBjb25zdCB3cml0ZUNvbmNlcm4gPSBvcHRpb25zICE9IG51bGwgP1xuICAgICAgb3B0aW9ucy53cml0ZUNvbmNlcm4gIT0gbnVsbCA/XG4gICAgICAgIG9wdGlvbnMud3JpdGVDb25jZXJuLncgOlxuICAgICAgICBvcHRpb25zLncgOlxuICAgICAgMDtcbiAgICBpZiAod3JpdGVDb25jZXJuICE9PSAwKSB7XG4gICAgICAvLyBTa2lwIGNoZWNraW5nIGlmIHdyaXRlIHN1Y2NlZWRlZCBpZiB3cml0ZUNvbmNlcm4gaXMgc2V0IHRvXG4gICAgICAvLyB1bmFja25vd2xlZGdlZCB3cml0ZXMsIGJlY2F1c2Ugb3RoZXJ3aXNlIGBudW1BZmZlY3RlZGAgd2lsbCBhbHdheXMgYmUgMFxuICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcbiAgICAgICAgICBudW1BZmZlY3RlZCA9IHJlc3VsdC5sZW5ndGg7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzdWx0Lm1hdGNoZWRDb3VudCAhPSBudWxsKSB7XG4gICAgICAgICAgbnVtQWZmZWN0ZWQgPSByZXN1bHQubWF0Y2hlZENvdW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG51bUFmZmVjdGVkID0gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHZlcnNpb25CdW1wID0gdGhpcy4kX18udmVyc2lvbjtcbiAgICAgIC8vIHdhcyB0aGlzIGFuIHVwZGF0ZSB0aGF0IHJlcXVpcmVkIGEgdmVyc2lvbiBidW1wP1xuICAgICAgaWYgKHZlcnNpb25CdW1wICYmICF0aGlzLiRfXy5pbnNlcnRpbmcpIHtcbiAgICAgICAgY29uc3QgZG9JbmNyZW1lbnQgPSBWRVJTSU9OX0lOQyA9PT0gKFZFUlNJT05fSU5DICYgdGhpcy4kX18udmVyc2lvbik7XG4gICAgICAgIHRoaXMuJF9fLnZlcnNpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMuJF9fc2NoZW1hLm9wdGlvbnMudmVyc2lvbktleTtcbiAgICAgICAgY29uc3QgdmVyc2lvbiA9IHRoaXMuJF9fZ2V0VmFsdWUoa2V5KSB8fCAwO1xuICAgICAgICBpZiAobnVtQWZmZWN0ZWQgPD0gMCkge1xuICAgICAgICAgIC8vIHRoZSB1cGRhdGUgZmFpbGVkLiBwYXNzIGFuIGVycm9yIGJhY2tcbiAgICAgICAgICB0aGlzLiRfX3VuZG9SZXNldCgpO1xuICAgICAgICAgIGNvbnN0IGVyciA9IHRoaXMuJF9fLiR2ZXJzaW9uRXJyb3IgfHxcbiAgICAgICAgICAgIG5ldyBWZXJzaW9uRXJyb3IodGhpcywgdmVyc2lvbiwgdGhpcy4kX18ubW9kaWZpZWRQYXRocyk7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpbmNyZW1lbnQgdmVyc2lvbiBpZiB3YXMgc3VjY2Vzc2Z1bFxuICAgICAgICBpZiAoZG9JbmNyZW1lbnQpIHtcbiAgICAgICAgICB0aGlzLiRfX3NldFZhbHVlKGtleSwgdmVyc2lvbiArIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ICE9IG51bGwgJiYgbnVtQWZmZWN0ZWQgPD0gMCkge1xuICAgICAgICB0aGlzLiRfX3VuZG9SZXNldCgpO1xuICAgICAgICBlcnJvciA9IG5ldyBEb2N1bWVudE5vdEZvdW5kRXJyb3IocmVzdWx0LiR3aGVyZSxcbiAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLm1vZGVsTmFtZSwgbnVtQWZmZWN0ZWQsIHJlc3VsdCk7XG4gICAgICAgIGNvbnN0IGhvb2tzID0gdGhpcy4kX19zY2hlbWEucy5ob29rcztcbiAgICAgICAgcmV0dXJuIGhvb2tzLmV4ZWNQb3N0KCdzYXZlOmVycm9yJywgdGhpcywgW3RoaXNdLCB7IGVycm9yOiBlcnJvciB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICBjYWxsYmFjayhlcnJvciwgdGhpcyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLiRfXy5zYXZpbmcgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy4kX18uc2F2ZWRTdGF0ZSA9IHt9O1xuICAgIHRoaXMuJGVtaXQoJ3NhdmUnLCB0aGlzLCBudW1BZmZlY3RlZCk7XG4gICAgdGhpcy5jb25zdHJ1Y3Rvci5lbWl0KCdzYXZlJywgdGhpcywgbnVtQWZmZWN0ZWQpO1xuICAgIGNhbGxiYWNrKG51bGwsIHRoaXMpO1xuICB9KTtcbn07XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxuZnVuY3Rpb24gZ2VuZXJhdGVWZXJzaW9uRXJyb3IoZG9jLCBtb2RpZmllZFBhdGhzKSB7XG4gIGNvbnN0IGtleSA9IGRvYy4kX19zY2hlbWEub3B0aW9ucy52ZXJzaW9uS2V5O1xuICBpZiAoIWtleSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IHZlcnNpb24gPSBkb2MuJF9fZ2V0VmFsdWUoa2V5KSB8fCAwO1xuICByZXR1cm4gbmV3IFZlcnNpb25FcnJvcihkb2MsIHZlcnNpb24sIG1vZGlmaWVkUGF0aHMpO1xufVxuXG4vKipcbiAqIFNhdmVzIHRoaXMgZG9jdW1lbnQgYnkgaW5zZXJ0aW5nIGEgbmV3IGRvY3VtZW50IGludG8gdGhlIGRhdGFiYXNlIGlmIFtkb2N1bWVudC5pc05ld10oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2FwaS9kb2N1bWVudC5odG1sI0RvY3VtZW50LnByb3RvdHlwZS5pc05ldykgaXMgYHRydWVgLFxuICogb3Igc2VuZHMgYW4gW3VwZGF0ZU9uZV0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2FwaS9kb2N1bWVudC5odG1sI0RvY3VtZW50LnByb3RvdHlwZS51cGRhdGVPbmUoKSkgb3BlcmF0aW9uIHdpdGgganVzdCB0aGUgbW9kaWZpZWQgcGF0aHMgaWYgYGlzTmV3YCBpcyBgZmFsc2VgLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgcHJvZHVjdC5zb2xkID0gRGF0ZS5ub3coKTtcbiAqICAgICBwcm9kdWN0ID0gYXdhaXQgcHJvZHVjdC5zYXZlKCk7XG4gKlxuICogSWYgc2F2ZSBpcyBzdWNjZXNzZnVsLCB0aGUgcmV0dXJuZWQgcHJvbWlzZSB3aWxsIGZ1bGZpbGwgd2l0aCB0aGUgZG9jdW1lbnRcbiAqIHNhdmVkLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3QgbmV3UHJvZHVjdCA9IGF3YWl0IHByb2R1Y3Quc2F2ZSgpO1xuICogICAgIG5ld1Byb2R1Y3QgPT09IHByb2R1Y3Q7IC8vIHRydWVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIG9wdGlvbnMgb3B0aW9uYWwgb3B0aW9uc1xuICogQHBhcmFtIHtTZXNzaW9ufSBbb3B0aW9ucy5zZXNzaW9uPW51bGxdIHRoZSBbc2Vzc2lvbl0oaHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZG9jcy9tYW51YWwvcmVmZXJlbmNlL3NlcnZlci1zZXNzaW9ucy8pIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHNhdmUgb3BlcmF0aW9uLiBJZiBub3Qgc3BlY2lmaWVkLCBkZWZhdWx0cyB0byB0aGUgW2RvY3VtZW50J3MgYXNzb2NpYXRlZCBzZXNzaW9uXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvYXBpL2RvY3VtZW50Lmh0bWwjRG9jdW1lbnQucHJvdG90eXBlLnNlc3Npb24oKSkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuc2FmZV0gKERFUFJFQ0FURUQpIG92ZXJyaWRlcyBbc2NoZW1hJ3Mgc2FmZSBvcHRpb25dKGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9ndWlkZS5odG1sI3NhZmUpLiBVc2UgdGhlIGB3YCBvcHRpb24gaW5zdGVhZC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudmFsaWRhdGVCZWZvcmVTYXZlXSBzZXQgdG8gZmFsc2UgdG8gc2F2ZSB3aXRob3V0IHZhbGlkYXRpbmcuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnZhbGlkYXRlTW9kaWZpZWRPbmx5PWZhbHNlXSBpZiBgdHJ1ZWAsIE1vbmdvb3NlIHdpbGwgb25seSB2YWxpZGF0ZSBtb2RpZmllZCBwYXRocywgYXMgb3Bwb3NlZCB0byBtb2RpZmllZCBwYXRocyBhbmQgYHJlcXVpcmVkYCBwYXRocy5cbiAqIEBwYXJhbSB7TnVtYmVyfFN0cmluZ30gW29wdGlvbnMud10gc2V0IHRoZSBbd3JpdGUgY29uY2Vybl0oaHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZG9jcy9tYW51YWwvcmVmZXJlbmNlL3dyaXRlLWNvbmNlcm4vI3ctb3B0aW9uKS4gT3ZlcnJpZGVzIHRoZSBbc2NoZW1hLWxldmVsIGB3cml0ZUNvbmNlcm5gIG9wdGlvbl0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2d1aWRlLmh0bWwjd3JpdGVDb25jZXJuKVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5qXSBzZXQgdG8gdHJ1ZSBmb3IgTW9uZ29EQiB0byB3YWl0IHVudGlsIHRoaXMgYHNhdmUoKWAgaGFzIGJlZW4gW2pvdXJuYWxlZCBiZWZvcmUgcmVzb2x2aW5nIHRoZSByZXR1cm5lZCBwcm9taXNlXShodHRwczovL3d3dy5tb25nb2RiLmNvbS9kb2NzL21hbnVhbC9yZWZlcmVuY2Uvd3JpdGUtY29uY2Vybi8jai1vcHRpb24pLiBPdmVycmlkZXMgdGhlIFtzY2hlbWEtbGV2ZWwgYHdyaXRlQ29uY2VybmAgb3B0aW9uXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvZ3VpZGUuaHRtbCN3cml0ZUNvbmNlcm4pXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMud3RpbWVvdXRdIHNldHMgYSBbdGltZW91dCBmb3IgdGhlIHdyaXRlIGNvbmNlcm5dKGh0dHBzOi8vd3d3Lm1vbmdvZGIuY29tL2RvY3MvbWFudWFsL3JlZmVyZW5jZS93cml0ZS1jb25jZXJuLyN3dGltZW91dCkuIE92ZXJyaWRlcyB0aGUgW3NjaGVtYS1sZXZlbCBgd3JpdGVDb25jZXJuYCBvcHRpb25dKGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9ndWlkZS5odG1sI3dyaXRlQ29uY2VybikuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmNoZWNrS2V5cz10cnVlXSB0aGUgTW9uZ29EQiBkcml2ZXIgcHJldmVudHMgeW91IGZyb20gc2F2aW5nIGtleXMgdGhhdCBzdGFydCB3aXRoICckJyBvciBjb250YWluICcuJyBieSBkZWZhdWx0LiBTZXQgdGhpcyBvcHRpb24gdG8gYGZhbHNlYCB0byBza2lwIHRoYXQgY2hlY2suIFNlZSBbcmVzdHJpY3Rpb25zIG9uIGZpZWxkIG5hbWVzXShodHRwczovL2RvY3MubW9uZ29kYi5jb20vbWFudWFsL3JlZmVyZW5jZS9saW1pdHMvI21vbmdvZGItbGltaXQtUmVzdHJpY3Rpb25zLW9uLUZpZWxkLU5hbWVzKVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy50aW1lc3RhbXBzPXRydWVdIGlmIGBmYWxzZWAgYW5kIFt0aW1lc3RhbXBzXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvZ3VpZGUuaHRtbCN0aW1lc3RhbXBzKSBhcmUgZW5hYmxlZCwgc2tpcCB0aW1lc3RhbXBzIGZvciB0aGlzIGBzYXZlKClgLlxuICogQHRocm93cyB7RG9jdW1lbnROb3RGb3VuZEVycm9yfSBpZiB0aGlzIFtzYXZlIHVwZGF0ZXMgYW4gZXhpc3RpbmcgZG9jdW1lbnRdKGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9hcGkvZG9jdW1lbnQuaHRtbCNEb2N1bWVudC5wcm90b3R5cGUuaXNOZXcpIGJ1dCB0aGUgZG9jdW1lbnQgZG9lc24ndCBleGlzdCBpbiB0aGUgZGF0YWJhc2UuIEZvciBleGFtcGxlLCB5b3Ugd2lsbCBnZXQgdGhpcyBlcnJvciBpZiB0aGUgZG9jdW1lbnQgaXMgW2RlbGV0ZWQgYmV0d2VlbiB3aGVuIHlvdSByZXRyaWV2ZWQgdGhlIGRvY3VtZW50IGFuZCB3aGVuIHlvdSBzYXZlZCBpdF0oZG9jdW1lbnRzLmh0bWwjdXBkYXRpbmcpLlxuICogQHJldHVybiB7UHJvbWlzZX1cbiAqIEBhcGkgcHVibGljXG4gKiBAc2VlIG1pZGRsZXdhcmUgaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL21pZGRsZXdhcmUuaHRtbFxuICovXG5cbk1vZGVsLnByb3RvdHlwZS5zYXZlID0gYXN5bmMgZnVuY3Rpb24gc2F2ZShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgYXJndW1lbnRzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IE1vbmdvb3NlRXJyb3IoJ01vZGVsLnByb3RvdHlwZS5zYXZlKCkgbm8gbG9uZ2VyIGFjY2VwdHMgYSBjYWxsYmFjaycpO1xuICB9XG5cbiAgbGV0IHBhcmFsbGVsU2F2ZTtcbiAgdGhpcy4kb3AgPSAnc2F2ZSc7XG5cbiAgaWYgKHRoaXMuJF9fLnNhdmluZykge1xuICAgIHBhcmFsbGVsU2F2ZSA9IG5ldyBQYXJhbGxlbFNhdmVFcnJvcih0aGlzKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLiRfXy5zYXZpbmcgPSBuZXcgUGFyYWxsZWxTYXZlRXJyb3IodGhpcyk7XG4gIH1cblxuICBvcHRpb25zID0gbmV3IFNhdmVPcHRpb25zKG9wdGlvbnMpO1xuICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnc2Vzc2lvbicpKSB7XG4gICAgdGhpcy4kc2Vzc2lvbihvcHRpb25zLnNlc3Npb24pO1xuICB9XG4gIGlmICh0aGlzLiRfXy50aW1lc3RhbXBzICE9IG51bGwpIHtcbiAgICBvcHRpb25zLnRpbWVzdGFtcHMgPSB0aGlzLiRfXy50aW1lc3RhbXBzO1xuICB9XG4gIHRoaXMuJF9fLiR2ZXJzaW9uRXJyb3IgPSBnZW5lcmF0ZVZlcnNpb25FcnJvcih0aGlzLCB0aGlzLm1vZGlmaWVkUGF0aHMoKSk7XG5cbiAgaWYgKHBhcmFsbGVsU2F2ZSkge1xuICAgIHRoaXMuJF9faGFuZGxlUmVqZWN0KHBhcmFsbGVsU2F2ZSk7XG4gICAgdGhyb3cgcGFyYWxsZWxTYXZlO1xuICB9XG5cbiAgdGhpcy4kX18uc2F2ZU9wdGlvbnMgPSBvcHRpb25zO1xuXG4gIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB0aGlzLiRfX3NhdmUob3B0aW9ucywgZXJyb3IgPT4ge1xuICAgICAgdGhpcy4kX18uc2F2aW5nID0gbnVsbDtcbiAgICAgIHRoaXMuJF9fLnNhdmVPcHRpb25zID0gbnVsbDtcbiAgICAgIHRoaXMuJF9fLiR2ZXJzaW9uRXJyb3IgPSBudWxsO1xuICAgICAgdGhpcy4kb3AgPSBudWxsO1xuICAgICAgaWYgKGVycm9yICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy4kX19oYW5kbGVSZWplY3QoZXJyb3IpO1xuICAgICAgICByZXR1cm4gcmVqZWN0KGVycm9yKTtcbiAgICAgIH1cblxuICAgICAgcmVzb2x2ZSgpO1xuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk1vZGVsLnByb3RvdHlwZS4kc2F2ZSA9IE1vZGVsLnByb3RvdHlwZS5zYXZlO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB2ZXJzaW9uaW5nIHNob3VsZCBiZSBza2lwcGVkIGZvciB0aGUgZ2l2ZW4gcGF0aFxuICpcbiAqIEBwYXJhbSB7RG9jdW1lbnR9IHNlbGZcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoXG4gKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHZlcnNpb25pbmcgc2hvdWxkIGJlIHNraXBwZWQgZm9yIHRoZSBnaXZlbiBwYXRoXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2hvdWxkU2tpcFZlcnNpb25pbmcoc2VsZiwgcGF0aCkge1xuICBjb25zdCBza2lwVmVyc2lvbmluZyA9IHNlbGYuJF9fc2NoZW1hLm9wdGlvbnMuc2tpcFZlcnNpb25pbmc7XG4gIGlmICghc2tpcFZlcnNpb25pbmcpIHJldHVybiBmYWxzZTtcblxuICAvLyBSZW1vdmUgYW55IGFycmF5IGluZGV4ZXMgZnJvbSB0aGUgcGF0aFxuICBwYXRoID0gcGF0aC5yZXBsYWNlKC9cXC5cXGQrXFwuLywgJy4nKTtcblxuICByZXR1cm4gc2tpcFZlcnNpb25pbmdbcGF0aF07XG59XG5cbi8qKlxuICogQXBwbHkgdGhlIG9wZXJhdGlvbiB0byB0aGUgZGVsdGEgKHVwZGF0ZSkgY2xhdXNlIGFzXG4gKiB3ZWxsIGFzIHRyYWNrIHZlcnNpb25pbmcgZm9yIG91ciB3aGVyZSBjbGF1c2UuXG4gKlxuICogQHBhcmFtIHtEb2N1bWVudH0gc2VsZlxuICogQHBhcmFtIHtPYmplY3R9IHdoZXJlIFVudXNlZFxuICogQHBhcmFtIHtPYmplY3R9IGRlbHRhXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICogQHBhcmFtIHtNaXhlZH0gdmFsXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wXVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gb3BlcmFuZChzZWxmLCB3aGVyZSwgZGVsdGEsIGRhdGEsIHZhbCwgb3ApIHtcbiAgLy8gZGVsdGFcbiAgb3AgfHwgKG9wID0gJyRzZXQnKTtcbiAgaWYgKCFkZWx0YVtvcF0pIGRlbHRhW29wXSA9IHt9O1xuICBkZWx0YVtvcF1bZGF0YS5wYXRoXSA9IHZhbDtcbiAgLy8gZGlzYWJsZWQgdmVyc2lvbmluZz9cbiAgaWYgKHNlbGYuJF9fc2NoZW1hLm9wdGlvbnMudmVyc2lvbktleSA9PT0gZmFsc2UpIHJldHVybjtcblxuICAvLyBwYXRoIGV4Y2x1ZGVkIGZyb20gdmVyc2lvbmluZz9cbiAgaWYgKHNob3VsZFNraXBWZXJzaW9uaW5nKHNlbGYsIGRhdGEucGF0aCkpIHJldHVybjtcblxuICAvLyBhbHJlYWR5IG1hcmtlZCBmb3IgdmVyc2lvbmluZz9cbiAgaWYgKFZFUlNJT05fQUxMID09PSAoVkVSU0lPTl9BTEwgJiBzZWxmLiRfXy52ZXJzaW9uKSkgcmV0dXJuO1xuXG4gIGlmIChzZWxmLiRfX3NjaGVtYS5vcHRpb25zLm9wdGltaXN0aWNDb25jdXJyZW5jeSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHN3aXRjaCAob3ApIHtcbiAgICBjYXNlICckc2V0JzpcbiAgICBjYXNlICckdW5zZXQnOlxuICAgIGNhc2UgJyRwb3AnOlxuICAgIGNhc2UgJyRwdWxsJzpcbiAgICBjYXNlICckcHVsbEFsbCc6XG4gICAgY2FzZSAnJHB1c2gnOlxuICAgIGNhc2UgJyRhZGRUb1NldCc6XG4gICAgY2FzZSAnJGluYyc6XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgLy8gbm90aGluZyB0byBkb1xuICAgICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gZW5zdXJlIHVwZGF0ZXMgc2VudCB3aXRoIHBvc2l0aW9uYWwgbm90YXRpb24gYXJlXG4gIC8vIGVkaXRpbmcgdGhlIGNvcnJlY3QgYXJyYXkgZWxlbWVudC5cbiAgLy8gb25seSBpbmNyZW1lbnQgdGhlIHZlcnNpb24gaWYgYW4gYXJyYXkgcG9zaXRpb24gY2hhbmdlcy5cbiAgLy8gbW9kaWZ5aW5nIGVsZW1lbnRzIG9mIGFuIGFycmF5IGlzIG9rIGlmIHBvc2l0aW9uIGRvZXMgbm90IGNoYW5nZS5cbiAgaWYgKG9wID09PSAnJHB1c2gnIHx8IG9wID09PSAnJGFkZFRvU2V0JyB8fCBvcCA9PT0gJyRwdWxsQWxsJyB8fCBvcCA9PT0gJyRwdWxsJykge1xuICAgIGlmICgvXFwuXFxkK1xcLnxcXC5cXGQrJC8udGVzdChkYXRhLnBhdGgpKSB7XG4gICAgICBpbmNyZW1lbnQuY2FsbChzZWxmKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi4kX18udmVyc2lvbiA9IFZFUlNJT05fSU5DO1xuICAgIH1cbiAgfSBlbHNlIGlmICgvXlxcJHAvLnRlc3Qob3ApKSB7XG4gICAgLy8gcG90ZW50aWFsbHkgY2hhbmdpbmcgYXJyYXkgcG9zaXRpb25zXG4gICAgaW5jcmVtZW50LmNhbGwoc2VsZik7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgLy8gJHNldCBhbiBhcnJheVxuICAgIGluY3JlbWVudC5jYWxsKHNlbGYpO1xuICB9IGVsc2UgaWYgKC9cXC5cXGQrXFwufFxcLlxcZCskLy50ZXN0KGRhdGEucGF0aCkpIHtcbiAgICAvLyBub3cgaGFuZGxpbmcgJHNldCwgJHVuc2V0XG4gICAgLy8gc3VicGF0aCBvZiBhcnJheVxuICAgIHNlbGYuJF9fLnZlcnNpb24gPSBWRVJTSU9OX1dIRVJFO1xuICB9XG59XG5cbi8qKlxuICogQ29tcGlsZXMgYW4gdXBkYXRlIGFuZCB3aGVyZSBjbGF1c2UgZm9yIGEgYHZhbGAgd2l0aCBfYXRvbWljcy5cbiAqXG4gKiBAcGFyYW0ge0RvY3VtZW50fSBzZWxmXG4gKiBAcGFyYW0ge09iamVjdH0gd2hlcmVcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWx0YVxuICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBoYW5kbGVBdG9taWNzKHNlbGYsIHdoZXJlLCBkZWx0YSwgZGF0YSwgdmFsdWUpIHtcbiAgaWYgKGRlbHRhLiRzZXQgJiYgZGVsdGEuJHNldFtkYXRhLnBhdGhdKSB7XG4gICAgLy8gJHNldCBoYXMgcHJlY2VkZW5jZSBvdmVyIG90aGVyIGF0b21pY3NcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlLiRfX2dldEF0b21pY3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YWx1ZS4kX19nZXRBdG9taWNzKCkuZm9yRWFjaChmdW5jdGlvbihhdG9taWMpIHtcbiAgICAgIGNvbnN0IG9wID0gYXRvbWljWzBdO1xuICAgICAgY29uc3QgdmFsID0gYXRvbWljWzFdO1xuICAgICAgb3BlcmFuZChzZWxmLCB3aGVyZSwgZGVsdGEsIGRhdGEsIHZhbCwgb3ApO1xuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGxlZ2FjeSBzdXBwb3J0IGZvciBwbHVnaW5zXG5cbiAgY29uc3QgYXRvbWljcyA9IHZhbHVlW2FycmF5QXRvbWljc1N5bWJvbF07XG4gIGNvbnN0IG9wcyA9IE9iamVjdC5rZXlzKGF0b21pY3MpO1xuICBsZXQgaSA9IG9wcy5sZW5ndGg7XG4gIGxldCB2YWw7XG4gIGxldCBvcDtcblxuICBpZiAoaSA9PT0gMCkge1xuICAgIC8vICRzZXRcblxuICAgIGlmICh1dGlscy5pc01vbmdvb3NlT2JqZWN0KHZhbHVlKSkge1xuICAgICAgdmFsdWUgPSB2YWx1ZS50b09iamVjdCh7IGRlcG9wdWxhdGU6IDEsIF9pc05lc3RlZDogdHJ1ZSB9KTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlLnZhbHVlT2YpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUudmFsdWVPZigpO1xuICAgIH1cblxuICAgIHJldHVybiBvcGVyYW5kKHNlbGYsIHdoZXJlLCBkZWx0YSwgZGF0YSwgdmFsdWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXRlcihtZW0pIHtcbiAgICByZXR1cm4gdXRpbHMuaXNNb25nb29zZU9iamVjdChtZW0pXG4gICAgICA/IG1lbS50b09iamVjdCh7IGRlcG9wdWxhdGU6IDEsIF9pc05lc3RlZDogdHJ1ZSB9KVxuICAgICAgOiBtZW07XG4gIH1cblxuICB3aGlsZSAoaS0tKSB7XG4gICAgb3AgPSBvcHNbaV07XG4gICAgdmFsID0gYXRvbWljc1tvcF07XG5cbiAgICBpZiAodXRpbHMuaXNNb25nb29zZU9iamVjdCh2YWwpKSB7XG4gICAgICB2YWwgPSB2YWwudG9PYmplY3QoeyBkZXBvcHVsYXRlOiB0cnVlLCB0cmFuc2Zvcm06IGZhbHNlLCBfaXNOZXN0ZWQ6IHRydWUgfSk7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgIHZhbCA9IHZhbC5tYXAoaXRlcik7XG4gICAgfSBlbHNlIGlmICh2YWwudmFsdWVPZikge1xuICAgICAgdmFsID0gdmFsLnZhbHVlT2YoKTtcbiAgICB9XG5cbiAgICBpZiAob3AgPT09ICckYWRkVG9TZXQnKSB7XG4gICAgICB2YWwgPSB7ICRlYWNoOiB2YWwgfTtcbiAgICB9XG5cbiAgICBvcGVyYW5kKHNlbGYsIHdoZXJlLCBkZWx0YSwgZGF0YSwgdmFsLCBvcCk7XG4gIH1cbn1cblxuLyoqXG4gKiBQcm9kdWNlcyBhIHNwZWNpYWwgcXVlcnkgZG9jdW1lbnQgb2YgdGhlIG1vZGlmaWVkIHByb3BlcnRpZXMgdXNlZCBpbiB1cGRhdGVzLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICogQG1ldGhvZCAkX19kZWx0YVxuICogQG1lbWJlck9mIE1vZGVsXG4gKiBAaW5zdGFuY2VcbiAqL1xuXG5Nb2RlbC5wcm90b3R5cGUuJF9fZGVsdGEgPSBmdW5jdGlvbigpIHtcbiAgY29uc3QgZGlydHkgPSB0aGlzLiRfX2RpcnR5KCk7XG5cbiAgY29uc3Qgb3B0aW1pc3RpY0NvbmN1cnJlbmN5ID0gdGhpcy4kX19zY2hlbWEub3B0aW9ucy5vcHRpbWlzdGljQ29uY3VycmVuY3k7XG4gIGlmIChvcHRpbWlzdGljQ29uY3VycmVuY3kpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpbWlzdGljQ29uY3VycmVuY3kpKSB7XG4gICAgICBjb25zdCBvcHRDb24gPSBuZXcgU2V0KG9wdGltaXN0aWNDb25jdXJyZW5jeSk7XG4gICAgICBjb25zdCBtb2RQYXRocyA9IHRoaXMubW9kaWZpZWRQYXRocygpO1xuICAgICAgaWYgKG1vZFBhdGhzLmZpbmQocGF0aCA9PiBvcHRDb24uaGFzKHBhdGgpKSkge1xuICAgICAgICB0aGlzLiRfXy52ZXJzaW9uID0gZGlydHkubGVuZ3RoID8gVkVSU0lPTl9BTEwgOiBWRVJTSU9OX1dIRVJFO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRfXy52ZXJzaW9uID0gZGlydHkubGVuZ3RoID8gVkVSU0lPTl9BTEwgOiBWRVJTSU9OX1dIRVJFO1xuICAgIH1cbiAgfVxuXG4gIGlmICghZGlydHkubGVuZ3RoICYmIFZFUlNJT05fQUxMICE9PSB0aGlzLiRfXy52ZXJzaW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHdoZXJlID0ge307XG4gIGNvbnN0IGRlbHRhID0ge307XG4gIGNvbnN0IGxlbiA9IGRpcnR5Lmxlbmd0aDtcbiAgY29uc3QgZGl2ZXJnZW50ID0gW107XG4gIGxldCBkID0gMDtcblxuICB3aGVyZS5faWQgPSB0aGlzLl9kb2MuX2lkO1xuICAvLyBJZiBgX2lkYCBpcyBhbiBvYmplY3QsIG5lZWQgdG8gZGVwb3B1bGF0ZSwgYnV0IGFsc28gbmVlZCB0byBiZSBjYXJlZnVsXG4gIC8vIGJlY2F1c2UgYF9pZGAgY2FuIHRlY2huaWNhbGx5IGJlIG51bGwgKHNlZSBnaC02NDA2KVxuICBpZiAoKHdoZXJlICYmIHdoZXJlLl9pZCAmJiB3aGVyZS5faWQuJF9fIHx8IG51bGwpICE9IG51bGwpIHtcbiAgICB3aGVyZS5faWQgPSB3aGVyZS5faWQudG9PYmplY3QoeyB0cmFuc2Zvcm06IGZhbHNlLCBkZXBvcHVsYXRlOiB0cnVlIH0pO1xuICB9XG4gIGZvciAoOyBkIDwgbGVuOyArK2QpIHtcbiAgICBjb25zdCBkYXRhID0gZGlydHlbZF07XG4gICAgbGV0IHZhbHVlID0gZGF0YS52YWx1ZTtcbiAgICBjb25zdCBtYXRjaCA9IGNoZWNrRGl2ZXJnZW50QXJyYXkodGhpcywgZGF0YS5wYXRoLCB2YWx1ZSk7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBkaXZlcmdlbnQucHVzaChtYXRjaCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBjb25zdCBwb3AgPSB0aGlzLiRwb3B1bGF0ZWQoZGF0YS5wYXRoLCB0cnVlKTtcbiAgICBpZiAoIXBvcCAmJiB0aGlzLiRfXy5zZWxlY3RlZCkge1xuICAgICAgLy8gSWYgYW55IGFycmF5IHdhcyBzZWxlY3RlZCB1c2luZyBhbiAkZWxlbU1hdGNoIHByb2plY3Rpb24sIHdlIGFsdGVyIHRoZSBwYXRoIGFuZCB3aGVyZSBjbGF1c2VcbiAgICAgIC8vIE5PVEU6IE1vbmdvREIgb25seSBzdXBwb3J0cyBwcm9qZWN0ZWQgJGVsZW1NYXRjaCBvbiB0b3AgbGV2ZWwgYXJyYXkuXG4gICAgICBjb25zdCBwYXRoU3BsaXQgPSBkYXRhLnBhdGguc3BsaXQoJy4nKTtcbiAgICAgIGNvbnN0IHRvcCA9IHBhdGhTcGxpdFswXTtcbiAgICAgIGlmICh0aGlzLiRfXy5zZWxlY3RlZFt0b3BdICYmIHRoaXMuJF9fLnNlbGVjdGVkW3RvcF0uJGVsZW1NYXRjaCkge1xuICAgICAgICAvLyBJZiB0aGUgc2VsZWN0ZWQgYXJyYXkgZW50cnkgd2FzIG1vZGlmaWVkXG4gICAgICAgIGlmIChwYXRoU3BsaXQubGVuZ3RoID4gMSAmJiBwYXRoU3BsaXRbMV0gPT0gMCAmJiB0eXBlb2Ygd2hlcmVbdG9wXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB3aGVyZVt0b3BdID0gdGhpcy4kX18uc2VsZWN0ZWRbdG9wXTtcbiAgICAgICAgICBwYXRoU3BsaXRbMV0gPSAnJCc7XG4gICAgICAgICAgZGF0YS5wYXRoID0gcGF0aFNwbGl0LmpvaW4oJy4nKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiB0aGUgc2VsZWN0ZWQgYXJyYXkgd2FzIG1vZGlmaWVkIGluIGFueSBvdGhlciB3YXkgdGhyb3cgYW4gZXJyb3JcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGl2ZXJnZW50LnB1c2goZGF0YS5wYXRoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIHRoaXMgcGF0aCBpcyBzZXQgdG8gZGVmYXVsdCwgYW5kIGVpdGhlciB0aGlzIHBhdGggb3Igb25lIG9mXG4gICAgLy8gaXRzIHBhcmVudHMgaXMgZXhjbHVkZWQsIGRvbid0IHRyZWF0IHRoaXMgcGF0aCBhcyBkaXJ0eS5cbiAgICBpZiAodGhpcy4kaXNEZWZhdWx0KGRhdGEucGF0aCkgJiYgdGhpcy4kX18uc2VsZWN0ZWQpIHtcbiAgICAgIGlmIChkYXRhLnBhdGguaW5kZXhPZignLicpID09PSAtMSAmJiBpc1BhdGhFeGNsdWRlZCh0aGlzLiRfXy5zZWxlY3RlZCwgZGF0YS5wYXRoKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcGF0aHNUb0NoZWNrID0gcGFyZW50UGF0aHMoZGF0YS5wYXRoKTtcbiAgICAgIGlmIChwYXRoc1RvQ2hlY2suZmluZChwYXRoID0+IGlzUGF0aEV4Y2x1ZGVkKHRoaXMuJF9fLmlzU2VsZWN0ZWQsIHBhdGgpKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGl2ZXJnZW50Lmxlbmd0aCkgY29udGludWU7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG9wZXJhbmQodGhpcywgd2hlcmUsIGRlbHRhLCBkYXRhLCAxLCAnJHVuc2V0Jyk7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgb3BlcmFuZCh0aGlzLCB3aGVyZSwgZGVsdGEsIGRhdGEsIG51bGwpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNNb25nb29zZUFycmF5KHZhbHVlKSAmJiB2YWx1ZS4kcGF0aCgpICYmIHZhbHVlW2FycmF5QXRvbWljc1N5bWJvbF0pIHtcbiAgICAgIC8vIGFycmF5cyBhbmQgb3RoZXIgY3VzdG9tIHR5cGVzIChzdXBwb3J0IHBsdWdpbnMgZXRjKVxuICAgICAgaGFuZGxlQXRvbWljcyh0aGlzLCB3aGVyZSwgZGVsdGEsIGRhdGEsIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlW01vbmdvb3NlQnVmZmVyLnBhdGhTeW1ib2xdICYmIEJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgIC8vIE1vbmdvb3NlQnVmZmVyXG4gICAgICB2YWx1ZSA9IHZhbHVlLnRvT2JqZWN0KCk7XG4gICAgICBvcGVyYW5kKHRoaXMsIHdoZXJlLCBkZWx0YSwgZGF0YSwgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy4kX18ucHJpbWl0aXZlQXRvbWljcyAmJiB0aGlzLiRfXy5wcmltaXRpdmVBdG9taWNzW2RhdGEucGF0aF0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCB2YWwgPSB0aGlzLiRfXy5wcmltaXRpdmVBdG9taWNzW2RhdGEucGF0aF07XG4gICAgICAgIGNvbnN0IG9wID0gZmlyc3RLZXkodmFsKTtcbiAgICAgICAgb3BlcmFuZCh0aGlzLCB3aGVyZSwgZGVsdGEsIGRhdGEsIHZhbFtvcF0sIG9wKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gY2xvbmUodmFsdWUsIHtcbiAgICAgICAgICBkZXBvcHVsYXRlOiB0cnVlLFxuICAgICAgICAgIHRyYW5zZm9ybTogZmFsc2UsXG4gICAgICAgICAgdmlydHVhbHM6IGZhbHNlLFxuICAgICAgICAgIGdldHRlcnM6IGZhbHNlLFxuICAgICAgICAgIG9taXRVbmRlZmluZWQ6IHRydWUsXG4gICAgICAgICAgX2lzTmVzdGVkOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBvcGVyYW5kKHRoaXMsIHdoZXJlLCBkZWx0YSwgZGF0YSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChkaXZlcmdlbnQubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG5ldyBEaXZlcmdlbnRBcnJheUVycm9yKGRpdmVyZ2VudCk7XG4gIH1cblxuICBpZiAodGhpcy4kX18udmVyc2lvbikge1xuICAgIHRoaXMuJF9fdmVyc2lvbih3aGVyZSwgZGVsdGEpO1xuICB9XG5cbiAgaWYgKE9iamVjdC5rZXlzKGRlbHRhKS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gW3doZXJlLCBudWxsXTtcbiAgfVxuXG4gIHJldHVybiBbd2hlcmUsIGRlbHRhXTtcbn07XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGFycmF5IHdhcyBwb3B1bGF0ZWQgd2l0aCBzb21lIGZvcm0gb2YgZmlsdGVyIGFuZCBpcyBub3dcbiAqIGJlaW5nIHVwZGF0ZWQgaW4gYSBtYW5uZXIgd2hpY2ggY291bGQgb3ZlcndyaXRlIGRhdGEgdW5pbnRlbnRpb25hbGx5LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL0F1dG9tYXR0aWMvbW9uZ29vc2UvaXNzdWVzLzEzMzRcbiAqIEBwYXJhbSB7RG9jdW1lbnR9IGRvY1xuICogQHBhcmFtIHtTdHJpbmd9IHBhdGhcbiAqIEBwYXJhbSB7QW55fSBhcnJheVxuICogQHJldHVybiB7U3RyaW5nfHVuZGVmaW5lZH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNoZWNrRGl2ZXJnZW50QXJyYXkoZG9jLCBwYXRoLCBhcnJheSkge1xuICAvLyBzZWUgaWYgd2UgcG9wdWxhdGVkIHRoaXMgcGF0aFxuICBjb25zdCBwb3AgPSBkb2MuJHBvcHVsYXRlZChwYXRoLCB0cnVlKTtcblxuICBpZiAoIXBvcCAmJiBkb2MuJF9fLnNlbGVjdGVkKSB7XG4gICAgLy8gSWYgYW55IGFycmF5IHdhcyBzZWxlY3RlZCB1c2luZyBhbiAkZWxlbU1hdGNoIHByb2plY3Rpb24sIHdlIGRlbnkgdGhlIHVwZGF0ZS5cbiAgICAvLyBOT1RFOiBNb25nb0RCIG9ubHkgc3VwcG9ydHMgcHJvamVjdGVkICRlbGVtTWF0Y2ggb24gdG9wIGxldmVsIGFycmF5LlxuICAgIGNvbnN0IHRvcCA9IHBhdGguc3BsaXQoJy4nKVswXTtcbiAgICBpZiAoZG9jLiRfXy5zZWxlY3RlZFt0b3AgKyAnLiQnXSkge1xuICAgICAgcmV0dXJuIHRvcDtcbiAgICB9XG4gIH1cblxuICBpZiAoIShwb3AgJiYgdXRpbHMuaXNNb25nb29zZUFycmF5KGFycmF5KSkpIHJldHVybjtcblxuICAvLyBJZiB0aGUgYXJyYXkgd2FzIHBvcHVsYXRlZCB1c2luZyBvcHRpb25zIHRoYXQgcHJldmVudGVkIGFsbFxuICAvLyBkb2N1bWVudHMgZnJvbSBiZWluZyByZXR1cm5lZCAobWF0Y2gsIHNraXAsIGxpbWl0KSBvciB0aGV5XG4gIC8vIGRlc2VsZWN0ZWQgdGhlIF9pZCBmaWVsZCwgJHBvcCBhbmQgJHNldCBvZiB0aGUgYXJyYXkgYXJlXG4gIC8vIG5vdCBzYWZlIG9wZXJhdGlvbnMuIElmIF9pZCB3YXMgZGVzZWxlY3RlZCwgd2UgZG8gbm90IGtub3dcbiAgLy8gaG93IHRvIHJlbW92ZSBlbGVtZW50cy4gJHBvcCB3aWxsIHBvcCBvZmYgdGhlIF9pZCBmcm9tIHRoZSBlbmRcbiAgLy8gb2YgdGhlIGFycmF5IGluIHRoZSBkYiB3aGljaCBpcyBub3QgZ3VhcmFudGVlZCB0byBiZSB0aGVcbiAgLy8gc2FtZSBhcyB0aGUgbGFzdCBlbGVtZW50IHdlIGhhdmUgaGVyZS4gJHNldCBvZiB0aGUgZW50aXJlIGFycmF5XG4gIC8vIHdvdWxkIGJlIHNpbWlsYXJseSBkZXN0cnVjdGl2ZSBhcyB3ZSBuZXZlciByZWNlaXZlZCBhbGxcbiAgLy8gZWxlbWVudHMgb2YgdGhlIGFycmF5IGFuZCBwb3RlbnRpYWxseSB3b3VsZCBvdmVyd3JpdGUgZGF0YS5cbiAgY29uc3QgY2hlY2sgPSBwb3Aub3B0aW9ucy5tYXRjaCB8fFxuICAgICAgcG9wLm9wdGlvbnMub3B0aW9ucyAmJiB1dGlscy5vYmplY3QuaGFzT3duUHJvcGVydHkocG9wLm9wdGlvbnMub3B0aW9ucywgJ2xpbWl0JykgfHwgLy8gMCBpcyBub3QgcGVybWl0dGVkXG4gICAgICBwb3Aub3B0aW9ucy5vcHRpb25zICYmIHBvcC5vcHRpb25zLm9wdGlvbnMuc2tpcCB8fCAvLyAwIGlzIHBlcm1pdHRlZFxuICAgICAgcG9wLm9wdGlvbnMuc2VsZWN0ICYmIC8vIGRlc2VsZWN0ZWQgX2lkP1xuICAgICAgKHBvcC5vcHRpb25zLnNlbGVjdC5faWQgPT09IDAgfHxcbiAgICAgIC9cXHM/LV9pZFxccz8vLnRlc3QocG9wLm9wdGlvbnMuc2VsZWN0KSk7XG5cbiAgaWYgKGNoZWNrKSB7XG4gICAgY29uc3QgYXRvbWljcyA9IGFycmF5W2FycmF5QXRvbWljc1N5bWJvbF07XG4gICAgaWYgKE9iamVjdC5rZXlzKGF0b21pY3MpLmxlbmd0aCA9PT0gMCB8fCBhdG9taWNzLiRzZXQgfHwgYXRvbWljcy4kcG9wKSB7XG4gICAgICByZXR1cm4gcGF0aDtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBcHBlbmRzIHZlcnNpb25pbmcgdG8gdGhlIHdoZXJlIGFuZCB1cGRhdGUgY2xhdXNlcy5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqIEBtZXRob2QgJF9fdmVyc2lvblxuICogQG1lbWJlck9mIE1vZGVsXG4gKiBAaW5zdGFuY2VcbiAqL1xuXG5Nb2RlbC5wcm90b3R5cGUuJF9fdmVyc2lvbiA9IGZ1bmN0aW9uKHdoZXJlLCBkZWx0YSkge1xuICBjb25zdCBrZXkgPSB0aGlzLiRfX3NjaGVtYS5vcHRpb25zLnZlcnNpb25LZXk7XG4gIGlmICh3aGVyZSA9PT0gdHJ1ZSkge1xuICAgIC8vIHRoaXMgaXMgYW4gaW5zZXJ0XG4gICAgaWYgKGtleSkge1xuICAgICAgc2V0RG90dGVkUGF0aChkZWx0YSwga2V5LCAwKTtcbiAgICAgIHRoaXMuJF9fc2V0VmFsdWUoa2V5LCAwKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGtleSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyB1cGRhdGVzXG5cbiAgLy8gb25seSBhcHBseSB2ZXJzaW9uaW5nIGlmIG91ciB2ZXJzaW9uS2V5IHdhcyBzZWxlY3RlZC4gZWxzZVxuICAvLyB0aGVyZSBpcyBubyB3YXkgdG8gc2VsZWN0IHRoZSBjb3JyZWN0IHZlcnNpb24uIHdlIGNvdWxkIGZhaWxcbiAgLy8gZmFzdCBoZXJlIGFuZCBmb3JjZSB0aGVtIHRvIGluY2x1ZGUgdGhlIHZlcnNpb25LZXkgYnV0XG4gIC8vIHRoYXRzIGEgYml0IGludHJ1c2l2ZS4gY2FuIHdlIGRvIHRoaXMgYXV0b21hdGljYWxseT9cblxuICBpZiAoIXRoaXMuJF9faXNTZWxlY3RlZChrZXkpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gJHB1c2ggJGFkZFRvU2V0IGRvbid0IG5lZWQgdGhlIHdoZXJlIGNsYXVzZSBzZXRcbiAgaWYgKFZFUlNJT05fV0hFUkUgPT09IChWRVJTSU9OX1dIRVJFICYgdGhpcy4kX18udmVyc2lvbikpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuJF9fZ2V0VmFsdWUoa2V5KTtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkgd2hlcmVba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgaWYgKFZFUlNJT05fSU5DID09PSAoVkVSU0lPTl9JTkMgJiB0aGlzLiRfXy52ZXJzaW9uKSkge1xuICAgIGlmIChnZXQoZGVsdGEuJHNldCwga2V5LCBudWxsKSAhPSBudWxsKSB7XG4gICAgICAvLyBWZXJzaW9uIGtleSBpcyBnZXR0aW5nIHNldCwgbWVhbnMgd2UnbGwgaW5jcmVtZW50IHRoZSBkb2MncyB2ZXJzaW9uXG4gICAgICAvLyBhZnRlciBhIHN1Y2Nlc3NmdWwgc2F2ZSwgc28gd2Ugc2hvdWxkIHNldCB0aGUgaW5jcmVtZW50ZWQgdmVyc2lvbiBzb1xuICAgICAgLy8gZnV0dXJlIHNhdmVzIGRvbid0IGZhaWwgKGdoLTU3NzkpXG4gICAgICArK2RlbHRhLiRzZXRba2V5XTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsdGEuJGluYyA9IGRlbHRhLiRpbmMgfHwge307XG4gICAgICBkZWx0YS4kaW5jW2tleV0gPSAxO1xuICAgIH1cbiAgfVxufTtcblxuLyohXG4gKiBpZ25vcmVcbiAqL1xuXG5mdW5jdGlvbiBpbmNyZW1lbnQoKSB7XG4gIHRoaXMuJF9fLnZlcnNpb24gPSBWRVJTSU9OX0FMTDtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8qKlxuICogU2lnbmFsIHRoYXQgd2UgZGVzaXJlIGFuIGluY3JlbWVudCBvZiB0aGlzIGRvY3VtZW50cyB2ZXJzaW9uLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3QgZG9jID0gYXdhaXQgTW9kZWwuZmluZEJ5SWQoaWQpO1xuICogICAgIGRvYy5pbmNyZW1lbnQoKTtcbiAqICAgICBhd2FpdCBkb2Muc2F2ZSgpO1xuICpcbiAqIEBzZWUgdmVyc2lvbktleXMgaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2d1aWRlLmh0bWwjdmVyc2lvbktleVxuICogQG1lbWJlck9mIE1vZGVsXG4gKiBAbWV0aG9kIGluY3JlbWVudFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Nb2RlbC5wcm90b3R5cGUuaW5jcmVtZW50ID0gaW5jcmVtZW50O1xuXG4vKipcbiAqIFJldHVybnMgYSBxdWVyeSBvYmplY3RcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqIEBtZXRob2QgJF9fd2hlcmVcbiAqIEBtZW1iZXJPZiBNb2RlbFxuICogQGluc3RhbmNlXG4gKi9cblxuTW9kZWwucHJvdG90eXBlLiRfX3doZXJlID0gZnVuY3Rpb24gX3doZXJlKHdoZXJlKSB7XG4gIHdoZXJlIHx8ICh3aGVyZSA9IHt9KTtcblxuICBpZiAoIXdoZXJlLl9pZCkge1xuICAgIHdoZXJlLl9pZCA9IHRoaXMuX2RvYy5faWQ7XG4gIH1cblxuICBpZiAodGhpcy5fZG9jLl9pZCA9PT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuIG5ldyBNb25nb29zZUVycm9yKCdObyBfaWQgZm91bmQgb24gZG9jdW1lbnQhJyk7XG4gIH1cblxuICByZXR1cm4gd2hlcmU7XG59O1xuXG4vKipcbiAqIERlbGV0ZSB0aGlzIGRvY3VtZW50IGZyb20gdGhlIGRiLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgYXdhaXQgcHJvZHVjdC5kZWxldGVPbmUoKTtcbiAqICAgICBhd2FpdCBQcm9kdWN0LmZpbmRCeUlkKHByb2R1Y3QuX2lkKTsgLy8gbnVsbFxuICpcbiAqIEByZXR1cm4ge1F1ZXJ5fSBRdWVyeVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Nb2RlbC5wcm90b3R5cGUuZGVsZXRlT25lID0gZnVuY3Rpb24gZGVsZXRlT25lKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nIHx8XG4gICAgICB0eXBlb2YgYXJndW1lbnRzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IE1vbmdvb3NlRXJyb3IoJ01vZGVsLnByb3RvdHlwZS5kZWxldGVPbmUoKSBubyBsb25nZXIgYWNjZXB0cyBhIGNhbGxiYWNrJyk7XG4gIH1cblxuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnc2Vzc2lvbicpKSB7XG4gICAgdGhpcy4kc2Vzc2lvbihvcHRpb25zLnNlc3Npb24pO1xuICB9XG5cbiAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gIGNvbnN0IHdoZXJlID0gdGhpcy4kX193aGVyZSgpO1xuICBpZiAod2hlcmUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHRocm93IHdoZXJlO1xuICB9XG4gIGNvbnN0IHF1ZXJ5ID0gc2VsZi5jb25zdHJ1Y3Rvci5kZWxldGVPbmUod2hlcmUsIG9wdGlvbnMpO1xuXG4gIGlmICh0aGlzLiRzZXNzaW9uKCkgIT0gbnVsbCkge1xuICAgIGlmICghKCdzZXNzaW9uJyBpbiBxdWVyeS5vcHRpb25zKSkge1xuICAgICAgcXVlcnkub3B0aW9ucy5zZXNzaW9uID0gdGhpcy4kc2Vzc2lvbigpO1xuICAgIH1cbiAgfVxuXG4gIHF1ZXJ5LnByZShmdW5jdGlvbiBxdWVyeVByZURlbGV0ZU9uZShjYikge1xuICAgIHNlbGYuY29uc3RydWN0b3IuX21pZGRsZXdhcmUuZXhlY1ByZSgnZGVsZXRlT25lJywgc2VsZiwgW3NlbGZdLCBjYik7XG4gIH0pO1xuICBxdWVyeS5wcmUoZnVuY3Rpb24gY2FsbFN1YmRvY1ByZUhvb2tzKGNiKSB7XG4gICAgZWFjaChzZWxmLiRnZXRBbGxTdWJkb2NzKCksIChzdWJkb2MsIGNiKSA9PiB7XG4gICAgICBzdWJkb2MuY29uc3RydWN0b3IuX21pZGRsZXdhcmUuZXhlY1ByZSgnZGVsZXRlT25lJywgc3ViZG9jLCBbc3ViZG9jXSwgY2IpO1xuICAgIH0sIGNiKTtcbiAgfSk7XG4gIHF1ZXJ5LnByZShmdW5jdGlvbiBza2lwSWZBbHJlYWR5RGVsZXRlZChjYikge1xuICAgIGlmIChzZWxmLiRfXy5pc0RlbGV0ZWQpIHtcbiAgICAgIHJldHVybiBjYihLYXJlZW0uc2tpcFdyYXBwZWRGdW5jdGlvbigpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNiKCk7XG4gIH0pO1xuICBxdWVyeS5wb3N0KGZ1bmN0aW9uIGNhbGxTdWJkb2NQb3N0SG9va3MoY2IpIHtcbiAgICBlYWNoKHNlbGYuJGdldEFsbFN1YmRvY3MoKSwgKHN1YmRvYywgY2IpID0+IHtcbiAgICAgIHN1YmRvYy5jb25zdHJ1Y3Rvci5fbWlkZGxld2FyZS5leGVjUG9zdCgnZGVsZXRlT25lJywgc3ViZG9jLCBbc3ViZG9jXSwge30sIGNiKTtcbiAgICB9LCBjYik7XG4gIH0pO1xuICBxdWVyeS5wb3N0KGZ1bmN0aW9uIHF1ZXJ5UG9zdERlbGV0ZU9uZShjYikge1xuICAgIHNlbGYuY29uc3RydWN0b3IuX21pZGRsZXdhcmUuZXhlY1Bvc3QoJ2RlbGV0ZU9uZScsIHNlbGYsIFtzZWxmXSwge30sIGNiKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHF1ZXJ5O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtb2RlbCBpbnN0YW5jZSB1c2VkIHRvIGNyZWF0ZSB0aGlzIGRvY3VtZW50IGlmIG5vIGBuYW1lYCBzcGVjaWZpZWQuXG4gKiBJZiBgbmFtZWAgc3BlY2lmaWVkLCByZXR1cm5zIHRoZSBtb2RlbCB3aXRoIHRoZSBnaXZlbiBgbmFtZWAuXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBjb25zdCBkb2MgPSBuZXcgVGFuayh7fSk7XG4gKiAgICAgZG9jLiRtb2RlbCgpID09PSBUYW5rOyAvLyB0cnVlXG4gKiAgICAgYXdhaXQgZG9jLiRtb2RlbCgnVXNlcicpLmZpbmRCeUlkKGlkKTtcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gW25hbWVdIG1vZGVsIG5hbWVcbiAqIEBtZXRob2QgJG1vZGVsXG4gKiBAYXBpIHB1YmxpY1xuICogQHJldHVybiB7TW9kZWx9XG4gKi9cblxuTW9kZWwucHJvdG90eXBlLiRtb2RlbCA9IGZ1bmN0aW9uICRtb2RlbChuYW1lKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3I7XG4gIH1cbiAgcmV0dXJuIHRoaXNbbW9kZWxEYlN5bWJvbF0ubW9kZWwobmFtZSk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG1vZGVsIGluc3RhbmNlIHVzZWQgdG8gY3JlYXRlIHRoaXMgZG9jdW1lbnQgaWYgbm8gYG5hbWVgIHNwZWNpZmllZC5cbiAqIElmIGBuYW1lYCBzcGVjaWZpZWQsIHJldHVybnMgdGhlIG1vZGVsIHdpdGggdGhlIGdpdmVuIGBuYW1lYC5cbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKlxuICogICAgIGNvbnN0IGRvYyA9IG5ldyBUYW5rKHt9KTtcbiAqICAgICBkb2MuJG1vZGVsKCkgPT09IFRhbms7IC8vIHRydWVcbiAqICAgICBhd2FpdCBkb2MuJG1vZGVsKCdVc2VyJykuZmluZEJ5SWQoaWQpO1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZV0gbW9kZWwgbmFtZVxuICogQG1ldGhvZCBtb2RlbFxuICogQGFwaSBwdWJsaWNcbiAqIEByZXR1cm4ge01vZGVsfVxuICovXG5cbk1vZGVsLnByb3RvdHlwZS5tb2RlbCA9IE1vZGVsLnByb3RvdHlwZS4kbW9kZWw7XG5cbi8qKlxuICogUmV0dXJucyBhIGRvY3VtZW50IHdpdGggYF9pZGAgb25seSBpZiBhdCBsZWFzdCBvbmUgZG9jdW1lbnQgZXhpc3RzIGluIHRoZSBkYXRhYmFzZSB0aGF0IG1hdGNoZXNcbiAqIHRoZSBnaXZlbiBgZmlsdGVyYCwgYW5kIGBudWxsYCBvdGhlcndpc2UuXG4gKlxuICogVW5kZXIgdGhlIGhvb2QsIGBNeU1vZGVsLmV4aXN0cyh7IGFuc3dlcjogNDIgfSlgIGlzIGVxdWl2YWxlbnQgdG9cbiAqIGBNeU1vZGVsLmZpbmRPbmUoeyBhbnN3ZXI6IDQyIH0pLnNlbGVjdCh7IF9pZDogMSB9KS5sZWFuKClgXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBhd2FpdCBDaGFyYWN0ZXIuZGVsZXRlTWFueSh7fSk7XG4gKiAgICAgYXdhaXQgQ2hhcmFjdGVyLmNyZWF0ZSh7IG5hbWU6ICdKZWFuLUx1YyBQaWNhcmQnIH0pO1xuICpcbiAqICAgICBhd2FpdCBDaGFyYWN0ZXIuZXhpc3RzKHsgbmFtZTogL3BpY2FyZC9pIH0pOyAvLyB7IF9pZDogLi4uIH1cbiAqICAgICBhd2FpdCBDaGFyYWN0ZXIuZXhpc3RzKHsgbmFtZTogL3Jpa2VyL2kgfSk7IC8vIG51bGxcbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHRyaWdnZXJzIHRoZSBmb2xsb3dpbmcgbWlkZGxld2FyZS5cbiAqXG4gKiAtIGBmaW5kT25lKClgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGZpbHRlclxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBvcHRpb25hbCBzZWUgW2BRdWVyeS5wcm90b3R5cGUuc2V0T3B0aW9ucygpYF0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2FwaS9xdWVyeS5odG1sI1F1ZXJ5LnByb3RvdHlwZS5zZXRPcHRpb25zKCkpXG4gKiBAcmV0dXJuIHtRdWVyeX1cbiAqL1xuXG5Nb2RlbC5leGlzdHMgPSBmdW5jdGlvbiBleGlzdHMoZmlsdGVyLCBvcHRpb25zKSB7XG4gIF9jaGVja0NvbnRleHQodGhpcywgJ2V4aXN0cycpO1xuICBpZiAodHlwZW9mIGFyZ3VtZW50c1syXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBNb25nb29zZUVycm9yKCdNb2RlbC5leGlzdHMoKSBubyBsb25nZXIgYWNjZXB0cyBhIGNhbGxiYWNrJyk7XG4gIH1cblxuICBjb25zdCBxdWVyeSA9IHRoaXMuZmluZE9uZShmaWx0ZXIpLlxuICAgIHNlbGVjdCh7IF9pZDogMSB9KS5cbiAgICBsZWFuKCkuXG4gICAgc2V0T3B0aW9ucyhvcHRpb25zKTtcblxuICByZXR1cm4gcXVlcnk7XG59O1xuXG4vKipcbiAqIEFkZHMgYSBkaXNjcmltaW5hdG9yIHR5cGUuXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBmdW5jdGlvbiBCYXNlU2NoZW1hKCkge1xuICogICAgICAgU2NoZW1hLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gKlxuICogICAgICAgdGhpcy5hZGQoe1xuICogICAgICAgICBuYW1lOiBTdHJpbmcsXG4gKiAgICAgICAgIGNyZWF0ZWRBdDogRGF0ZVxuICogICAgICAgfSk7XG4gKiAgICAgfVxuICogICAgIHV0aWwuaW5oZXJpdHMoQmFzZVNjaGVtYSwgU2NoZW1hKTtcbiAqXG4gKiAgICAgY29uc3QgUGVyc29uU2NoZW1hID0gbmV3IEJhc2VTY2hlbWEoKTtcbiAqICAgICBjb25zdCBCb3NzU2NoZW1hID0gbmV3IEJhc2VTY2hlbWEoeyBkZXBhcnRtZW50OiBTdHJpbmcgfSk7XG4gKlxuICogICAgIGNvbnN0IFBlcnNvbiA9IG1vbmdvb3NlLm1vZGVsKCdQZXJzb24nLCBQZXJzb25TY2hlbWEpO1xuICogICAgIGNvbnN0IEJvc3MgPSBQZXJzb24uZGlzY3JpbWluYXRvcignQm9zcycsIEJvc3NTY2hlbWEpO1xuICogICAgIG5ldyBCb3NzKCkuX190OyAvLyBcIkJvc3NcIi4gYF9fdGAgaXMgdGhlIGRlZmF1bHQgYGRpc2NyaW1pbmF0b3JLZXlgXG4gKlxuICogICAgIGNvbnN0IGVtcGxveWVlU2NoZW1hID0gbmV3IFNjaGVtYSh7IGJvc3M6IE9iamVjdElkIH0pO1xuICogICAgIGNvbnN0IEVtcGxveWVlID0gUGVyc29uLmRpc2NyaW1pbmF0b3IoJ0VtcGxveWVlJywgZW1wbG95ZWVTY2hlbWEsICdzdGFmZicpO1xuICogICAgIG5ldyBFbXBsb3llZSgpLl9fdDsgLy8gXCJzdGFmZlwiIGJlY2F1c2Ugb2YgM3JkIGFyZ3VtZW50IGFib3ZlXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgZGlzY3JpbWluYXRvciBtb2RlbCBuYW1lXG4gKiBAcGFyYW0ge1NjaGVtYX0gc2NoZW1hIGRpc2NyaW1pbmF0b3IgbW9kZWwgc2NoZW1hXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IFtvcHRpb25zXSBJZiBzdHJpbmcsIHNhbWUgYXMgYG9wdGlvbnMudmFsdWVgLlxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLnZhbHVlXSB0aGUgc3RyaW5nIHN0b3JlZCBpbiB0aGUgYGRpc2NyaW1pbmF0b3JLZXlgIHByb3BlcnR5LiBJZiBub3Qgc3BlY2lmaWVkLCBNb25nb29zZSB1c2VzIHRoZSBgbmFtZWAgcGFyYW1ldGVyLlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5jbG9uZT10cnVlXSBCeSBkZWZhdWx0LCBgZGlzY3JpbWluYXRvcigpYCBjbG9uZXMgdGhlIGdpdmVuIGBzY2hlbWFgLiBTZXQgdG8gYGZhbHNlYCB0byBza2lwIGNsb25pbmcuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm92ZXJ3cml0ZU1vZGVscz1mYWxzZV0gYnkgZGVmYXVsdCwgTW9uZ29vc2UgZG9lcyBub3QgYWxsb3cgeW91IHRvIGRlZmluZSBhIGRpc2NyaW1pbmF0b3Igd2l0aCB0aGUgc2FtZSBuYW1lIGFzIGFub3RoZXIgZGlzY3JpbWluYXRvci4gU2V0IHRoaXMgdG8gYWxsb3cgb3ZlcndyaXRpbmcgZGlzY3JpbWluYXRvcnMgd2l0aCB0aGUgc2FtZSBuYW1lLlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5tZXJnZUhvb2tzPXRydWVdIEJ5IGRlZmF1bHQsIE1vbmdvb3NlIG1lcmdlcyB0aGUgYmFzZSBzY2hlbWEncyBob29rcyB3aXRoIHRoZSBkaXNjcmltaW5hdG9yIHNjaGVtYSdzIGhvb2tzLiBTZXQgdGhpcyBvcHRpb24gdG8gYGZhbHNlYCB0byBtYWtlIE1vbmdvb3NlIHVzZSB0aGUgZGlzY3JpbWluYXRvciBzY2hlbWEncyBob29rcyBpbnN0ZWFkLlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5tZXJnZVBsdWdpbnM9dHJ1ZV0gQnkgZGVmYXVsdCwgTW9uZ29vc2UgbWVyZ2VzIHRoZSBiYXNlIHNjaGVtYSdzIHBsdWdpbnMgd2l0aCB0aGUgZGlzY3JpbWluYXRvciBzY2hlbWEncyBwbHVnaW5zLiBTZXQgdGhpcyBvcHRpb24gdG8gYGZhbHNlYCB0byBtYWtlIE1vbmdvb3NlIHVzZSB0aGUgZGlzY3JpbWluYXRvciBzY2hlbWEncyBwbHVnaW5zIGluc3RlYWQuXG4gKiBAcmV0dXJuIHtNb2RlbH0gVGhlIG5ld2x5IGNyZWF0ZWQgZGlzY3JpbWluYXRvciBtb2RlbFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Nb2RlbC5kaXNjcmltaW5hdG9yID0gZnVuY3Rpb24obmFtZSwgc2NoZW1hLCBvcHRpb25zKSB7XG4gIGxldCBtb2RlbDtcbiAgaWYgKHR5cGVvZiBuYW1lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgbW9kZWwgPSBuYW1lO1xuICAgIG5hbWUgPSB1dGlscy5nZXRGdW5jdGlvbk5hbWUobW9kZWwpO1xuICAgIGlmICghKG1vZGVsLnByb3RvdHlwZSBpbnN0YW5jZW9mIE1vZGVsKSkge1xuICAgICAgdGhyb3cgbmV3IE1vbmdvb3NlRXJyb3IoJ1RoZSBwcm92aWRlZCBjbGFzcyAnICsgbmFtZSArICcgbXVzdCBleHRlbmQgTW9kZWwnKTtcbiAgICB9XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgY29uc3QgdmFsdWUgPSB1dGlscy5pc1BPSk8ob3B0aW9ucykgPyBvcHRpb25zLnZhbHVlIDogb3B0aW9ucztcbiAgY29uc3QgY2xvbmUgPSB0eXBlb2Ygb3B0aW9ucy5jbG9uZSA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5jbG9uZSA6IHRydWU7XG4gIGNvbnN0IG1lcmdlUGx1Z2lucyA9IHR5cGVvZiBvcHRpb25zLm1lcmdlUGx1Z2lucyA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5tZXJnZVBsdWdpbnMgOiB0cnVlO1xuXG4gIF9jaGVja0NvbnRleHQodGhpcywgJ2Rpc2NyaW1pbmF0b3InKTtcblxuICBpZiAodXRpbHMuaXNPYmplY3Qoc2NoZW1hKSAmJiAhc2NoZW1hLmluc3RhbmNlT2ZTY2hlbWEpIHtcbiAgICBzY2hlbWEgPSBuZXcgU2NoZW1hKHNjaGVtYSk7XG4gIH1cbiAgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIFNjaGVtYSAmJiBjbG9uZSkge1xuICAgIHNjaGVtYSA9IHNjaGVtYS5jbG9uZSgpO1xuICB9XG5cbiAgc2NoZW1hID0gZGlzY3JpbWluYXRvcih0aGlzLCBuYW1lLCBzY2hlbWEsIHZhbHVlLCBtZXJnZVBsdWdpbnMsIG9wdGlvbnMubWVyZ2VIb29rcyk7XG4gIGlmICh0aGlzLmRiLm1vZGVsc1tuYW1lXSAmJiAhc2NoZW1hLm9wdGlvbnMub3ZlcndyaXRlTW9kZWxzKSB7XG4gICAgdGhyb3cgbmV3IE92ZXJ3cml0ZU1vZGVsRXJyb3IobmFtZSk7XG4gIH1cblxuICBzY2hlbWEuJGlzUm9vdERpc2NyaW1pbmF0b3IgPSB0cnVlO1xuICBzY2hlbWEuJGdsb2JhbFBsdWdpbnNBcHBsaWVkID0gdHJ1ZTtcblxuICBtb2RlbCA9IHRoaXMuZGIubW9kZWwobW9kZWwgfHwgbmFtZSwgc2NoZW1hLCB0aGlzLiRfX2NvbGxlY3Rpb24ubmFtZSk7XG4gIHRoaXMuZGlzY3JpbWluYXRvcnNbbmFtZV0gPSBtb2RlbDtcbiAgY29uc3QgZCA9IHRoaXMuZGlzY3JpbWluYXRvcnNbbmFtZV07XG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihkLnByb3RvdHlwZSwgdGhpcy5wcm90b3R5cGUpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZCwgJ2Jhc2VNb2RlbE5hbWUnLCB7XG4gICAgdmFsdWU6IHRoaXMubW9kZWxOYW1lLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG5cbiAgLy8gYXBwbHkgbWV0aG9kcyBhbmQgc3RhdGljc1xuICBhcHBseU1ldGhvZHMoZCwgc2NoZW1hKTtcbiAgYXBwbHlTdGF0aWNzKGQsIHNjaGVtYSk7XG5cbiAgaWYgKHRoaXNbc3ViY2xhc3NlZFN5bWJvbF0gIT0gbnVsbCkge1xuICAgIGZvciAoY29uc3Qgc3VibW9kZWwgb2YgdGhpc1tzdWJjbGFzc2VkU3ltYm9sXSkge1xuICAgICAgc3VibW9kZWwuZGlzY3JpbWluYXRvcnMgPSBzdWJtb2RlbC5kaXNjcmltaW5hdG9ycyB8fCB7fTtcbiAgICAgIHN1Ym1vZGVsLmRpc2NyaW1pbmF0b3JzW25hbWVdID1cbiAgICAgICAgbW9kZWwuX19zdWJjbGFzcyhtb2RlbC5kYiwgc2NoZW1hLCBzdWJtb2RlbC5jb2xsZWN0aW9uLm5hbWUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkO1xufTtcblxuLyoqXG4gKiBNYWtlIHN1cmUgYHRoaXNgIGlzIGEgbW9kZWxcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIF9jaGVja0NvbnRleHQoY3R4LCBmbk5hbWUpIHtcbiAgLy8gQ2hlY2sgY29udGV4dCwgYmVjYXVzZSBpdCBpcyBlYXN5IHRvIG1pc3Rha2VubHkgdHlwZVxuICAvLyBgbmV3IE1vZGVsLmRpc2NyaW1pbmF0b3IoKWAgYW5kIGdldCBhbiBpbmNvbXByZWhlbnNpYmxlIGVycm9yXG4gIGlmIChjdHggPT0gbnVsbCB8fCBjdHggPT09IGdsb2JhbCkge1xuICAgIHRocm93IG5ldyBNb25nb29zZUVycm9yKCdgTW9kZWwuJyArIGZuTmFtZSArICcoKWAgY2Fubm90IHJ1biB3aXRob3V0IGEgJyArXG4gICAgICAnbW9kZWwgYXMgYHRoaXNgLiBNYWtlIHN1cmUgeW91IGFyZSBjYWxsaW5nIGBNeU1vZGVsLicgKyBmbk5hbWUgKyAnKClgICcgK1xuICAgICAgJ3doZXJlIGBNeU1vZGVsYCBpcyBhIE1vbmdvb3NlIG1vZGVsLicpO1xuICB9IGVsc2UgaWYgKGN0eFttb2RlbFN5bWJvbF0gPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBNb25nb29zZUVycm9yKCdgTW9kZWwuJyArIGZuTmFtZSArICcoKWAgY2Fubm90IHJ1biB3aXRob3V0IGEgJyArXG4gICAgICAnbW9kZWwgYXMgYHRoaXNgLiBNYWtlIHN1cmUgeW91IGFyZSBub3QgY2FsbGluZyAnICtcbiAgICAgICdgbmV3IE1vZGVsLicgKyBmbk5hbWUgKyAnKClgJyk7XG4gIH1cbn1cblxuLy8gTW9kZWwgKGNsYXNzKSBmZWF0dXJlc1xuXG4vKiFcbiAqIEdpdmUgdGhlIGNvbnN0cnVjdG9yIHRoZSBhYmlsaXR5IHRvIGVtaXQgZXZlbnRzLlxuICovXG5cbmZvciAoY29uc3QgaSBpbiBFdmVudEVtaXR0ZXIucHJvdG90eXBlKSB7XG4gIE1vZGVsW2ldID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZVtpXTtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHJlc3BvbnNpYmxlIGZvciBpbml0aWFsaXppbmcgdGhlIHVuZGVybHlpbmcgY29ubmVjdGlvbiBpbiBNb25nb0RCIGJhc2VkIG9uIHNjaGVtYSBvcHRpb25zLlxuICogVGhpcyBmdW5jdGlvbiBwZXJmb3JtcyB0aGUgZm9sbG93aW5nIG9wZXJhdGlvbnM6XG4gKlxuICogLSBgY3JlYXRlQ29sbGVjdGlvbigpYCB1bmxlc3MgW2BhdXRvQ3JlYXRlYF0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2d1aWRlLmh0bWwjYXV0b0NyZWF0ZSkgb3B0aW9uIGlzIHR1cm5lZCBvZmZcbiAqIC0gYGVuc3VyZUluZGV4ZXMoKWAgdW5sZXNzIFtgYXV0b0luZGV4YF0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2d1aWRlLmh0bWwjYXV0b0luZGV4KSBvcHRpb24gaXMgdHVybmVkIG9mZlxuICogLSBgY3JlYXRlU2VhcmNoSW5kZXgoKWAgb24gYWxsIHNjaGVtYSBzZWFyY2ggaW5kZXhlcyBpZiBgYXV0b1NlYXJjaEluZGV4YCBpcyBlbmFibGVkLlxuICpcbiAqIE1vbmdvb3NlIGNhbGxzIHRoaXMgZnVuY3Rpb24gYXV0b21hdGljYWxseSB3aGVuIGEgbW9kZWwgaXMgYSBjcmVhdGVkIHVzaW5nXG4gKiBbYG1vbmdvb3NlLm1vZGVsKClgXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvYXBpL21vbmdvb3NlLmh0bWwjTW9uZ29vc2UucHJvdG90eXBlLm1vZGVsKCkpIG9yXG4gKiBbYGNvbm5lY3Rpb24ubW9kZWwoKWBdKGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9hcGkvY29ubmVjdGlvbi5odG1sI0Nvbm5lY3Rpb24ucHJvdG90eXBlLm1vZGVsKCkpLCBzbyB5b3VcbiAqIGRvbid0IG5lZWQgdG8gY2FsbCBgaW5pdCgpYCB0byB0cmlnZ2VyIGluZGV4IGJ1aWxkcy5cbiAqXG4gKiBIb3dldmVyLCB5b3UgX21heV8gbmVlZCB0byBjYWxsIGBpbml0KClgICB0byBnZXQgYmFjayBhIHByb21pc2UgdGhhdCB3aWxsIHJlc29sdmUgd2hlbiB5b3VyIGluZGV4ZXMgYXJlIGZpbmlzaGVkLlxuICogQ2FsbGluZyBgYXdhaXQgTW9kZWwuaW5pdCgpYCBpcyBoZWxwZnVsIGlmIHlvdSBuZWVkIHRvIHdhaXQgZm9yIGluZGV4ZXMgdG8gYnVpbGQgYmVmb3JlIGNvbnRpbnVpbmcuXG4gKiBGb3IgZXhhbXBsZSwgaWYgeW91IHdhbnQgdG8gd2FpdCBmb3IgdW5pcXVlIGluZGV4ZXMgdG8gYnVpbGQgYmVmb3JlIGNvbnRpbnVpbmcgd2l0aCBhIHRlc3QgY2FzZS5cbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKlxuICogICAgIGNvbnN0IGV2ZW50U2NoZW1hID0gbmV3IFNjaGVtYSh7IHRoaW5nOiB7IHR5cGU6ICdzdHJpbmcnLCB1bmlxdWU6IHRydWUgfSB9KVxuICogICAgIC8vIFRoaXMgY2FsbHMgYEV2ZW50LmluaXQoKWAgaW1wbGljaXRseSwgc28geW91IGRvbid0IG5lZWQgdG8gY2FsbFxuICogICAgIC8vIGBFdmVudC5pbml0KClgIG9uIHlvdXIgb3duLlxuICogICAgIGNvbnN0IEV2ZW50ID0gbW9uZ29vc2UubW9kZWwoJ0V2ZW50JywgZXZlbnRTY2hlbWEpO1xuICpcbiAqICAgICBhd2FpdCBFdmVudC5pbml0KCk7XG4gKiAgICAgY29uc29sZS5sb2coJ0luZGV4ZXMgYXJlIGRvbmUgYnVpbGRpbmchJyk7XG4gKlxuICogQGFwaSBwdWJsaWNcbiAqIEByZXR1cm5zIHtQcm9taXNlfVxuICovXG5cbk1vZGVsLmluaXQgPSBmdW5jdGlvbiBpbml0KCkge1xuICBfY2hlY2tDb250ZXh0KHRoaXMsICdpbml0Jyk7XG4gIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IE1vbmdvb3NlRXJyb3IoJ01vZGVsLmluaXQoKSBubyBsb25nZXIgYWNjZXB0cyBhIGNhbGxiYWNrJyk7XG4gIH1cblxuICB0aGlzLnNjaGVtYS5lbWl0KCdpbml0JywgdGhpcyk7XG5cbiAgaWYgKHRoaXMuJGluaXQgIT0gbnVsbCkge1xuICAgIHJldHVybiB0aGlzLiRpbml0O1xuICB9XG5cbiAgY29uc3QgY29ubiA9IHRoaXMuZGI7XG4gIGNvbnN0IF9lbnN1cmVJbmRleGVzID0gYXN5bmMoKSA9PiB7XG4gICAgY29uc3QgYXV0b0luZGV4ID0gdXRpbHMuZ2V0T3B0aW9uKFxuICAgICAgJ2F1dG9JbmRleCcsXG4gICAgICB0aGlzLnNjaGVtYS5vcHRpb25zLFxuICAgICAgY29ubi5jb25maWcsXG4gICAgICBjb25uLmJhc2Uub3B0aW9uc1xuICAgICk7XG4gICAgaWYgKCFhdXRvSW5kZXgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZW5zdXJlSW5kZXhlcyh7IF9hdXRvbWF0aWM6IHRydWUgfSk7XG4gIH07XG4gIGNvbnN0IF9jcmVhdGVTZWFyY2hJbmRleGVzID0gYXN5bmMoKSA9PiB7XG4gICAgY29uc3QgYXV0b1NlYXJjaEluZGV4ID0gdXRpbHMuZ2V0T3B0aW9uKFxuICAgICAgJ2F1dG9TZWFyY2hJbmRleCcsXG4gICAgICB0aGlzLnNjaGVtYS5vcHRpb25zLFxuICAgICAgY29ubi5jb25maWcsXG4gICAgICBjb25uLmJhc2Uub3B0aW9uc1xuICAgICk7XG4gICAgaWYgKCFhdXRvU2VhcmNoSW5kZXgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHRzID0gW107XG4gICAgZm9yIChjb25zdCBzZWFyY2hJbmRleCBvZiB0aGlzLnNjaGVtYS5fc2VhcmNoSW5kZXhlcykge1xuICAgICAgcmVzdWx0cy5wdXNoKGF3YWl0IHRoaXMuY3JlYXRlU2VhcmNoSW5kZXgoc2VhcmNoSW5kZXgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG4gIGNvbnN0IF9jcmVhdGVDb2xsZWN0aW9uID0gYXN5bmMoKSA9PiB7XG4gICAgaWYgKChjb25uLnJlYWR5U3RhdGUgPT09IFNUQVRFUy5jb25uZWN0aW5nIHx8IGNvbm4ucmVhZHlTdGF0ZSA9PT0gU1RBVEVTLmRpc2Nvbm5lY3RlZCkgJiYgY29ubi5fc2hvdWxkQnVmZmVyQ29tbWFuZHMoKSkge1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIGNvbm4uX3F1ZXVlLnB1c2goeyBmbjogcmVzb2x2ZSB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBhdXRvQ3JlYXRlID0gdXRpbHMuZ2V0T3B0aW9uKFxuICAgICAgJ2F1dG9DcmVhdGUnLFxuICAgICAgdGhpcy5zY2hlbWEub3B0aW9ucyxcbiAgICAgIGNvbm4uY29uZmlnLFxuICAgICAgY29ubi5iYXNlLm9wdGlvbnNcbiAgICApO1xuICAgIGlmICghYXV0b0NyZWF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jcmVhdGVDb2xsZWN0aW9uKCk7XG4gIH07XG5cbiAgdGhpcy4kaW5pdCA9IF9jcmVhdGVDb2xsZWN0aW9uKCkuXG4gICAgdGhlbigoKSA9PiBfZW5zdXJlSW5kZXhlcygpKS5cbiAgICB0aGVuKCgpID0+IF9jcmVhdGVTZWFyY2hJbmRleGVzKCkpO1xuXG4gIGNvbnN0IF9jYXRjaCA9IHRoaXMuJGluaXQuY2F0Y2g7XG4gIGNvbnN0IF90aGlzID0gdGhpcztcbiAgdGhpcy4kaW5pdC5jYXRjaCA9IGZ1bmN0aW9uKCkge1xuICAgIF90aGlzLiRjYXVnaHQgPSB0cnVlO1xuICAgIHJldHVybiBfY2F0Y2guYXBwbHkoX3RoaXMuJGluaXQsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgcmV0dXJuIHRoaXMuJGluaXQ7XG59O1xuXG5cbi8qKlxuICogQ3JlYXRlIHRoZSBjb2xsZWN0aW9uIGZvciB0aGlzIG1vZGVsLiBCeSBkZWZhdWx0LCBpZiBubyBpbmRleGVzIGFyZSBzcGVjaWZpZWQsXG4gKiBtb25nb29zZSB3aWxsIG5vdCBjcmVhdGUgdGhlIGNvbGxlY3Rpb24gZm9yIHRoZSBtb2RlbCB1bnRpbCBhbnkgZG9jdW1lbnRzIGFyZVxuICogY3JlYXRlZC4gVXNlIHRoaXMgbWV0aG9kIHRvIGNyZWF0ZSB0aGUgY29sbGVjdGlvbiBleHBsaWNpdGx5LlxuICpcbiAqIE5vdGUgMTogWW91IG1heSBuZWVkIHRvIGNhbGwgdGhpcyBiZWZvcmUgc3RhcnRpbmcgYSB0cmFuc2FjdGlvblxuICogU2VlIGh0dHBzOi8vd3d3Lm1vbmdvZGIuY29tL2RvY3MvbWFudWFsL2NvcmUvdHJhbnNhY3Rpb25zLyN0cmFuc2FjdGlvbnMtYW5kLW9wZXJhdGlvbnNcbiAqXG4gKiBOb3RlIDI6IFlvdSBkb24ndCBoYXZlIHRvIGNhbGwgdGhpcyBpZiB5b3VyIHNjaGVtYSBjb250YWlucyBpbmRleCBvciB1bmlxdWUgZmllbGQuXG4gKiBJbiB0aGF0IGNhc2UsIGp1c3QgdXNlIGBNb2RlbC5pbml0KClgXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBjb25zdCB1c2VyU2NoZW1hID0gbmV3IFNjaGVtYSh7IG5hbWU6IFN0cmluZyB9KVxuICogICAgIGNvbnN0IFVzZXIgPSBtb25nb29zZS5tb2RlbCgnVXNlcicsIHVzZXJTY2hlbWEpO1xuICpcbiAqICAgICBVc2VyLmNyZWF0ZUNvbGxlY3Rpb24oKS50aGVuKGZ1bmN0aW9uKGNvbGxlY3Rpb24pIHtcbiAqICAgICAgIGNvbnNvbGUubG9nKCdDb2xsZWN0aW9uIGlzIGNyZWF0ZWQhJyk7XG4gKiAgICAgfSk7XG4gKlxuICogQGFwaSBwdWJsaWNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gc2VlIFtNb25nb0RCIGRyaXZlciBkb2NzXShodHRwczovL21vbmdvZGIuZ2l0aHViLmlvL25vZGUtbW9uZ29kYi1uYXRpdmUvNC45L2NsYXNzZXMvRGIuaHRtbCNjcmVhdGVDb2xsZWN0aW9uKVxuICogQHJldHVybnMge1Byb21pc2V9XG4gKi9cblxuTW9kZWwuY3JlYXRlQ29sbGVjdGlvbiA9IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUNvbGxlY3Rpb24ob3B0aW9ucykge1xuICBfY2hlY2tDb250ZXh0KHRoaXMsICdjcmVhdGVDb2xsZWN0aW9uJyk7XG4gIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBhcmd1bWVudHNbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgTW9uZ29vc2VFcnJvcignTW9kZWwuY3JlYXRlQ29sbGVjdGlvbigpIG5vIGxvbmdlciBhY2NlcHRzIGEgY2FsbGJhY2snKTtcbiAgfVxuXG4gIGNvbnN0IHNob3VsZFNraXAgPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgdGhpcy5ob29rcy5leGVjUHJlKCdjcmVhdGVDb2xsZWN0aW9uJywgdGhpcywgW29wdGlvbnNdLCAoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEthcmVlbS5za2lwV3JhcHBlZEZ1bmN0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZSgpO1xuICAgIH0pO1xuICB9KTtcblxuICBjb25zdCBjb2xsZWN0aW9uT3B0aW9ucyA9IHRoaXMgJiZcbiAgICB0aGlzLnNjaGVtYSAmJlxuICAgIHRoaXMuc2NoZW1hLm9wdGlvbnMgJiZcbiAgICB0aGlzLnNjaGVtYS5vcHRpb25zLmNvbGxlY3Rpb25PcHRpb25zO1xuICBpZiAoY29sbGVjdGlvbk9wdGlvbnMgIT0gbnVsbCkge1xuICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBjb2xsZWN0aW9uT3B0aW9ucywgb3B0aW9ucyk7XG4gIH1cblxuICBjb25zdCBzY2hlbWFDb2xsYXRpb24gPSB0aGlzICYmXG4gICAgdGhpcy5zY2hlbWEgJiZcbiAgICB0aGlzLnNjaGVtYS5vcHRpb25zICYmXG4gICAgdGhpcy5zY2hlbWEub3B0aW9ucy5jb2xsYXRpb247XG4gIGlmIChzY2hlbWFDb2xsYXRpb24gIT0gbnVsbCkge1xuICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHsgY29sbGF0aW9uOiBzY2hlbWFDb2xsYXRpb24gfSwgb3B0aW9ucyk7XG4gIH1cbiAgY29uc3QgY2FwcGVkID0gdGhpcyAmJlxuICAgIHRoaXMuc2NoZW1hICYmXG4gICAgdGhpcy5zY2hlbWEub3B0aW9ucyAmJlxuICAgIHRoaXMuc2NoZW1hLm9wdGlvbnMuY2FwcGVkO1xuICBpZiAoY2FwcGVkICE9IG51bGwpIHtcbiAgICBpZiAodHlwZW9mIGNhcHBlZCA9PT0gJ251bWJlcicpIHtcbiAgICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHsgY2FwcGVkOiB0cnVlLCBzaXplOiBjYXBwZWQgfSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY2FwcGVkID09PSAnb2JqZWN0Jykge1xuICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oeyBjYXBwZWQ6IHRydWUgfSwgY2FwcGVkLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgdGltZXNlcmllcyA9IHRoaXMgJiZcbiAgICB0aGlzLnNjaGVtYSAmJlxuICAgIHRoaXMuc2NoZW1hLm9wdGlvbnMgJiZcbiAgICB0aGlzLnNjaGVtYS5vcHRpb25zLnRpbWVzZXJpZXM7XG4gIGlmICh0aW1lc2VyaWVzICE9IG51bGwpIHtcbiAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7IHRpbWVzZXJpZXMgfSwgb3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMuZXhwaXJlQWZ0ZXJTZWNvbmRzICE9IG51bGwpIHtcbiAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuZXhwaXJlcyAhPSBudWxsKSB7XG4gICAgICB1dGlscy5leHBpcmVzKG9wdGlvbnMpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zY2hlbWEub3B0aW9ucy5leHBpcmVBZnRlclNlY29uZHMgIT0gbnVsbCkge1xuICAgICAgb3B0aW9ucy5leHBpcmVBZnRlclNlY29uZHMgPSB0aGlzLnNjaGVtYS5vcHRpb25zLmV4cGlyZUFmdGVyU2Vjb25kcztcbiAgICB9IGVsc2UgaWYgKHRoaXMuc2NoZW1hLm9wdGlvbnMuZXhwaXJlcyAhPSBudWxsKSB7XG4gICAgICBvcHRpb25zLmV4cGlyZXMgPSB0aGlzLnNjaGVtYS5vcHRpb25zLmV4cGlyZXM7XG4gICAgICB1dGlscy5leHBpcmVzKG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGNsdXN0ZXJlZEluZGV4ID0gdGhpcyAmJlxuICAgIHRoaXMuc2NoZW1hICYmXG4gICAgdGhpcy5zY2hlbWEub3B0aW9ucyAmJlxuICAgIHRoaXMuc2NoZW1hLm9wdGlvbnMuY2x1c3RlcmVkSW5kZXg7XG4gIGlmIChjbHVzdGVyZWRJbmRleCAhPSBudWxsKSB7XG4gICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oeyBjbHVzdGVyZWRJbmRleDogeyAuLi5jbHVzdGVyZWRJbmRleCwgdW5pcXVlOiB0cnVlIH0gfSwgb3B0aW9ucyk7XG4gIH1cblxuICB0cnkge1xuICAgIGlmICghc2hvdWxkU2tpcCkge1xuICAgICAgYXdhaXQgdGhpcy5kYi5jcmVhdGVDb2xsZWN0aW9uKHRoaXMuJF9fY29sbGVjdGlvbi5jb2xsZWN0aW9uTmFtZSwgb3B0aW9ucyk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBpZiAoZXJyICE9IG51bGwgJiYgKGVyci5uYW1lICE9PSAnTW9uZ29TZXJ2ZXJFcnJvcicgfHwgZXJyLmNvZGUgIT09IDQ4KSkge1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBfb3B0cyA9IHsgZXJyb3I6IGVyciB9O1xuICAgICAgICB0aGlzLmhvb2tzLmV4ZWNQb3N0KCdjcmVhdGVDb2xsZWN0aW9uJywgdGhpcywgW251bGxdLCBfb3B0cywgKGVycikgPT4ge1xuICAgICAgICAgIGlmIChlcnIgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHRoaXMuaG9va3MuZXhlY1Bvc3QoJ2NyZWF0ZUNvbGxlY3Rpb24nLCB0aGlzLCBbdGhpcy4kX19jb2xsZWN0aW9uXSwgKGVycikgPT4ge1xuICAgICAgaWYgKGVyciAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIHRoaXMuJF9fY29sbGVjdGlvbjtcbn07XG5cbi8qKlxuICogTWFrZXMgdGhlIGluZGV4ZXMgaW4gTW9uZ29EQiBtYXRjaCB0aGUgaW5kZXhlcyBkZWZpbmVkIGluIHRoaXMgbW9kZWwnc1xuICogc2NoZW1hLiBUaGlzIGZ1bmN0aW9uIHdpbGwgZHJvcCBhbnkgaW5kZXhlcyB0aGF0IGFyZSBub3QgZGVmaW5lZCBpblxuICogdGhlIG1vZGVsJ3Mgc2NoZW1hIGV4Y2VwdCB0aGUgYF9pZGAgaW5kZXgsIGFuZCBidWlsZCBhbnkgaW5kZXhlcyB0aGF0XG4gKiBhcmUgaW4geW91ciBzY2hlbWEgYnV0IG5vdCBpbiBNb25nb0RCLlxuICpcbiAqIFNlZSB0aGUgW2ludHJvZHVjdG9yeSBibG9nIHBvc3RdKGh0dHBzOi8vdGhlY29kZWJhcmJhcmlhbi5jb20vd2hhdHMtbmV3LWluLW1vbmdvb3NlLTUtMi1zeW5jaW5kZXhlcylcbiAqIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3Qgc2NoZW1hID0gbmV3IFNjaGVtYSh7IG5hbWU6IHsgdHlwZTogU3RyaW5nLCB1bmlxdWU6IHRydWUgfSB9KTtcbiAqICAgICBjb25zdCBDdXN0b21lciA9IG1vbmdvb3NlLm1vZGVsKCdDdXN0b21lcicsIHNjaGVtYSk7XG4gKiAgICAgYXdhaXQgQ3VzdG9tZXIuY29sbGVjdGlvbi5jcmVhdGVJbmRleCh7IGFnZTogMSB9KTsgLy8gSW5kZXggaXMgbm90IGluIHNjaGVtYVxuICogICAgIC8vIFdpbGwgZHJvcCB0aGUgJ2FnZScgaW5kZXggYW5kIGNyZWF0ZSBhbiBpbmRleCBvbiBgbmFtZWBcbiAqICAgICBhd2FpdCBDdXN0b21lci5zeW5jSW5kZXhlcygpO1xuICpcbiAqIFlvdSBzaG91bGQgYmUgY2FyZWZ1bCBhYm91dCBydW5uaW5nIGBzeW5jSW5kZXhlcygpYCBvbiBwcm9kdWN0aW9uIGFwcGxpY2F0aW9ucyB1bmRlciBoZWF2eSBsb2FkLFxuICogYmVjYXVzZSBpbmRleCBidWlsZHMgYXJlIGV4cGVuc2l2ZSBvcGVyYXRpb25zLCBhbmQgdW5leHBlY3RlZCBpbmRleCBkcm9wcyBjYW4gbGVhZCB0byBkZWdyYWRlZFxuICogcGVyZm9ybWFuY2UuIEJlZm9yZSBydW5uaW5nIGBzeW5jSW5kZXhlcygpYCwgeW91IGNhbiB1c2UgdGhlIFtgZGlmZkluZGV4ZXMoKWAgZnVuY3Rpb25dKCNNb2RlbC5kaWZmSW5kZXhlcygpKVxuICogdG8gY2hlY2sgd2hhdCBpbmRleGVzIGBzeW5jSW5kZXhlcygpYCB3aWxsIGRyb3AgYW5kIGNyZWF0ZS5cbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKlxuICogICAgIGNvbnN0IHsgdG9Ecm9wLCB0b0NyZWF0ZSB9ID0gYXdhaXQgTW9kZWwuZGlmZkluZGV4ZXMoKTtcbiAqICAgICB0b0Ryb3A7IC8vIEFycmF5IG9mIHN0cmluZ3MgY29udGFpbmluZyBuYW1lcyBvZiBpbmRleGVzIHRoYXQgYHN5bmNJbmRleGVzKClgIHdpbGwgZHJvcFxuICogICAgIHRvQ3JlYXRlOyAvLyBBcnJheSBvZiBzdHJpbmdzIGNvbnRhaW5pbmcgbmFtZXMgb2YgaW5kZXhlcyB0aGF0IGBzeW5jSW5kZXhlcygpYCB3aWxsIGNyZWF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gb3B0aW9ucyB0byBwYXNzIHRvIGBlbnN1cmVJbmRleGVzKClgXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmJhY2tncm91bmQ9bnVsbF0gaWYgc3BlY2lmaWVkLCBvdmVycmlkZXMgZWFjaCBpbmRleCdzIGBiYWNrZ3JvdW5kYCBwcm9wZXJ0eVxuICogQHJldHVybiB7UHJvbWlzZX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTW9kZWwuc3luY0luZGV4ZXMgPSBhc3luYyBmdW5jdGlvbiBzeW5jSW5kZXhlcyhvcHRpb25zKSB7XG4gIF9jaGVja0NvbnRleHQodGhpcywgJ3N5bmNJbmRleGVzJyk7XG4gIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBhcmd1bWVudHNbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgTW9uZ29vc2VFcnJvcignTW9kZWwuc3luY0luZGV4ZXMoKSBubyBsb25nZXIgYWNjZXB0cyBhIGNhbGxiYWNrJyk7XG4gIH1cblxuICBjb25zdCBtb2RlbCA9IHRoaXM7XG5cbiAgdHJ5IHtcbiAgICBhd2FpdCBtb2RlbC5jcmVhdGVDb2xsZWN0aW9uKCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChlcnIgIT0gbnVsbCAmJiAoZXJyLm5hbWUgIT09ICdNb25nb1NlcnZlckVycm9yJyB8fCBlcnIuY29kZSAhPT0gNDgpKSB7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgZGlmZkluZGV4ZXNSZXN1bHQgPSBhd2FpdCBtb2RlbC5kaWZmSW5kZXhlcygpO1xuICBjb25zdCBkcm9wcGVkID0gYXdhaXQgbW9kZWwuY2xlYW5JbmRleGVzKHsgLi4ub3B0aW9ucywgdG9Ecm9wOiBkaWZmSW5kZXhlc1Jlc3VsdC50b0Ryb3AgfSk7XG4gIGF3YWl0IG1vZGVsLmNyZWF0ZUluZGV4ZXMoeyAuLi5vcHRpb25zLCB0b0NyZWF0ZTogZGlmZkluZGV4ZXNSZXN1bHQudG9DcmVhdGUgfSk7XG5cbiAgcmV0dXJuIGRyb3BwZWQ7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhbiBbQXRsYXMgc2VhcmNoIGluZGV4XShodHRwczovL3d3dy5tb25nb2RiLmNvbS9kb2NzL2F0bGFzL2F0bGFzLXNlYXJjaC9jcmVhdGUtaW5kZXgvKS5cbiAqIFRoaXMgZnVuY3Rpb24gb25seSB3b3JrcyB3aGVuIGNvbm5lY3RlZCB0byBNb25nb0RCIEF0bGFzLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3Qgc2NoZW1hID0gbmV3IFNjaGVtYSh7IG5hbWU6IHsgdHlwZTogU3RyaW5nLCB1bmlxdWU6IHRydWUgfSB9KTtcbiAqICAgICBjb25zdCBDdXN0b21lciA9IG1vbmdvb3NlLm1vZGVsKCdDdXN0b21lcicsIHNjaGVtYSk7XG4gKiAgICAgYXdhaXQgQ3VzdG9tZXIuY3JlYXRlU2VhcmNoSW5kZXgoeyBuYW1lOiAndGVzdCcsIGRlZmluaXRpb246IHsgbWFwcGluZ3M6IHsgZHluYW1pYzogdHJ1ZSB9IH0gfSk7XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlc2NyaXB0aW9uIGluZGV4IG9wdGlvbnMsIGluY2x1ZGluZyBgbmFtZWAgYW5kIGBkZWZpbml0aW9uYFxuICogQHBhcmFtIHtTdHJpbmd9IGRlc2NyaXB0aW9uLm5hbWVcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZXNjcmlwdGlvbi5kZWZpbml0aW9uXG4gKiBAcmV0dXJuIHtQcm9taXNlfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Nb2RlbC5jcmVhdGVTZWFyY2hJbmRleCA9IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVNlYXJjaEluZGV4KGRlc2NyaXB0aW9uKSB7XG4gIF9jaGVja0NvbnRleHQodGhpcywgJ2NyZWF0ZVNlYXJjaEluZGV4Jyk7XG5cbiAgcmV0dXJuIGF3YWl0IHRoaXMuJF9fY29sbGVjdGlvbi5jcmVhdGVTZWFyY2hJbmRleChkZXNjcmlwdGlvbik7XG59O1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBleGlzdGluZyBbQXRsYXMgc2VhcmNoIGluZGV4XShodHRwczovL3d3dy5tb25nb2RiLmNvbS9kb2NzL2F0bGFzL2F0bGFzLXNlYXJjaC9jcmVhdGUtaW5kZXgvKS5cbiAqIFRoaXMgZnVuY3Rpb24gb25seSB3b3JrcyB3aGVuIGNvbm5lY3RlZCB0byBNb25nb0RCIEF0bGFzLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3Qgc2NoZW1hID0gbmV3IFNjaGVtYSh7IG5hbWU6IHsgdHlwZTogU3RyaW5nLCB1bmlxdWU6IHRydWUgfSB9KTtcbiAqICAgICBjb25zdCBDdXN0b21lciA9IG1vbmdvb3NlLm1vZGVsKCdDdXN0b21lcicsIHNjaGVtYSk7XG4gKiAgICAgYXdhaXQgQ3VzdG9tZXIudXBkYXRlU2VhcmNoSW5kZXgoJ3Rlc3QnLCB7IG1hcHBpbmdzOiB7IGR5bmFtaWM6IHRydWUgfSB9KTtcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtPYmplY3R9IGRlZmluaXRpb25cbiAqIEByZXR1cm4ge1Byb21pc2V9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1vZGVsLnVwZGF0ZVNlYXJjaEluZGV4ID0gYXN5bmMgZnVuY3Rpb24gdXBkYXRlU2VhcmNoSW5kZXgobmFtZSwgZGVmaW5pdGlvbikge1xuICBfY2hlY2tDb250ZXh0KHRoaXMsICd1cGRhdGVTZWFyY2hJbmRleCcpO1xuXG4gIHJldHVybiBhd2FpdCB0aGlzLiRfX2NvbGxlY3Rpb24udXBkYXRlU2VhcmNoSW5kZXgobmFtZSwgZGVmaW5pdGlvbik7XG59O1xuXG4vKipcbiAqIERlbGV0ZSBhbiBleGlzdGluZyBbQXRsYXMgc2VhcmNoIGluZGV4XShodHRwczovL3d3dy5tb25nb2RiLmNvbS9kb2NzL2F0bGFzL2F0bGFzLXNlYXJjaC9jcmVhdGUtaW5kZXgvKSBieSBuYW1lLlxuICogVGhpcyBmdW5jdGlvbiBvbmx5IHdvcmtzIHdoZW4gY29ubmVjdGVkIHRvIE1vbmdvREIgQXRsYXMuXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBjb25zdCBzY2hlbWEgPSBuZXcgU2NoZW1hKHsgbmFtZTogeyB0eXBlOiBTdHJpbmcsIHVuaXF1ZTogdHJ1ZSB9IH0pO1xuICogICAgIGNvbnN0IEN1c3RvbWVyID0gbW9uZ29vc2UubW9kZWwoJ0N1c3RvbWVyJywgc2NoZW1hKTtcbiAqICAgICBhd2FpdCBDdXN0b21lci5kcm9wU2VhcmNoSW5kZXgoJ3Rlc3QnKTtcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybiB7UHJvbWlzZX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTW9kZWwuZHJvcFNlYXJjaEluZGV4ID0gYXN5bmMgZnVuY3Rpb24gZHJvcFNlYXJjaEluZGV4KG5hbWUpIHtcbiAgX2NoZWNrQ29udGV4dCh0aGlzLCAnZHJvcFNlYXJjaEluZGV4Jyk7XG5cbiAgcmV0dXJuIGF3YWl0IHRoaXMuJF9fY29sbGVjdGlvbi5kcm9wU2VhcmNoSW5kZXgobmFtZSk7XG59O1xuXG4vKipcbiAqIERvZXMgYSBkcnktcnVuIG9mIGBNb2RlbC5zeW5jSW5kZXhlcygpYCwgcmV0dXJuaW5nIHRoZSBpbmRleGVzIHRoYXQgYHN5bmNJbmRleGVzKClgIHdvdWxkIGRyb3AgYW5kIGNyZWF0ZSBpZiB5b3Ugd2VyZSB0byBydW4gYHN5bmNJbmRleGVzKClgLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3QgeyB0b0Ryb3AsIHRvQ3JlYXRlIH0gPSBhd2FpdCBNb2RlbC5kaWZmSW5kZXhlcygpO1xuICogICAgIHRvRHJvcDsgLy8gQXJyYXkgb2Ygc3RyaW5ncyBjb250YWluaW5nIG5hbWVzIG9mIGluZGV4ZXMgdGhhdCBgc3luY0luZGV4ZXMoKWAgd2lsbCBkcm9wXG4gKiAgICAgdG9DcmVhdGU7IC8vIEFycmF5IG9mIHN0cmluZ3MgY29udGFpbmluZyBuYW1lcyBvZiBpbmRleGVzIHRoYXQgYHN5bmNJbmRleGVzKClgIHdpbGwgY3JlYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHJldHVybiB7UHJvbWlzZTxPYmplY3Q+fSBjb250YWlucyB0aGUgaW5kZXhlcyB0aGF0IHdvdWxkIGJlIGRyb3BwZWQgaW4gTW9uZ29EQiBhbmQgaW5kZXhlcyB0aGF0IHdvdWxkIGJlIGNyZWF0ZWQgaW4gTW9uZ29EQiBhcyBgeyB0b0Ryb3A6IHN0cmluZ1tdLCB0b0NyZWF0ZTogc3RyaW5nW10gfWAuXG4gKi9cblxuTW9kZWwuZGlmZkluZGV4ZXMgPSBhc3luYyBmdW5jdGlvbiBkaWZmSW5kZXhlcygpIHtcbiAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGFyZ3VtZW50c1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBNb25nb29zZUVycm9yKCdNb2RlbC5zeW5jSW5kZXhlcygpIG5vIGxvbmdlciBhY2NlcHRzIGEgY2FsbGJhY2snKTtcbiAgfVxuXG4gIGNvbnN0IG1vZGVsID0gdGhpcztcblxuICBsZXQgZGJJbmRleGVzID0gYXdhaXQgbW9kZWwubGlzdEluZGV4ZXMoKS5jYXRjaChlcnIgPT4ge1xuICAgIGlmIChlcnIuY29kZU5hbWUgPT0gJ05hbWVzcGFjZU5vdEZvdW5kJykge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdGhyb3cgZXJyO1xuICB9KTtcbiAgaWYgKGRiSW5kZXhlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZGJJbmRleGVzID0gW107XG4gIH1cbiAgZGJJbmRleGVzID0gZ2V0UmVsYXRlZERCSW5kZXhlcyhtb2RlbCwgZGJJbmRleGVzKTtcblxuICBjb25zdCBzY2hlbWEgPSBtb2RlbC5zY2hlbWE7XG4gIGNvbnN0IHNjaGVtYUluZGV4ZXMgPSBnZXRSZWxhdGVkU2NoZW1hSW5kZXhlcyhtb2RlbCwgc2NoZW1hLmluZGV4ZXMoKSk7XG5cbiAgY29uc3QgdG9Ecm9wID0gZ2V0SW5kZXhlc1RvRHJvcChzY2hlbWEsIHNjaGVtYUluZGV4ZXMsIGRiSW5kZXhlcyk7XG4gIGNvbnN0IHRvQ3JlYXRlID0gZ2V0SW5kZXhlc1RvQ3JlYXRlKHNjaGVtYSwgc2NoZW1hSW5kZXhlcywgZGJJbmRleGVzLCB0b0Ryb3ApO1xuXG4gIHJldHVybiB7IHRvRHJvcCwgdG9DcmVhdGUgfTtcbn07XG5cbmZ1bmN0aW9uIGdldEluZGV4ZXNUb0NyZWF0ZShzY2hlbWEsIHNjaGVtYUluZGV4ZXMsIGRiSW5kZXhlcywgdG9Ecm9wKSB7XG4gIGNvbnN0IHRvQ3JlYXRlID0gW107XG5cbiAgZm9yIChjb25zdCBbc2NoZW1hSW5kZXhLZXlzT2JqZWN0LCBzY2hlbWFJbmRleE9wdGlvbnNdIG9mIHNjaGVtYUluZGV4ZXMpIHtcbiAgICBsZXQgZm91bmQgPSBmYWxzZTtcblxuICAgIGNvbnN0IG9wdGlvbnMgPSBkZWNvcmF0ZURpc2NyaW1pbmF0b3JJbmRleE9wdGlvbnMoc2NoZW1hLCBjbG9uZShzY2hlbWFJbmRleE9wdGlvbnMpKTtcblxuICAgIGZvciAoY29uc3QgaW5kZXggb2YgZGJJbmRleGVzKSB7XG4gICAgICBpZiAoaXNEZWZhdWx0SWRJbmRleChpbmRleCkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIGlzSW5kZXhFcXVhbChzY2hlbWFJbmRleEtleXNPYmplY3QsIG9wdGlvbnMsIGluZGV4KSAmJlxuICAgICAgICAhdG9Ecm9wLmluY2x1ZGVzKGluZGV4Lm5hbWUpXG4gICAgICApIHtcbiAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWZvdW5kKSB7XG4gICAgICB0b0NyZWF0ZS5wdXNoKHNjaGVtYUluZGV4S2V5c09iamVjdCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRvQ3JlYXRlO1xufVxuXG5mdW5jdGlvbiBnZXRJbmRleGVzVG9Ecm9wKHNjaGVtYSwgc2NoZW1hSW5kZXhlcywgZGJJbmRleGVzKSB7XG4gIGNvbnN0IHRvRHJvcCA9IFtdO1xuXG4gIGZvciAoY29uc3QgZGJJbmRleCBvZiBkYkluZGV4ZXMpIHtcbiAgICBsZXQgZm91bmQgPSBmYWxzZTtcbiAgICAvLyBOZXZlciB0cnkgdG8gZHJvcCBgX2lkYCBpbmRleCwgTW9uZ29EQiBzZXJ2ZXIgZG9lc24ndCBhbGxvdyBpdFxuICAgIGlmIChpc0RlZmF1bHRJZEluZGV4KGRiSW5kZXgpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IFtzY2hlbWFJbmRleEtleXNPYmplY3QsIHNjaGVtYUluZGV4T3B0aW9uc10gb2Ygc2NoZW1hSW5kZXhlcykge1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IGRlY29yYXRlRGlzY3JpbWluYXRvckluZGV4T3B0aW9ucyhzY2hlbWEsIGNsb25lKHNjaGVtYUluZGV4T3B0aW9ucykpO1xuICAgICAgYXBwbHlTY2hlbWFDb2xsYXRpb24oc2NoZW1hSW5kZXhLZXlzT2JqZWN0LCBvcHRpb25zLCBzY2hlbWEub3B0aW9ucyk7XG5cbiAgICAgIGlmIChpc0luZGV4RXF1YWwoc2NoZW1hSW5kZXhLZXlzT2JqZWN0LCBvcHRpb25zLCBkYkluZGV4KSkge1xuICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghZm91bmQpIHtcbiAgICAgIHRvRHJvcC5wdXNoKGRiSW5kZXgubmFtZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRvRHJvcDtcbn1cbi8qKlxuICogRGVsZXRlcyBhbGwgaW5kZXhlcyB0aGF0IGFyZW4ndCBkZWZpbmVkIGluIHRoaXMgbW9kZWwncyBzY2hlbWEuIFVzZWQgYnlcbiAqIGBzeW5jSW5kZXhlcygpYC5cbiAqXG4gKiBUaGUgcmV0dXJuZWQgcHJvbWlzZSByZXNvbHZlcyB0byBhIGxpc3Qgb2YgdGhlIGRyb3BwZWQgaW5kZXhlcycgbmFtZXMgYXMgYW4gYXJyYXlcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIG9wdGlvbmFsIGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtQcm9taXNlfHVuZGVmaW5lZH0gUmV0dXJucyBgdW5kZWZpbmVkYCBpZiBjYWxsYmFjayBpcyBzcGVjaWZpZWQsIHJldHVybnMgYSBwcm9taXNlIGlmIG5vIGNhbGxiYWNrLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Nb2RlbC5jbGVhbkluZGV4ZXMgPSBhc3luYyBmdW5jdGlvbiBjbGVhbkluZGV4ZXMob3B0aW9ucykge1xuICBfY2hlY2tDb250ZXh0KHRoaXMsICdjbGVhbkluZGV4ZXMnKTtcbiAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGFyZ3VtZW50c1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBNb25nb29zZUVycm9yKCdNb2RlbC5jbGVhbkluZGV4ZXMoKSBubyBsb25nZXIgYWNjZXB0cyBhIGNhbGxiYWNrJyk7XG4gIH1cbiAgY29uc3QgbW9kZWwgPSB0aGlzO1xuXG4gIGNvbnN0IGNvbGxlY3Rpb24gPSBtb2RlbC4kX19jb2xsZWN0aW9uO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnMgJiYgb3B0aW9ucy50b0Ryb3ApKSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgX2Ryb3BJbmRleGVzKG9wdGlvbnMudG9Ecm9wLCBjb2xsZWN0aW9uKTtcbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgY29uc3QgcmVzID0gYXdhaXQgbW9kZWwuZGlmZkluZGV4ZXMoKTtcbiAgcmV0dXJuIGF3YWl0IF9kcm9wSW5kZXhlcyhyZXMudG9Ecm9wLCBjb2xsZWN0aW9uKTtcbn07XG5cbmFzeW5jIGZ1bmN0aW9uIF9kcm9wSW5kZXhlcyh0b0Ryb3AsIGNvbGxlY3Rpb24pIHtcbiAgaWYgKHRvRHJvcC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBhd2FpdCBQcm9taXNlLmFsbCh0b0Ryb3AubWFwKGluZGV4TmFtZSA9PiBjb2xsZWN0aW9uLmRyb3BJbmRleChpbmRleE5hbWUpKSk7XG4gIHJldHVybiB0b0Ryb3A7XG59XG5cbi8qKlxuICogTGlzdHMgdGhlIGluZGV4ZXMgY3VycmVudGx5IGRlZmluZWQgaW4gTW9uZ29EQi4gVGhpcyBtYXkgb3IgbWF5IG5vdCBiZVxuICogdGhlIHNhbWUgYXMgdGhlIGluZGV4ZXMgZGVmaW5lZCBpbiB5b3VyIHNjaGVtYSBkZXBlbmRpbmcgb24gd2hldGhlciB5b3VcbiAqIHVzZSB0aGUgW2BhdXRvSW5kZXhgIG9wdGlvbl0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2d1aWRlLmh0bWwjYXV0b0luZGV4KSBhbmQgaWYgeW91XG4gKiBidWlsZCBpbmRleGVzIG1hbnVhbGx5LlxuICpcbiAqIEByZXR1cm4ge1Byb21pc2V9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1vZGVsLmxpc3RJbmRleGVzID0gYXN5bmMgZnVuY3Rpb24gbGlzdEluZGV4ZXMoKSB7XG4gIF9jaGVja0NvbnRleHQodGhpcywgJ2xpc3RJbmRleGVzJyk7XG4gIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IE1vbmdvb3NlRXJyb3IoJ01vZGVsLmxpc3RJbmRleGVzKCkgbm8gbG9uZ2VyIGFjY2VwdHMgYSBjYWxsYmFjaycpO1xuICB9XG5cbiAgaWYgKHRoaXMuJF9fY29sbGVjdGlvbi5idWZmZXIpIHtcbiAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMuJF9fY29sbGVjdGlvbi5hZGRRdWV1ZShyZXNvbHZlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLiRfX2NvbGxlY3Rpb24ubGlzdEluZGV4ZXMoKS50b0FycmF5KCk7XG59O1xuXG4vKipcbiAqIFNlbmRzIGBjcmVhdGVJbmRleGAgY29tbWFuZHMgdG8gbW9uZ28gZm9yIGVhY2ggaW5kZXggZGVjbGFyZWQgaW4gdGhlIHNjaGVtYS5cbiAqIFRoZSBgY3JlYXRlSW5kZXhgIGNvbW1hbmRzIGFyZSBzZW50IGluIHNlcmllcy5cbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKlxuICogICAgIGF3YWl0IEV2ZW50LmVuc3VyZUluZGV4ZXMoKTtcbiAqXG4gKiBBZnRlciBjb21wbGV0aW9uLCBhbiBgaW5kZXhgIGV2ZW50IGlzIGVtaXR0ZWQgb24gdGhpcyBgTW9kZWxgIHBhc3NpbmcgYW4gZXJyb3IgaWYgb25lIG9jY3VycmVkLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3QgZXZlbnRTY2hlbWEgPSBuZXcgU2NoZW1hKHsgdGhpbmc6IHsgdHlwZTogJ3N0cmluZycsIHVuaXF1ZTogdHJ1ZSB9IH0pXG4gKiAgICAgY29uc3QgRXZlbnQgPSBtb25nb29zZS5tb2RlbCgnRXZlbnQnLCBldmVudFNjaGVtYSk7XG4gKlxuICogICAgIEV2ZW50Lm9uKCdpbmRleCcsIGZ1bmN0aW9uIChlcnIpIHtcbiAqICAgICAgIGlmIChlcnIpIGNvbnNvbGUuZXJyb3IoZXJyKTsgLy8gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIGluZGV4IGNyZWF0aW9uXG4gKiAgICAgfSk7XG4gKlxuICogX05PVEU6IEl0IGlzIG5vdCByZWNvbW1lbmRlZCB0aGF0IHlvdSBydW4gdGhpcyBpbiBwcm9kdWN0aW9uLiBJbmRleCBjcmVhdGlvbiBtYXkgaW1wYWN0IGRhdGFiYXNlIHBlcmZvcm1hbmNlIGRlcGVuZGluZyBvbiB5b3VyIGxvYWQuIFVzZSB3aXRoIGNhdXRpb24uX1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gaW50ZXJuYWwgb3B0aW9uc1xuICogQHJldHVybiB7UHJvbWlzZX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTW9kZWwuZW5zdXJlSW5kZXhlcyA9IGFzeW5jIGZ1bmN0aW9uIGVuc3VyZUluZGV4ZXMob3B0aW9ucykge1xuICBfY2hlY2tDb250ZXh0KHRoaXMsICdlbnN1cmVJbmRleGVzJyk7XG4gIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBhcmd1bWVudHNbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgTW9uZ29vc2VFcnJvcignTW9kZWwuZW5zdXJlSW5kZXhlcygpIG5vIGxvbmdlciBhY2NlcHRzIGEgY2FsbGJhY2snKTtcbiAgfVxuXG4gIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBfZW5zdXJlSW5kZXhlcyh0aGlzLCBvcHRpb25zLCAoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZSgpO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbi8qKlxuICogU2ltaWxhciB0byBgZW5zdXJlSW5kZXhlcygpYCwgZXhjZXB0IGZvciBpdCB1c2VzIHRoZSBbYGNyZWF0ZUluZGV4YF0oaHR0cHM6Ly9tb25nb2RiLmdpdGh1Yi5pby9ub2RlLW1vbmdvZGItbmF0aXZlLzQuOS9jbGFzc2VzL0RiLmh0bWwjY3JlYXRlSW5kZXgpXG4gKiBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIGludGVybmFsIG9wdGlvbnNcbiAqIEByZXR1cm4ge1Byb21pc2V9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1vZGVsLmNyZWF0ZUluZGV4ZXMgPSBhc3luYyBmdW5jdGlvbiBjcmVhdGVJbmRleGVzKG9wdGlvbnMpIHtcbiAgX2NoZWNrQ29udGV4dCh0aGlzLCAnY3JlYXRlSW5kZXhlcycpO1xuXG4gIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBhcmd1bWVudHNbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgTW9uZ29vc2VFcnJvcignTW9kZWwuY3JlYXRlSW5kZXhlcygpIG5vIGxvbmdlciBhY2NlcHRzIGEgY2FsbGJhY2snKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVuc3VyZUluZGV4ZXMob3B0aW9ucyk7XG59O1xuXG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxuZnVuY3Rpb24gX2Vuc3VyZUluZGV4ZXMobW9kZWwsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGluZGV4ZXMgPSBtb2RlbC5zY2hlbWEuaW5kZXhlcygpO1xuICBsZXQgaW5kZXhFcnJvcjtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgY29uc3QgZG9uZSA9IGZ1bmN0aW9uKGVycikge1xuICAgIGlmIChlcnIgJiYgIW1vZGVsLiRjYXVnaHQpIHtcbiAgICAgIG1vZGVsLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICB9XG4gICAgbW9kZWwuZW1pdCgnaW5kZXgnLCBlcnIgfHwgaW5kZXhFcnJvcik7XG4gICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soZXJyIHx8IGluZGV4RXJyb3IpO1xuICB9O1xuXG4gIGZvciAoY29uc3QgaW5kZXggb2YgaW5kZXhlcykge1xuICAgIGlmIChpc0RlZmF1bHRJZEluZGV4KGluZGV4KSkge1xuICAgICAgdXRpbHMud2FybignbW9uZ29vc2U6IENhbm5vdCBzcGVjaWZ5IGEgY3VzdG9tIGluZGV4IG9uIGBfaWRgIGZvciAnICtcbiAgICAgICAgJ21vZGVsIG5hbWUgXCInICsgbW9kZWwubW9kZWxOYW1lICsgJ1wiLCAnICtcbiAgICAgICAgJ01vbmdvREIgZG9lcyBub3QgYWxsb3cgb3ZlcndyaXRpbmcgdGhlIGRlZmF1bHQgYF9pZGAgaW5kZXguIFNlZSAnICtcbiAgICAgICAgJ2h0dHBzOi8vYml0Lmx5L21vbmdvZGItaWQtaW5kZXgnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWluZGV4ZXMubGVuZ3RoKSB7XG4gICAgaW1tZWRpYXRlKGZ1bmN0aW9uKCkge1xuICAgICAgZG9uZSgpO1xuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBJbmRleGVzIGFyZSBjcmVhdGVkIG9uZS1ieS1vbmUgdG8gc3VwcG9ydCBob3cgTW9uZ29EQiA8IDIuNCBkZWFsc1xuICAvLyB3aXRoIGJhY2tncm91bmQgaW5kZXhlcy5cblxuICBjb25zdCBpbmRleFNpbmdsZURvbmUgPSBmdW5jdGlvbihlcnIsIGZpZWxkcywgb3B0aW9ucywgbmFtZSkge1xuICAgIG1vZGVsLmVtaXQoJ2luZGV4LXNpbmdsZS1kb25lJywgZXJyLCBmaWVsZHMsIG9wdGlvbnMsIG5hbWUpO1xuICB9O1xuICBjb25zdCBpbmRleFNpbmdsZVN0YXJ0ID0gZnVuY3Rpb24oZmllbGRzLCBvcHRpb25zKSB7XG4gICAgbW9kZWwuZW1pdCgnaW5kZXgtc2luZ2xlLXN0YXJ0JywgZmllbGRzLCBvcHRpb25zKTtcbiAgfTtcblxuICBjb25zdCBiYXNlU2NoZW1hID0gbW9kZWwuc2NoZW1hLl9iYXNlU2NoZW1hO1xuICBjb25zdCBiYXNlU2NoZW1hSW5kZXhlcyA9IGJhc2VTY2hlbWEgPyBiYXNlU2NoZW1hLmluZGV4ZXMoKSA6IFtdO1xuXG4gIGltbWVkaWF0ZShmdW5jdGlvbigpIHtcbiAgICAvLyBJZiBidWZmZXJpbmcgaXMgb2ZmLCBkbyB0aGlzIG1hbnVhbGx5LlxuICAgIGlmIChvcHRpb25zLl9hdXRvbWF0aWMgJiYgIW1vZGVsLmNvbGxlY3Rpb24uY29sbGVjdGlvbikge1xuICAgICAgbW9kZWwuY29sbGVjdGlvbi5hZGRRdWV1ZShjcmVhdGUsIFtdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3JlYXRlKCk7XG4gICAgfVxuICB9KTtcblxuXG4gIGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICBpZiAob3B0aW9ucy5fYXV0b21hdGljKSB7XG4gICAgICBpZiAobW9kZWwuc2NoZW1hLm9wdGlvbnMuYXV0b0luZGV4ID09PSBmYWxzZSB8fFxuICAgICAgICAgIChtb2RlbC5zY2hlbWEub3B0aW9ucy5hdXRvSW5kZXggPT0gbnVsbCAmJiBtb2RlbC5kYi5jb25maWcuYXV0b0luZGV4ID09PSBmYWxzZSkpIHtcbiAgICAgICAgcmV0dXJuIGRvbmUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBpbmRleCA9IGluZGV4ZXMuc2hpZnQoKTtcbiAgICBpZiAoIWluZGV4KSB7XG4gICAgICByZXR1cm4gZG9uZSgpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5fYXV0b21hdGljICYmIGluZGV4WzFdLl9hdXRvSW5kZXggPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gY3JlYXRlKCk7XG4gICAgfVxuXG4gICAgaWYgKGJhc2VTY2hlbWFJbmRleGVzLmZpbmQoaSA9PiB1dGlscy5kZWVwRXF1YWwoaSwgaW5kZXgpKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZSgpO1xuICAgIH1cblxuICAgIGNvbnN0IGluZGV4RmllbGRzID0gY2xvbmUoaW5kZXhbMF0pO1xuICAgIGNvbnN0IGluZGV4T3B0aW9ucyA9IGNsb25lKGluZGV4WzFdKTtcblxuICAgIGRlbGV0ZSBpbmRleE9wdGlvbnMuX2F1dG9JbmRleDtcbiAgICBkZWNvcmF0ZURpc2NyaW1pbmF0b3JJbmRleE9wdGlvbnMobW9kZWwuc2NoZW1hLCBpbmRleE9wdGlvbnMpO1xuICAgIGFwcGx5V3JpdGVDb25jZXJuKG1vZGVsLnNjaGVtYSwgaW5kZXhPcHRpb25zKTtcbiAgICBhcHBseVNjaGVtYUNvbGxhdGlvbihpbmRleEZpZWxkcywgaW5kZXhPcHRpb25zLCBtb2RlbC5zY2hlbWEub3B0aW9ucyk7XG5cbiAgICBpbmRleFNpbmdsZVN0YXJ0KGluZGV4RmllbGRzLCBvcHRpb25zKTtcblxuICAgIGlmICgnYmFja2dyb3VuZCcgaW4gb3B0aW9ucykge1xuICAgICAgaW5kZXhPcHRpb25zLmJhY2tncm91bmQgPSBvcHRpb25zLmJhY2tncm91bmQ7XG4gICAgfVxuXG4gICAgaWYgKCd0b0NyZWF0ZScgaW4gb3B0aW9ucykge1xuICAgICAgaWYgKG9wdGlvbnMudG9DcmVhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBkb25lKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbW9kZWwuY29sbGVjdGlvbi5jcmVhdGVJbmRleChpbmRleEZpZWxkcywgaW5kZXhPcHRpb25zKS50aGVuKFxuICAgICAgbmFtZSA9PiB7XG4gICAgICAgIGluZGV4U2luZ2xlRG9uZShudWxsLCBpbmRleEZpZWxkcywgaW5kZXhPcHRpb25zLCBuYW1lKTtcbiAgICAgICAgY3JlYXRlKCk7XG4gICAgICB9LFxuICAgICAgZXJyID0+IHtcbiAgICAgICAgaWYgKCFpbmRleEVycm9yKSB7XG4gICAgICAgICAgaW5kZXhFcnJvciA9IGVycjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW1vZGVsLiRjYXVnaHQpIHtcbiAgICAgICAgICBtb2RlbC5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICAgIH1cblxuICAgICAgICBpbmRleFNpbmdsZURvbmUoZXJyLCBpbmRleEZpZWxkcywgaW5kZXhPcHRpb25zKTtcbiAgICAgICAgY3JlYXRlKCk7XG4gICAgICB9XG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIFNjaGVtYSB0aGUgbW9kZWwgdXNlcy5cbiAqXG4gKiBAcHJvcGVydHkgc2NoZW1hXG4gKiBAc3RhdGljXG4gKiBAYXBpIHB1YmxpY1xuICogQG1lbWJlck9mIE1vZGVsXG4gKi9cblxuTW9kZWwuc2NoZW1hO1xuXG4vKipcbiAqIENvbm5lY3Rpb24gaW5zdGFuY2UgdGhlIG1vZGVsIHVzZXMuXG4gKlxuICogQHByb3BlcnR5IGRiXG4gKiBAc3RhdGljXG4gKiBAYXBpIHB1YmxpY1xuICogQG1lbWJlck9mIE1vZGVsXG4gKi9cblxuTW9kZWwuZGI7XG5cbi8qKlxuICogQ29sbGVjdGlvbiB0aGUgbW9kZWwgdXNlcy5cbiAqXG4gKiBAcHJvcGVydHkgY29sbGVjdGlvblxuICogQGFwaSBwdWJsaWNcbiAqIEBtZW1iZXJPZiBNb2RlbFxuICovXG5cbk1vZGVsLmNvbGxlY3Rpb247XG5cbi8qKlxuICogSW50ZXJuYWwgY29sbGVjdGlvbiB0aGUgbW9kZWwgdXNlcy5cbiAqXG4gKiBAcHJvcGVydHkgY29sbGVjdGlvblxuICogQGFwaSBwcml2YXRlXG4gKiBAbWVtYmVyT2YgTW9kZWxcbiAqL1xuTW9kZWwuJF9fY29sbGVjdGlvbjtcblxuLyoqXG4gKiBCYXNlIE1vbmdvb3NlIGluc3RhbmNlIHRoZSBtb2RlbCB1c2VzLlxuICpcbiAqIEBwcm9wZXJ0eSBiYXNlXG4gKiBAYXBpIHB1YmxpY1xuICogQG1lbWJlck9mIE1vZGVsXG4gKi9cblxuTW9kZWwuYmFzZTtcblxuLyoqXG4gKiBSZWdpc3RlcmVkIGRpc2NyaW1pbmF0b3JzIGZvciB0aGlzIG1vZGVsLlxuICpcbiAqIEBwcm9wZXJ0eSBkaXNjcmltaW5hdG9yc1xuICogQGFwaSBwdWJsaWNcbiAqIEBtZW1iZXJPZiBNb2RlbFxuICovXG5cbk1vZGVsLmRpc2NyaW1pbmF0b3JzO1xuXG4vKipcbiAqIFRyYW5zbGF0ZSBhbnkgYWxpYXNlcyBmaWVsZHMvY29uZGl0aW9ucyBzbyB0aGUgZmluYWwgcXVlcnkgb3IgZG9jdW1lbnQgb2JqZWN0IGlzIHB1cmVcbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKlxuICogICAgIGF3YWl0IENoYXJhY3Rlci5maW5kKENoYXJhY3Rlci50cmFuc2xhdGVBbGlhc2VzKHtcbiAqICAgICAgICAn5ZCNJzogJ0VkZGFyZCBTdGFyaycgLy8gQWxpYXMgZm9yICduYW1lJ1xuICogICAgIH0pO1xuICpcbiAqIEJ5IGRlZmF1bHQsIGB0cmFuc2xhdGVBbGlhc2VzKClgIG92ZXJ3cml0ZXMgcmF3IGZpZWxkcyB3aXRoIGFsaWFzZWQgZmllbGRzLlxuICogU28gaWYgYG5gIGlzIGFuIGFsaWFzIGZvciBgbmFtZWAsIGB7IG46ICdhbGlhcycsIG5hbWU6ICdyYXcnIH1gIHdpbGwgcmVzb2x2ZSB0byBgeyBuYW1lOiAnYWxpYXMnIH1gLlxuICogSG93ZXZlciwgeW91IGNhbiBzZXQgdGhlIGBlcnJvck9uRHVwbGljYXRlc2Agb3B0aW9uIHRvIHRocm93IGFuIGVycm9yIGlmIHRoZXJlIGFyZSBwb3RlbnRpYWxseSBjb25mbGljdGluZyBwYXRocy5cbiAqIFRoZSBgdHJhbnNsYXRlQWxpYXNlc2Agb3B0aW9uIGZvciBxdWVyaWVzIHVzZXMgYGVycm9yT25EdXBsaWNhdGVzYC5cbiAqXG4gKiAjIyMjIE5vdGU6XG4gKlxuICogT25seSB0cmFuc2xhdGUgYXJndW1lbnRzIG9mIG9iamVjdCB0eXBlIGFueXRoaW5nIGVsc2UgaXMgcmV0dXJuZWQgcmF3XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGZpZWxkcyBmaWVsZHMvY29uZGl0aW9ucyB0aGF0IG1heSBjb250YWluIGFsaWFzZWQga2V5c1xuICogQHBhcmFtIHtCb29sZWFufSBbZXJyb3JPbkR1cGxpY2F0ZXNdIGlmIHRydWUsIHRocm93IGFuIGVycm9yIGlmIHRoZXJlJ3MgYm90aCBhIGtleSBhbmQgYW4gYWxpYXMgZm9yIHRoYXQga2V5IGluIGBmaWVsZHNgXG4gKiBAcmV0dXJuIHtPYmplY3R9IHRoZSB0cmFuc2xhdGVkICdwdXJlJyBmaWVsZHMvY29uZGl0aW9uc1xuICovXG5Nb2RlbC50cmFuc2xhdGVBbGlhc2VzID0gZnVuY3Rpb24gdHJhbnNsYXRlQWxpYXNlcyhmaWVsZHMsIGVycm9yT25EdXBsaWNhdGVzKSB7XG4gIF9jaGVja0NvbnRleHQodGhpcywgJ3RyYW5zbGF0ZUFsaWFzZXMnKTtcblxuICBjb25zdCB0cmFuc2xhdGUgPSAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgIGxldCBhbGlhcztcbiAgICBjb25zdCB0cmFuc2xhdGVkID0gW107XG4gICAgY29uc3QgZmllbGRLZXlzID0ga2V5LnNwbGl0KCcuJyk7XG4gICAgbGV0IGN1cnJlbnRTY2hlbWEgPSB0aGlzLnNjaGVtYTtcbiAgICBmb3IgKGNvbnN0IGkgaW4gZmllbGRLZXlzKSB7XG4gICAgICBjb25zdCBuYW1lID0gZmllbGRLZXlzW2ldO1xuICAgICAgaWYgKGN1cnJlbnRTY2hlbWEgJiYgY3VycmVudFNjaGVtYS5hbGlhc2VzW25hbWVdKSB7XG4gICAgICAgIGFsaWFzID0gY3VycmVudFNjaGVtYS5hbGlhc2VzW25hbWVdO1xuICAgICAgICBpZiAoZXJyb3JPbkR1cGxpY2F0ZXMgJiYgYWxpYXMgaW4gZmllbGRzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IE1vbmdvb3NlRXJyb3IoYFByb3ZpZGVkIG9iamVjdCBoYXMgYm90aCBmaWVsZCBcIiR7bmFtZX1cIiBhbmQgaXRzIGFsaWFzIFwiJHthbGlhc31cImApO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFsaWFzIGZvdW5kLFxuICAgICAgICB0cmFuc2xhdGVkLnB1c2goYWxpYXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWxpYXMgPSBuYW1lO1xuICAgICAgICAvLyBBbGlhcyBub3QgZm91bmQsIHNvIHRyZWF0IGFzIHVuLWFsaWFzZWQga2V5XG4gICAgICAgIHRyYW5zbGF0ZWQucHVzaChuYW1lKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgaWYgYWxpYXNlZCBwYXRoIGlzIGEgc2NoZW1hXG4gICAgICBpZiAoY3VycmVudFNjaGVtYSAmJiBjdXJyZW50U2NoZW1hLnBhdGhzW2FsaWFzXSkge1xuICAgICAgICBjdXJyZW50U2NoZW1hID0gY3VycmVudFNjaGVtYS5wYXRoc1thbGlhc10uc2NoZW1hO1xuICAgICAgfVxuICAgICAgZWxzZVxuICAgICAgICBjdXJyZW50U2NoZW1hID0gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB0cmFuc2xhdGVkS2V5ID0gdHJhbnNsYXRlZC5qb2luKCcuJyk7XG4gICAgaWYgKGZpZWxkcyBpbnN0YW5jZW9mIE1hcClcbiAgICAgIGZpZWxkcy5zZXQodHJhbnNsYXRlZEtleSwgdmFsdWUpO1xuICAgIGVsc2VcbiAgICAgIGZpZWxkc1t0cmFuc2xhdGVkS2V5XSA9IHZhbHVlO1xuXG4gICAgaWYgKHRyYW5zbGF0ZWRLZXkgIT09IGtleSkge1xuICAgICAgLy8gV2UnbGwgYmUgdXNpbmcgdGhlIHRyYW5zbGF0ZWQga2V5IGluc3RlYWRcbiAgICAgIGlmIChmaWVsZHMgaW5zdGFuY2VvZiBNYXApIHtcbiAgICAgICAgLy8gRGVsZXRlIGZyb20gbWFwXG4gICAgICAgIGZpZWxkcy5kZWxldGUoa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIERlbGV0ZSBmcm9tIG9iamVjdFxuICAgICAgICBkZWxldGUgZmllbGRzW2tleV07IC8vIFdlJ2xsIGJlIHVzaW5nIHRoZSB0cmFuc2xhdGVkIGtleSBpbnN0ZWFkXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmaWVsZHM7XG4gIH07XG5cbiAgaWYgKHR5cGVvZiBmaWVsZHMgPT09ICdvYmplY3QnKSB7XG4gICAgLy8gRmllbGRzIGlzIGFuIG9iamVjdCAocXVlcnkgY29uZGl0aW9ucyBvciBkb2N1bWVudCBmaWVsZHMpXG4gICAgaWYgKGZpZWxkcyBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgLy8gQSBNYXAgd2FzIHN1cHBsaWVkXG4gICAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIG5ldyBNYXAoZmllbGRzKSkge1xuICAgICAgICBmaWVsZHMgPSB0cmFuc2xhdGUoZmllbGRbMF0sIGZpZWxkWzFdKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSW5mZXIgYSByZWd1bGFyIG9iamVjdCB3YXMgc3VwcGxpZWRcbiAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKGZpZWxkcykpIHtcbiAgICAgICAgZmllbGRzID0gdHJhbnNsYXRlKGtleSwgZmllbGRzW2tleV0pO1xuICAgICAgICBpZiAoa2V5WzBdID09PSAnJCcpIHtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmaWVsZHNba2V5XSkpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaSBpbiBmaWVsZHNba2V5XSkge1xuICAgICAgICAgICAgICAvLyBSZWN1cnNpdmVseSB0cmFuc2xhdGUgbmVzdGVkIHF1ZXJpZXNcbiAgICAgICAgICAgICAgZmllbGRzW2tleV1baV0gPSB0aGlzLnRyYW5zbGF0ZUFsaWFzZXMoZmllbGRzW2tleV1baV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZUFsaWFzZXMoZmllbGRzW2tleV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmaWVsZHM7XG4gIH0gZWxzZSB7XG4gICAgLy8gRG9uJ3Qga25vdyB0eXBlb2YgZmllbGRzXG4gICAgcmV0dXJuIGZpZWxkcztcbiAgfVxufTtcblxuLyoqXG4gKiBEZWxldGVzIHRoZSBmaXJzdCBkb2N1bWVudCB0aGF0IG1hdGNoZXMgYGNvbmRpdGlvbnNgIGZyb20gdGhlIGNvbGxlY3Rpb24uXG4gKiBJdCByZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSBwcm9wZXJ0eSBgZGVsZXRlZENvdW50YCBpbmRpY2F0aW5nIGhvdyBtYW55IGRvY3VtZW50cyB3ZXJlIGRlbGV0ZWQuXG4gKiBCZWhhdmVzIGxpa2UgYHJlbW92ZSgpYCwgYnV0IGRlbGV0ZXMgYXQgbW9zdCBvbmUgZG9jdW1lbnQgcmVnYXJkbGVzcyBvZiB0aGVcbiAqIGBzaW5nbGVgIG9wdGlvbi5cbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKlxuICogICAgIGF3YWl0IENoYXJhY3Rlci5kZWxldGVPbmUoeyBuYW1lOiAnRWRkYXJkIFN0YXJrJyB9KTsgLy8gcmV0dXJucyB7ZGVsZXRlZENvdW50OiAxfVxuICpcbiAqICMjIyMgTm90ZTpcbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHRyaWdnZXJzIGBkZWxldGVPbmVgIHF1ZXJ5IGhvb2tzLiBSZWFkIHRoZVxuICogW21pZGRsZXdhcmUgZG9jc10oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL21pZGRsZXdhcmUuaHRtbCNuYW1pbmcpIHRvIGxlYXJuIG1vcmUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmRpdGlvbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gb3B0aW9uYWwgc2VlIFtgUXVlcnkucHJvdG90eXBlLnNldE9wdGlvbnMoKWBdKGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9hcGkvcXVlcnkuaHRtbCNRdWVyeS5wcm90b3R5cGUuc2V0T3B0aW9ucygpKVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy50cmFuc2xhdGVBbGlhc2VzPW51bGxdIElmIHNldCB0byBgdHJ1ZWAsIHRyYW5zbGF0ZXMgYW55IHNjaGVtYS1kZWZpbmVkIGFsaWFzZXMgaW4gYGZpbHRlcmAsIGBwcm9qZWN0aW9uYCwgYHVwZGF0ZWAsIGFuZCBgZGlzdGluY3RgLiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlcmUgYXJlIGFueSBjb25mbGljdHMgd2hlcmUgYm90aCBhbGlhcyBhbmQgcmF3IHByb3BlcnR5IGFyZSBkZWZpbmVkIG9uIHRoZSBzYW1lIG9iamVjdC5cbiAqIEByZXR1cm4ge1F1ZXJ5fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Nb2RlbC5kZWxldGVPbmUgPSBmdW5jdGlvbiBkZWxldGVPbmUoY29uZGl0aW9ucywgb3B0aW9ucykge1xuICBfY2hlY2tDb250ZXh0KHRoaXMsICdkZWxldGVPbmUnKTtcblxuICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgYXJndW1lbnRzWzFdID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBhcmd1bWVudHNbMl0gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgTW9uZ29vc2VFcnJvcignTW9kZWwucHJvdG90eXBlLmRlbGV0ZU9uZSgpIG5vIGxvbmdlciBhY2NlcHRzIGEgY2FsbGJhY2snKTtcbiAgfVxuXG4gIGNvbnN0IG1xID0gbmV3IHRoaXMuUXVlcnkoe30sIHt9LCB0aGlzLCB0aGlzLiRfX2NvbGxlY3Rpb24pO1xuICBtcS5zZXRPcHRpb25zKG9wdGlvbnMpO1xuXG4gIHJldHVybiBtcS5kZWxldGVPbmUoY29uZGl0aW9ucyk7XG59O1xuXG4vKipcbiAqIERlbGV0ZXMgYWxsIG9mIHRoZSBkb2N1bWVudHMgdGhhdCBtYXRjaCBgY29uZGl0aW9uc2AgZnJvbSB0aGUgY29sbGVjdGlvbi5cbiAqIEl0IHJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIHByb3BlcnR5IGBkZWxldGVkQ291bnRgIGNvbnRhaW5pbmcgdGhlIG51bWJlciBvZiBkb2N1bWVudHMgZGVsZXRlZC5cbiAqIEJlaGF2ZXMgbGlrZSBgcmVtb3ZlKClgLCBidXQgZGVsZXRlcyBhbGwgZG9jdW1lbnRzIHRoYXQgbWF0Y2ggYGNvbmRpdGlvbnNgXG4gKiByZWdhcmRsZXNzIG9mIHRoZSBgc2luZ2xlYCBvcHRpb24uXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBhd2FpdCBDaGFyYWN0ZXIuZGVsZXRlTWFueSh7IG5hbWU6IC9TdGFyay8sIGFnZTogeyAkZ3RlOiAxOCB9IH0pOyAvLyByZXR1cm5zIHtkZWxldGVkQ291bnQ6IHh9IHdoZXJlIHggaXMgdGhlIG51bWJlciBvZiBkb2N1bWVudHMgZGVsZXRlZC5cbiAqXG4gKiAjIyMjIE5vdGU6XG4gKlxuICogVGhpcyBmdW5jdGlvbiB0cmlnZ2VycyBgZGVsZXRlTWFueWAgcXVlcnkgaG9va3MuIFJlYWQgdGhlXG4gKiBbbWlkZGxld2FyZSBkb2NzXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvbWlkZGxld2FyZS5odG1sI25hbWluZykgdG8gbGVhcm4gbW9yZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZGl0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBvcHRpb25hbCBzZWUgW2BRdWVyeS5wcm90b3R5cGUuc2V0T3B0aW9ucygpYF0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2FwaS9xdWVyeS5odG1sI1F1ZXJ5LnByb3RvdHlwZS5zZXRPcHRpb25zKCkpXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnRyYW5zbGF0ZUFsaWFzZXM9bnVsbF0gSWYgc2V0IHRvIGB0cnVlYCwgdHJhbnNsYXRlcyBhbnkgc2NoZW1hLWRlZmluZWQgYWxpYXNlcyBpbiBgZmlsdGVyYCwgYHByb2plY3Rpb25gLCBgdXBkYXRlYCwgYW5kIGBkaXN0aW5jdGAuIFRocm93cyBhbiBlcnJvciBpZiB0aGVyZSBhcmUgYW55IGNvbmZsaWN0cyB3aGVyZSBib3RoIGFsaWFzIGFuZCByYXcgcHJvcGVydHkgYXJlIGRlZmluZWQgb24gdGhlIHNhbWUgb2JqZWN0LlxuICogQHJldHVybiB7UXVlcnl9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1vZGVsLmRlbGV0ZU1hbnkgPSBmdW5jdGlvbiBkZWxldGVNYW55KGNvbmRpdGlvbnMsIG9wdGlvbnMpIHtcbiAgX2NoZWNrQ29udGV4dCh0aGlzLCAnZGVsZXRlTWFueScpO1xuXG4gIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBhcmd1bWVudHNbMV0gPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGFyZ3VtZW50c1syXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBNb25nb29zZUVycm9yKCdNb2RlbC5kZWxldGVNYW55KCkgbm8gbG9uZ2VyIGFjY2VwdHMgYSBjYWxsYmFjaycpO1xuICB9XG5cbiAgY29uc3QgbXEgPSBuZXcgdGhpcy5RdWVyeSh7fSwge30sIHRoaXMsIHRoaXMuJF9fY29sbGVjdGlvbik7XG4gIG1xLnNldE9wdGlvbnMob3B0aW9ucyk7XG5cbiAgcmV0dXJuIG1xLmRlbGV0ZU1hbnkoY29uZGl0aW9ucyk7XG59O1xuXG4vKipcbiAqIEZpbmRzIGRvY3VtZW50cy5cbiAqXG4gKiBNb25nb29zZSBjYXN0cyB0aGUgYGZpbHRlcmAgdG8gbWF0Y2ggdGhlIG1vZGVsJ3Mgc2NoZW1hIGJlZm9yZSB0aGUgY29tbWFuZCBpcyBzZW50LlxuICogU2VlIG91ciBbcXVlcnkgY2FzdGluZyB0dXRvcmlhbF0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL3R1dG9yaWFscy9xdWVyeV9jYXN0aW5nLmh0bWwpIGZvclxuICogbW9yZSBpbmZvcm1hdGlvbiBvbiBob3cgTW9uZ29vc2UgY2FzdHMgYGZpbHRlcmAuXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICAvLyBmaW5kIGFsbCBkb2N1bWVudHNcbiAqICAgICBhd2FpdCBNeU1vZGVsLmZpbmQoe30pO1xuICpcbiAqICAgICAvLyBmaW5kIGFsbCBkb2N1bWVudHMgbmFtZWQgam9obiBhbmQgYXQgbGVhc3QgMThcbiAqICAgICBhd2FpdCBNeU1vZGVsLmZpbmQoeyBuYW1lOiAnam9obicsIGFnZTogeyAkZ3RlOiAxOCB9IH0pLmV4ZWMoKTtcbiAqXG4gKiAgICAgLy8gZXhlY3V0ZXMsIG5hbWUgTElLRSBqb2huIGFuZCBvbmx5IHNlbGVjdGluZyB0aGUgXCJuYW1lXCIgYW5kIFwiZnJpZW5kc1wiIGZpZWxkc1xuICogICAgIGF3YWl0IE15TW9kZWwuZmluZCh7IG5hbWU6IC9qb2huL2kgfSwgJ25hbWUgZnJpZW5kcycpLmV4ZWMoKTtcbiAqXG4gKiAgICAgLy8gcGFzc2luZyBvcHRpb25zXG4gKiAgICAgYXdhaXQgTXlNb2RlbC5maW5kKHsgbmFtZTogL2pvaG4vaSB9LCBudWxsLCB7IHNraXA6IDEwIH0pLmV4ZWMoKTtcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxPYmplY3RJZH0gZmlsdGVyXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd8U3RyaW5nW119IFtwcm9qZWN0aW9uXSBvcHRpb25hbCBmaWVsZHMgdG8gcmV0dXJuLCBzZWUgW2BRdWVyeS5wcm90b3R5cGUuc2VsZWN0KClgXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvYXBpL3F1ZXJ5Lmh0bWwjUXVlcnkucHJvdG90eXBlLnNlbGVjdCgpKVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBvcHRpb25hbCBzZWUgW2BRdWVyeS5wcm90b3R5cGUuc2V0T3B0aW9ucygpYF0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2FwaS9xdWVyeS5odG1sI1F1ZXJ5LnByb3RvdHlwZS5zZXRPcHRpb25zKCkpXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnRyYW5zbGF0ZUFsaWFzZXM9bnVsbF0gSWYgc2V0IHRvIGB0cnVlYCwgdHJhbnNsYXRlcyBhbnkgc2NoZW1hLWRlZmluZWQgYWxpYXNlcyBpbiBgZmlsdGVyYCwgYHByb2plY3Rpb25gLCBgdXBkYXRlYCwgYW5kIGBkaXN0aW5jdGAuIFRocm93cyBhbiBlcnJvciBpZiB0aGVyZSBhcmUgYW55IGNvbmZsaWN0cyB3aGVyZSBib3RoIGFsaWFzIGFuZCByYXcgcHJvcGVydHkgYXJlIGRlZmluZWQgb24gdGhlIHNhbWUgb2JqZWN0LlxuICogQHJldHVybiB7UXVlcnl9XG4gKiBAc2VlIGZpZWxkIHNlbGVjdGlvbiBodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvYXBpL3F1ZXJ5Lmh0bWwjUXVlcnkucHJvdG90eXBlLnNlbGVjdCgpXG4gKiBAc2VlIHF1ZXJ5IGNhc3RpbmcgaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL3R1dG9yaWFscy9xdWVyeV9jYXN0aW5nLmh0bWxcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTW9kZWwuZmluZCA9IGZ1bmN0aW9uIGZpbmQoY29uZGl0aW9ucywgcHJvamVjdGlvbiwgb3B0aW9ucykge1xuICBfY2hlY2tDb250ZXh0KHRoaXMsICdmaW5kJyk7XG4gIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBhcmd1bWVudHNbMV0gPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGFyZ3VtZW50c1syXSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgYXJndW1lbnRzWzNdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IE1vbmdvb3NlRXJyb3IoJ01vZGVsLmZpbmQoKSBubyBsb25nZXIgYWNjZXB0cyBhIGNhbGxiYWNrJyk7XG4gIH1cblxuICBjb25zdCBtcSA9IG5ldyB0aGlzLlF1ZXJ5KHt9LCB7fSwgdGhpcywgdGhpcy4kX19jb2xsZWN0aW9uKTtcbiAgbXEuc2VsZWN0KHByb2plY3Rpb24pO1xuICBtcS5zZXRPcHRpb25zKG9wdGlvbnMpO1xuXG4gIHJldHVybiBtcS5maW5kKGNvbmRpdGlvbnMpO1xufTtcblxuLyoqXG4gKiBGaW5kcyBhIHNpbmdsZSBkb2N1bWVudCBieSBpdHMgX2lkIGZpZWxkLiBgZmluZEJ5SWQoaWQpYCBpcyBhbG1vc3QqXG4gKiBlcXVpdmFsZW50IHRvIGBmaW5kT25lKHsgX2lkOiBpZCB9KWAuIElmIHlvdSB3YW50IHRvIHF1ZXJ5IGJ5IGEgZG9jdW1lbnQnc1xuICogYF9pZGAsIHVzZSBgZmluZEJ5SWQoKWAgaW5zdGVhZCBvZiBgZmluZE9uZSgpYC5cbiAqXG4gKiBUaGUgYGlkYCBpcyBjYXN0IGJhc2VkIG9uIHRoZSBTY2hlbWEgYmVmb3JlIHNlbmRpbmcgdGhlIGNvbW1hbmQuXG4gKlxuICogVGhpcyBmdW5jdGlvbiB0cmlnZ2VycyB0aGUgZm9sbG93aW5nIG1pZGRsZXdhcmUuXG4gKlxuICogLSBgZmluZE9uZSgpYFxuICpcbiAqIFxcKiBFeGNlcHQgZm9yIGhvdyBpdCB0cmVhdHMgYHVuZGVmaW5lZGAuIElmIHlvdSB1c2UgYGZpbmRPbmUoKWAsIHlvdSdsbCBzZWVcbiAqIHRoYXQgYGZpbmRPbmUodW5kZWZpbmVkKWAgYW5kIGBmaW5kT25lKHsgX2lkOiB1bmRlZmluZWQgfSlgIGFyZSBlcXVpdmFsZW50XG4gKiB0byBgZmluZE9uZSh7fSlgIGFuZCByZXR1cm4gYXJiaXRyYXJ5IGRvY3VtZW50cy4gSG93ZXZlciwgbW9uZ29vc2VcbiAqIHRyYW5zbGF0ZXMgYGZpbmRCeUlkKHVuZGVmaW5lZClgIGludG8gYGZpbmRPbmUoeyBfaWQ6IG51bGwgfSlgLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgLy8gRmluZCB0aGUgYWR2ZW50dXJlIHdpdGggdGhlIGdpdmVuIGBpZGAsIG9yIGBudWxsYCBpZiBub3QgZm91bmRcbiAqICAgICBhd2FpdCBBZHZlbnR1cmUuZmluZEJ5SWQoaWQpLmV4ZWMoKTtcbiAqXG4gKiAgICAgLy8gc2VsZWN0IG9ubHkgdGhlIGFkdmVudHVyZXMgbmFtZSBhbmQgbGVuZ3RoXG4gKiAgICAgYXdhaXQgQWR2ZW50dXJlLmZpbmRCeUlkKGlkLCAnbmFtZSBsZW5ndGgnKS5leGVjKCk7XG4gKlxuICogQHBhcmFtIHtBbnl9IGlkIHZhbHVlIG9mIGBfaWRgIHRvIHF1ZXJ5IGJ5XG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd8U3RyaW5nW119IFtwcm9qZWN0aW9uXSBvcHRpb25hbCBmaWVsZHMgdG8gcmV0dXJuLCBzZWUgW2BRdWVyeS5wcm90b3R5cGUuc2VsZWN0KClgXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvYXBpL3F1ZXJ5Lmh0bWwjUXVlcnkucHJvdG90eXBlLnNlbGVjdCgpKVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBvcHRpb25hbCBzZWUgW2BRdWVyeS5wcm90b3R5cGUuc2V0T3B0aW9ucygpYF0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2FwaS9xdWVyeS5odG1sI1F1ZXJ5LnByb3RvdHlwZS5zZXRPcHRpb25zKCkpXG4gKiBAcmV0dXJuIHtRdWVyeX1cbiAqIEBzZWUgZmllbGQgc2VsZWN0aW9uIGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9hcGkvcXVlcnkuaHRtbCNRdWVyeS5wcm90b3R5cGUuc2VsZWN0KClcbiAqIEBzZWUgbGVhbiBxdWVyaWVzIGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy90dXRvcmlhbHMvbGVhbi5odG1sXG4gKiBAc2VlIGZpbmRCeUlkIGluIE1vbmdvb3NlIGh0dHBzOi8vbWFzdGVyaW5nanMuaW8vdHV0b3JpYWxzL21vbmdvb3NlL2ZpbmQtYnktaWRcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTW9kZWwuZmluZEJ5SWQgPSBmdW5jdGlvbiBmaW5kQnlJZChpZCwgcHJvamVjdGlvbiwgb3B0aW9ucykge1xuICBfY2hlY2tDb250ZXh0KHRoaXMsICdmaW5kQnlJZCcpO1xuICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgYXJndW1lbnRzWzFdID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBhcmd1bWVudHNbMl0gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgTW9uZ29vc2VFcnJvcignTW9kZWwuZmluZEJ5SWQoKSBubyBsb25nZXIgYWNjZXB0cyBhIGNhbGxiYWNrJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIGlkID09PSAndW5kZWZpbmVkJykge1xuICAgIGlkID0gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmZpbmRPbmUoeyBfaWQ6IGlkIH0sIHByb2plY3Rpb24sIG9wdGlvbnMpO1xufTtcblxuLyoqXG4gKiBGaW5kcyBvbmUgZG9jdW1lbnQuXG4gKlxuICogVGhlIGBjb25kaXRpb25zYCBhcmUgY2FzdCB0byB0aGVpciByZXNwZWN0aXZlIFNjaGVtYVR5cGVzIGJlZm9yZSB0aGUgY29tbWFuZCBpcyBzZW50LlxuICpcbiAqICpOb3RlOiogYGNvbmRpdGlvbnNgIGlzIG9wdGlvbmFsLCBhbmQgaWYgYGNvbmRpdGlvbnNgIGlzIG51bGwgb3IgdW5kZWZpbmVkLFxuICogbW9uZ29vc2Ugd2lsbCBzZW5kIGFuIGVtcHR5IGBmaW5kT25lYCBjb21tYW5kIHRvIE1vbmdvREIsIHdoaWNoIHdpbGwgcmV0dXJuXG4gKiBhbiBhcmJpdHJhcnkgZG9jdW1lbnQuIElmIHlvdSdyZSBxdWVyeWluZyBieSBgX2lkYCwgdXNlIGBmaW5kQnlJZCgpYCBpbnN0ZWFkLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgLy8gRmluZCBvbmUgYWR2ZW50dXJlIHdob3NlIGBjb3VudHJ5YCBpcyAnQ3JvYXRpYScsIG90aGVyd2lzZSBgbnVsbGBcbiAqICAgICBhd2FpdCBBZHZlbnR1cmUuZmluZE9uZSh7IGNvdW50cnk6ICdDcm9hdGlhJyB9KS5leGVjKCk7XG4gKlxuICogICAgIC8vIE1vZGVsLmZpbmRPbmUoKSBubyBsb25nZXIgYWNjZXB0cyBhIGNhbGxiYWNrXG4gKlxuICogICAgIC8vIFNlbGVjdCBvbmx5IHRoZSBhZHZlbnR1cmVzIG5hbWUgYW5kIGxlbmd0aFxuICogICAgIGF3YWl0IEFkdmVudHVyZS5maW5kT25lKHsgY291bnRyeTogJ0Nyb2F0aWEnIH0sICduYW1lIGxlbmd0aCcpLmV4ZWMoKTtcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW2NvbmRpdGlvbnNdXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd8U3RyaW5nW119IFtwcm9qZWN0aW9uXSBvcHRpb25hbCBmaWVsZHMgdG8gcmV0dXJuLCBzZWUgW2BRdWVyeS5wcm90b3R5cGUuc2VsZWN0KClgXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvYXBpL3F1ZXJ5Lmh0bWwjUXVlcnkucHJvdG90eXBlLnNlbGVjdCgpKVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBvcHRpb25hbCBzZWUgW2BRdWVyeS5wcm90b3R5cGUuc2V0T3B0aW9ucygpYF0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2FwaS9xdWVyeS5odG1sI1F1ZXJ5LnByb3RvdHlwZS5zZXRPcHRpb25zKCkpXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnRyYW5zbGF0ZUFsaWFzZXM9bnVsbF0gSWYgc2V0IHRvIGB0cnVlYCwgdHJhbnNsYXRlcyBhbnkgc2NoZW1hLWRlZmluZWQgYWxpYXNlcyBpbiBgZmlsdGVyYCwgYHByb2plY3Rpb25gLCBgdXBkYXRlYCwgYW5kIGBkaXN0aW5jdGAuIFRocm93cyBhbiBlcnJvciBpZiB0aGVyZSBhcmUgYW55IGNvbmZsaWN0cyB3aGVyZSBib3RoIGFsaWFzIGFuZCByYXcgcHJvcGVydHkgYXJlIGRlZmluZWQgb24gdGhlIHNhbWUgb2JqZWN0LlxuICogQHJldHVybiB7UXVlcnl9XG4gKiBAc2VlIGZpZWxkIHNlbGVjdGlvbiBodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvYXBpL3F1ZXJ5Lmh0bWwjUXVlcnkucHJvdG90eXBlLnNlbGVjdCgpXG4gKiBAc2VlIGxlYW4gcXVlcmllcyBodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvdHV0b3JpYWxzL2xlYW4uaHRtbFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Nb2RlbC5maW5kT25lID0gZnVuY3Rpb24gZmluZE9uZShjb25kaXRpb25zLCBwcm9qZWN0aW9uLCBvcHRpb25zKSB7XG4gIF9jaGVja0NvbnRleHQodGhpcywgJ2ZpbmRPbmUnKTtcbiAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGFyZ3VtZW50c1sxXSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgYXJndW1lbnRzWzJdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IE1vbmdvb3NlRXJyb3IoJ01vZGVsLmZpbmRPbmUoKSBubyBsb25nZXIgYWNjZXB0cyBhIGNhbGxiYWNrJyk7XG4gIH1cblxuICBjb25zdCBtcSA9IG5ldyB0aGlzLlF1ZXJ5KHt9LCB7fSwgdGhpcywgdGhpcy4kX19jb2xsZWN0aW9uKTtcbiAgbXEuc2VsZWN0KHByb2plY3Rpb24pO1xuICBtcS5zZXRPcHRpb25zKG9wdGlvbnMpO1xuXG4gIHJldHVybiBtcS5maW5kT25lKGNvbmRpdGlvbnMpO1xufTtcblxuLyoqXG4gKiBFc3RpbWF0ZXMgdGhlIG51bWJlciBvZiBkb2N1bWVudHMgaW4gdGhlIE1vbmdvREIgY29sbGVjdGlvbi4gRmFzdGVyIHRoYW5cbiAqIHVzaW5nIGBjb3VudERvY3VtZW50cygpYCBmb3IgbGFyZ2UgY29sbGVjdGlvbnMgYmVjYXVzZVxuICogYGVzdGltYXRlZERvY3VtZW50Q291bnQoKWAgdXNlcyBjb2xsZWN0aW9uIG1ldGFkYXRhIHJhdGhlciB0aGFuIHNjYW5uaW5nXG4gKiB0aGUgZW50aXJlIGNvbGxlY3Rpb24uXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBjb25zdCBudW1BZHZlbnR1cmVzID0gYXdhaXQgQWR2ZW50dXJlLmVzdGltYXRlZERvY3VtZW50Q291bnQoKTtcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcmV0dXJuIHtRdWVyeX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTW9kZWwuZXN0aW1hdGVkRG9jdW1lbnRDb3VudCA9IGZ1bmN0aW9uIGVzdGltYXRlZERvY3VtZW50Q291bnQob3B0aW9ucykge1xuICBfY2hlY2tDb250ZXh0KHRoaXMsICdlc3RpbWF0ZWREb2N1bWVudENvdW50Jyk7XG5cbiAgY29uc3QgbXEgPSBuZXcgdGhpcy5RdWVyeSh7fSwge30sIHRoaXMsIHRoaXMuJF9fY29sbGVjdGlvbik7XG5cbiAgcmV0dXJuIG1xLmVzdGltYXRlZERvY3VtZW50Q291bnQob3B0aW9ucyk7XG59O1xuXG4vKipcbiAqIENvdW50cyBudW1iZXIgb2YgZG9jdW1lbnRzIG1hdGNoaW5nIGBmaWx0ZXJgIGluIGEgZGF0YWJhc2UgY29sbGVjdGlvbi5cbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKlxuICogICAgIEFkdmVudHVyZS5jb3VudERvY3VtZW50cyh7IHR5cGU6ICdqdW5nbGUnIH0sIGZ1bmN0aW9uIChlcnIsIGNvdW50KSB7XG4gKiAgICAgICBjb25zb2xlLmxvZygndGhlcmUgYXJlICVkIGp1bmdsZSBhZHZlbnR1cmVzJywgY291bnQpO1xuICogICAgIH0pO1xuICpcbiAqIElmIHlvdSB3YW50IHRvIGNvdW50IGFsbCBkb2N1bWVudHMgaW4gYSBsYXJnZSBjb2xsZWN0aW9uLFxuICogdXNlIHRoZSBbYGVzdGltYXRlZERvY3VtZW50Q291bnQoKWAgZnVuY3Rpb25dKGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9hcGkvbW9kZWwuaHRtbCNNb2RlbC5lc3RpbWF0ZWREb2N1bWVudENvdW50KCkpXG4gKiBpbnN0ZWFkLiBJZiB5b3UgY2FsbCBgY291bnREb2N1bWVudHMoe30pYCwgTW9uZ29EQiB3aWxsIGFsd2F5cyBleGVjdXRlXG4gKiBhIGZ1bGwgY29sbGVjdGlvbiBzY2FuIGFuZCAqKm5vdCoqIHVzZSBhbnkgaW5kZXhlcy5cbiAqXG4gKiBUaGUgYGNvdW50RG9jdW1lbnRzKClgIGZ1bmN0aW9uIGlzIHNpbWlsYXIgdG8gYGNvdW50KClgLCBidXQgdGhlcmUgYXJlIGFcbiAqIFtmZXcgb3BlcmF0b3JzIHRoYXQgYGNvdW50RG9jdW1lbnRzKClgIGRvZXMgbm90IHN1cHBvcnRdKGh0dHBzOi8vbW9uZ29kYi5naXRodWIuaW8vbm9kZS1tb25nb2RiLW5hdGl2ZS80LjkvY2xhc3Nlcy9Db2xsZWN0aW9uLmh0bWwjY291bnREb2N1bWVudHMpLlxuICogQmVsb3cgYXJlIHRoZSBvcGVyYXRvcnMgdGhhdCBgY291bnQoKWAgc3VwcG9ydHMgYnV0IGBjb3VudERvY3VtZW50cygpYCBkb2VzIG5vdCxcbiAqIGFuZCB0aGUgc3VnZ2VzdGVkIHJlcGxhY2VtZW50OlxuICpcbiAqIC0gYCR3aGVyZWA6IFtgJGV4cHJgXShodHRwczovL3d3dy5tb25nb2RiLmNvbS9kb2NzL21hbnVhbC9yZWZlcmVuY2Uvb3BlcmF0b3IvcXVlcnkvZXhwci8pXG4gKiAtIGAkbmVhcmA6IFtgJGdlb1dpdGhpbmBdKGh0dHBzOi8vd3d3Lm1vbmdvZGIuY29tL2RvY3MvbWFudWFsL3JlZmVyZW5jZS9vcGVyYXRvci9xdWVyeS9nZW9XaXRoaW4vKSB3aXRoIFtgJGNlbnRlcmBdKGh0dHBzOi8vd3d3Lm1vbmdvZGIuY29tL2RvY3MvbWFudWFsL3JlZmVyZW5jZS9vcGVyYXRvci9xdWVyeS9jZW50ZXIvI29wLl9TX2NlbnRlcilcbiAqIC0gYCRuZWFyU3BoZXJlYDogW2AkZ2VvV2l0aGluYF0oaHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZG9jcy9tYW51YWwvcmVmZXJlbmNlL29wZXJhdG9yL3F1ZXJ5L2dlb1dpdGhpbi8pIHdpdGggW2AkY2VudGVyU3BoZXJlYF0oaHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZG9jcy9tYW51YWwvcmVmZXJlbmNlL29wZXJhdG9yL3F1ZXJ5L2NlbnRlclNwaGVyZS8jb3AuX1NfY2VudGVyU3BoZXJlKVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBmaWx0ZXJcbiAqIEByZXR1cm4ge1F1ZXJ5fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Nb2RlbC5jb3VudERvY3VtZW50cyA9IGZ1bmN0aW9uIGNvdW50RG9jdW1lbnRzKGNvbmRpdGlvbnMsIG9wdGlvbnMpIHtcbiAgX2NoZWNrQ29udGV4dCh0aGlzLCAnY291bnREb2N1bWVudHMnKTtcbiAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGFyZ3VtZW50c1sxXSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgYXJndW1lbnRzWzJdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IE1vbmdvb3NlRXJyb3IoJ01vZGVsLmNvdW50RG9jdW1lbnRzKCkgbm8gbG9uZ2VyIGFjY2VwdHMgYSBjYWxsYmFjaycpO1xuICB9XG5cbiAgY29uc3QgbXEgPSBuZXcgdGhpcy5RdWVyeSh7fSwge30sIHRoaXMsIHRoaXMuJF9fY29sbGVjdGlvbik7XG4gIGlmIChvcHRpb25zICE9IG51bGwpIHtcbiAgICBtcS5zZXRPcHRpb25zKG9wdGlvbnMpO1xuICB9XG5cbiAgcmV0dXJuIG1xLmNvdW50RG9jdW1lbnRzKGNvbmRpdGlvbnMpO1xufTtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSBRdWVyeSBmb3IgYSBgZGlzdGluY3RgIG9wZXJhdGlvbi5cbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKlxuICogICAgIGNvbnN0IHF1ZXJ5ID0gTGluay5kaXN0aW5jdCgndXJsJyk7XG4gKiAgICAgcXVlcnkuZXhlYygpO1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBmaWVsZFxuICogQHBhcmFtIHtPYmplY3R9IFtjb25kaXRpb25zXSBvcHRpb25hbFxuICogQHJldHVybiB7UXVlcnl9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1vZGVsLmRpc3RpbmN0ID0gZnVuY3Rpb24gZGlzdGluY3QoZmllbGQsIGNvbmRpdGlvbnMpIHtcbiAgX2NoZWNrQ29udGV4dCh0aGlzLCAnZGlzdGluY3QnKTtcbiAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGFyZ3VtZW50c1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBNb25nb29zZUVycm9yKCdNb2RlbC5kaXN0aW5jdCgpIG5vIGxvbmdlciBhY2NlcHRzIGEgY2FsbGJhY2snKTtcbiAgfVxuXG4gIGNvbnN0IG1xID0gbmV3IHRoaXMuUXVlcnkoe30sIHt9LCB0aGlzLCB0aGlzLiRfX2NvbGxlY3Rpb24pO1xuXG4gIHJldHVybiBtcS5kaXN0aW5jdChmaWVsZCwgY29uZGl0aW9ucyk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBRdWVyeSwgYXBwbGllcyB0aGUgcGFzc2VkIGNvbmRpdGlvbnMsIGFuZCByZXR1cm5zIHRoZSBRdWVyeS5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgaW5zdGVhZCBvZiB3cml0aW5nOlxuICpcbiAqICAgICBVc2VyLmZpbmQoeyBhZ2U6IHsgJGd0ZTogMjEsICRsdGU6IDY1IH0gfSk7XG4gKlxuICogd2UgY2FuIGluc3RlYWQgd3JpdGU6XG4gKlxuICogICAgIFVzZXIud2hlcmUoJ2FnZScpLmd0ZSgyMSkubHRlKDY1KS5leGVjKCk7XG4gKlxuICogU2luY2UgdGhlIFF1ZXJ5IGNsYXNzIGFsc28gc3VwcG9ydHMgYHdoZXJlYCB5b3UgY2FuIGNvbnRpbnVlIGNoYWluaW5nXG4gKlxuICogICAgIFVzZXJcbiAqICAgICAud2hlcmUoJ2FnZScpLmd0ZSgyMSkubHRlKDY1KVxuICogICAgIC53aGVyZSgnbmFtZScsIC9eYi9pKVxuICogICAgIC4uLiBldGNcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQHBhcmFtIHtPYmplY3R9IFt2YWxdIG9wdGlvbmFsIHZhbHVlXG4gKiBAcmV0dXJuIHtRdWVyeX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTW9kZWwud2hlcmUgPSBmdW5jdGlvbiB3aGVyZShwYXRoLCB2YWwpIHtcbiAgX2NoZWNrQ29udGV4dCh0aGlzLCAnd2hlcmUnKTtcblxuICB2b2lkIHZhbDsgLy8gZXNsaW50XG4gIGNvbnN0IG1xID0gbmV3IHRoaXMuUXVlcnkoe30sIHt9LCB0aGlzLCB0aGlzLiRfX2NvbGxlY3Rpb24pLmZpbmQoe30pO1xuICByZXR1cm4gbXEud2hlcmUuYXBwbHkobXEsIGFyZ3VtZW50cyk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgUXVlcnlgIGFuZCBzcGVjaWZpZXMgYSBgJHdoZXJlYCBjb25kaXRpb24uXG4gKlxuICogU29tZXRpbWVzIHlvdSBuZWVkIHRvIHF1ZXJ5IGZvciB0aGluZ3MgaW4gbW9uZ29kYiB1c2luZyBhIEphdmFTY3JpcHQgZXhwcmVzc2lvbi4gWW91IGNhbiBkbyBzbyB2aWEgYGZpbmQoeyAkd2hlcmU6IGphdmFzY3JpcHQgfSlgLCBvciB5b3UgY2FuIHVzZSB0aGUgbW9uZ29vc2Ugc2hvcnRjdXQgbWV0aG9kICR3aGVyZSB2aWEgYSBRdWVyeSBjaGFpbiBvciBmcm9tIHlvdXIgbW9uZ29vc2UgTW9kZWwuXG4gKlxuICogICAgIEJsb2cuJHdoZXJlKCd0aGlzLnVzZXJuYW1lLmluZGV4T2YoXCJ2YWxcIikgIT09IC0xJykuZXhlYyhmdW5jdGlvbiAoZXJyLCBkb2NzKSB7fSk7XG4gKlxuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IGFyZ3VtZW50IGlzIGEgamF2YXNjcmlwdCBzdHJpbmcgb3IgYW5vbnltb3VzIGZ1bmN0aW9uXG4gKiBAbWV0aG9kICR3aGVyZVxuICogQG1lbWJlck9mIE1vZGVsXG4gKiBAcmV0dXJuIHtRdWVyeX1cbiAqIEBzZWUgUXVlcnkuJHdoZXJlIGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9hcGkvcXVlcnkuaHRtbCNRdWVyeS5wcm90b3R5cGUuJHdoZXJlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1vZGVsLiR3aGVyZSA9IGZ1bmN0aW9uICR3aGVyZSgpIHtcbiAgX2NoZWNrQ29udGV4dCh0aGlzLCAnJHdoZXJlJyk7XG5cbiAgY29uc3QgbXEgPSBuZXcgdGhpcy5RdWVyeSh7fSwge30sIHRoaXMsIHRoaXMuJF9fY29sbGVjdGlvbikuZmluZCh7fSk7XG4gIHJldHVybiBtcS4kd2hlcmUuYXBwbHkobXEsIGFyZ3VtZW50cyk7XG59O1xuXG4vKipcbiAqIElzc3VlcyBhIG1vbmdvZGIgZmluZE9uZUFuZFVwZGF0ZSBjb21tYW5kLlxuICpcbiAqIEZpbmRzIGEgbWF0Y2hpbmcgZG9jdW1lbnQsIHVwZGF0ZXMgaXQgYWNjb3JkaW5nIHRvIHRoZSBgdXBkYXRlYCBhcmcsIHBhc3NpbmcgYW55IGBvcHRpb25zYCwgYW5kIHJldHVybnMgdGhlIGZvdW5kIGRvY3VtZW50IChpZiBhbnkpIHRvIHRoZSBjYWxsYmFjay4gVGhlIHF1ZXJ5IGV4ZWN1dGVzIGlmIGBjYWxsYmFja2AgaXMgcGFzc2VkIGVsc2UgYSBRdWVyeSBvYmplY3QgaXMgcmV0dXJuZWQuXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBBLmZpbmRPbmVBbmRVcGRhdGUoY29uZGl0aW9ucywgdXBkYXRlLCBvcHRpb25zKSAgLy8gcmV0dXJucyBRdWVyeVxuICogICAgIEEuZmluZE9uZUFuZFVwZGF0ZShjb25kaXRpb25zLCB1cGRhdGUpICAgICAgICAgICAvLyByZXR1cm5zIFF1ZXJ5XG4gKiAgICAgQS5maW5kT25lQW5kVXBkYXRlKCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJldHVybnMgUXVlcnlcbiAqXG4gKiAjIyMjIE5vdGU6XG4gKlxuICogQWxsIHRvcCBsZXZlbCB1cGRhdGUga2V5cyB3aGljaCBhcmUgbm90IGBhdG9taWNgIG9wZXJhdGlvbiBuYW1lcyBhcmUgdHJlYXRlZCBhcyBzZXQgb3BlcmF0aW9uczpcbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKlxuICogICAgIGNvbnN0IHF1ZXJ5ID0geyBuYW1lOiAnYm9ybmUnIH07XG4gKiAgICAgTW9kZWwuZmluZE9uZUFuZFVwZGF0ZShxdWVyeSwgeyBuYW1lOiAnamFzb24gYm91cm5lJyB9LCBvcHRpb25zKVxuICpcbiAqICAgICAvLyBpcyBzZW50IGFzXG4gKiAgICAgTW9kZWwuZmluZE9uZUFuZFVwZGF0ZShxdWVyeSwgeyAkc2V0OiB7IG5hbWU6ICdqYXNvbiBib3VybmUnIH19LCBvcHRpb25zKVxuICpcbiAqICMjIyMgTm90ZTpcbiAqXG4gKiBgZmluZE9uZUFuZFhgIGFuZCBgZmluZEJ5SWRBbmRYYCBmdW5jdGlvbnMgc3VwcG9ydCBsaW1pdGVkIHZhbGlkYXRpb24gdGhhdFxuICogeW91IGNhbiBlbmFibGUgYnkgc2V0dGluZyB0aGUgYHJ1blZhbGlkYXRvcnNgIG9wdGlvbi5cbiAqXG4gKiBJZiB5b3UgbmVlZCBmdWxsLWZsZWRnZWQgdmFsaWRhdGlvbiwgdXNlIHRoZSB0cmFkaXRpb25hbCBhcHByb2FjaCBvZiBmaXJzdFxuICogcmV0cmlldmluZyB0aGUgZG9jdW1lbnQuXG4gKlxuICogICAgIGNvbnN0IGRvYyA9IGF3YWl0IE1vZGVsLmZpbmRCeUlkKGlkKTtcbiAqICAgICBkb2MubmFtZSA9ICdqYXNvbiBib3VybmUnO1xuICogICAgIGF3YWl0IGRvYy5zYXZlKCk7XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IFtjb25kaXRpb25zXVxuICogQHBhcmFtIHtPYmplY3R9IFt1cGRhdGVdXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIG9wdGlvbmFsIHNlZSBbYFF1ZXJ5LnByb3RvdHlwZS5zZXRPcHRpb25zKClgXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvYXBpL3F1ZXJ5Lmh0bWwjUXVlcnkucHJvdG90eXBlLnNldE9wdGlvbnMoKSlcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5yZXR1cm5Eb2N1bWVudD0nYmVmb3JlJ10gSGFzIHR3byBwb3NzaWJsZSB2YWx1ZXMsIGAnYmVmb3JlJ2AgYW5kIGAnYWZ0ZXInYC4gQnkgZGVmYXVsdCwgaXQgd2lsbCByZXR1cm4gdGhlIGRvY3VtZW50IGJlZm9yZSB0aGUgdXBkYXRlIHdhcyBhcHBsaWVkLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmxlYW5dIGlmIHRydXRoeSwgbW9uZ29vc2Ugd2lsbCByZXR1cm4gdGhlIGRvY3VtZW50IGFzIGEgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3QgcmF0aGVyIHRoYW4gYSBtb25nb29zZSBkb2N1bWVudC4gU2VlIFtgUXVlcnkubGVhbigpYF0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2FwaS9xdWVyeS5odG1sI1F1ZXJ5LnByb3RvdHlwZS5sZWFuKCkpIGFuZCBbdGhlIE1vbmdvb3NlIGxlYW4gdHV0b3JpYWxdKGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy90dXRvcmlhbHMvbGVhbi5odG1sKS5cbiAqIEBwYXJhbSB7Q2xpZW50U2Vzc2lvbn0gW29wdGlvbnMuc2Vzc2lvbj1udWxsXSBUaGUgc2Vzc2lvbiBhc3NvY2lhdGVkIHdpdGggdGhpcyBxdWVyeS4gU2VlIFt0cmFuc2FjdGlvbnMgZG9jc10oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL3RyYW5zYWN0aW9ucy5odG1sKS5cbiAqIEBwYXJhbSB7Qm9vbGVhbnxTdHJpbmd9IFtvcHRpb25zLnN0cmljdF0gb3ZlcndyaXRlcyB0aGUgc2NoZW1hJ3MgW3N0cmljdCBtb2RlIG9wdGlvbl0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2d1aWRlLmh0bWwjc3RyaWN0KVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy50aW1lc3RhbXBzPW51bGxdIElmIHNldCB0byBgZmFsc2VgIGFuZCBbc2NoZW1hLWxldmVsIHRpbWVzdGFtcHNdKGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9ndWlkZS5odG1sI3RpbWVzdGFtcHMpIGFyZSBlbmFibGVkLCBza2lwIHRpbWVzdGFtcHMgZm9yIHRoaXMgdXBkYXRlLiBOb3RlIHRoYXQgdGhpcyBhbGxvd3MgeW91IHRvIG92ZXJ3cml0ZSB0aW1lc3RhbXBzLiBEb2VzIG5vdGhpbmcgaWYgc2NoZW1hLWxldmVsIHRpbWVzdGFtcHMgYXJlIG5vdCBzZXQuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVwc2VydD1mYWxzZV0gaWYgdHJ1ZSwgYW5kIG5vIGRvY3VtZW50cyBmb3VuZCwgaW5zZXJ0IGEgbmV3IGRvY3VtZW50XG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd8U3RyaW5nW119IFtvcHRpb25zLnByb2plY3Rpb249bnVsbF0gb3B0aW9uYWwgZmllbGRzIHRvIHJldHVybiwgc2VlIFtgUXVlcnkucHJvdG90eXBlLnNlbGVjdCgpYF0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2FwaS9xdWVyeS5odG1sI1F1ZXJ5LnByb3RvdHlwZS5zZWxlY3QoKSlcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMubmV3PWZhbHNlXSBpZiB0cnVlLCByZXR1cm4gdGhlIG1vZGlmaWVkIGRvY3VtZW50IHJhdGhlciB0aGFuIHRoZSBvcmlnaW5hbFxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBbb3B0aW9ucy5maWVsZHNdIEZpZWxkIHNlbGVjdGlvbi4gRXF1aXZhbGVudCB0byBgLnNlbGVjdChmaWVsZHMpLmZpbmRPbmVBbmRVcGRhdGUoKWBcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5tYXhUaW1lTVNdIHB1dHMgYSB0aW1lIGxpbWl0IG9uIHRoZSBxdWVyeSAtIHJlcXVpcmVzIG1vbmdvZGIgPj0gMi42LjBcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gW29wdGlvbnMuc29ydF0gaWYgbXVsdGlwbGUgZG9jcyBhcmUgZm91bmQgYnkgdGhlIGNvbmRpdGlvbnMsIHNldHMgdGhlIHNvcnQgb3JkZXIgdG8gY2hvb3NlIHdoaWNoIGRvYyB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnJ1blZhbGlkYXRvcnNdIGlmIHRydWUsIHJ1bnMgW3VwZGF0ZSB2YWxpZGF0b3JzXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvdmFsaWRhdGlvbi5odG1sI3VwZGF0ZS12YWxpZGF0b3JzKSBvbiB0aGlzIGNvbW1hbmQuIFVwZGF0ZSB2YWxpZGF0b3JzIHZhbGlkYXRlIHRoZSB1cGRhdGUgb3BlcmF0aW9uIGFnYWluc3QgdGhlIG1vZGVsJ3Mgc2NoZW1hXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnNldERlZmF1bHRzT25JbnNlcnQ9dHJ1ZV0gSWYgYHNldERlZmF1bHRzT25JbnNlcnRgIGFuZCBgdXBzZXJ0YCBhcmUgdHJ1ZSwgbW9uZ29vc2Ugd2lsbCBhcHBseSB0aGUgW2RlZmF1bHRzXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvZGVmYXVsdHMuaHRtbCkgc3BlY2lmaWVkIGluIHRoZSBtb2RlbCdzIHNjaGVtYSBpZiBhIG5ldyBkb2N1bWVudCBpcyBjcmVhdGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmluY2x1ZGVSZXN1bHRNZXRhZGF0YV0gaWYgdHJ1ZSwgcmV0dXJucyB0aGUgW3JhdyByZXN1bHQgZnJvbSB0aGUgTW9uZ29EQiBkcml2ZXJdKGh0dHBzOi8vbW9uZ29kYi5naXRodWIuaW8vbm9kZS1tb25nb2RiLW5hdGl2ZS80LjkvaW50ZXJmYWNlcy9Nb2RpZnlSZXN1bHQuaHRtbClcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudHJhbnNsYXRlQWxpYXNlcz1udWxsXSBJZiBzZXQgdG8gYHRydWVgLCB0cmFuc2xhdGVzIGFueSBzY2hlbWEtZGVmaW5lZCBhbGlhc2VzIGluIGBmaWx0ZXJgLCBgcHJvamVjdGlvbmAsIGB1cGRhdGVgLCBhbmQgYGRpc3RpbmN0YC4gVGhyb3dzIGFuIGVycm9yIGlmIHRoZXJlIGFyZSBhbnkgY29uZmxpY3RzIHdoZXJlIGJvdGggYWxpYXMgYW5kIHJhdyBwcm9wZXJ0eSBhcmUgZGVmaW5lZCBvbiB0aGUgc2FtZSBvYmplY3QuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm92ZXJ3cml0ZURpc2NyaW1pbmF0b3JLZXk9ZmFsc2VdIE1vbmdvb3NlIHJlbW92ZXMgZGlzY3JpbWluYXRvciBrZXkgdXBkYXRlcyBmcm9tIGB1cGRhdGVgIGJ5IGRlZmF1bHQsIHNldCBgb3ZlcndyaXRlRGlzY3JpbWluYXRvcktleWAgdG8gYHRydWVgIHRvIGFsbG93IHVwZGF0aW5nIHRoZSBkaXNjcmltaW5hdG9yIGtleVxuICogQHJldHVybiB7UXVlcnl9XG4gKiBAc2VlIFR1dG9yaWFsIGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy90dXRvcmlhbHMvZmluZG9uZWFuZHVwZGF0ZS5odG1sXG4gKiBAc2VlIG1vbmdvZGIgaHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZG9jcy9tYW51YWwvcmVmZXJlbmNlL2NvbW1hbmQvZmluZEFuZE1vZGlmeS9cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTW9kZWwuZmluZE9uZUFuZFVwZGF0ZSA9IGZ1bmN0aW9uKGNvbmRpdGlvbnMsIHVwZGF0ZSwgb3B0aW9ucykge1xuICBfY2hlY2tDb250ZXh0KHRoaXMsICdmaW5kT25lQW5kVXBkYXRlJyk7XG4gIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBhcmd1bWVudHNbMV0gPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGFyZ3VtZW50c1syXSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgYXJndW1lbnRzWzNdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IE1vbmdvb3NlRXJyb3IoJ01vZGVsLmZpbmRPbmVBbmRVcGRhdGUoKSBubyBsb25nZXIgYWNjZXB0cyBhIGNhbGxiYWNrJyk7XG4gIH1cblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIHVwZGF0ZSA9IGNvbmRpdGlvbnM7XG4gICAgY29uZGl0aW9ucyA9IG51bGw7XG4gICAgb3B0aW9ucyA9IG51bGw7XG4gIH1cblxuICBsZXQgZmllbGRzO1xuICBpZiAob3B0aW9ucykge1xuICAgIGZpZWxkcyA9IG9wdGlvbnMuZmllbGRzIHx8IG9wdGlvbnMucHJvamVjdGlvbjtcbiAgfVxuXG4gIHVwZGF0ZSA9IGNsb25lKHVwZGF0ZSwge1xuICAgIGRlcG9wdWxhdGU6IHRydWUsXG4gICAgX2lzTmVzdGVkOiB0cnVlXG4gIH0pO1xuXG4gIGRlY29yYXRlVXBkYXRlV2l0aFZlcnNpb25LZXkodXBkYXRlLCBvcHRpb25zLCB0aGlzLnNjaGVtYS5vcHRpb25zLnZlcnNpb25LZXkpO1xuXG4gIGNvbnN0IG1xID0gbmV3IHRoaXMuUXVlcnkoe30sIHt9LCB0aGlzLCB0aGlzLiRfX2NvbGxlY3Rpb24pO1xuICBtcS5zZWxlY3QoZmllbGRzKTtcblxuICByZXR1cm4gbXEuZmluZE9uZUFuZFVwZGF0ZShjb25kaXRpb25zLCB1cGRhdGUsIG9wdGlvbnMpO1xufTtcblxuLyoqXG4gKiBJc3N1ZXMgYSBtb25nb2RiIGZpbmRPbmVBbmRVcGRhdGUgY29tbWFuZCBieSBhIGRvY3VtZW50J3MgX2lkIGZpZWxkLlxuICogYGZpbmRCeUlkQW5kVXBkYXRlKGlkLCAuLi4pYCBpcyBlcXVpdmFsZW50IHRvIGBmaW5kT25lQW5kVXBkYXRlKHsgX2lkOiBpZCB9LCAuLi4pYC5cbiAqXG4gKiBGaW5kcyBhIG1hdGNoaW5nIGRvY3VtZW50LCB1cGRhdGVzIGl0IGFjY29yZGluZyB0byB0aGUgYHVwZGF0ZWAgYXJnLFxuICogcGFzc2luZyBhbnkgYG9wdGlvbnNgLCBhbmQgcmV0dXJucyB0aGUgZm91bmQgZG9jdW1lbnQgKGlmIGFueSkuXG4gKlxuICogVGhpcyBmdW5jdGlvbiB0cmlnZ2VycyB0aGUgZm9sbG93aW5nIG1pZGRsZXdhcmUuXG4gKlxuICogLSBgZmluZE9uZUFuZFVwZGF0ZSgpYFxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgQS5maW5kQnlJZEFuZFVwZGF0ZShpZCwgdXBkYXRlLCBvcHRpb25zKSAgLy8gcmV0dXJucyBRdWVyeVxuICogICAgIEEuZmluZEJ5SWRBbmRVcGRhdGUoaWQsIHVwZGF0ZSkgICAgICAgICAgIC8vIHJldHVybnMgUXVlcnlcbiAqICAgICBBLmZpbmRCeUlkQW5kVXBkYXRlKCkgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm5zIFF1ZXJ5XG4gKlxuICogIyMjIyBOb3RlOlxuICpcbiAqIEFsbCB0b3AgbGV2ZWwgdXBkYXRlIGtleXMgd2hpY2ggYXJlIG5vdCBgYXRvbWljYCBvcGVyYXRpb24gbmFtZXMgYXJlIHRyZWF0ZWQgYXMgc2V0IG9wZXJhdGlvbnM6XG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBNb2RlbC5maW5kQnlJZEFuZFVwZGF0ZShpZCwgeyBuYW1lOiAnamFzb24gYm91cm5lJyB9LCBvcHRpb25zKVxuICpcbiAqICAgICAvLyBpcyBzZW50IGFzXG4gKiAgICAgTW9kZWwuZmluZEJ5SWRBbmRVcGRhdGUoaWQsIHsgJHNldDogeyBuYW1lOiAnamFzb24gYm91cm5lJyB9fSwgb3B0aW9ucylcbiAqXG4gKiAjIyMjIE5vdGU6XG4gKlxuICogYGZpbmRPbmVBbmRYYCBhbmQgYGZpbmRCeUlkQW5kWGAgZnVuY3Rpb25zIHN1cHBvcnQgbGltaXRlZCB2YWxpZGF0aW9uLiBZb3UgY2FuXG4gKiBlbmFibGUgdmFsaWRhdGlvbiBieSBzZXR0aW5nIHRoZSBgcnVuVmFsaWRhdG9yc2Agb3B0aW9uLlxuICpcbiAqIElmIHlvdSBuZWVkIGZ1bGwtZmxlZGdlZCB2YWxpZGF0aW9uLCB1c2UgdGhlIHRyYWRpdGlvbmFsIGFwcHJvYWNoIG9mIGZpcnN0XG4gKiByZXRyaWV2aW5nIHRoZSBkb2N1bWVudC5cbiAqXG4gKiAgICAgY29uc3QgZG9jID0gYXdhaXQgTW9kZWwuZmluZEJ5SWQoaWQpXG4gKiAgICAgZG9jLm5hbWUgPSAnamFzb24gYm91cm5lJztcbiAqICAgICBhd2FpdCBkb2Muc2F2ZSgpO1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fE51bWJlcnxTdHJpbmd9IGlkIHZhbHVlIG9mIGBfaWRgIHRvIHF1ZXJ5IGJ5XG4gKiBAcGFyYW0ge09iamVjdH0gW3VwZGF0ZV1cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gb3B0aW9uYWwgc2VlIFtgUXVlcnkucHJvdG90eXBlLnNldE9wdGlvbnMoKWBdKGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9hcGkvcXVlcnkuaHRtbCNRdWVyeS5wcm90b3R5cGUuc2V0T3B0aW9ucygpKVxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLnJldHVybkRvY3VtZW50PSdiZWZvcmUnXSBIYXMgdHdvIHBvc3NpYmxlIHZhbHVlcywgYCdiZWZvcmUnYCBhbmQgYCdhZnRlcidgLiBCeSBkZWZhdWx0LCBpdCB3aWxsIHJldHVybiB0aGUgZG9jdW1lbnQgYmVmb3JlIHRoZSB1cGRhdGUgd2FzIGFwcGxpZWQuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMubGVhbl0gaWYgdHJ1dGh5LCBtb25nb29zZSB3aWxsIHJldHVybiB0aGUgZG9jdW1lbnQgYXMgYSBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdCByYXRoZXIgdGhhbiBhIG1vbmdvb3NlIGRvY3VtZW50LiBTZWUgW2BRdWVyeS5sZWFuKClgXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvYXBpL3F1ZXJ5Lmh0bWwjUXVlcnkucHJvdG90eXBlLmxlYW4oKSkgYW5kIFt0aGUgTW9uZ29vc2UgbGVhbiB0dXRvcmlhbF0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL3R1dG9yaWFscy9sZWFuLmh0bWwpLlxuICogQHBhcmFtIHtDbGllbnRTZXNzaW9ufSBbb3B0aW9ucy5zZXNzaW9uPW51bGxdIFRoZSBzZXNzaW9uIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHF1ZXJ5LiBTZWUgW3RyYW5zYWN0aW9ucyBkb2NzXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvdHJhbnNhY3Rpb25zLmh0bWwpLlxuICogQHBhcmFtIHtCb29sZWFufFN0cmluZ30gW29wdGlvbnMuc3RyaWN0XSBvdmVyd3JpdGVzIHRoZSBzY2hlbWEncyBbc3RyaWN0IG1vZGUgb3B0aW9uXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvZ3VpZGUuaHRtbCNzdHJpY3QpXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnRpbWVzdGFtcHM9bnVsbF0gSWYgc2V0IHRvIGBmYWxzZWAgYW5kIFtzY2hlbWEtbGV2ZWwgdGltZXN0YW1wc10oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2d1aWRlLmh0bWwjdGltZXN0YW1wcykgYXJlIGVuYWJsZWQsIHNraXAgdGltZXN0YW1wcyBmb3IgdGhpcyB1cGRhdGUuIE5vdGUgdGhhdCB0aGlzIGFsbG93cyB5b3UgdG8gb3ZlcndyaXRlIHRpbWVzdGFtcHMuIERvZXMgbm90aGluZyBpZiBzY2hlbWEtbGV2ZWwgdGltZXN0YW1wcyBhcmUgbm90IHNldC5cbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gW29wdGlvbnMuc29ydF0gaWYgbXVsdGlwbGUgZG9jcyBhcmUgZm91bmQgYnkgdGhlIGNvbmRpdGlvbnMsIHNldHMgdGhlIHNvcnQgb3JkZXIgdG8gY2hvb3NlIHdoaWNoIGRvYyB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnJ1blZhbGlkYXRvcnNdIGlmIHRydWUsIHJ1bnMgW3VwZGF0ZSB2YWxpZGF0b3JzXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvdmFsaWRhdGlvbi5odG1sI3VwZGF0ZS12YWxpZGF0b3JzKSBvbiB0aGlzIGNvbW1hbmQuIFVwZGF0ZSB2YWxpZGF0b3JzIHZhbGlkYXRlIHRoZSB1cGRhdGUgb3BlcmF0aW9uIGFnYWluc3QgdGhlIG1vZGVsJ3Mgc2NoZW1hXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnNldERlZmF1bHRzT25JbnNlcnQ9dHJ1ZV0gSWYgYHNldERlZmF1bHRzT25JbnNlcnRgIGFuZCBgdXBzZXJ0YCBhcmUgdHJ1ZSwgbW9uZ29vc2Ugd2lsbCBhcHBseSB0aGUgW2RlZmF1bHRzXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvZGVmYXVsdHMuaHRtbCkgc3BlY2lmaWVkIGluIHRoZSBtb2RlbCdzIHNjaGVtYSBpZiBhIG5ldyBkb2N1bWVudCBpcyBjcmVhdGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmluY2x1ZGVSZXN1bHRNZXRhZGF0YV0gaWYgdHJ1ZSwgcmV0dXJucyB0aGUgZnVsbCBbTW9kaWZ5UmVzdWx0IGZyb20gdGhlIE1vbmdvREIgZHJpdmVyXShodHRwczovL21vbmdvZGIuZ2l0aHViLmlvL25vZGUtbW9uZ29kYi1uYXRpdmUvNC45L2ludGVyZmFjZXMvTW9kaWZ5UmVzdWx0Lmh0bWwpIHJhdGhlciB0aGFuIGp1c3QgdGhlIGRvY3VtZW50XG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVwc2VydD1mYWxzZV0gaWYgdHJ1ZSwgYW5kIG5vIGRvY3VtZW50cyBmb3VuZCwgaW5zZXJ0IGEgbmV3IGRvY3VtZW50XG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm5ldz1mYWxzZV0gaWYgdHJ1ZSwgcmV0dXJuIHRoZSBtb2RpZmllZCBkb2N1bWVudCByYXRoZXIgdGhhbiB0aGUgb3JpZ2luYWxcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gW29wdGlvbnMuc2VsZWN0XSBzZXRzIHRoZSBkb2N1bWVudCBmaWVsZHMgdG8gcmV0dXJuLlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy50cmFuc2xhdGVBbGlhc2VzPW51bGxdIElmIHNldCB0byBgdHJ1ZWAsIHRyYW5zbGF0ZXMgYW55IHNjaGVtYS1kZWZpbmVkIGFsaWFzZXMgaW4gYGZpbHRlcmAsIGBwcm9qZWN0aW9uYCwgYHVwZGF0ZWAsIGFuZCBgZGlzdGluY3RgLiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlcmUgYXJlIGFueSBjb25mbGljdHMgd2hlcmUgYm90aCBhbGlhcyBhbmQgcmF3IHByb3BlcnR5IGFyZSBkZWZpbmVkIG9uIHRoZSBzYW1lIG9iamVjdC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMub3ZlcndyaXRlRGlzY3JpbWluYXRvcktleT1mYWxzZV0gTW9uZ29vc2UgcmVtb3ZlcyBkaXNjcmltaW5hdG9yIGtleSB1cGRhdGVzIGZyb20gYHVwZGF0ZWAgYnkgZGVmYXVsdCwgc2V0IGBvdmVyd3JpdGVEaXNjcmltaW5hdG9yS2V5YCB0byBgdHJ1ZWAgdG8gYWxsb3cgdXBkYXRpbmcgdGhlIGRpc2NyaW1pbmF0b3Iga2V5XG4gKiBAcmV0dXJuIHtRdWVyeX1cbiAqIEBzZWUgTW9kZWwuZmluZE9uZUFuZFVwZGF0ZSBodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvYXBpL21vZGVsLmh0bWwjTW9kZWwuZmluZE9uZUFuZFVwZGF0ZSgpXG4gKiBAc2VlIG1vbmdvZGIgaHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZG9jcy9tYW51YWwvcmVmZXJlbmNlL2NvbW1hbmQvZmluZEFuZE1vZGlmeS9cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTW9kZWwuZmluZEJ5SWRBbmRVcGRhdGUgPSBmdW5jdGlvbihpZCwgdXBkYXRlLCBvcHRpb25zKSB7XG4gIF9jaGVja0NvbnRleHQodGhpcywgJ2ZpbmRCeUlkQW5kVXBkYXRlJyk7XG4gIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBhcmd1bWVudHNbMV0gPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGFyZ3VtZW50c1syXSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgYXJndW1lbnRzWzNdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IE1vbmdvb3NlRXJyb3IoJ01vZGVsLmZpbmRCeUlkQW5kVXBkYXRlKCkgbm8gbG9uZ2VyIGFjY2VwdHMgYSBjYWxsYmFjaycpO1xuICB9XG5cbiAgLy8gaWYgYSBtb2RlbCBpcyBwYXNzZWQgaW4gaW5zdGVhZCBvZiBhbiBpZFxuICBpZiAoaWQgaW5zdGFuY2VvZiBEb2N1bWVudCkge1xuICAgIGlkID0gaWQuX2lkO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZmluZE9uZUFuZFVwZGF0ZS5jYWxsKHRoaXMsIHsgX2lkOiBpZCB9LCB1cGRhdGUsIG9wdGlvbnMpO1xufTtcblxuLyoqXG4gKiBJc3N1ZSBhIE1vbmdvREIgYGZpbmRPbmVBbmREZWxldGUoKWAgY29tbWFuZC5cbiAqXG4gKiBGaW5kcyBhIG1hdGNoaW5nIGRvY3VtZW50LCByZW1vdmVzIGl0LCBhbmQgcmV0dXJucyB0aGUgZm91bmQgZG9jdW1lbnQgKGlmIGFueSkuXG4gKlxuICogVGhpcyBmdW5jdGlvbiB0cmlnZ2VycyB0aGUgZm9sbG93aW5nIG1pZGRsZXdhcmUuXG4gKlxuICogLSBgZmluZE9uZUFuZERlbGV0ZSgpYFxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgQS5maW5kT25lQW5kRGVsZXRlKGNvbmRpdGlvbnMsIG9wdGlvbnMpICAvLyByZXR1cm4gUXVlcnlcbiAqICAgICBBLmZpbmRPbmVBbmREZWxldGUoY29uZGl0aW9ucykgLy8gcmV0dXJucyBRdWVyeVxuICogICAgIEEuZmluZE9uZUFuZERlbGV0ZSgpICAgICAgICAgICAvLyByZXR1cm5zIFF1ZXJ5XG4gKlxuICogYGZpbmRPbmVBbmRYYCBhbmQgYGZpbmRCeUlkQW5kWGAgZnVuY3Rpb25zIHN1cHBvcnQgbGltaXRlZCB2YWxpZGF0aW9uLiBZb3UgY2FuXG4gKiBlbmFibGUgdmFsaWRhdGlvbiBieSBzZXR0aW5nIHRoZSBgcnVuVmFsaWRhdG9yc2Agb3B0aW9uLlxuICpcbiAqIElmIHlvdSBuZWVkIGZ1bGwtZmxlZGdlZCB2YWxpZGF0aW9uLCB1c2UgdGhlIHRyYWRpdGlvbmFsIGFwcHJvYWNoIG9mIGZpcnN0XG4gKiByZXRyaWV2aW5nIHRoZSBkb2N1bWVudC5cbiAqXG4gKiAgICAgY29uc3QgZG9jID0gYXdhaXQgTW9kZWwuZmluZEJ5SWQoaWQpXG4gKiAgICAgZG9jLm5hbWUgPSAnamFzb24gYm91cm5lJztcbiAqICAgICBhd2FpdCBkb2Muc2F2ZSgpO1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25kaXRpb25zXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIG9wdGlvbmFsIHNlZSBbYFF1ZXJ5LnByb3RvdHlwZS5zZXRPcHRpb25zKClgXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvYXBpL3F1ZXJ5Lmh0bWwjUXVlcnkucHJvdG90eXBlLnNldE9wdGlvbnMoKSlcbiAqIEBwYXJhbSB7Qm9vbGVhbnxTdHJpbmd9IFtvcHRpb25zLnN0cmljdF0gb3ZlcndyaXRlcyB0aGUgc2NoZW1hJ3MgW3N0cmljdCBtb2RlIG9wdGlvbl0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2d1aWRlLmh0bWwjc3RyaWN0KVxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfFN0cmluZ1tdfSBbb3B0aW9ucy5wcm9qZWN0aW9uPW51bGxdIG9wdGlvbmFsIGZpZWxkcyB0byByZXR1cm4sIHNlZSBbYFF1ZXJ5LnByb3RvdHlwZS5zZWxlY3QoKWBdKGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9hcGkvcXVlcnkuaHRtbCNRdWVyeS5wcm90b3R5cGUuc2VsZWN0KCkpXG4gKiBAcGFyYW0ge0NsaWVudFNlc3Npb259IFtvcHRpb25zLnNlc3Npb249bnVsbF0gVGhlIHNlc3Npb24gYXNzb2NpYXRlZCB3aXRoIHRoaXMgcXVlcnkuIFNlZSBbdHJhbnNhY3Rpb25zIGRvY3NdKGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy90cmFuc2FjdGlvbnMuaHRtbCkuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmluY2x1ZGVSZXN1bHRNZXRhZGF0YV0gaWYgdHJ1ZSwgcmV0dXJucyB0aGUgZnVsbCBbTW9kaWZ5UmVzdWx0IGZyb20gdGhlIE1vbmdvREIgZHJpdmVyXShodHRwczovL21vbmdvZGIuZ2l0aHViLmlvL25vZGUtbW9uZ29kYi1uYXRpdmUvNC45L2ludGVyZmFjZXMvTW9kaWZ5UmVzdWx0Lmh0bWwpIHJhdGhlciB0aGFuIGp1c3QgdGhlIGRvY3VtZW50XG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IFtvcHRpb25zLnNvcnRdIGlmIG11bHRpcGxlIGRvY3MgYXJlIGZvdW5kIGJ5IHRoZSBjb25kaXRpb25zLCBzZXRzIHRoZSBzb3J0IG9yZGVyIHRvIGNob29zZSB3aGljaCBkb2MgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBbb3B0aW9ucy5zZWxlY3RdIHNldHMgdGhlIGRvY3VtZW50IGZpZWxkcyB0byByZXR1cm4uXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMubWF4VGltZU1TXSBwdXRzIGEgdGltZSBsaW1pdCBvbiB0aGUgcXVlcnkgLSByZXF1aXJlcyBtb25nb2RiID49IDIuNi4wXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnRyYW5zbGF0ZUFsaWFzZXM9bnVsbF0gSWYgc2V0IHRvIGB0cnVlYCwgdHJhbnNsYXRlcyBhbnkgc2NoZW1hLWRlZmluZWQgYWxpYXNlcyBpbiBgZmlsdGVyYCwgYHByb2plY3Rpb25gLCBgdXBkYXRlYCwgYW5kIGBkaXN0aW5jdGAuIFRocm93cyBhbiBlcnJvciBpZiB0aGVyZSBhcmUgYW55IGNvbmZsaWN0cyB3aGVyZSBib3RoIGFsaWFzIGFuZCByYXcgcHJvcGVydHkgYXJlIGRlZmluZWQgb24gdGhlIHNhbWUgb2JqZWN0LlxuICogQHJldHVybiB7UXVlcnl9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1vZGVsLmZpbmRPbmVBbmREZWxldGUgPSBmdW5jdGlvbihjb25kaXRpb25zLCBvcHRpb25zKSB7XG4gIF9jaGVja0NvbnRleHQodGhpcywgJ2ZpbmRPbmVBbmREZWxldGUnKTtcblxuICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgYXJndW1lbnRzWzFdID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBhcmd1bWVudHNbMl0gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgTW9uZ29vc2VFcnJvcignTW9kZWwuZmluZE9uZUFuZERlbGV0ZSgpIG5vIGxvbmdlciBhY2NlcHRzIGEgY2FsbGJhY2snKTtcbiAgfVxuXG4gIGxldCBmaWVsZHM7XG4gIGlmIChvcHRpb25zKSB7XG4gICAgZmllbGRzID0gb3B0aW9ucy5zZWxlY3Q7XG4gICAgb3B0aW9ucy5zZWxlY3QgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBjb25zdCBtcSA9IG5ldyB0aGlzLlF1ZXJ5KHt9LCB7fSwgdGhpcywgdGhpcy4kX19jb2xsZWN0aW9uKTtcbiAgbXEuc2VsZWN0KGZpZWxkcyk7XG5cbiAgcmV0dXJuIG1xLmZpbmRPbmVBbmREZWxldGUoY29uZGl0aW9ucywgb3B0aW9ucyk7XG59O1xuXG4vKipcbiAqIElzc3VlIGEgTW9uZ29EQiBgZmluZE9uZUFuZERlbGV0ZSgpYCBjb21tYW5kIGJ5IGEgZG9jdW1lbnQncyBfaWQgZmllbGQuXG4gKiBJbiBvdGhlciB3b3JkcywgYGZpbmRCeUlkQW5kRGVsZXRlKGlkKWAgaXMgYSBzaG9ydGhhbmQgZm9yXG4gKiBgZmluZE9uZUFuZERlbGV0ZSh7IF9pZDogaWQgfSlgLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gdHJpZ2dlcnMgdGhlIGZvbGxvd2luZyBtaWRkbGV3YXJlLlxuICpcbiAqIC0gYGZpbmRPbmVBbmREZWxldGUoKWBcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxOdW1iZXJ8U3RyaW5nfSBpZCB2YWx1ZSBvZiBgX2lkYCB0byBxdWVyeSBieVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBvcHRpb25hbCBzZWUgW2BRdWVyeS5wcm90b3R5cGUuc2V0T3B0aW9ucygpYF0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2FwaS9xdWVyeS5odG1sI1F1ZXJ5LnByb3RvdHlwZS5zZXRPcHRpb25zKCkpXG4gKiBAcGFyYW0ge0Jvb2xlYW58U3RyaW5nfSBbb3B0aW9ucy5zdHJpY3RdIG92ZXJ3cml0ZXMgdGhlIHNjaGVtYSdzIFtzdHJpY3QgbW9kZSBvcHRpb25dKGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9ndWlkZS5odG1sI3N0cmljdClcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudHJhbnNsYXRlQWxpYXNlcz1udWxsXSBJZiBzZXQgdG8gYHRydWVgLCB0cmFuc2xhdGVzIGFueSBzY2hlbWEtZGVmaW5lZCBhbGlhc2VzIGluIGBmaWx0ZXJgLCBgcHJvamVjdGlvbmAsIGB1cGRhdGVgLCBhbmQgYGRpc3RpbmN0YC4gVGhyb3dzIGFuIGVycm9yIGlmIHRoZXJlIGFyZSBhbnkgY29uZmxpY3RzIHdoZXJlIGJvdGggYWxpYXMgYW5kIHJhdyBwcm9wZXJ0eSBhcmUgZGVmaW5lZCBvbiB0aGUgc2FtZSBvYmplY3QuXG4gKiBAcmV0dXJuIHtRdWVyeX1cbiAqIEBzZWUgTW9kZWwuZmluZE9uZUFuZERlbGV0ZSBodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvYXBpL21vZGVsLmh0bWwjTW9kZWwuZmluZE9uZUFuZERlbGV0ZSgpXG4gKiBAc2VlIG1vbmdvZGIgaHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZG9jcy9tYW51YWwvcmVmZXJlbmNlL2NvbW1hbmQvZmluZEFuZE1vZGlmeS9cbiAqL1xuXG5Nb2RlbC5maW5kQnlJZEFuZERlbGV0ZSA9IGZ1bmN0aW9uKGlkLCBvcHRpb25zKSB7XG4gIF9jaGVja0NvbnRleHQodGhpcywgJ2ZpbmRCeUlkQW5kRGVsZXRlJyk7XG5cbiAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGFyZ3VtZW50c1sxXSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgYXJndW1lbnRzWzJdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IE1vbmdvb3NlRXJyb3IoJ01vZGVsLmZpbmRCeUlkQW5kRGVsZXRlKCkgbm8gbG9uZ2VyIGFjY2VwdHMgYSBjYWxsYmFjaycpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZmluZE9uZUFuZERlbGV0ZSh7IF9pZDogaWQgfSwgb3B0aW9ucyk7XG59O1xuXG4vKipcbiAqIElzc3VlIGEgTW9uZ29EQiBgZmluZE9uZUFuZFJlcGxhY2UoKWAgY29tbWFuZC5cbiAqXG4gKiBGaW5kcyBhIG1hdGNoaW5nIGRvY3VtZW50LCByZXBsYWNlcyBpdCB3aXRoIHRoZSBwcm92aWRlZCBkb2MsIGFuZCByZXR1cm5zIHRoZSBkb2N1bWVudC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHRyaWdnZXJzIHRoZSBmb2xsb3dpbmcgcXVlcnkgbWlkZGxld2FyZS5cbiAqXG4gKiAtIGBmaW5kT25lQW5kUmVwbGFjZSgpYFxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgQS5maW5kT25lQW5kUmVwbGFjZShmaWx0ZXIsIHJlcGxhY2VtZW50LCBvcHRpb25zKSAgLy8gcmV0dXJuIFF1ZXJ5XG4gKiAgICAgQS5maW5kT25lQW5kUmVwbGFjZShmaWx0ZXIsIHJlcGxhY2VtZW50KSAvLyByZXR1cm5zIFF1ZXJ5XG4gKiAgICAgQS5maW5kT25lQW5kUmVwbGFjZSgpICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm5zIFF1ZXJ5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGZpbHRlciBSZXBsYWNlIHRoZSBmaXJzdCBkb2N1bWVudCB0aGF0IG1hdGNoZXMgdGhpcyBmaWx0ZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVwbGFjZW1lbnRdIFJlcGxhY2Ugd2l0aCB0aGlzIGRvY3VtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIG9wdGlvbmFsIHNlZSBbYFF1ZXJ5LnByb3RvdHlwZS5zZXRPcHRpb25zKClgXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvYXBpL3F1ZXJ5Lmh0bWwjUXVlcnkucHJvdG90eXBlLnNldE9wdGlvbnMoKSlcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5yZXR1cm5Eb2N1bWVudD0nYmVmb3JlJ10gSGFzIHR3byBwb3NzaWJsZSB2YWx1ZXMsIGAnYmVmb3JlJ2AgYW5kIGAnYWZ0ZXInYC4gQnkgZGVmYXVsdCwgaXQgd2lsbCByZXR1cm4gdGhlIGRvY3VtZW50IGJlZm9yZSB0aGUgdXBkYXRlIHdhcyBhcHBsaWVkLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmxlYW5dIGlmIHRydXRoeSwgbW9uZ29vc2Ugd2lsbCByZXR1cm4gdGhlIGRvY3VtZW50IGFzIGEgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3QgcmF0aGVyIHRoYW4gYSBtb25nb29zZSBkb2N1bWVudC4gU2VlIFtgUXVlcnkubGVhbigpYF0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2FwaS9xdWVyeS5odG1sI1F1ZXJ5LnByb3RvdHlwZS5sZWFuKCkpIGFuZCBbdGhlIE1vbmdvb3NlIGxlYW4gdHV0b3JpYWxdKGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy90dXRvcmlhbHMvbGVhbi5odG1sKS5cbiAqIEBwYXJhbSB7Q2xpZW50U2Vzc2lvbn0gW29wdGlvbnMuc2Vzc2lvbj1udWxsXSBUaGUgc2Vzc2lvbiBhc3NvY2lhdGVkIHdpdGggdGhpcyBxdWVyeS4gU2VlIFt0cmFuc2FjdGlvbnMgZG9jc10oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL3RyYW5zYWN0aW9ucy5odG1sKS5cbiAqIEBwYXJhbSB7Qm9vbGVhbnxTdHJpbmd9IFtvcHRpb25zLnN0cmljdF0gb3ZlcndyaXRlcyB0aGUgc2NoZW1hJ3MgW3N0cmljdCBtb2RlIG9wdGlvbl0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2d1aWRlLmh0bWwjc3RyaWN0KVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy50aW1lc3RhbXBzPW51bGxdIElmIHNldCB0byBgZmFsc2VgIGFuZCBbc2NoZW1hLWxldmVsIHRpbWVzdGFtcHNdKGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9ndWlkZS5odG1sI3RpbWVzdGFtcHMpIGFyZSBlbmFibGVkLCBza2lwIHRpbWVzdGFtcHMgZm9yIHRoaXMgdXBkYXRlLiBOb3RlIHRoYXQgdGhpcyBhbGxvd3MgeW91IHRvIG92ZXJ3cml0ZSB0aW1lc3RhbXBzLiBEb2VzIG5vdGhpbmcgaWYgc2NoZW1hLWxldmVsIHRpbWVzdGFtcHMgYXJlIG5vdCBzZXQuXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd8U3RyaW5nW119IFtvcHRpb25zLnByb2plY3Rpb249bnVsbF0gb3B0aW9uYWwgZmllbGRzIHRvIHJldHVybiwgc2VlIFtgUXVlcnkucHJvdG90eXBlLnNlbGVjdCgpYF0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2FwaS9xdWVyeS5odG1sI1F1ZXJ5LnByb3RvdHlwZS5zZWxlY3QoKSlcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gW29wdGlvbnMuc29ydF0gaWYgbXVsdGlwbGUgZG9jcyBhcmUgZm91bmQgYnkgdGhlIGNvbmRpdGlvbnMsIHNldHMgdGhlIHNvcnQgb3JkZXIgdG8gY2hvb3NlIHdoaWNoIGRvYyB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmluY2x1ZGVSZXN1bHRNZXRhZGF0YV0gaWYgdHJ1ZSwgcmV0dXJucyB0aGUgZnVsbCBbTW9kaWZ5UmVzdWx0IGZyb20gdGhlIE1vbmdvREIgZHJpdmVyXShodHRwczovL21vbmdvZGIuZ2l0aHViLmlvL25vZGUtbW9uZ29kYi1uYXRpdmUvNC45L2ludGVyZmFjZXMvTW9kaWZ5UmVzdWx0Lmh0bWwpIHJhdGhlciB0aGFuIGp1c3QgdGhlIGRvY3VtZW50XG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IFtvcHRpb25zLnNlbGVjdF0gc2V0cyB0aGUgZG9jdW1lbnQgZmllbGRzIHRvIHJldHVybi5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5tYXhUaW1lTVNdIHB1dHMgYSB0aW1lIGxpbWl0IG9uIHRoZSBxdWVyeSAtIHJlcXVpcmVzIG1vbmdvZGIgPj0gMi42LjBcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudHJhbnNsYXRlQWxpYXNlcz1udWxsXSBJZiBzZXQgdG8gYHRydWVgLCB0cmFuc2xhdGVzIGFueSBzY2hlbWEtZGVmaW5lZCBhbGlhc2VzIGluIGBmaWx0ZXJgLCBgcHJvamVjdGlvbmAsIGB1cGRhdGVgLCBhbmQgYGRpc3RpbmN0YC4gVGhyb3dzIGFuIGVycm9yIGlmIHRoZXJlIGFyZSBhbnkgY29uZmxpY3RzIHdoZXJlIGJvdGggYWxpYXMgYW5kIHJhdyBwcm9wZXJ0eSBhcmUgZGVmaW5lZCBvbiB0aGUgc2FtZSBvYmplY3QuXG4gKiBAcmV0dXJuIHtRdWVyeX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTW9kZWwuZmluZE9uZUFuZFJlcGxhY2UgPSBmdW5jdGlvbihmaWx0ZXIsIHJlcGxhY2VtZW50LCBvcHRpb25zKSB7XG4gIF9jaGVja0NvbnRleHQodGhpcywgJ2ZpbmRPbmVBbmRSZXBsYWNlJyk7XG5cbiAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGFyZ3VtZW50c1sxXSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgYXJndW1lbnRzWzJdID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgTW9uZ29vc2VFcnJvcignTW9kZWwuZmluZE9uZUFuZFJlcGxhY2UoKSBubyBsb25nZXIgYWNjZXB0cyBhIGNhbGxiYWNrJyk7XG4gIH1cblxuICBsZXQgZmllbGRzO1xuICBpZiAob3B0aW9ucykge1xuICAgIGZpZWxkcyA9IG9wdGlvbnMuc2VsZWN0O1xuICAgIG9wdGlvbnMuc2VsZWN0ID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgY29uc3QgbXEgPSBuZXcgdGhpcy5RdWVyeSh7fSwge30sIHRoaXMsIHRoaXMuJF9fY29sbGVjdGlvbik7XG4gIG1xLnNlbGVjdChmaWVsZHMpO1xuXG4gIHJldHVybiBtcS5maW5kT25lQW5kUmVwbGFjZShmaWx0ZXIsIHJlcGxhY2VtZW50LCBvcHRpb25zKTtcbn07XG5cbi8qKlxuICogU2hvcnRjdXQgZm9yIHNhdmluZyBvbmUgb3IgbW9yZSBkb2N1bWVudHMgdG8gdGhlIGRhdGFiYXNlLlxuICogYE15TW9kZWwuY3JlYXRlKGRvY3MpYCBkb2VzIGBuZXcgTXlNb2RlbChkb2MpLnNhdmUoKWAgZm9yIGV2ZXJ5IGRvYyBpblxuICogZG9jcy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHRyaWdnZXJzIHRoZSBmb2xsb3dpbmcgbWlkZGxld2FyZS5cbiAqXG4gKiAtIGBzYXZlKClgXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICAvLyBJbnNlcnQgb25lIG5ldyBgQ2hhcmFjdGVyYCBkb2N1bWVudFxuICogICAgIGF3YWl0IENoYXJhY3Rlci5jcmVhdGUoeyBuYW1lOiAnSmVhbi1MdWMgUGljYXJkJyB9KTtcbiAqXG4gKiAgICAgLy8gSW5zZXJ0IG11bHRpcGxlIG5ldyBgQ2hhcmFjdGVyYCBkb2N1bWVudHNcbiAqICAgICBhd2FpdCBDaGFyYWN0ZXIuY3JlYXRlKFt7IG5hbWU6ICdXaWxsIFJpa2VyJyB9LCB7IG5hbWU6ICdHZW9yZGkgTGFGb3JnZScgfV0pO1xuICpcbiAqICAgICAvLyBDcmVhdGUgYSBuZXcgY2hhcmFjdGVyIHdpdGhpbiBhIHRyYW5zYWN0aW9uLiBOb3RlIHRoYXQgeW91ICoqbXVzdCoqXG4gKiAgICAgLy8gcGFzcyBhbiBhcnJheSBhcyB0aGUgZmlyc3QgcGFyYW1ldGVyIHRvIGBjcmVhdGUoKWAgaWYgeW91IHdhbnQgdG9cbiAqICAgICAvLyBzcGVjaWZ5IG9wdGlvbnMuXG4gKiAgICAgYXdhaXQgQ2hhcmFjdGVyLmNyZWF0ZShbeyBuYW1lOiAnSmVhbi1MdWMgUGljYXJkJyB9XSwgeyBzZXNzaW9uIH0pO1xuICpcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBkb2NzIERvY3VtZW50cyB0byBpbnNlcnQsIGFzIGEgc3ByZWFkIG9yIGFycmF5XG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgcGFzc2VkIGRvd24gdG8gYHNhdmUoKWAuIFRvIHNwZWNpZnkgYG9wdGlvbnNgLCBgZG9jc2AgKiptdXN0KiogYmUgYW4gYXJyYXksIG5vdCBhIHNwcmVhZC4gU2VlIFtNb2RlbC5zYXZlXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvYXBpL21vZGVsLmh0bWwjTW9kZWwucHJvdG90eXBlLnNhdmUoKSkgZm9yIGF2YWlsYWJsZSBvcHRpb25zLlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5vcmRlcmVkXSBzYXZlcyB0aGUgZG9jcyBpbiBzZXJpZXMgcmF0aGVyIHRoYW4gcGFyYWxsZWwuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmFnZ3JlZ2F0ZUVycm9yc10gQWdncmVnYXRlIEVycm9ycyBpbnN0ZWFkIG9mIHRocm93aW5nIHRoZSBmaXJzdCBvbmUgdGhhdCBvY2N1cnMuIERlZmF1bHQ6IGZhbHNlXG4gKiBAcmV0dXJuIHtQcm9taXNlfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Nb2RlbC5jcmVhdGUgPSBhc3luYyBmdW5jdGlvbiBjcmVhdGUoZG9jLCBvcHRpb25zKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgdHlwZW9mIGFyZ3VtZW50c1syXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBNb25nb29zZUVycm9yKCdNb2RlbC5jcmVhdGUoKSBubyBsb25nZXIgYWNjZXB0cyBhIGNhbGxiYWNrJyk7XG4gIH1cblxuICBfY2hlY2tDb250ZXh0KHRoaXMsICdjcmVhdGUnKTtcblxuICBsZXQgYXJncztcbiAgY29uc3QgZGlzY3JpbWluYXRvcktleSA9IHRoaXMuc2NoZW1hLm9wdGlvbnMuZGlzY3JpbWluYXRvcktleTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShkb2MpKSB7XG4gICAgYXJncyA9IGRvYztcbiAgICBvcHRpb25zID0gb3B0aW9ucyAhPSBudWxsICYmIHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0JyA/IG9wdGlvbnMgOiB7fTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBsYXN0ID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXTtcbiAgICBvcHRpb25zID0ge307XG4gICAgY29uc3QgaGFzQ2FsbGJhY2sgPSB0eXBlb2YgbGFzdCA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgdHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicgfHxcbiAgICAgIHR5cGVvZiBhcmd1bWVudHNbMl0gPT09ICdmdW5jdGlvbic7XG4gICAgaWYgKGhhc0NhbGxiYWNrKSB7XG4gICAgICB0aHJvdyBuZXcgTW9uZ29vc2VFcnJvcignTW9kZWwuY3JlYXRlKCkgbm8gbG9uZ2VyIGFjY2VwdHMgYSBjYWxsYmFjaycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcmdzID0gWy4uLmFyZ3VtZW50c107XG4gICAgICAvLyBGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCA2LngsIGJlY2F1c2Ugb2YgZ2gtNTA2MSBNb25nb29zZSA2LnggYW5kXG4gICAgICAvLyBvbGRlciB3b3VsZCB0cmVhdCBhIGZhbHN5IGxhc3QgYXJnIGFzIGEgY2FsbGJhY2suIFdlIGRvbid0IHdhbnQgdG8gdGhyb3dcbiAgICAgIC8vIGFuIGVycm9yIGhlcmUsIGJlY2F1c2UgaXQgd291bGQgbG9vayBzdHJhbmdlIGlmIGBUZXN0LmNyZWF0ZSh7fSwgdm9pZCAwKWBcbiAgICAgIC8vIHRocmV3IGEgY2FsbGJhY2sgZXJyb3IuIEJ1dCB3ZSBhbHNvIGRvbid0IHdhbnQgdG8gY3JlYXRlIGFuIHVubmVjZXNzYXJ5IGRvY3VtZW50LlxuICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gMSAmJiAhbGFzdCkge1xuICAgICAgICBhcmdzLnBvcCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMiAmJlxuICAgICAgICBhcmdzWzBdICE9IG51bGwgJiZcbiAgICAgICAgYXJnc1sxXSAhPSBudWxsICYmXG4gICAgICAgIGFyZ3NbMF0uc2Vzc2lvbiA9PSBudWxsICYmXG4gICAgICAgIGxhc3QgJiZcbiAgICAgICAgZ2V0Q29uc3RydWN0b3JOYW1lKGxhc3Quc2Vzc2lvbikgPT09ICdDbGllbnRTZXNzaW9uJyAmJlxuICAgICAgICAhdGhpcy5zY2hlbWEucGF0aCgnc2Vzc2lvbicpKSB7XG4gICAgICAvLyBQcm9iYWJseSBtZWFucyB0aGUgdXNlciBpcyBydW5uaW5nIGludG8gdGhlIGNvbW1vbiBtaXN0YWtlIG9mIHRyeWluZ1xuICAgICAgLy8gdG8gdXNlIGEgc3ByZWFkIHRvIHNwZWNpZnkgb3B0aW9ucywgc2VlIGdoLTc1MzVcbiAgICAgIHV0aWxzLndhcm4oJ1dBUk5JTkc6IHRvIHBhc3MgYSBgc2Vzc2lvbmAgdG8gYE1vZGVsLmNyZWF0ZSgpYCBpbiAnICtcbiAgICAgICAgJ01vbmdvb3NlLCB5b3UgKiptdXN0KiogcGFzcyBhbiBhcnJheSBhcyB0aGUgZmlyc3QgYXJndW1lbnQuIFNlZTogJyArXG4gICAgICAgICdodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvYXBpL21vZGVsLmh0bWwjTW9kZWwuY3JlYXRlKCknKTtcbiAgICB9XG4gIH1cblxuICBpZiAoYXJncy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShkb2MpID8gW10gOiBudWxsO1xuICB9XG4gIGxldCByZXMgPSBbXTtcbiAgY29uc3QgaW1tZWRpYXRlRXJyb3IgPSB0eXBlb2Ygb3B0aW9ucy5hZ2dyZWdhdGVFcnJvcnMgPT09ICdib29sZWFuJyA/ICFvcHRpb25zLmFnZ3JlZ2F0ZUVycm9ycyA6IHRydWU7XG5cbiAgZGVsZXRlIG9wdGlvbnMuYWdncmVnYXRlRXJyb3JzOyAvLyBkb250IHBhc3Mgb24gdGhlIG9wdGlvbiB0byBcIiRzYXZlXCJcblxuICBpZiAob3B0aW9ucy5vcmRlcmVkKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBkb2MgPSBhcmdzW2ldO1xuICAgICAgICBjb25zdCBNb2RlbCA9IHRoaXMuZGlzY3JpbWluYXRvcnMgJiYgZG9jW2Rpc2NyaW1pbmF0b3JLZXldICE9IG51bGwgP1xuICAgICAgICAgIHRoaXMuZGlzY3JpbWluYXRvcnNbZG9jW2Rpc2NyaW1pbmF0b3JLZXldXSB8fCBnZXREaXNjcmltaW5hdG9yQnlWYWx1ZSh0aGlzLmRpc2NyaW1pbmF0b3JzLCBkb2NbZGlzY3JpbWluYXRvcktleV0pIDpcbiAgICAgICAgICB0aGlzO1xuICAgICAgICBpZiAoTW9kZWwgPT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBNb25nb29zZUVycm9yKGBEaXNjcmltaW5hdG9yIFwiJHtkb2NbZGlzY3JpbWluYXRvcktleV19XCIgbm90IGAgK1xuICAgICAgICAgIGBmb3VuZCBmb3IgbW9kZWwgXCIke3RoaXMubW9kZWxOYW1lfVwiYCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRvU2F2ZSA9IGRvYztcbiAgICAgICAgaWYgKCEodG9TYXZlIGluc3RhbmNlb2YgTW9kZWwpKSB7XG4gICAgICAgICAgdG9TYXZlID0gbmV3IE1vZGVsKHRvU2F2ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCB0b1NhdmUuJHNhdmUob3B0aW9ucyk7XG4gICAgICAgIHJlcy5wdXNoKHRvU2F2ZSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgaWYgKCFpbW1lZGlhdGVFcnJvcikge1xuICAgICAgICAgIHJlcy5wdXNoKGVycik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH0gZWxzZSBpZiAoIWltbWVkaWF0ZUVycm9yKSB7XG4gICAgcmVzID0gYXdhaXQgUHJvbWlzZS5hbGxTZXR0bGVkKGFyZ3MubWFwKGFzeW5jIGRvYyA9PiB7XG4gICAgICBjb25zdCBNb2RlbCA9IHRoaXMuZGlzY3JpbWluYXRvcnMgJiYgZG9jW2Rpc2NyaW1pbmF0b3JLZXldICE9IG51bGwgP1xuICAgICAgICB0aGlzLmRpc2NyaW1pbmF0b3JzW2RvY1tkaXNjcmltaW5hdG9yS2V5XV0gfHwgZ2V0RGlzY3JpbWluYXRvckJ5VmFsdWUodGhpcy5kaXNjcmltaW5hdG9ycywgZG9jW2Rpc2NyaW1pbmF0b3JLZXldKSA6XG4gICAgICAgIHRoaXM7XG4gICAgICBpZiAoTW9kZWwgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgTW9uZ29vc2VFcnJvcihgRGlzY3JpbWluYXRvciBcIiR7ZG9jW2Rpc2NyaW1pbmF0b3JLZXldfVwiIG5vdCBgICtcbiAgICAgICAgICAgIGBmb3VuZCBmb3IgbW9kZWwgXCIke3RoaXMubW9kZWxOYW1lfVwiYCk7XG4gICAgICB9XG4gICAgICBsZXQgdG9TYXZlID0gZG9jO1xuXG4gICAgICBpZiAoISh0b1NhdmUgaW5zdGFuY2VvZiBNb2RlbCkpIHtcbiAgICAgICAgdG9TYXZlID0gbmV3IE1vZGVsKHRvU2F2ZSk7XG4gICAgICB9XG5cbiAgICAgIGF3YWl0IHRvU2F2ZS4kc2F2ZShvcHRpb25zKTtcblxuICAgICAgcmV0dXJuIHRvU2F2ZTtcbiAgICB9KSk7XG4gICAgcmVzID0gcmVzLm1hcChyZXN1bHQgPT4gcmVzdWx0LnN0YXR1cyA9PT0gJ2Z1bGZpbGxlZCcgPyByZXN1bHQudmFsdWUgOiByZXN1bHQucmVhc29uKTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgZmlyc3RFcnJvciA9IG51bGw7XG4gICAgcmVzID0gYXdhaXQgUHJvbWlzZS5hbGwoYXJncy5tYXAoYXN5bmMgZG9jID0+IHtcbiAgICAgIGNvbnN0IE1vZGVsID0gdGhpcy5kaXNjcmltaW5hdG9ycyAmJiBkb2NbZGlzY3JpbWluYXRvcktleV0gIT0gbnVsbCA/XG4gICAgICAgIHRoaXMuZGlzY3JpbWluYXRvcnNbZG9jW2Rpc2NyaW1pbmF0b3JLZXldXSB8fCBnZXREaXNjcmltaW5hdG9yQnlWYWx1ZSh0aGlzLmRpc2NyaW1pbmF0b3JzLCBkb2NbZGlzY3JpbWluYXRvcktleV0pIDpcbiAgICAgICAgdGhpcztcbiAgICAgIGlmIChNb2RlbCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBNb25nb29zZUVycm9yKGBEaXNjcmltaW5hdG9yIFwiJHtkb2NbZGlzY3JpbWluYXRvcktleV19XCIgbm90IGAgK1xuICAgICAgICAgICAgYGZvdW5kIGZvciBtb2RlbCBcIiR7dGhpcy5tb2RlbE5hbWV9XCJgKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCB0b1NhdmUgPSBkb2M7XG5cbiAgICAgICAgaWYgKCEodG9TYXZlIGluc3RhbmNlb2YgTW9kZWwpKSB7XG4gICAgICAgICAgdG9TYXZlID0gbmV3IE1vZGVsKHRvU2F2ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCB0b1NhdmUuJHNhdmUob3B0aW9ucyk7XG5cbiAgICAgICAgcmV0dXJuIHRvU2F2ZTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAoIWZpcnN0RXJyb3IpIHtcbiAgICAgICAgICBmaXJzdEVycm9yID0gZXJyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSkpO1xuICAgIGlmIChmaXJzdEVycm9yKSB7XG4gICAgICB0aHJvdyBmaXJzdEVycm9yO1xuICAgIH1cbiAgfVxuXG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KGRvYykgJiYgYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gcmVzWzBdO1xuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG5cbi8qKlxuICogX1JlcXVpcmVzIGEgcmVwbGljYSBzZXQgcnVubmluZyBNb25nb0RCID49IDMuNi4wLl8gV2F0Y2hlcyB0aGVcbiAqIHVuZGVybHlpbmcgY29sbGVjdGlvbiBmb3IgY2hhbmdlcyB1c2luZ1xuICogW01vbmdvREIgY2hhbmdlIHN0cmVhbXNdKGh0dHBzOi8vd3d3Lm1vbmdvZGIuY29tL2RvY3MvbWFudWFsL2NoYW5nZVN0cmVhbXMvKS5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGRvZXMgKipub3QqKiB0cmlnZ2VyIGFueSBtaWRkbGV3YXJlLiBJbiBwYXJ0aWN1bGFyLCBpdFxuICogZG9lcyAqKm5vdCoqIHRyaWdnZXIgYWdncmVnYXRlIG1pZGRsZXdhcmUuXG4gKlxuICogVGhlIENoYW5nZVN0cmVhbSBvYmplY3QgaXMgYW4gZXZlbnQgZW1pdHRlciB0aGF0IGVtaXRzIHRoZSBmb2xsb3dpbmcgZXZlbnRzOlxuICpcbiAqIC0gJ2NoYW5nZSc6IEEgY2hhbmdlIG9jY3VycmVkLCBzZWUgYmVsb3cgZXhhbXBsZVxuICogLSAnZXJyb3InOiBBbiB1bnJlY292ZXJhYmxlIGVycm9yIG9jY3VycmVkLiBJbiBwYXJ0aWN1bGFyLCBjaGFuZ2Ugc3RyZWFtcyBjdXJyZW50bHkgZXJyb3Igb3V0IGlmIHRoZXkgbG9zZSBjb25uZWN0aW9uIHRvIHRoZSByZXBsaWNhIHNldCBwcmltYXJ5LiBGb2xsb3cgW3RoaXMgR2l0SHViIGlzc3VlXShodHRwczovL2dpdGh1Yi5jb20vQXV0b21hdHRpYy9tb25nb29zZS9pc3N1ZXMvNjc5OSkgZm9yIHVwZGF0ZXMuXG4gKiAtICdlbmQnOiBFbWl0dGVkIGlmIHRoZSB1bmRlcmx5aW5nIHN0cmVhbSBpcyBjbG9zZWRcbiAqIC0gJ2Nsb3NlJzogRW1pdHRlZCBpZiB0aGUgdW5kZXJseWluZyBzdHJlYW0gaXMgY2xvc2VkXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBjb25zdCBkb2MgPSBhd2FpdCBQZXJzb24uY3JlYXRlKHsgbmFtZTogJ05lZCBTdGFyaycgfSk7XG4gKiAgICAgY29uc3QgY2hhbmdlU3RyZWFtID0gUGVyc29uLndhdGNoKCkub24oJ2NoYW5nZScsIGNoYW5nZSA9PiBjb25zb2xlLmxvZyhjaGFuZ2UpKTtcbiAqICAgICAvLyBXaWxsIHByaW50IGZyb20gdGhlIGFib3ZlIGBjb25zb2xlLmxvZygpYDpcbiAqICAgICAvLyB7IF9pZDogeyBfZGF0YTogLi4uIH0sXG4gKiAgICAgLy8gICBvcGVyYXRpb25UeXBlOiAnZGVsZXRlJyxcbiAqICAgICAvLyAgIG5zOiB7IGRiOiAnbXlkYicsIGNvbGw6ICdQZXJzb24nIH0sXG4gKiAgICAgLy8gICBkb2N1bWVudEtleTogeyBfaWQ6IDVhNTFiMTI1YzU1MDBmNWFhMDk0YzdiZCB9IH1cbiAqICAgICBhd2FpdCBkb2MucmVtb3ZlKCk7XG4gKlxuICogQHBhcmFtIHtBcnJheX0gW3BpcGVsaW5lXVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBzZWUgdGhlIFttb25nb2RiIGRyaXZlciBvcHRpb25zXShodHRwczovL21vbmdvZGIuZ2l0aHViLmlvL25vZGUtbW9uZ29kYi1uYXRpdmUvNC45L2NsYXNzZXMvQ29sbGVjdGlvbi5odG1sI3dhdGNoKVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5oeWRyYXRlPWZhbHNlXSBpZiB0cnVlIGFuZCBgZnVsbERvY3VtZW50OiAndXBkYXRlTG9va3VwJ2AgaXMgc2V0LCBNb25nb29zZSB3aWxsIGF1dG9tYXRpY2FsbHkgaHlkcmF0ZSBgZnVsbERvY3VtZW50YCBpbnRvIGEgZnVsbHkgZmxlZGdlZCBNb25nb29zZSBkb2N1bWVudFxuICogQHJldHVybiB7Q2hhbmdlU3RyZWFtfSBtb25nb29zZS1zcGVjaWZpYyBjaGFuZ2Ugc3RyZWFtIHdyYXBwZXIsIGluaGVyaXRzIGZyb20gRXZlbnRFbWl0dGVyXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1vZGVsLndhdGNoID0gZnVuY3Rpb24ocGlwZWxpbmUsIG9wdGlvbnMpIHtcbiAgX2NoZWNrQ29udGV4dCh0aGlzLCAnd2F0Y2gnKTtcblxuICBjb25zdCBjaGFuZ2VTdHJlYW1UaHVuayA9IGNiID0+IHtcbiAgICBwaXBlbGluZSA9IHBpcGVsaW5lIHx8IFtdO1xuICAgIHByZXBhcmVEaXNjcmltaW5hdG9yUGlwZWxpbmUocGlwZWxpbmUsIHRoaXMuc2NoZW1hLCAnZnVsbERvY3VtZW50Jyk7XG4gICAgaWYgKHRoaXMuJF9fY29sbGVjdGlvbi5idWZmZXIpIHtcbiAgICAgIHRoaXMuJF9fY29sbGVjdGlvbi5hZGRRdWV1ZSgoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkcml2ZXJDaGFuZ2VTdHJlYW0gPSB0aGlzLiRfX2NvbGxlY3Rpb24ud2F0Y2gocGlwZWxpbmUsIG9wdGlvbnMpO1xuICAgICAgICBjYihudWxsLCBkcml2ZXJDaGFuZ2VTdHJlYW0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGRyaXZlckNoYW5nZVN0cmVhbSA9IHRoaXMuJF9fY29sbGVjdGlvbi53YXRjaChwaXBlbGluZSwgb3B0aW9ucyk7XG4gICAgICBjYihudWxsLCBkcml2ZXJDaGFuZ2VTdHJlYW0pO1xuICAgIH1cbiAgfTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5tb2RlbCA9IHRoaXM7XG5cbiAgcmV0dXJuIG5ldyBDaGFuZ2VTdHJlYW0oY2hhbmdlU3RyZWFtVGh1bmssIHBpcGVsaW5lLCBvcHRpb25zKTtcbn07XG5cbi8qKlxuICogX1JlcXVpcmVzIE1vbmdvREIgPj0gMy42LjAuXyBTdGFydHMgYSBbTW9uZ29EQiBzZXNzaW9uXShodHRwczovL3d3dy5tb25nb2RiLmNvbS9kb2NzL21hbnVhbC9yZWxlYXNlLW5vdGVzLzMuNi8jY2xpZW50LXNlc3Npb25zKVxuICogZm9yIGJlbmVmaXRzIGxpa2UgY2F1c2FsIGNvbnNpc3RlbmN5LCBbcmV0cnlhYmxlIHdyaXRlc10oaHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZG9jcy9tYW51YWwvY29yZS9yZXRyeWFibGUtd3JpdGVzLyksXG4gKiBhbmQgW3RyYW5zYWN0aW9uc10oaHR0cHM6Ly90aGVjb2RlYmFyYmFyaWFuLmNvbS9hLW5vZGUtanMtcGVyc3BlY3RpdmUtb24tbW9uZ29kYi00LXRyYW5zYWN0aW9ucy5odG1sKS5cbiAqXG4gKiBDYWxsaW5nIGBNeU1vZGVsLnN0YXJ0U2Vzc2lvbigpYCBpcyBlcXVpdmFsZW50IHRvIGNhbGxpbmcgYE15TW9kZWwuZGIuc3RhcnRTZXNzaW9uKClgLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gZG9lcyBub3QgdHJpZ2dlciBhbnkgbWlkZGxld2FyZS5cbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKlxuICogICAgIGNvbnN0IHNlc3Npb24gPSBhd2FpdCBQZXJzb24uc3RhcnRTZXNzaW9uKCk7XG4gKiAgICAgbGV0IGRvYyA9IGF3YWl0IFBlcnNvbi5maW5kT25lKHsgbmFtZTogJ05lZCBTdGFyaycgfSwgbnVsbCwgeyBzZXNzaW9uIH0pO1xuICogICAgIGF3YWl0IGRvYy5yZW1vdmUoKTtcbiAqICAgICAvLyBgZG9jYCB3aWxsIGFsd2F5cyBiZSBudWxsLCBldmVuIGlmIHJlYWRpbmcgZnJvbSBhIHJlcGxpY2Egc2V0XG4gKiAgICAgLy8gc2Vjb25kYXJ5LiBXaXRob3V0IGNhdXNhbCBjb25zaXN0ZW5jeSwgaXQgaXMgcG9zc2libGUgdG9cbiAqICAgICAvLyBnZXQgYSBkb2MgYmFjayBmcm9tIHRoZSBiZWxvdyBxdWVyeSBpZiB0aGUgcXVlcnkgcmVhZHMgZnJvbSBhXG4gKiAgICAgLy8gc2Vjb25kYXJ5IHRoYXQgaXMgZXhwZXJpZW5jaW5nIHJlcGxpY2F0aW9uIGxhZy5cbiAqICAgICBkb2MgPSBhd2FpdCBQZXJzb24uZmluZE9uZSh7IG5hbWU6ICdOZWQgU3RhcmsnIH0sIG51bGwsIHsgc2Vzc2lvbiwgcmVhZFByZWZlcmVuY2U6ICdzZWNvbmRhcnknIH0pO1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gc2VlIHRoZSBbbW9uZ29kYiBkcml2ZXIgb3B0aW9uc10oaHR0cHM6Ly9tb25nb2RiLmdpdGh1Yi5pby9ub2RlLW1vbmdvZGItbmF0aXZlLzQuOS9jbGFzc2VzL01vbmdvQ2xpZW50Lmh0bWwjc3RhcnRTZXNzaW9uKVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5jYXVzYWxDb25zaXN0ZW5jeT10cnVlXSBzZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSBjYXVzYWwgY29uc2lzdGVuY3lcbiAqIEByZXR1cm4ge1Byb21pc2U8Q2xpZW50U2Vzc2lvbj59IHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIE1vbmdvREIgZHJpdmVyIGBDbGllbnRTZXNzaW9uYFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Nb2RlbC5zdGFydFNlc3Npb24gPSBmdW5jdGlvbigpIHtcbiAgX2NoZWNrQ29udGV4dCh0aGlzLCAnc3RhcnRTZXNzaW9uJyk7XG5cbiAgcmV0dXJuIHRoaXMuZGIuc3RhcnRTZXNzaW9uLmFwcGx5KHRoaXMuZGIsIGFyZ3VtZW50cyk7XG59O1xuXG4vKipcbiAqIFNob3J0Y3V0IGZvciB2YWxpZGF0aW5nIGFuIGFycmF5IG9mIGRvY3VtZW50cyBhbmQgaW5zZXJ0aW5nIHRoZW0gaW50b1xuICogTW9uZ29EQiBpZiB0aGV5J3JlIGFsbCB2YWxpZC4gVGhpcyBmdW5jdGlvbiBpcyBmYXN0ZXIgdGhhbiBgLmNyZWF0ZSgpYFxuICogYmVjYXVzZSBpdCBvbmx5IHNlbmRzIG9uZSBvcGVyYXRpb24gdG8gdGhlIHNlcnZlciwgcmF0aGVyIHRoYW4gb25lIGZvciBlYWNoXG4gKiBkb2N1bWVudC5cbiAqXG4gKiBNb25nb29zZSBhbHdheXMgdmFsaWRhdGVzIGVhY2ggZG9jdW1lbnQgKipiZWZvcmUqKiBzZW5kaW5nIGBpbnNlcnRNYW55YFxuICogdG8gTW9uZ29EQi4gU28gaWYgb25lIGRvY3VtZW50IGhhcyBhIHZhbGlkYXRpb24gZXJyb3IsIG5vIGRvY3VtZW50cyB3aWxsXG4gKiBiZSBzYXZlZCwgdW5sZXNzIHlvdSBzZXRcbiAqIFt0aGUgYG9yZGVyZWRgIG9wdGlvbiB0byBmYWxzZV0oaHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZG9jcy9tYW51YWwvcmVmZXJlbmNlL21ldGhvZC9kYi5jb2xsZWN0aW9uLmluc2VydE1hbnkvI2Vycm9yLWhhbmRsaW5nKS5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGRvZXMgKipub3QqKiB0cmlnZ2VyIHNhdmUgbWlkZGxld2FyZS5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHRyaWdnZXJzIHRoZSBmb2xsb3dpbmcgbWlkZGxld2FyZS5cbiAqXG4gKiAtIGBpbnNlcnRNYW55KClgXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBhd2FpdCBNb3ZpZXMuaW5zZXJ0TWFueShbXG4gKiAgICAgICB7IG5hbWU6ICdTdGFyIFdhcnMnIH0sXG4gKiAgICAgICB7IG5hbWU6ICdUaGUgRW1waXJlIFN0cmlrZXMgQmFjaycgfVxuICogICAgIF0pO1xuICpcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fCp9IGRvYyhzKVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBzZWUgdGhlIFttb25nb2RiIGRyaXZlciBvcHRpb25zXShodHRwczovL21vbmdvZGIuZ2l0aHViLmlvL25vZGUtbW9uZ29kYi1uYXRpdmUvNC45L2NsYXNzZXMvQ29sbGVjdGlvbi5odG1sI2luc2VydE1hbnkpXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm9yZGVyZWQ9dHJ1ZV0gaWYgdHJ1ZSwgd2lsbCBmYWlsIGZhc3Qgb24gdGhlIGZpcnN0IGVycm9yIGVuY291bnRlcmVkLiBJZiBmYWxzZSwgd2lsbCBpbnNlcnQgYWxsIHRoZSBkb2N1bWVudHMgaXQgY2FuIGFuZCByZXBvcnQgZXJyb3JzIGxhdGVyLiBBbiBgaW5zZXJ0TWFueSgpYCB3aXRoIGBvcmRlcmVkID0gZmFsc2VgIGlzIGNhbGxlZCBhbiBcInVub3JkZXJlZFwiIGBpbnNlcnRNYW55KClgLlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5yYXdSZXN1bHQ9ZmFsc2VdIGlmIGZhbHNlLCB0aGUgcmV0dXJuZWQgcHJvbWlzZSByZXNvbHZlcyB0byB0aGUgZG9jdW1lbnRzIHRoYXQgcGFzc2VkIG1vbmdvb3NlIGRvY3VtZW50IHZhbGlkYXRpb24uIElmIGB0cnVlYCwgd2lsbCByZXR1cm4gdGhlIFtyYXcgcmVzdWx0IGZyb20gdGhlIE1vbmdvREIgZHJpdmVyXShodHRwczovL21vbmdvZGIuZ2l0aHViLmlvL25vZGUtbW9uZ29kYi1uYXRpdmUvNC45L2ludGVyZmFjZXMvSW5zZXJ0TWFueVJlc3VsdC5odG1sKSB3aXRoIGEgYG1vbmdvb3NlYCBwcm9wZXJ0eSB0aGF0IGNvbnRhaW5zIGB2YWxpZGF0aW9uRXJyb3JzYCBhbmQgYHJlc3VsdHNgIGlmIHRoaXMgaXMgYW4gdW5vcmRlcmVkIGBpbnNlcnRNYW55YC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMubGVhbj1mYWxzZV0gaWYgYHRydWVgLCBza2lwcyBoeWRyYXRpbmcgYW5kIHZhbGlkYXRpbmcgdGhlIGRvY3VtZW50cy4gVGhpcyBvcHRpb24gaXMgdXNlZnVsIGlmIHlvdSBuZWVkIHRoZSBleHRyYSBwZXJmb3JtYW5jZSwgYnV0IE1vbmdvb3NlIHdvbid0IHZhbGlkYXRlIHRoZSBkb2N1bWVudHMgYmVmb3JlIGluc2VydGluZy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5saW1pdD1udWxsXSB0aGlzIGxpbWl0cyB0aGUgbnVtYmVyIG9mIGRvY3VtZW50cyBiZWluZyBwcm9jZXNzZWQgKHZhbGlkYXRpb24vY2FzdGluZykgYnkgbW9uZ29vc2UgaW4gcGFyYWxsZWwsIHRoaXMgZG9lcyAqKk5PVCoqIHNlbmQgdGhlIGRvY3VtZW50cyBpbiBiYXRjaGVzIHRvIE1vbmdvREIuIFVzZSB0aGlzIG9wdGlvbiBpZiB5b3UncmUgcHJvY2Vzc2luZyBhIGxhcmdlIG51bWJlciBvZiBkb2N1bWVudHMgYW5kIHlvdXIgYXBwIGlzIHJ1bm5pbmcgb3V0IG9mIG1lbW9yeS5cbiAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdHxBcnJheX0gW29wdGlvbnMucG9wdWxhdGU9bnVsbF0gcG9wdWxhdGVzIHRoZSByZXN1bHQgZG9jdW1lbnRzLiBUaGlzIG9wdGlvbiBpcyBhIG5vLW9wIGlmIGByYXdSZXN1bHRgIGlzIHNldC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudGhyb3dPblZhbGlkYXRpb25FcnJvcj1mYWxzZV0gSWYgdHJ1ZSBhbmQgYG9yZGVyZWQ6IGZhbHNlYCwgdGhyb3cgYW4gZXJyb3IgaWYgb25lIG9mIHRoZSBvcGVyYXRpb25zIGZhaWxlZCB2YWxpZGF0aW9uLCBidXQgYWxsIHZhbGlkIG9wZXJhdGlvbnMgY29tcGxldGVkIHN1Y2Nlc3NmdWxseS5cbiAqIEByZXR1cm4ge1Byb21pc2V9IHJlc29sdmluZyB0byB0aGUgcmF3IHJlc3VsdCBmcm9tIHRoZSBNb25nb0RCIGRyaXZlciBpZiBgb3B0aW9ucy5yYXdSZXN1bHRgIHdhcyBgdHJ1ZWAsIG9yIHRoZSBkb2N1bWVudHMgdGhhdCBwYXNzZWQgdmFsaWRhdGlvbiwgb3RoZXJ3aXNlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1vZGVsLmluc2VydE1hbnkgPSBhc3luYyBmdW5jdGlvbiBpbnNlcnRNYW55KGFyciwgb3B0aW9ucykge1xuICBfY2hlY2tDb250ZXh0KHRoaXMsICdpbnNlcnRNYW55Jyk7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgIHR5cGVvZiBhcmd1bWVudHNbMl0gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgTW9uZ29vc2VFcnJvcignTW9kZWwuaW5zZXJ0TWFueSgpIG5vIGxvbmdlciBhY2NlcHRzIGEgY2FsbGJhY2snKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgdGhpcy4kX19pbnNlcnRNYW55KGFyciwgb3B0aW9ucywgKGVyciwgcmVzKSA9PiB7XG4gICAgICBpZiAoZXJyICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShyZXMpO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbi8qKlxuICogaWdub3JlXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBhcGkgcHJpdmF0ZVxuICogQG1lbWJlck9mIE1vZGVsXG4gKiBAbWV0aG9kICRfX2luc2VydE1hbnlcbiAqIEBzdGF0aWNcbiAqL1xuXG5Nb2RlbC4kX19pbnNlcnRNYW55ID0gZnVuY3Rpb24oYXJyLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICBjb25zdCBfdGhpcyA9IHRoaXM7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICBvcHRpb25zID0gbnVsbDtcbiAgfVxuXG4gIGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgdXRpbHMubm9vcDtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGNvbnN0IGxpbWl0ID0gb3B0aW9ucy5saW1pdCB8fCAxMDAwO1xuICBjb25zdCByYXdSZXN1bHQgPSAhIW9wdGlvbnMucmF3UmVzdWx0O1xuICBjb25zdCBvcmRlcmVkID0gdHlwZW9mIG9wdGlvbnMub3JkZXJlZCA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5vcmRlcmVkIDogdHJ1ZTtcbiAgY29uc3QgdGhyb3dPblZhbGlkYXRpb25FcnJvciA9IHR5cGVvZiBvcHRpb25zLnRocm93T25WYWxpZGF0aW9uRXJyb3IgPT09ICdib29sZWFuJyA/IG9wdGlvbnMudGhyb3dPblZhbGlkYXRpb25FcnJvciA6IGZhbHNlO1xuICBjb25zdCBsZWFuID0gISFvcHRpb25zLmxlYW47XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICBhcnIgPSBbYXJyXTtcbiAgfVxuXG4gIGNvbnN0IHZhbGlkYXRpb25FcnJvcnMgPSBbXTtcbiAgY29uc3QgdmFsaWRhdGlvbkVycm9yc1RvT3JpZ2luYWxPcmRlciA9IG5ldyBNYXAoKTtcbiAgY29uc3QgcmVzdWx0cyA9IG9yZGVyZWQgPyBudWxsIDogbmV3IEFycmF5KGFyci5sZW5ndGgpO1xuICBjb25zdCB0b0V4ZWN1dGUgPSBhcnIubWFwKChkb2MsIGluZGV4KSA9PlxuICAgIGNhbGxiYWNrID0+IHtcbiAgICAgIGlmICghKGRvYyBpbnN0YW5jZW9mIF90aGlzKSkge1xuICAgICAgICBpZiAoZG9jICE9IG51bGwgJiYgdHlwZW9mIGRvYyAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3IE9iamVjdFBhcmFtZXRlckVycm9yKGRvYywgJ2Fyci4nICsgaW5kZXgsICdpbnNlcnRNYW55JykpO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZG9jID0gbmV3IF90aGlzKGRvYyk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5zZXNzaW9uICE9IG51bGwpIHtcbiAgICAgICAgZG9jLiRzZXNzaW9uKG9wdGlvbnMuc2Vzc2lvbik7XG4gICAgICB9XG4gICAgICAvLyBJZiBvcHRpb24gYGxlYW5gIGlzIHNldCB0byB0cnVlIGJ5cGFzcyB2YWxpZGF0aW9uXG4gICAgICBpZiAobGVhbikge1xuICAgICAgICAvLyB3ZSBoYXZlIHRvIGV4ZWN1dGUgY2FsbGJhY2sgYXQgdGhlIG5leHRUaWNrIHRvIGJlIGNvbXBhdGlibGVcbiAgICAgICAgLy8gd2l0aCBwYXJhbGxlbExpbWl0LCBhcyBgcmVzdWx0c2AgdmFyaWFibGUgaGFzIFREWiBpc3N1ZSBpZiB3ZVxuICAgICAgICAvLyBleGVjdXRlIHRoZSBjYWxsYmFjayBzeW5jaHJvbm91c2x5XG4gICAgICAgIHJldHVybiBpbW1lZGlhdGUoKCkgPT4gY2FsbGJhY2sobnVsbCwgZG9jKSk7XG4gICAgICB9XG4gICAgICBkb2MuJHZhbGlkYXRlKCkudGhlbihcbiAgICAgICAgKCkgPT4geyBjYWxsYmFjayhudWxsLCBkb2MpOyB9LFxuICAgICAgICBlcnJvciA9PiB7XG4gICAgICAgICAgaWYgKG9yZGVyZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB2YWxpZGF0aW9uRXJyb3JzLnB1c2goZXJyb3IpO1xuICAgICAgICAgICAgdmFsaWRhdGlvbkVycm9yc1RvT3JpZ2luYWxPcmRlci5zZXQoZXJyb3IsIGluZGV4KTtcbiAgICAgICAgICAgIHJlc3VsdHNbaW5kZXhdID0gZXJyb3I7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcblxuICBwYXJhbGxlbExpbWl0KHRvRXhlY3V0ZSwgbGltaXQsIGZ1bmN0aW9uKGVycm9yLCBkb2NzKSB7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgb3JpZ2luYWxEb2NJbmRleCA9IG5ldyBNYXAoKTtcbiAgICBjb25zdCB2YWxpZERvY0luZGV4VG9PcmlnaW5hbEluZGV4ID0gbmV3IE1hcCgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZG9jcy5sZW5ndGg7ICsraSkge1xuICAgICAgb3JpZ2luYWxEb2NJbmRleC5zZXQoZG9jc1tpXSwgaSk7XG4gICAgfVxuXG4gICAgLy8gV2UgZmlsdGVyIGFsbCBmYWlsZWQgcHJlLXZhbGlkYXRpb25zIGJ5IHJlbW92aW5nIG51bGxzXG4gICAgY29uc3QgZG9jQXR0cmlidXRlcyA9IGRvY3MuZmlsdGVyKGZ1bmN0aW9uKGRvYykge1xuICAgICAgcmV0dXJuIGRvYyAhPSBudWxsO1xuICAgIH0pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZG9jQXR0cmlidXRlcy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFsaWREb2NJbmRleFRvT3JpZ2luYWxJbmRleC5zZXQoaSwgb3JpZ2luYWxEb2NJbmRleC5nZXQoZG9jQXR0cmlidXRlc1tpXSkpO1xuICAgIH1cblxuICAgIC8vIE1ha2Ugc3VyZSB2YWxpZGF0aW9uIGVycm9ycyBhcmUgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4gICAgLy8gb3JpZ2luYWwgZG9jdW1lbnRzLCBzbyBpZiBib3RoIGRvYzEgYW5kIGRvYzIgYm90aCBmYWlsIHZhbGlkYXRpb24sXG4gICAgLy8gYE1vZGVsLmluc2VydE1hbnkoW2RvYzEsIGRvYzJdKWAgd2lsbCBhbHdheXMgaGF2ZSBkb2MxJ3MgdmFsaWRhdGlvblxuICAgIC8vIGVycm9yIGJlZm9yZSBkb2MyJ3MuIFJlOiBnaC0xMjc5MS5cbiAgICBpZiAodmFsaWRhdGlvbkVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICB2YWxpZGF0aW9uRXJyb3JzLnNvcnQoKGVycjEsIGVycjIpID0+IHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRpb25FcnJvcnNUb09yaWdpbmFsT3JkZXIuZ2V0KGVycjEpIC0gdmFsaWRhdGlvbkVycm9yc1RvT3JpZ2luYWxPcmRlci5nZXQoZXJyMik7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBRdWlja2x5IGVzY2FwZSB3aGlsZSB0aGVyZSBhcmVuJ3QgYW55IHZhbGlkIGRvY0F0dHJpYnV0ZXNcbiAgICBpZiAoZG9jQXR0cmlidXRlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGlmIChyYXdSZXN1bHQpIHtcbiAgICAgICAgY29uc3QgcmVzID0ge1xuICAgICAgICAgIGFja25vd2xlZGdlZDogdHJ1ZSxcbiAgICAgICAgICBpbnNlcnRlZENvdW50OiAwLFxuICAgICAgICAgIGluc2VydGVkSWRzOiB7fSxcbiAgICAgICAgICBtb25nb29zZToge1xuICAgICAgICAgICAgdmFsaWRhdGlvbkVycm9yczogdmFsaWRhdGlvbkVycm9yc1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHJlcyk7XG4gICAgICB9XG4gICAgICBjYWxsYmFjayhudWxsLCBbXSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGRvY09iamVjdHMgPSBkb2NBdHRyaWJ1dGVzLm1hcChmdW5jdGlvbihkb2MpIHtcbiAgICAgIGlmIChkb2MuJF9fc2NoZW1hLm9wdGlvbnMudmVyc2lvbktleSkge1xuICAgICAgICBkb2NbZG9jLiRfX3NjaGVtYS5vcHRpb25zLnZlcnNpb25LZXldID0gMDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNob3VsZFNldFRpbWVzdGFtcHMgPSAoIW9wdGlvbnMgfHwgb3B0aW9ucy50aW1lc3RhbXBzICE9PSBmYWxzZSkgJiYgZG9jLmluaXRpYWxpemVUaW1lc3RhbXBzICYmICghZG9jLiRfXyB8fCBkb2MuJF9fLnRpbWVzdGFtcHMgIT09IGZhbHNlKTtcbiAgICAgIGlmIChzaG91bGRTZXRUaW1lc3RhbXBzKSB7XG4gICAgICAgIHJldHVybiBkb2MuaW5pdGlhbGl6ZVRpbWVzdGFtcHMoKS50b09iamVjdChpbnRlcm5hbFRvT2JqZWN0T3B0aW9ucyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZG9jLnRvT2JqZWN0KGludGVybmFsVG9PYmplY3RPcHRpb25zKTtcbiAgICB9KTtcblxuICAgIF90aGlzLiRfX2NvbGxlY3Rpb24uaW5zZXJ0TWFueShkb2NPYmplY3RzLCBvcHRpb25zKS50aGVuKFxuICAgICAgcmVzID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBhdHRyaWJ1dGUgb2YgZG9jQXR0cmlidXRlcykge1xuICAgICAgICAgIGF0dHJpYnV0ZS4kX19yZXNldCgpO1xuICAgICAgICAgIF9zZXRJc05ldyhhdHRyaWJ1dGUsIGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcmRlcmVkID09PSBmYWxzZSAmJiB0aHJvd09uVmFsaWRhdGlvbkVycm9yICYmIHZhbGlkYXRpb25FcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKHJlc3VsdHNbaV0gPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICByZXN1bHRzW2ldID0gZG9jc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBNb25nb29zZUJ1bGtXcml0ZUVycm9yKFxuICAgICAgICAgICAgdmFsaWRhdGlvbkVycm9ycyxcbiAgICAgICAgICAgIHJlc3VsdHMsXG4gICAgICAgICAgICByZXMsXG4gICAgICAgICAgICAnaW5zZXJ0TWFueSdcbiAgICAgICAgICApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyYXdSZXN1bHQpIHtcbiAgICAgICAgICBpZiAob3JkZXJlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICBpZiAocmVzdWx0c1tpXSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0c1tpXSA9IGRvY3NbaV07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRGVjb3JhdGUgd2l0aCBtb25nb29zZSB2YWxpZGF0aW9uIGVycm9ycyBpbiBjYXNlIG9mIHVub3JkZXJlZCxcbiAgICAgICAgICAgIC8vIGJlY2F1c2UgdGhlbiBzdGlsbCBkbyBgaW5zZXJ0TWFueSgpYFxuICAgICAgICAgICAgcmVzLm1vbmdvb3NlID0ge1xuICAgICAgICAgICAgICB2YWxpZGF0aW9uRXJyb3JzOiB2YWxpZGF0aW9uRXJyb3JzLFxuICAgICAgICAgICAgICByZXN1bHRzOiByZXN1bHRzXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgcmVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLnBvcHVsYXRlICE9IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMucG9wdWxhdGUoZG9jQXR0cmlidXRlcywgb3B0aW9ucy5wb3B1bGF0ZSkudGhlbihcbiAgICAgICAgICAgIGRvY3MgPT4geyBjYWxsYmFjayhudWxsLCBkb2NzKTsgfSxcbiAgICAgICAgICAgIGVyciA9PiB7XG4gICAgICAgICAgICAgIGlmIChlcnIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGVyci5pbnNlcnRlZERvY3MgPSBkb2NBdHRyaWJ1dGVzO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FsbGJhY2sobnVsbCwgZG9jQXR0cmlidXRlcyk7XG4gICAgICB9LFxuICAgICAgZXJyb3IgPT4ge1xuICAgICAgICAvLyBgd3JpdGVFcnJvcnNgIGlzIGEgcHJvcGVydHkgcmVwb3J0ZWQgYnkgdGhlIE1vbmdvREIgZHJpdmVyLFxuICAgICAgICAvLyBqdXN0IG5vdCBpZiB0aGVyZSdzIG9ubHkgMSBlcnJvci5cbiAgICAgICAgaWYgKGVycm9yLndyaXRlRXJyb3JzID09IG51bGwgJiZcbiAgICAgICAgICAgIChlcnJvci5yZXN1bHQgJiYgZXJyb3IucmVzdWx0LnJlc3VsdCAmJiBlcnJvci5yZXN1bHQucmVzdWx0LndyaXRlRXJyb3JzKSAhPSBudWxsKSB7XG4gICAgICAgICAgZXJyb3Iud3JpdGVFcnJvcnMgPSBlcnJvci5yZXN1bHQucmVzdWx0LndyaXRlRXJyb3JzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYGluc2VydGVkRG9jc2AgaXMgYSBNb25nb29zZS1zcGVjaWZpYyBwcm9wZXJ0eVxuICAgICAgICBjb25zdCBoYXNXcml0ZUVycm9ycyA9IGVycm9yICYmIGVycm9yLndyaXRlRXJyb3JzO1xuICAgICAgICBjb25zdCBlcnJvcmVkSW5kZXhlcyA9IG5ldyBTZXQoKGVycm9yICYmIGVycm9yLndyaXRlRXJyb3JzIHx8IFtdKS5tYXAoZXJyID0+IGVyci5pbmRleCkpO1xuXG4gICAgICAgIGlmIChlcnJvci53cml0ZUVycm9ycyAhPSBudWxsKSB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlcnJvci53cml0ZUVycm9ycy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxJbmRleCA9IHZhbGlkRG9jSW5kZXhUb09yaWdpbmFsSW5kZXguZ2V0KGVycm9yLndyaXRlRXJyb3JzW2ldLmluZGV4KTtcbiAgICAgICAgICAgIGVycm9yLndyaXRlRXJyb3JzW2ldID0ge1xuICAgICAgICAgICAgICAuLi5lcnJvci53cml0ZUVycm9yc1tpXSxcbiAgICAgICAgICAgICAgaW5kZXg6IG9yaWdpbmFsSW5kZXhcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoIW9yZGVyZWQpIHtcbiAgICAgICAgICAgICAgcmVzdWx0c1tvcmlnaW5hbEluZGV4XSA9IGVycm9yLndyaXRlRXJyb3JzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghb3JkZXJlZCkge1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKHJlc3VsdHNbaV0gPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICByZXN1bHRzW2ldID0gZG9jc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBlcnJvci5yZXN1bHRzID0gcmVzdWx0cztcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBmaXJzdEVycm9yZWRJbmRleCA9IC0xO1xuICAgICAgICBlcnJvci5pbnNlcnRlZERvY3MgPSBkb2NBdHRyaWJ1dGVzLlxuICAgICAgICAgIGZpbHRlcigoZG9jLCBpKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpc0Vycm9yZWQgPSAhaGFzV3JpdGVFcnJvcnMgfHwgZXJyb3JlZEluZGV4ZXMuaGFzKGkpO1xuXG4gICAgICAgICAgICBpZiAob3JkZXJlZCkge1xuICAgICAgICAgICAgICBpZiAoZmlyc3RFcnJvcmVkSW5kZXggPiAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpIDwgZmlyc3RFcnJvcmVkSW5kZXg7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoaXNFcnJvcmVkKSB7XG4gICAgICAgICAgICAgICAgZmlyc3RFcnJvcmVkSW5kZXggPSBpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAhaXNFcnJvcmVkO1xuICAgICAgICAgIH0pLlxuICAgICAgICAgIG1hcChmdW5jdGlvbiBzZXRJc05ld0Zvckluc2VydGVkRG9jKGRvYykge1xuICAgICAgICAgICAgZG9jLiRfX3Jlc2V0KCk7XG4gICAgICAgICAgICBfc2V0SXNOZXcoZG9jLCBmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm4gZG9jO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChyYXdSZXN1bHQgJiYgb3JkZXJlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBlcnJvci5tb25nb29zZSA9IHtcbiAgICAgICAgICAgIHZhbGlkYXRpb25FcnJvcnM6IHZhbGlkYXRpb25FcnJvcnMsXG4gICAgICAgICAgICByZXN1bHRzOiByZXN1bHRzXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcbiAgICAgIH1cbiAgICApO1xuICB9KTtcbn07XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxuZnVuY3Rpb24gX3NldElzTmV3KGRvYywgdmFsKSB7XG4gIGRvYy4kaXNOZXcgPSB2YWw7XG4gIGRvYy4kZW1pdCgnaXNOZXcnLCB2YWwpO1xuICBkb2MuY29uc3RydWN0b3IuZW1pdCgnaXNOZXcnLCB2YWwpO1xuXG4gIGNvbnN0IHN1YmRvY3MgPSBkb2MuJGdldEFsbFN1YmRvY3MoKTtcbiAgZm9yIChjb25zdCBzdWJkb2Mgb2Ygc3ViZG9jcykge1xuICAgIHN1YmRvYy4kaXNOZXcgPSB2YWw7XG4gICAgc3ViZG9jLiRlbWl0KCdpc05ldycsIHZhbCk7XG4gIH1cbn1cblxuLyoqXG4gKiBTZW5kcyBtdWx0aXBsZSBgaW5zZXJ0T25lYCwgYHVwZGF0ZU9uZWAsIGB1cGRhdGVNYW55YCwgYHJlcGxhY2VPbmVgLFxuICogYGRlbGV0ZU9uZWAsIGFuZC9vciBgZGVsZXRlTWFueWAgb3BlcmF0aW9ucyB0byB0aGUgTW9uZ29EQiBzZXJ2ZXIgaW4gb25lXG4gKiBjb21tYW5kLiBUaGlzIGlzIGZhc3RlciB0aGFuIHNlbmRpbmcgbXVsdGlwbGUgaW5kZXBlbmRlbnQgb3BlcmF0aW9ucyAoZS5nLlxuICogaWYgeW91IHVzZSBgY3JlYXRlKClgKSBiZWNhdXNlIHdpdGggYGJ1bGtXcml0ZSgpYCB0aGVyZSBpcyBvbmx5IG9uZSByb3VuZFxuICogdHJpcCB0byBNb25nb0RCLlxuICpcbiAqIE1vbmdvb3NlIHdpbGwgcGVyZm9ybSBjYXN0aW5nIG9uIGFsbCBvcGVyYXRpb25zIHlvdSBwcm92aWRlLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gZG9lcyAqKm5vdCoqIHRyaWdnZXIgYW55IG1pZGRsZXdhcmUsIG5laXRoZXIgYHNhdmUoKWAsIG5vciBgdXBkYXRlKClgLlxuICogSWYgeW91IG5lZWQgdG8gdHJpZ2dlclxuICogYHNhdmUoKWAgbWlkZGxld2FyZSBmb3IgZXZlcnkgZG9jdW1lbnQgdXNlIFtgY3JlYXRlKClgXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvYXBpL21vZGVsLmh0bWwjTW9kZWwuY3JlYXRlKCkpIGluc3RlYWQuXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBDaGFyYWN0ZXIuYnVsa1dyaXRlKFtcbiAqICAgICAgIHtcbiAqICAgICAgICAgaW5zZXJ0T25lOiB7XG4gKiAgICAgICAgICAgZG9jdW1lbnQ6IHtcbiAqICAgICAgICAgICAgIG5hbWU6ICdFZGRhcmQgU3RhcmsnLFxuICogICAgICAgICAgICAgdGl0bGU6ICdXYXJkZW4gb2YgdGhlIE5vcnRoJ1xuICogICAgICAgICAgIH1cbiAqICAgICAgICAgfVxuICogICAgICAgfSxcbiAqICAgICAgIHtcbiAqICAgICAgICAgdXBkYXRlT25lOiB7XG4gKiAgICAgICAgICAgZmlsdGVyOiB7IG5hbWU6ICdFZGRhcmQgU3RhcmsnIH0sXG4gKiAgICAgICAgICAgLy8gSWYgeW91IHdlcmUgdXNpbmcgdGhlIE1vbmdvREIgZHJpdmVyIGRpcmVjdGx5LCB5b3UnZCBuZWVkIHRvIGRvXG4gKiAgICAgICAgICAgLy8gYHVwZGF0ZTogeyAkc2V0OiB7IHRpdGxlOiAuLi4gfSB9YCBidXQgbW9uZ29vc2UgYWRkcyAkc2V0IGZvclxuICogICAgICAgICAgIC8vIHlvdS5cbiAqICAgICAgICAgICB1cGRhdGU6IHsgdGl0bGU6ICdIYW5kIG9mIHRoZSBLaW5nJyB9XG4gKiAgICAgICAgIH1cbiAqICAgICAgIH0sXG4gKiAgICAgICB7XG4gKiAgICAgICAgIGRlbGV0ZU9uZToge1xuICogICAgICAgICAgIGZpbHRlcjogeyBuYW1lOiAnRWRkYXJkIFN0YXJrJyB9XG4gKiAgICAgICAgIH1cbiAqICAgICAgIH1cbiAqICAgICBdKS50aGVuKHJlcyA9PiB7XG4gKiAgICAgIC8vIFByaW50cyBcIjEgMSAxXCJcbiAqICAgICAgY29uc29sZS5sb2cocmVzLmluc2VydGVkQ291bnQsIHJlcy5tb2RpZmllZENvdW50LCByZXMuZGVsZXRlZENvdW50KTtcbiAqICAgICB9KTtcbiAqXG4gKiBUaGUgW3N1cHBvcnRlZCBvcGVyYXRpb25zXShodHRwczovL3d3dy5tb25nb2RiLmNvbS9kb2NzL21hbnVhbC9yZWZlcmVuY2UvbWV0aG9kL2RiLmNvbGxlY3Rpb24uYnVsa1dyaXRlLyNkYi5jb2xsZWN0aW9uLmJ1bGtXcml0ZSkgYXJlOlxuICpcbiAqIC0gYGluc2VydE9uZWBcbiAqIC0gYHVwZGF0ZU9uZWBcbiAqIC0gYHVwZGF0ZU1hbnlgXG4gKiAtIGBkZWxldGVPbmVgXG4gKiAtIGBkZWxldGVNYW55YFxuICogLSBgcmVwbGFjZU9uZWBcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBvcHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3BzLmluc2VydE9uZS5kb2N1bWVudF0gVGhlIGRvY3VtZW50IHRvIGluc2VydFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHMudXBkYXRlT25lLmZpbHRlcl0gVXBkYXRlIHRoZSBmaXJzdCBkb2N1bWVudCB0aGF0IG1hdGNoZXMgdGhpcyBmaWx0ZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3BzLnVwZGF0ZU9uZS51cGRhdGVdIEFuIG9iamVjdCBjb250YWluaW5nIFt1cGRhdGUgb3BlcmF0b3JzXShodHRwczovL3d3dy5tb25nb2RiLmNvbS9kb2NzL21hbnVhbC9yZWZlcmVuY2Uvb3BlcmF0b3IvdXBkYXRlLylcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wcy51cGRhdGVPbmUudXBzZXJ0PWZhbHNlXSBJZiB0cnVlLCBpbnNlcnQgYSBkb2MgaWYgbm9uZSBtYXRjaFxuICogQHBhcmFtIHtCb29sZWFufSBbb3BzLnVwZGF0ZU9uZS50aW1lc3RhbXBzPXRydWVdIElmIGZhbHNlLCBkbyBub3QgYXBwbHkgW3RpbWVzdGFtcHNdKGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9ndWlkZS5odG1sI3RpbWVzdGFtcHMpIHRvIHRoZSBvcGVyYXRpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3BzLnVwZGF0ZU9uZS5jb2xsYXRpb25dIFRoZSBbTW9uZ29EQiBjb2xsYXRpb25dKGh0dHBzOi8vdGhlY29kZWJhcmJhcmlhbi5jb20vYS1ub2RlanMtcGVyc3BlY3RpdmUtb24tbW9uZ29kYi0zNC1jb2xsYXRpb25zKSB0byB1c2VcbiAqIEBwYXJhbSB7QXJyYXl9IFtvcHMudXBkYXRlT25lLmFycmF5RmlsdGVyc10gVGhlIFthcnJheSBmaWx0ZXJzXShodHRwczovL3RoZWNvZGViYXJiYXJpYW4uY29tL2Etbm9kZWpzLXBlcnNwZWN0aXZlLW9uLW1vbmdvZGItMzYtYXJyYXktZmlsdGVycy5odG1sKSB1c2VkIGluIGB1cGRhdGVgXG4gKiBAcGFyYW0ge09iamVjdH0gW29wcy51cGRhdGVNYW55LmZpbHRlcl0gVXBkYXRlIGFsbCB0aGUgZG9jdW1lbnRzIHRoYXQgbWF0Y2ggdGhpcyBmaWx0ZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3BzLnVwZGF0ZU1hbnkudXBkYXRlXSBBbiBvYmplY3QgY29udGFpbmluZyBbdXBkYXRlIG9wZXJhdG9yc10oaHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZG9jcy9tYW51YWwvcmVmZXJlbmNlL29wZXJhdG9yL3VwZGF0ZS8pXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHMudXBkYXRlTWFueS51cHNlcnQ9ZmFsc2VdIElmIHRydWUsIGluc2VydCBhIGRvYyBpZiBubyBkb2N1bWVudHMgbWF0Y2ggYGZpbHRlcmBcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wcy51cGRhdGVNYW55LnRpbWVzdGFtcHM9dHJ1ZV0gSWYgZmFsc2UsIGRvIG5vdCBhcHBseSBbdGltZXN0YW1wc10oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2d1aWRlLmh0bWwjdGltZXN0YW1wcykgdG8gdGhlIG9wZXJhdGlvblxuICogQHBhcmFtIHtPYmplY3R9IFtvcHMudXBkYXRlTWFueS5jb2xsYXRpb25dIFRoZSBbTW9uZ29EQiBjb2xsYXRpb25dKGh0dHBzOi8vdGhlY29kZWJhcmJhcmlhbi5jb20vYS1ub2RlanMtcGVyc3BlY3RpdmUtb24tbW9uZ29kYi0zNC1jb2xsYXRpb25zKSB0byB1c2VcbiAqIEBwYXJhbSB7QXJyYXl9IFtvcHMudXBkYXRlTWFueS5hcnJheUZpbHRlcnNdIFRoZSBbYXJyYXkgZmlsdGVyc10oaHR0cHM6Ly90aGVjb2RlYmFyYmFyaWFuLmNvbS9hLW5vZGVqcy1wZXJzcGVjdGl2ZS1vbi1tb25nb2RiLTM2LWFycmF5LWZpbHRlcnMuaHRtbCkgdXNlZCBpbiBgdXBkYXRlYFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHMuZGVsZXRlT25lLmZpbHRlcl0gRGVsZXRlIHRoZSBmaXJzdCBkb2N1bWVudCB0aGF0IG1hdGNoZXMgdGhpcyBmaWx0ZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3BzLmRlbGV0ZU1hbnkuZmlsdGVyXSBEZWxldGUgYWxsIGRvY3VtZW50cyB0aGF0IG1hdGNoIHRoaXMgZmlsdGVyXG4gKiBAcGFyYW0ge09iamVjdH0gW29wcy5yZXBsYWNlT25lLmZpbHRlcl0gUmVwbGFjZSB0aGUgZmlyc3QgZG9jdW1lbnQgdGhhdCBtYXRjaGVzIHRoaXMgZmlsdGVyXG4gKiBAcGFyYW0ge09iamVjdH0gW29wcy5yZXBsYWNlT25lLnJlcGxhY2VtZW50XSBUaGUgcmVwbGFjZW1lbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wcy5yZXBsYWNlT25lLnVwc2VydD1mYWxzZV0gSWYgdHJ1ZSwgaW5zZXJ0IGEgZG9jIGlmIG5vIGRvY3VtZW50cyBtYXRjaCBgZmlsdGVyYFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5vcmRlcmVkPXRydWVdIElmIHRydWUsIGV4ZWN1dGUgd3JpdGVzIGluIG9yZGVyIGFuZCBzdG9wIGF0IHRoZSBmaXJzdCBlcnJvci4gSWYgZmFsc2UsIGV4ZWN1dGUgd3JpdGVzIGluIHBhcmFsbGVsIGFuZCBjb250aW51ZSB1bnRpbCBhbGwgd3JpdGVzIGhhdmUgZWl0aGVyIHN1Y2NlZWRlZCBvciBlcnJvcmVkLlxuICogQHBhcmFtIHtDbGllbnRTZXNzaW9ufSBbb3B0aW9ucy5zZXNzaW9uPW51bGxdIFRoZSBzZXNzaW9uIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGJ1bGsgd3JpdGUuIFNlZSBbdHJhbnNhY3Rpb25zIGRvY3NdKGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy90cmFuc2FjdGlvbnMuaHRtbCkuXG4gKiBAcGFyYW0ge1N0cmluZ3xudW1iZXJ9IFtvcHRpb25zLnc9MV0gVGhlIFt3cml0ZSBjb25jZXJuXShodHRwczovL3d3dy5tb25nb2RiLmNvbS9kb2NzL21hbnVhbC9yZWZlcmVuY2Uvd3JpdGUtY29uY2Vybi8pLiBTZWUgW2BRdWVyeSN3KClgXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvYXBpL3F1ZXJ5Lmh0bWwjUXVlcnkucHJvdG90eXBlLncoKSkgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMud3RpbWVvdXQ9bnVsbF0gVGhlIFt3cml0ZSBjb25jZXJuIHRpbWVvdXRdKGh0dHBzOi8vd3d3Lm1vbmdvZGIuY29tL2RvY3MvbWFudWFsL3JlZmVyZW5jZS93cml0ZS1jb25jZXJuLyN3dGltZW91dCkuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmo9dHJ1ZV0gSWYgZmFsc2UsIGRpc2FibGUgW2pvdXJuYWwgYWNrbm93bGVkZ2VtZW50XShodHRwczovL3d3dy5tb25nb2RiLmNvbS9kb2NzL21hbnVhbC9yZWZlcmVuY2Uvd3JpdGUtY29uY2Vybi8jai1vcHRpb24pXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnNraXBWYWxpZGF0aW9uPWZhbHNlXSBTZXQgdG8gdHJ1ZSB0byBza2lwIE1vbmdvb3NlIHNjaGVtYSB2YWxpZGF0aW9uIG9uIGJ1bGsgd3JpdGUgb3BlcmF0aW9ucy4gTW9uZ29vc2UgY3VycmVudGx5IHJ1bnMgdmFsaWRhdGlvbiBvbiBgaW5zZXJ0T25lYCBhbmQgYHJlcGxhY2VPbmVgIG9wZXJhdGlvbnMgYnkgZGVmYXVsdC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uPWZhbHNlXSBJZiB0cnVlLCBkaXNhYmxlIFtNb25nb0RCIHNlcnZlci1zaWRlIHNjaGVtYSB2YWxpZGF0aW9uXShodHRwczovL3d3dy5tb25nb2RiLmNvbS9kb2NzL21hbnVhbC9jb3JlL3NjaGVtYS12YWxpZGF0aW9uLykgZm9yIGFsbCB3cml0ZXMgaW4gdGhpcyBidWxrLlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy50aHJvd09uVmFsaWRhdGlvbkVycm9yPWZhbHNlXSBJZiB0cnVlIGFuZCBgb3JkZXJlZDogZmFsc2VgLCB0aHJvdyBhbiBlcnJvciBpZiBvbmUgb2YgdGhlIG9wZXJhdGlvbnMgZmFpbGVkIHZhbGlkYXRpb24sIGJ1dCBhbGwgdmFsaWQgb3BlcmF0aW9ucyBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5LlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5zdHJpY3Q9bnVsbF0gT3ZlcndyaXRlcyB0aGUgW2BzdHJpY3RgIG9wdGlvbl0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2d1aWRlLmh0bWwjc3RyaWN0KSBvbiBzY2hlbWEuIElmIGZhbHNlLCBhbGxvd3MgZmlsdGVyaW5nIGFuZCB3cml0aW5nIGZpZWxkcyBub3QgZGVmaW5lZCBpbiB0aGUgc2NoZW1hIGZvciBhbGwgd3JpdGVzIGluIHRoaXMgYnVsay5cbiAqIEByZXR1cm4ge1Byb21pc2V9IHJlc29sdmVzIHRvIGEgW2BCdWxrV3JpdGVPcFJlc3VsdGBdKGh0dHBzOi8vbW9uZ29kYi5naXRodWIuaW8vbm9kZS1tb25nb2RiLW5hdGl2ZS80LjkvY2xhc3Nlcy9CdWxrV3JpdGVSZXN1bHQuaHRtbCkgaWYgdGhlIG9wZXJhdGlvbiBzdWNjZWVkc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Nb2RlbC5idWxrV3JpdGUgPSBhc3luYyBmdW5jdGlvbiBidWxrV3JpdGUob3BzLCBvcHRpb25zKSB7XG4gIF9jaGVja0NvbnRleHQodGhpcywgJ2J1bGtXcml0ZScpO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgdHlwZW9mIGFyZ3VtZW50c1syXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBNb25nb29zZUVycm9yKCdNb2RlbC5idWxrV3JpdGUoKSBubyBsb25nZXIgYWNjZXB0cyBhIGNhbGxiYWNrJyk7XG4gIH1cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgY29uc3Qgc2hvdWxkU2tpcCA9IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB0aGlzLmhvb2tzLmV4ZWNQcmUoJ2J1bGtXcml0ZScsIHRoaXMsIFtvcHMsIG9wdGlvbnNdLCAoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEthcmVlbS5za2lwV3JhcHBlZEZ1bmN0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgICByZXNvbHZlKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGlmIChzaG91bGRTa2lwKSB7XG4gICAgcmV0dXJuIHNob3VsZFNraXAuYXJnc1swXTtcbiAgfVxuXG4gIGNvbnN0IG9yZGVyZWQgPSBvcHRpb25zLm9yZGVyZWQgPT0gbnVsbCA/IHRydWUgOiBvcHRpb25zLm9yZGVyZWQ7XG5cbiAgaWYgKG9wcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZ2V0RGVmYXVsdEJ1bGt3cml0ZVJlc3VsdCgpO1xuICB9XG5cbiAgY29uc3QgdmFsaWRhdGlvbnMgPSBvcHMubWFwKG9wID0+IGNhc3RCdWxrV3JpdGUodGhpcywgb3AsIG9wdGlvbnMpKTtcblxuICBsZXQgcmVzID0gbnVsbDtcbiAgaWYgKG9yZGVyZWQpIHtcbiAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBlYWNoKHZhbGlkYXRpb25zLCAoZm4sIGNiKSA9PiBmbihjYiksIGVycm9yID0+IHtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChlcnJvcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRyeSB7XG4gICAgICByZXMgPSBhd2FpdCB0aGlzLiRfX2NvbGxlY3Rpb24uYnVsa1dyaXRlKG9wcywgb3B0aW9ucyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgX29wdHMgPSB7IGVycm9yOiBlcnJvciB9O1xuICAgICAgICB0aGlzLmhvb2tzLmV4ZWNQb3N0KCdidWxrV3JpdGUnLCB0aGlzLCBbbnVsbF0sIF9vcHRzLCAoZXJyKSA9PiB7XG4gICAgICAgICAgaWYgKGVyciAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGV0IHJlbWFpbmluZyA9IHZhbGlkYXRpb25zLmxlbmd0aDtcbiAgICBsZXQgdmFsaWRPcHMgPSBbXTtcbiAgICBsZXQgdmFsaWRhdGlvbkVycm9ycyA9IFtdO1xuICAgIGNvbnN0IHJlc3VsdHMgPSBbXTtcbiAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWxpZGF0aW9ucy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YWxpZGF0aW9uc1tpXSgoZXJyKSA9PiB7XG4gICAgICAgICAgaWYgKGVyciA9PSBudWxsKSB7XG4gICAgICAgICAgICB2YWxpZE9wcy5wdXNoKGkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWxpZGF0aW9uRXJyb3JzLnB1c2goeyBpbmRleDogaSwgZXJyb3I6IGVyciB9KTtcbiAgICAgICAgICAgIHJlc3VsdHNbaV0gPSBlcnI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgtLXJlbWFpbmluZyA8PSAwKSB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhbGlkYXRpb25FcnJvcnMgPSB2YWxpZGF0aW9uRXJyb3JzLlxuICAgICAgc29ydCgodjEsIHYyKSA9PiB2MS5pbmRleCAtIHYyLmluZGV4KS5cbiAgICAgIG1hcCh2ID0+IHYuZXJyb3IpO1xuXG4gICAgY29uc3QgdmFsaWRPcEluZGV4ZXMgPSB2YWxpZE9wcztcbiAgICB2YWxpZE9wcyA9IHZhbGlkT3BzLnNvcnQoKS5tYXAoaW5kZXggPT4gb3BzW2luZGV4XSk7XG5cbiAgICBpZiAodmFsaWRPcHMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gZ2V0RGVmYXVsdEJ1bGt3cml0ZVJlc3VsdCgpO1xuICAgIH1cblxuICAgIGxldCBlcnJvcjtcbiAgICBbcmVzLCBlcnJvcl0gPSBhd2FpdCB0aGlzLiRfX2NvbGxlY3Rpb24uYnVsa1dyaXRlKHZhbGlkT3BzLCBvcHRpb25zKS5cbiAgICAgIHRoZW4ocmVzID0+IChbcmVzLCBudWxsXSkpLlxuICAgICAgY2F0Y2goZXJyID0+IChbbnVsbCwgZXJyXSkpO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBpZiAodmFsaWRhdGlvbkVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGVycm9yLm1vbmdvb3NlID0gZXJyb3IubW9uZ29vc2UgfHwge307XG4gICAgICAgIGVycm9yLm1vbmdvb3NlLnZhbGlkYXRpb25FcnJvcnMgPSB2YWxpZGF0aW9uRXJyb3JzO1xuICAgICAgfVxuXG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IF9vcHRzID0geyBlcnJvcjogZXJyb3IgfTtcbiAgICAgICAgdGhpcy5ob29rcy5leGVjUG9zdCgnYnVsa1dyaXRlJywgdGhpcywgW251bGxdLCBfb3B0cywgKGVycikgPT4ge1xuICAgICAgICAgIGlmIChlcnIgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWxpZE9wSW5kZXhlcy5sZW5ndGg7ICsraSkge1xuICAgICAgcmVzdWx0c1t2YWxpZE9wSW5kZXhlc1tpXV0gPSBudWxsO1xuICAgIH1cbiAgICBpZiAodmFsaWRhdGlvbkVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAob3B0aW9ucy50aHJvd09uVmFsaWRhdGlvbkVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBNb25nb29zZUJ1bGtXcml0ZUVycm9yKFxuICAgICAgICAgIHZhbGlkYXRpb25FcnJvcnMsXG4gICAgICAgICAgcmVzdWx0cyxcbiAgICAgICAgICByZXMsXG4gICAgICAgICAgJ2J1bGtXcml0ZSdcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcy5tb25nb29zZSA9IHJlcy5tb25nb29zZSB8fCB7fTtcbiAgICAgICAgcmVzLm1vbmdvb3NlLnZhbGlkYXRpb25FcnJvcnMgPSB2YWxpZGF0aW9uRXJyb3JzO1xuICAgICAgICByZXMubW9uZ29vc2UucmVzdWx0cyA9IHJlc3VsdHM7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHRoaXMuaG9va3MuZXhlY1Bvc3QoJ2J1bGtXcml0ZScsIHRoaXMsIFtyZXNdLCAoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZSgpO1xuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gcmVzO1xufTtcblxuLyoqXG4gKiAgdGFrZXMgYW4gYXJyYXkgb2YgZG9jdW1lbnRzLCBnZXRzIHRoZSBjaGFuZ2VzIGFuZCBpbnNlcnRzL3VwZGF0ZXMgZG9jdW1lbnRzIGluIHRoZSBkYXRhYmFzZVxuICogIGFjY29yZGluZyB0byB3aGV0aGVyIG9yIG5vdCB0aGUgZG9jdW1lbnQgaXMgbmV3LCBvciB3aGV0aGVyIGl0IGhhcyBjaGFuZ2VzIG9yIG5vdC5cbiAqXG4gKiBgYnVsa1NhdmVgIHVzZXMgYGJ1bGtXcml0ZWAgdW5kZXIgdGhlIGhvb2QsIHNvIGl0J3MgbW9zdGx5IHVzZWZ1bCB3aGVuIGRlYWxpbmcgd2l0aCBtYW55IGRvY3VtZW50cyAoMTBLKylcbiAqXG4gKiBAcGFyYW0ge0FycmF5PERvY3VtZW50Pn0gZG9jdW1lbnRzXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIG9wdGlvbnMgcGFzc2VkIHRvIHRoZSB1bmRlcmx5aW5nIGBidWxrV3JpdGUoKWBcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudGltZXN0YW1wc10gZGVmYXVsdHMgdG8gYG51bGxgLCB3aGVuIHNldCB0byBmYWxzZSwgbW9uZ29vc2Ugd2lsbCBub3QgYWRkL3VwZGF0ZSB0aW1lc3RhbXBzIHRvIHRoZSBkb2N1bWVudHMuXG4gKiBAcGFyYW0ge0NsaWVudFNlc3Npb259IFtvcHRpb25zLnNlc3Npb249bnVsbF0gVGhlIHNlc3Npb24gYXNzb2NpYXRlZCB3aXRoIHRoaXMgYnVsayB3cml0ZS4gU2VlIFt0cmFuc2FjdGlvbnMgZG9jc10oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL3RyYW5zYWN0aW9ucy5odG1sKS5cbiAqIEBwYXJhbSB7U3RyaW5nfG51bWJlcn0gW29wdGlvbnMudz0xXSBUaGUgW3dyaXRlIGNvbmNlcm5dKGh0dHBzOi8vd3d3Lm1vbmdvZGIuY29tL2RvY3MvbWFudWFsL3JlZmVyZW5jZS93cml0ZS1jb25jZXJuLykuIFNlZSBbYFF1ZXJ5I3coKWBdKGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9hcGkvcXVlcnkuaHRtbCNRdWVyeS5wcm90b3R5cGUudygpKSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy53dGltZW91dD1udWxsXSBUaGUgW3dyaXRlIGNvbmNlcm4gdGltZW91dF0oaHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZG9jcy9tYW51YWwvcmVmZXJlbmNlL3dyaXRlLWNvbmNlcm4vI3d0aW1lb3V0KS5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuaj10cnVlXSBJZiBmYWxzZSwgZGlzYWJsZSBbam91cm5hbCBhY2tub3dsZWRnZW1lbnRdKGh0dHBzOi8vd3d3Lm1vbmdvZGIuY29tL2RvY3MvbWFudWFsL3JlZmVyZW5jZS93cml0ZS1jb25jZXJuLyNqLW9wdGlvbilcbiAqXG4gKi9cbk1vZGVsLmJ1bGtTYXZlID0gYXN5bmMgZnVuY3Rpb24gYnVsa1NhdmUoZG9jdW1lbnRzLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIGlmIChvcHRpb25zLnRpbWVzdGFtcHMgIT0gbnVsbCkge1xuICAgIGZvciAoY29uc3QgZG9jdW1lbnQgb2YgZG9jdW1lbnRzKSB7XG4gICAgICBkb2N1bWVudC4kX18uc2F2ZU9wdGlvbnMgPSBkb2N1bWVudC4kX18uc2F2ZU9wdGlvbnMgfHwge307XG4gICAgICBkb2N1bWVudC4kX18uc2F2ZU9wdGlvbnMudGltZXN0YW1wcyA9IG9wdGlvbnMudGltZXN0YW1wcztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yIChjb25zdCBkb2N1bWVudCBvZiBkb2N1bWVudHMpIHtcbiAgICAgIGlmIChkb2N1bWVudC4kX18udGltZXN0YW1wcyAhPSBudWxsKSB7XG4gICAgICAgIGRvY3VtZW50LiRfXy5zYXZlT3B0aW9ucyA9IGRvY3VtZW50LiRfXy5zYXZlT3B0aW9ucyB8fCB7fTtcbiAgICAgICAgZG9jdW1lbnQuJF9fLnNhdmVPcHRpb25zLnRpbWVzdGFtcHMgPSBkb2N1bWVudC4kX18udGltZXN0YW1wcztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBhd2FpdCBQcm9taXNlLmFsbChkb2N1bWVudHMubWFwKGJ1aWxkUHJlU2F2ZVByb21pc2UpKTtcblxuICBjb25zdCB3cml0ZU9wZXJhdGlvbnMgPSB0aGlzLmJ1aWxkQnVsa1dyaXRlT3BlcmF0aW9ucyhkb2N1bWVudHMsIHsgc2tpcFZhbGlkYXRpb246IHRydWUsIHRpbWVzdGFtcHM6IG9wdGlvbnMudGltZXN0YW1wcyB9KTtcblxuICBjb25zdCB7IGJ1bGtXcml0ZVJlc3VsdCwgYnVsa1dyaXRlRXJyb3IgfSA9IGF3YWl0IHRoaXMuYnVsa1dyaXRlKHdyaXRlT3BlcmF0aW9ucywgb3B0aW9ucykudGhlbihcbiAgICAocmVzKSA9PiAoeyBidWxrV3JpdGVSZXN1bHQ6IHJlcywgYnVsa1dyaXRlRXJyb3I6IG51bGwgfSksXG4gICAgKGVycikgPT4gKHsgYnVsa1dyaXRlUmVzdWx0OiBudWxsLCBidWxrV3JpdGVFcnJvcjogZXJyIH0pXG4gICk7XG5cbiAgYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgZG9jdW1lbnRzLm1hcChhc3luYyhkb2N1bWVudCkgPT4ge1xuICAgICAgY29uc3QgZG9jdW1lbnRFcnJvciA9IGJ1bGtXcml0ZUVycm9yICYmIGJ1bGtXcml0ZUVycm9yLndyaXRlRXJyb3JzLmZpbmQod3JpdGVFcnJvciA9PiB7XG4gICAgICAgIGNvbnN0IHdyaXRlRXJyb3JEb2N1bWVudElkID0gd3JpdGVFcnJvci5lcnIub3AuX2lkIHx8IHdyaXRlRXJyb3IuZXJyLm9wLnEuX2lkO1xuICAgICAgICByZXR1cm4gd3JpdGVFcnJvckRvY3VtZW50SWQudG9TdHJpbmcoKSA9PT0gZG9jdW1lbnQuX2lkLnRvU3RyaW5nKCk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGRvY3VtZW50RXJyb3IgPT0gbnVsbCkge1xuICAgICAgICBhd2FpdCBoYW5kbGVTdWNjZXNzZnVsV3JpdGUoZG9jdW1lbnQpO1xuICAgICAgfVxuICAgIH0pXG4gICk7XG5cbiAgaWYgKGJ1bGtXcml0ZUVycm9yICYmIGJ1bGtXcml0ZUVycm9yLndyaXRlRXJyb3JzICYmIGJ1bGtXcml0ZUVycm9yLndyaXRlRXJyb3JzLmxlbmd0aCkge1xuICAgIHRocm93IGJ1bGtXcml0ZUVycm9yO1xuICB9XG5cbiAgcmV0dXJuIGJ1bGtXcml0ZVJlc3VsdDtcbn07XG5cbmZ1bmN0aW9uIGJ1aWxkUHJlU2F2ZVByb21pc2UoZG9jdW1lbnQpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBkb2N1bWVudC5zY2hlbWEucy5ob29rcy5leGVjUHJlKCdzYXZlJywgZG9jdW1lbnQsIChlcnIpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUoKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVN1Y2Nlc3NmdWxXcml0ZShkb2N1bWVudCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGlmIChkb2N1bWVudC4kaXNOZXcpIHtcbiAgICAgIF9zZXRJc05ldyhkb2N1bWVudCwgZmFsc2UpO1xuICAgIH1cblxuICAgIGRvY3VtZW50LiRfX3Jlc2V0KCk7XG4gICAgZG9jdW1lbnQuc2NoZW1hLnMuaG9va3MuZXhlY1Bvc3QoJ3NhdmUnLCBkb2N1bWVudCwgW2RvY3VtZW50XSwge30sIChlcnIpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUoKTtcbiAgICB9KTtcblxuICB9KTtcbn1cblxuLyoqXG4gKiBBcHBseSBkZWZhdWx0cyB0byB0aGUgZ2l2ZW4gZG9jdW1lbnQgb3IgUE9KTy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxEb2N1bWVudH0gb2JqIG9iamVjdCBvciBkb2N1bWVudCB0byBhcHBseSBkZWZhdWx0cyBvblxuICogQHJldHVybnMge09iamVjdHxEb2N1bWVudH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTW9kZWwuYXBwbHlEZWZhdWx0cyA9IGZ1bmN0aW9uIGFwcGx5RGVmYXVsdHMoZG9jKSB7XG4gIGlmIChkb2MuJF9fICE9IG51bGwpIHtcbiAgICBhcHBseURlZmF1bHRzSGVscGVyKGRvYywgZG9jLiRfXy5maWVsZHMsIGRvYy4kX18uZXhjbHVkZSk7XG5cbiAgICBmb3IgKGNvbnN0IHN1YmRvYyBvZiBkb2MuJGdldEFsbFN1YmRvY3MoKSkge1xuICAgICAgYXBwbHlEZWZhdWx0cyhzdWJkb2MsIHN1YmRvYy4kX18uZmllbGRzLCBzdWJkb2MuJF9fLmV4Y2x1ZGUpO1xuICAgIH1cblxuICAgIHJldHVybiBkb2M7XG4gIH1cblxuICBhcHBseURlZmF1bHRzVG9QT0pPKGRvYywgdGhpcy5zY2hlbWEpO1xuXG4gIHJldHVybiBkb2M7XG59O1xuXG4vKipcbiAqIENhc3QgdGhlIGdpdmVuIFBPSk8gdG8gdGhlIG1vZGVsJ3Mgc2NoZW1hXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBjb25zdCBUZXN0ID0gbW9uZ29vc2UubW9kZWwoJ1Rlc3QnLCBTY2hlbWEoeyBudW06IE51bWJlciB9KSk7XG4gKlxuICogICAgIGNvbnN0IG9iaiA9IFRlc3QuY2FzdE9iamVjdCh7IG51bTogJzQyJyB9KTtcbiAqICAgICBvYmoubnVtOyAvLyA0MiBhcyBhIG51bWJlclxuICpcbiAqICAgICBUZXN0LmNhc3RPYmplY3QoeyBudW06ICdub3QgYSBudW1iZXInIH0pOyAvLyBUaHJvd3MgYSBWYWxpZGF0aW9uRXJyb3JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIG9iamVjdCBvciBkb2N1bWVudCB0byBjYXN0XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBvcHRpb25zIHBhc3NlZCB0byBjYXN0T2JqZWN0XG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMuaWdub3JlQ2FzdEVycm9ycyBJZiBzZXQgdG8gYHRydWVgIHdpbGwgbm90IHRocm93IGEgVmFsaWRhdGlvbkVycm9yIGFuZCBvbmx5IHJldHVybiB2YWx1ZXMgdGhhdCB3ZXJlIHN1Y2Nlc3NmdWxseSBjYXN0LlxuICogQHJldHVybnMge09iamVjdH0gUE9KTyBjYXN0ZWQgdG8gdGhlIG1vZGVsJ3Mgc2NoZW1hXG4gKiBAdGhyb3dzIHtWYWxpZGF0aW9uRXJyb3J9IGlmIGNhc3RpbmcgZmFpbGVkIGZvciBhdCBsZWFzdCBvbmUgcGF0aFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Nb2RlbC5jYXN0T2JqZWN0ID0gZnVuY3Rpb24gY2FzdE9iamVjdChvYmosIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGNvbnN0IHJldCA9IHt9O1xuXG4gIGNvbnN0IHNjaGVtYSA9IHRoaXMuc2NoZW1hO1xuICBjb25zdCBwYXRocyA9IE9iamVjdC5rZXlzKHNjaGVtYS5wYXRocyk7XG5cbiAgZm9yIChjb25zdCBwYXRoIG9mIHBhdGhzKSB7XG4gICAgY29uc3Qgc2NoZW1hVHlwZSA9IHNjaGVtYS5wYXRoKHBhdGgpO1xuICAgIGlmICghc2NoZW1hVHlwZSB8fCAhc2NoZW1hVHlwZS4kaXNNb25nb29zZUFycmF5KSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBjb25zdCB2YWwgPSBnZXQob2JqLCBwYXRoKTtcbiAgICBwdXNoTmVzdGVkQXJyYXlQYXRocyhwYXRocywgdmFsLCBwYXRoKTtcbiAgfVxuXG4gIGxldCBlcnJvciA9IG51bGw7XG5cbiAgZm9yIChjb25zdCBwYXRoIG9mIHBhdGhzKSB7XG4gICAgY29uc3Qgc2NoZW1hVHlwZSA9IHNjaGVtYS5wYXRoKHBhdGgpO1xuICAgIGlmIChzY2hlbWFUeXBlID09IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGxldCB2YWwgPSBnZXQob2JqLCBwYXRoLCB2b2lkIDApO1xuXG4gICAgaWYgKHZhbCA9PSBudWxsKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBjb25zdCBwaWVjZXMgPSBwYXRoLmluZGV4T2YoJy4nKSA9PT0gLTEgPyBbcGF0aF0gOiBwYXRoLnNwbGl0KCcuJyk7XG4gICAgbGV0IGN1ciA9IHJldDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBpZWNlcy5sZW5ndGggLSAxOyArK2kpIHtcbiAgICAgIGlmIChjdXJbcGllY2VzW2ldXSA9PSBudWxsKSB7XG4gICAgICAgIGN1cltwaWVjZXNbaV1dID0gaXNOYU4ocGllY2VzW2kgKyAxXSkgPyB7fSA6IFtdO1xuICAgICAgfVxuICAgICAgY3VyID0gY3VyW3BpZWNlc1tpXV07XG4gICAgfVxuXG4gICAgaWYgKHNjaGVtYVR5cGUuJGlzTW9uZ29vc2VEb2N1bWVudEFycmF5KSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKHNjaGVtYVR5cGUuJGlzU2luZ2xlTmVzdGVkIHx8IHNjaGVtYVR5cGUuJGlzTW9uZ29vc2VEb2N1bWVudEFycmF5RWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFsID0gTW9kZWwuY2FzdE9iamVjdC5jYWxsKHNjaGVtYVR5cGUuY2FzdGVyLCB2YWwpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmICghb3B0aW9ucy5pZ25vcmVDYXN0RXJyb3JzKSB7XG4gICAgICAgICAgZXJyb3IgPSBlcnJvciB8fCBuZXcgVmFsaWRhdGlvbkVycm9yKCk7XG4gICAgICAgICAgZXJyb3IuYWRkRXJyb3IocGF0aCwgZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY3VyW3BpZWNlc1twaWVjZXMubGVuZ3RoIC0gMV1dID0gdmFsO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHZhbCA9IHNjaGVtYVR5cGUuY2FzdCh2YWwpO1xuICAgICAgY3VyW3BpZWNlc1twaWVjZXMubGVuZ3RoIC0gMV1dID0gdmFsO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKCFvcHRpb25zLmlnbm9yZUNhc3RFcnJvcnMpIHtcbiAgICAgICAgZXJyb3IgPSBlcnJvciB8fCBuZXcgVmFsaWRhdGlvbkVycm9yKCk7XG4gICAgICAgIGVycm9yLmFkZEVycm9yKHBhdGgsIGVycik7XG4gICAgICB9XG5cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChlcnJvciAhPSBudWxsKSB7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufTtcblxuLyoqXG4gKiBCdWlsZCBidWxrIHdyaXRlIG9wZXJhdGlvbnMgZm9yIGBidWxrU2F2ZSgpYC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PERvY3VtZW50Pn0gZG9jdW1lbnRzIFRoZSBhcnJheSBvZiBkb2N1bWVudHMgdG8gYnVpbGQgd3JpdGUgb3BlcmF0aW9ucyBvZlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy5za2lwVmFsaWRhdGlvbiBkZWZhdWx0cyB0byBgZmFsc2VgLCB3aGVuIHNldCB0byB0cnVlLCBidWlsZGluZyB0aGUgd3JpdGUgb3BlcmF0aW9ucyB3aWxsIGJ5cGFzcyB2YWxpZGF0aW5nIHRoZSBkb2N1bWVudHMuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMudGltZXN0YW1wcyBkZWZhdWx0cyB0byBgbnVsbGAsIHdoZW4gc2V0IHRvIGZhbHNlLCBtb25nb29zZSB3aWxsIG5vdCBhZGQvdXBkYXRlIHRpbWVzdGFtcHMgdG8gdGhlIGRvY3VtZW50cy5cbiAqIEByZXR1cm4ge0FycmF5PFByb21pc2U+fSBSZXR1cm5zIGEgYXJyYXkgb2YgYWxsIFByb21pc2VzIHRoZSBmdW5jdGlvbiBleGVjdXRlcyB0byBiZSBhd2FpdGVkLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTW9kZWwuYnVpbGRCdWxrV3JpdGVPcGVyYXRpb25zID0gZnVuY3Rpb24gYnVpbGRCdWxrV3JpdGVPcGVyYXRpb25zKGRvY3VtZW50cywgb3B0aW9ucykge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoZG9jdW1lbnRzKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgYnVsa1NhdmUgZXhwZWN0cyBhbiBhcnJheSBvZiBkb2N1bWVudHMgdG8gYmUgcGFzc2VkLCByZWNlaXZlZCBcXGAke2RvY3VtZW50c31cXGAgaW5zdGVhZGApO1xuICB9XG5cbiAgc2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgY29uc3QgZGlzY3JpbWluYXRvcktleSA9IHRoaXMuc2NoZW1hLm9wdGlvbnMuZGlzY3JpbWluYXRvcktleTtcblxuICBjb25zdCB3cml0ZU9wZXJhdGlvbnMgPSBkb2N1bWVudHMucmVkdWNlKChhY2N1bXVsYXRvciwgZG9jdW1lbnQsIGkpID0+IHtcbiAgICBpZiAoIW9wdGlvbnMuc2tpcFZhbGlkYXRpb24pIHtcbiAgICAgIGlmICghKGRvY3VtZW50IGluc3RhbmNlb2YgRG9jdW1lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgZG9jdW1lbnRzLiR7aX0gd2FzIG5vdCBhIG1vbmdvb3NlIGRvY3VtZW50LCBkb2N1bWVudHMgbXVzdCBiZSBhbiBhcnJheSBvZiBtb25nb29zZSBkb2N1bWVudHMgKGluc3RhbmNlb2YgbW9uZ29vc2UuRG9jdW1lbnQpLmApO1xuICAgICAgfVxuICAgICAgY29uc3QgdmFsaWRhdGlvbkVycm9yID0gZG9jdW1lbnQudmFsaWRhdGVTeW5jKCk7XG4gICAgICBpZiAodmFsaWRhdGlvbkVycm9yKSB7XG4gICAgICAgIHRocm93IHZhbGlkYXRpb25FcnJvcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBpc0FOZXdEb2N1bWVudCA9IGRvY3VtZW50LmlzTmV3O1xuICAgIGlmIChpc0FOZXdEb2N1bWVudCkge1xuICAgICAgY29uc3Qgd3JpdGVPcGVyYXRpb24gPSB7IGluc2VydE9uZTogeyBkb2N1bWVudCB9IH07XG4gICAgICB1dGlscy5pbmplY3RUaW1lc3RhbXBzT3B0aW9uKHdyaXRlT3BlcmF0aW9uLmluc2VydE9uZSwgb3B0aW9ucy50aW1lc3RhbXBzKTtcbiAgICAgIGFjY3VtdWxhdG9yLnB1c2god3JpdGVPcGVyYXRpb24pO1xuXG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgY29uc3QgZGVsdGEgPSBkb2N1bWVudC4kX19kZWx0YSgpO1xuICAgIGNvbnN0IGlzRG9jdW1lbnRXaXRoQ2hhbmdlcyA9IGRlbHRhICE9IG51bGwgJiYgIXV0aWxzLmlzRW1wdHlPYmplY3QoZGVsdGFbMF0pO1xuXG4gICAgaWYgKGlzRG9jdW1lbnRXaXRoQ2hhbmdlcykge1xuICAgICAgY29uc3Qgd2hlcmUgPSBkb2N1bWVudC4kX193aGVyZShkZWx0YVswXSk7XG4gICAgICBjb25zdCBjaGFuZ2VzID0gZGVsdGFbMV07XG5cbiAgICAgIF9hcHBseUN1c3RvbVdoZXJlKGRvY3VtZW50LCB3aGVyZSk7XG5cbiAgICAgIC8vIFNldCB0aGUgZGlzY3JpbWluYXRvciBrZXksIHNvIGJ1bGsgd3JpdGUgY2FzdGluZyBrbm93cyB3aGljaFxuICAgICAgLy8gc2NoZW1hIHRvIHVzZSByZTogZ2gtMTM5MDdcbiAgICAgIGlmIChkb2N1bWVudFtkaXNjcmltaW5hdG9yS2V5XSAhPSBudWxsICYmICEoZGlzY3JpbWluYXRvcktleSBpbiB3aGVyZSkpIHtcbiAgICAgICAgd2hlcmVbZGlzY3JpbWluYXRvcktleV0gPSBkb2N1bWVudFtkaXNjcmltaW5hdG9yS2V5XTtcbiAgICAgIH1cblxuICAgICAgZG9jdW1lbnQuJF9fdmVyc2lvbih3aGVyZSwgZGVsdGEpO1xuICAgICAgY29uc3Qgd3JpdGVPcGVyYXRpb24gPSB7IHVwZGF0ZU9uZTogeyBmaWx0ZXI6IHdoZXJlLCB1cGRhdGU6IGNoYW5nZXMgfSB9O1xuICAgICAgdXRpbHMuaW5qZWN0VGltZXN0YW1wc09wdGlvbih3cml0ZU9wZXJhdGlvbi51cGRhdGVPbmUsIG9wdGlvbnMudGltZXN0YW1wcyk7XG4gICAgICBhY2N1bXVsYXRvci5wdXNoKHdyaXRlT3BlcmF0aW9uKTtcblxuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfSwgW10pO1xuXG4gIHJldHVybiB3cml0ZU9wZXJhdGlvbnM7XG5cblxuICBmdW5jdGlvbiBzZXREZWZhdWx0T3B0aW9ucygpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBpZiAob3B0aW9ucy5za2lwVmFsaWRhdGlvbiA9PSBudWxsKSB7XG4gICAgICBvcHRpb25zLnNraXBWYWxpZGF0aW9uID0gZmFsc2U7XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogU2hvcnRjdXQgZm9yIGNyZWF0aW5nIGEgbmV3IERvY3VtZW50IGZyb20gZXhpc3RpbmcgcmF3IGRhdGEsIHByZS1zYXZlZCBpbiB0aGUgREIuXG4gKiBUaGUgZG9jdW1lbnQgcmV0dXJuZWQgaGFzIG5vIHBhdGhzIG1hcmtlZCBhcyBtb2RpZmllZCBpbml0aWFsbHkuXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICAvLyBoeWRyYXRlIHByZXZpb3VzIGRhdGEgaW50byBhIE1vbmdvb3NlIGRvY3VtZW50XG4gKiAgICAgY29uc3QgbW9uZ29vc2VDYW5keSA9IENhbmR5Lmh5ZHJhdGUoeyBfaWQ6ICc1NDEwODMzNzIxMmZmYjZkNDU5Zjg1NGMnLCB0eXBlOiAnamVsbHkgYmVhbicgfSk7XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfFN0cmluZ1tdfSBbcHJvamVjdGlvbl0gb3B0aW9uYWwgcHJvamVjdGlvbiBjb250YWluaW5nIHdoaWNoIGZpZWxkcyBzaG91bGQgYmUgc2VsZWN0ZWQgZm9yIHRoaXMgZG9jdW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gb3B0aW9uYWwgb3B0aW9uc1xuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5zZXR0ZXJzPWZhbHNlXSBpZiB0cnVlLCBhcHBseSBzY2hlbWEgc2V0dGVycyB3aGVuIGh5ZHJhdGluZ1xuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5oeWRyYXRlZFBvcHVsYXRlZERvY3M9ZmFsc2VdIGlmIHRydWUsIHBvcHVsYXRlcyB0aGUgZG9jcyBpZiBwYXNzaW5nIHByZS1wb3B1bGF0ZWQgZGF0YVxuICogQHJldHVybiB7RG9jdW1lbnR9IGRvY3VtZW50IGluc3RhbmNlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1vZGVsLmh5ZHJhdGUgPSBmdW5jdGlvbihvYmosIHByb2plY3Rpb24sIG9wdGlvbnMpIHtcbiAgX2NoZWNrQ29udGV4dCh0aGlzLCAnaHlkcmF0ZScpO1xuXG4gIGlmIChwcm9qZWN0aW9uICE9IG51bGwpIHtcbiAgICBpZiAob2JqICE9IG51bGwgJiYgb2JqLiRfXyAhPSBudWxsKSB7XG4gICAgICBvYmogPSBvYmoudG9PYmplY3QoaW50ZXJuYWxUb09iamVjdE9wdGlvbnMpO1xuICAgIH1cbiAgICBvYmogPSBhcHBseVByb2plY3Rpb24ob2JqLCBwcm9qZWN0aW9uKTtcbiAgfVxuICBjb25zdCBkb2N1bWVudCA9IHJlcXVpcmUoJy4vcXVlcnlIZWxwZXJzJykuY3JlYXRlTW9kZWwodGhpcywgb2JqLCBwcm9qZWN0aW9uKTtcbiAgZG9jdW1lbnQuJGluaXQob2JqLCBvcHRpb25zKTtcbiAgcmV0dXJuIGRvY3VtZW50O1xufTtcblxuLyoqXG4gKiBTYW1lIGFzIGB1cGRhdGVPbmUoKWAsIGV4Y2VwdCBNb25nb0RCIHdpbGwgdXBkYXRlIF9hbGxfIGRvY3VtZW50cyB0aGF0IG1hdGNoXG4gKiBgZmlsdGVyYCAoYXMgb3Bwb3NlZCB0byBqdXN0IHRoZSBmaXJzdCBvbmUpIHJlZ2FyZGxlc3Mgb2YgdGhlIHZhbHVlIG9mXG4gKiB0aGUgYG11bHRpYCBvcHRpb24uXG4gKlxuICogKipOb3RlKiogdXBkYXRlTWFueSB3aWxsIF9ub3RfIGZpcmUgdXBkYXRlIG1pZGRsZXdhcmUuIFVzZSBgcHJlKCd1cGRhdGVNYW55JylgXG4gKiBhbmQgYHBvc3QoJ3VwZGF0ZU1hbnknKWAgaW5zdGVhZC5cbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKlxuICogICAgIGNvbnN0IHJlcyA9IGF3YWl0IFBlcnNvbi51cGRhdGVNYW55KHsgbmFtZTogL1N0YXJrJC8gfSwgeyBpc0RlbGV0ZWQ6IHRydWUgfSk7XG4gKiAgICAgcmVzLm1hdGNoZWRDb3VudDsgLy8gTnVtYmVyIG9mIGRvY3VtZW50cyBtYXRjaGVkXG4gKiAgICAgcmVzLm1vZGlmaWVkQ291bnQ7IC8vIE51bWJlciBvZiBkb2N1bWVudHMgbW9kaWZpZWRcbiAqICAgICByZXMuYWNrbm93bGVkZ2VkOyAvLyBCb29sZWFuIGluZGljYXRpbmcgZXZlcnl0aGluZyB3ZW50IHNtb290aGx5LlxuICogICAgIHJlcy51cHNlcnRlZElkOyAvLyBudWxsIG9yIGFuIGlkIGNvbnRhaW5pbmcgYSBkb2N1bWVudCB0aGF0IGhhZCB0byBiZSB1cHNlcnRlZC5cbiAqICAgICByZXMudXBzZXJ0ZWRDb3VudDsgLy8gTnVtYmVyIGluZGljYXRpbmcgaG93IG1hbnkgZG9jdW1lbnRzIGhhZCB0byBiZSB1cHNlcnRlZC4gV2lsbCBlaXRoZXIgYmUgMCBvciAxLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gdHJpZ2dlcnMgdGhlIGZvbGxvd2luZyBtaWRkbGV3YXJlLlxuICpcbiAqIC0gYHVwZGF0ZU1hbnkoKWBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZmlsdGVyXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gdXBkYXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIG9wdGlvbmFsIHNlZSBbYFF1ZXJ5LnByb3RvdHlwZS5zZXRPcHRpb25zKClgXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvYXBpL3F1ZXJ5Lmh0bWwjUXVlcnkucHJvdG90eXBlLnNldE9wdGlvbnMoKSlcbiAqIEBwYXJhbSB7Qm9vbGVhbnxTdHJpbmd9IFtvcHRpb25zLnN0cmljdF0gb3ZlcndyaXRlcyB0aGUgc2NoZW1hJ3MgW3N0cmljdCBtb2RlIG9wdGlvbl0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2d1aWRlLmh0bWwjc3RyaWN0KVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51cHNlcnQ9ZmFsc2VdIGlmIHRydWUsIGFuZCBubyBkb2N1bWVudHMgZm91bmQsIGluc2VydCBhIG5ldyBkb2N1bWVudFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLndyaXRlQ29uY2Vybj1udWxsXSBzZXRzIHRoZSBbd3JpdGUgY29uY2Vybl0oaHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZG9jcy9tYW51YWwvcmVmZXJlbmNlL3dyaXRlLWNvbmNlcm4vKSBmb3IgcmVwbGljYSBzZXRzLiBPdmVycmlkZXMgdGhlIFtzY2hlbWEtbGV2ZWwgd3JpdGUgY29uY2Vybl0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2d1aWRlLmh0bWwjd3JpdGVDb25jZXJuKVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy50aW1lc3RhbXBzPW51bGxdIElmIHNldCB0byBgZmFsc2VgIGFuZCBbc2NoZW1hLWxldmVsIHRpbWVzdGFtcHNdKGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9ndWlkZS5odG1sI3RpbWVzdGFtcHMpIGFyZSBlbmFibGVkLCBza2lwIHRpbWVzdGFtcHMgZm9yIHRoaXMgdXBkYXRlLiBEb2VzIG5vdGhpbmcgaWYgc2NoZW1hLWxldmVsIHRpbWVzdGFtcHMgYXJlIG5vdCBzZXQuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnRyYW5zbGF0ZUFsaWFzZXM9bnVsbF0gSWYgc2V0IHRvIGB0cnVlYCwgdHJhbnNsYXRlcyBhbnkgc2NoZW1hLWRlZmluZWQgYWxpYXNlcyBpbiBgZmlsdGVyYCwgYHByb2plY3Rpb25gLCBgdXBkYXRlYCwgYW5kIGBkaXN0aW5jdGAuIFRocm93cyBhbiBlcnJvciBpZiB0aGVyZSBhcmUgYW55IGNvbmZsaWN0cyB3aGVyZSBib3RoIGFsaWFzIGFuZCByYXcgcHJvcGVydHkgYXJlIGRlZmluZWQgb24gdGhlIHNhbWUgb2JqZWN0LlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5vdmVyd3JpdGVEaXNjcmltaW5hdG9yS2V5PWZhbHNlXSBNb25nb29zZSByZW1vdmVzIGRpc2NyaW1pbmF0b3Iga2V5IHVwZGF0ZXMgZnJvbSBgdXBkYXRlYCBieSBkZWZhdWx0LCBzZXQgYG92ZXJ3cml0ZURpc2NyaW1pbmF0b3JLZXlgIHRvIGB0cnVlYCB0byBhbGxvdyB1cGRhdGluZyB0aGUgZGlzY3JpbWluYXRvciBrZXlcbiAqIEByZXR1cm4ge1F1ZXJ5fVxuICogQHNlZSBRdWVyeSBkb2NzIGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9xdWVyaWVzLmh0bWxcbiAqIEBzZWUgTW9uZ29EQiBkb2NzIGh0dHBzOi8vd3d3Lm1vbmdvZGIuY29tL2RvY3MvbWFudWFsL3JlZmVyZW5jZS9jb21tYW5kL3VwZGF0ZS8jdXBkYXRlLWNvbW1hbmQtb3V0cHV0XG4gKiBAc2VlIFVwZGF0ZVJlc3VsdCBodHRwczovL21vbmdvZGIuZ2l0aHViLmlvL25vZGUtbW9uZ29kYi1uYXRpdmUvNC45L2ludGVyZmFjZXMvVXBkYXRlUmVzdWx0Lmh0bWxcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTW9kZWwudXBkYXRlTWFueSA9IGZ1bmN0aW9uIHVwZGF0ZU1hbnkoY29uZGl0aW9ucywgZG9jLCBvcHRpb25zKSB7XG4gIF9jaGVja0NvbnRleHQodGhpcywgJ3VwZGF0ZU1hbnknKTtcblxuICByZXR1cm4gX3VwZGF0ZSh0aGlzLCAndXBkYXRlTWFueScsIGNvbmRpdGlvbnMsIGRvYywgb3B0aW9ucyk7XG59O1xuXG4vKipcbiAqIFVwZGF0ZSBfb25seV8gdGhlIGZpcnN0IGRvY3VtZW50IHRoYXQgbWF0Y2hlcyBgZmlsdGVyYC5cbiAqXG4gKiAtIFVzZSBgcmVwbGFjZU9uZSgpYCBpZiB5b3Ugd2FudCB0byBvdmVyd3JpdGUgYW4gZW50aXJlIGRvY3VtZW50IHJhdGhlciB0aGFuIHVzaW5nIGF0b21pYyBvcGVyYXRvcnMgbGlrZSBgJHNldGAuXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBjb25zdCByZXMgPSBhd2FpdCBQZXJzb24udXBkYXRlT25lKHsgbmFtZTogJ0plYW4tTHVjIFBpY2FyZCcgfSwgeyBzaGlwOiAnVVNTIEVudGVycHJpc2UnIH0pO1xuICogICAgIHJlcy5tYXRjaGVkQ291bnQ7IC8vIE51bWJlciBvZiBkb2N1bWVudHMgbWF0Y2hlZFxuICogICAgIHJlcy5tb2RpZmllZENvdW50OyAvLyBOdW1iZXIgb2YgZG9jdW1lbnRzIG1vZGlmaWVkXG4gKiAgICAgcmVzLmFja25vd2xlZGdlZDsgLy8gQm9vbGVhbiBpbmRpY2F0aW5nIGV2ZXJ5dGhpbmcgd2VudCBzbW9vdGhseS5cbiAqICAgICByZXMudXBzZXJ0ZWRJZDsgLy8gbnVsbCBvciBhbiBpZCBjb250YWluaW5nIGEgZG9jdW1lbnQgdGhhdCBoYWQgdG8gYmUgdXBzZXJ0ZWQuXG4gKiAgICAgcmVzLnVwc2VydGVkQ291bnQ7IC8vIE51bWJlciBpbmRpY2F0aW5nIGhvdyBtYW55IGRvY3VtZW50cyBoYWQgdG8gYmUgdXBzZXJ0ZWQuIFdpbGwgZWl0aGVyIGJlIDAgb3IgMS5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHRyaWdnZXJzIHRoZSBmb2xsb3dpbmcgbWlkZGxld2FyZS5cbiAqXG4gKiAtIGB1cGRhdGVPbmUoKWBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZmlsdGVyXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gdXBkYXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIG9wdGlvbmFsIHNlZSBbYFF1ZXJ5LnByb3RvdHlwZS5zZXRPcHRpb25zKClgXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvYXBpL3F1ZXJ5Lmh0bWwjUXVlcnkucHJvdG90eXBlLnNldE9wdGlvbnMoKSlcbiAqIEBwYXJhbSB7Qm9vbGVhbnxTdHJpbmd9IFtvcHRpb25zLnN0cmljdF0gb3ZlcndyaXRlcyB0aGUgc2NoZW1hJ3MgW3N0cmljdCBtb2RlIG9wdGlvbl0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2d1aWRlLmh0bWwjc3RyaWN0KVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51cHNlcnQ9ZmFsc2VdIGlmIHRydWUsIGFuZCBubyBkb2N1bWVudHMgZm91bmQsIGluc2VydCBhIG5ldyBkb2N1bWVudFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLndyaXRlQ29uY2Vybj1udWxsXSBzZXRzIHRoZSBbd3JpdGUgY29uY2Vybl0oaHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZG9jcy9tYW51YWwvcmVmZXJlbmNlL3dyaXRlLWNvbmNlcm4vKSBmb3IgcmVwbGljYSBzZXRzLiBPdmVycmlkZXMgdGhlIFtzY2hlbWEtbGV2ZWwgd3JpdGUgY29uY2Vybl0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2d1aWRlLmh0bWwjd3JpdGVDb25jZXJuKVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy50aW1lc3RhbXBzPW51bGxdIElmIHNldCB0byBgZmFsc2VgIGFuZCBbc2NoZW1hLWxldmVsIHRpbWVzdGFtcHNdKGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9ndWlkZS5odG1sI3RpbWVzdGFtcHMpIGFyZSBlbmFibGVkLCBza2lwIHRpbWVzdGFtcHMgZm9yIHRoaXMgdXBkYXRlLiBOb3RlIHRoYXQgdGhpcyBhbGxvd3MgeW91IHRvIG92ZXJ3cml0ZSB0aW1lc3RhbXBzLiBEb2VzIG5vdGhpbmcgaWYgc2NoZW1hLWxldmVsIHRpbWVzdGFtcHMgYXJlIG5vdCBzZXQuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnRyYW5zbGF0ZUFsaWFzZXM9bnVsbF0gSWYgc2V0IHRvIGB0cnVlYCwgdHJhbnNsYXRlcyBhbnkgc2NoZW1hLWRlZmluZWQgYWxpYXNlcyBpbiBgZmlsdGVyYCwgYHByb2plY3Rpb25gLCBgdXBkYXRlYCwgYW5kIGBkaXN0aW5jdGAuIFRocm93cyBhbiBlcnJvciBpZiB0aGVyZSBhcmUgYW55IGNvbmZsaWN0cyB3aGVyZSBib3RoIGFsaWFzIGFuZCByYXcgcHJvcGVydHkgYXJlIGRlZmluZWQgb24gdGhlIHNhbWUgb2JqZWN0LlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5vdmVyd3JpdGVEaXNjcmltaW5hdG9yS2V5PWZhbHNlXSBNb25nb29zZSByZW1vdmVzIGRpc2NyaW1pbmF0b3Iga2V5IHVwZGF0ZXMgZnJvbSBgdXBkYXRlYCBieSBkZWZhdWx0LCBzZXQgYG92ZXJ3cml0ZURpc2NyaW1pbmF0b3JLZXlgIHRvIGB0cnVlYCB0byBhbGxvdyB1cGRhdGluZyB0aGUgZGlzY3JpbWluYXRvciBrZXlcbiAqIEByZXR1cm4ge1F1ZXJ5fVxuICogQHNlZSBRdWVyeSBkb2NzIGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9xdWVyaWVzLmh0bWxcbiAqIEBzZWUgTW9uZ29EQiBkb2NzIGh0dHBzOi8vd3d3Lm1vbmdvZGIuY29tL2RvY3MvbWFudWFsL3JlZmVyZW5jZS9jb21tYW5kL3VwZGF0ZS8jdXBkYXRlLWNvbW1hbmQtb3V0cHV0XG4gKiBAc2VlIFVwZGF0ZVJlc3VsdCBodHRwczovL21vbmdvZGIuZ2l0aHViLmlvL25vZGUtbW9uZ29kYi1uYXRpdmUvNC45L2ludGVyZmFjZXMvVXBkYXRlUmVzdWx0Lmh0bWxcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTW9kZWwudXBkYXRlT25lID0gZnVuY3Rpb24gdXBkYXRlT25lKGNvbmRpdGlvbnMsIGRvYywgb3B0aW9ucykge1xuICBfY2hlY2tDb250ZXh0KHRoaXMsICd1cGRhdGVPbmUnKTtcblxuICByZXR1cm4gX3VwZGF0ZSh0aGlzLCAndXBkYXRlT25lJywgY29uZGl0aW9ucywgZG9jLCBvcHRpb25zKTtcbn07XG5cbi8qKlxuICogUmVwbGFjZSB0aGUgZXhpc3RpbmcgZG9jdW1lbnQgd2l0aCB0aGUgZ2l2ZW4gZG9jdW1lbnQgKG5vIGF0b21pYyBvcGVyYXRvcnMgbGlrZSBgJHNldGApLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3QgcmVzID0gYXdhaXQgUGVyc29uLnJlcGxhY2VPbmUoeyBfaWQ6IDI0NjAxIH0sIHsgbmFtZTogJ0plYW4gVmFsamVhbicgfSk7XG4gKiAgICAgcmVzLm1hdGNoZWRDb3VudDsgLy8gTnVtYmVyIG9mIGRvY3VtZW50cyBtYXRjaGVkXG4gKiAgICAgcmVzLm1vZGlmaWVkQ291bnQ7IC8vIE51bWJlciBvZiBkb2N1bWVudHMgbW9kaWZpZWRcbiAqICAgICByZXMuYWNrbm93bGVkZ2VkOyAvLyBCb29sZWFuIGluZGljYXRpbmcgZXZlcnl0aGluZyB3ZW50IHNtb290aGx5LlxuICogICAgIHJlcy51cHNlcnRlZElkOyAvLyBudWxsIG9yIGFuIGlkIGNvbnRhaW5pbmcgYSBkb2N1bWVudCB0aGF0IGhhZCB0byBiZSB1cHNlcnRlZC5cbiAqICAgICByZXMudXBzZXJ0ZWRDb3VudDsgLy8gTnVtYmVyIGluZGljYXRpbmcgaG93IG1hbnkgZG9jdW1lbnRzIGhhZCB0byBiZSB1cHNlcnRlZC4gV2lsbCBlaXRoZXIgYmUgMCBvciAxLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gdHJpZ2dlcnMgdGhlIGZvbGxvd2luZyBtaWRkbGV3YXJlLlxuICpcbiAqIC0gYHJlcGxhY2VPbmUoKWBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZmlsdGVyXG4gKiBAcGFyYW0ge09iamVjdH0gZG9jXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIG9wdGlvbmFsIHNlZSBbYFF1ZXJ5LnByb3RvdHlwZS5zZXRPcHRpb25zKClgXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvYXBpL3F1ZXJ5Lmh0bWwjUXVlcnkucHJvdG90eXBlLnNldE9wdGlvbnMoKSlcbiAqIEBwYXJhbSB7Qm9vbGVhbnxTdHJpbmd9IFtvcHRpb25zLnN0cmljdF0gb3ZlcndyaXRlcyB0aGUgc2NoZW1hJ3MgW3N0cmljdCBtb2RlIG9wdGlvbl0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2d1aWRlLmh0bWwjc3RyaWN0KVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51cHNlcnQ9ZmFsc2VdIGlmIHRydWUsIGFuZCBubyBkb2N1bWVudHMgZm91bmQsIGluc2VydCBhIG5ldyBkb2N1bWVudFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLndyaXRlQ29uY2Vybj1udWxsXSBzZXRzIHRoZSBbd3JpdGUgY29uY2Vybl0oaHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZG9jcy9tYW51YWwvcmVmZXJlbmNlL3dyaXRlLWNvbmNlcm4vKSBmb3IgcmVwbGljYSBzZXRzLiBPdmVycmlkZXMgdGhlIFtzY2hlbWEtbGV2ZWwgd3JpdGUgY29uY2Vybl0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2d1aWRlLmh0bWwjd3JpdGVDb25jZXJuKVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy50aW1lc3RhbXBzPW51bGxdIElmIHNldCB0byBgZmFsc2VgIGFuZCBbc2NoZW1hLWxldmVsIHRpbWVzdGFtcHNdKGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9ndWlkZS5odG1sI3RpbWVzdGFtcHMpIGFyZSBlbmFibGVkLCBza2lwIHRpbWVzdGFtcHMgZm9yIHRoaXMgdXBkYXRlLiBEb2VzIG5vdGhpbmcgaWYgc2NoZW1hLWxldmVsIHRpbWVzdGFtcHMgYXJlIG5vdCBzZXQuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnRyYW5zbGF0ZUFsaWFzZXM9bnVsbF0gSWYgc2V0IHRvIGB0cnVlYCwgdHJhbnNsYXRlcyBhbnkgc2NoZW1hLWRlZmluZWQgYWxpYXNlcyBpbiBgZmlsdGVyYCwgYHByb2plY3Rpb25gLCBgdXBkYXRlYCwgYW5kIGBkaXN0aW5jdGAuIFRocm93cyBhbiBlcnJvciBpZiB0aGVyZSBhcmUgYW55IGNvbmZsaWN0cyB3aGVyZSBib3RoIGFsaWFzIGFuZCByYXcgcHJvcGVydHkgYXJlIGRlZmluZWQgb24gdGhlIHNhbWUgb2JqZWN0LlxuICogQHJldHVybiB7UXVlcnl9XG4gKiBAc2VlIFF1ZXJ5IGRvY3MgaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL3F1ZXJpZXMuaHRtbFxuICogQHNlZSBVcGRhdGVSZXN1bHQgaHR0cHM6Ly9tb25nb2RiLmdpdGh1Yi5pby9ub2RlLW1vbmdvZGItbmF0aXZlLzQuOS9pbnRlcmZhY2VzL1VwZGF0ZVJlc3VsdC5odG1sXG4gKiBAcmV0dXJuIHtRdWVyeX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTW9kZWwucmVwbGFjZU9uZSA9IGZ1bmN0aW9uIHJlcGxhY2VPbmUoY29uZGl0aW9ucywgZG9jLCBvcHRpb25zKSB7XG4gIF9jaGVja0NvbnRleHQodGhpcywgJ3JlcGxhY2VPbmUnKTtcblxuICBjb25zdCB2ZXJzaW9uS2V5ID0gdGhpcyAmJiB0aGlzLnNjaGVtYSAmJiB0aGlzLnNjaGVtYS5vcHRpb25zICYmIHRoaXMuc2NoZW1hLm9wdGlvbnMudmVyc2lvbktleSB8fCBudWxsO1xuICBpZiAodmVyc2lvbktleSAmJiAhZG9jW3ZlcnNpb25LZXldKSB7XG4gICAgZG9jW3ZlcnNpb25LZXldID0gMDtcbiAgfVxuXG4gIHJldHVybiBfdXBkYXRlKHRoaXMsICdyZXBsYWNlT25lJywgY29uZGl0aW9ucywgZG9jLCBvcHRpb25zKTtcbn07XG5cbi8qKlxuICogQ29tbW9uIGNvZGUgZm9yIGB1cGRhdGVPbmUoKWAsIGB1cGRhdGVNYW55KClgLCBgcmVwbGFjZU9uZSgpYCwgYW5kIGB1cGRhdGUoKWBcbiAqIGJlY2F1c2UgdGhleSBuZWVkIHRvIGRvIHRoZSBzYW1lIHRoaW5nXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBfdXBkYXRlKG1vZGVsLCBvcCwgY29uZGl0aW9ucywgZG9jLCBvcHRpb25zKSB7XG4gIGNvbnN0IG1xID0gbmV3IG1vZGVsLlF1ZXJ5KHt9LCB7fSwgbW9kZWwsIG1vZGVsLmNvbGxlY3Rpb24pO1xuXG4gIC8vIGdoLTI0MDZcbiAgLy8gbWFrZSBsb2NhbCBkZWVwIGNvcHkgb2YgY29uZGl0aW9uc1xuICBpZiAoY29uZGl0aW9ucyBpbnN0YW5jZW9mIERvY3VtZW50KSB7XG4gICAgY29uZGl0aW9ucyA9IGNvbmRpdGlvbnMudG9PYmplY3QoKTtcbiAgfSBlbHNlIHtcbiAgICBjb25kaXRpb25zID0gY2xvbmUoY29uZGl0aW9ucyk7XG4gIH1cbiAgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucyA6IGNsb25lKG9wdGlvbnMpO1xuXG4gIGNvbnN0IHZlcnNpb25LZXkgPSBtb2RlbCAmJlxuICBtb2RlbC5zY2hlbWEgJiZcbiAgbW9kZWwuc2NoZW1hLm9wdGlvbnMgJiZcbiAgbW9kZWwuc2NoZW1hLm9wdGlvbnMudmVyc2lvbktleSB8fCBudWxsO1xuICBkZWNvcmF0ZVVwZGF0ZVdpdGhWZXJzaW9uS2V5KGRvYywgb3B0aW9ucywgdmVyc2lvbktleSk7XG5cbiAgcmV0dXJuIG1xW29wXShjb25kaXRpb25zLCBkb2MsIG9wdGlvbnMpO1xufVxuXG4vKipcbiAqIFBlcmZvcm1zIFthZ2dyZWdhdGlvbnNdKGh0dHBzOi8vd3d3Lm1vbmdvZGIuY29tL2RvY3MvbWFudWFsL2FnZ3JlZ2F0aW9uLykgb24gdGhlIG1vZGVscyBjb2xsZWN0aW9uLlxuICpcbiAqIElmIGEgYGNhbGxiYWNrYCBpcyBwYXNzZWQsIHRoZSBgYWdncmVnYXRlYCBpcyBleGVjdXRlZCBhbmQgYSBgUHJvbWlzZWAgaXMgcmV0dXJuZWQuIElmIGEgY2FsbGJhY2sgaXMgbm90IHBhc3NlZCwgdGhlIGBhZ2dyZWdhdGVgIGl0c2VsZiBpcyByZXR1cm5lZC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHRyaWdnZXJzIHRoZSBmb2xsb3dpbmcgbWlkZGxld2FyZS5cbiAqXG4gKiAtIGBhZ2dyZWdhdGUoKWBcbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKlxuICogICAgIC8vIEZpbmQgdGhlIG1heCBiYWxhbmNlIG9mIGFsbCBhY2NvdW50c1xuICogICAgIGNvbnN0IHJlcyA9IGF3YWl0IFVzZXJzLmFnZ3JlZ2F0ZShbXG4gKiAgICAgICB7ICRncm91cDogeyBfaWQ6IG51bGwsIG1heEJhbGFuY2U6IHsgJG1heDogJyRiYWxhbmNlJyB9fX0sXG4gKiAgICAgICB7ICRwcm9qZWN0OiB7IF9pZDogMCwgbWF4QmFsYW5jZTogMSB9fVxuICogICAgIF0pO1xuICpcbiAqICAgICBjb25zb2xlLmxvZyhyZXMpOyAvLyBbIHsgbWF4QmFsYW5jZTogOTgwMDAgfSBdXG4gKlxuICogICAgIC8vIE9yIHVzZSB0aGUgYWdncmVnYXRpb24gcGlwZWxpbmUgYnVpbGRlci5cbiAqICAgICBjb25zdCByZXMgPSBhd2FpdCBVc2Vycy5hZ2dyZWdhdGUoKS5cbiAqICAgICAgIGdyb3VwKHsgX2lkOiBudWxsLCBtYXhCYWxhbmNlOiB7ICRtYXg6ICckYmFsYW5jZScgfSB9KS5cbiAqICAgICAgIHByb2plY3QoJy1pZCBtYXhCYWxhbmNlJykuXG4gKiAgICAgICBleGVjKCk7XG4gKiAgICAgY29uc29sZS5sb2cocmVzKTsgLy8gWyB7IG1heEJhbGFuY2U6IDk4IH0gXVxuICpcbiAqICMjIyMgTm90ZTpcbiAqXG4gKiAtIE1vbmdvb3NlIGRvZXMgKipub3QqKiBjYXN0IGFnZ3JlZ2F0aW9uIHBpcGVsaW5lcyB0byB0aGUgbW9kZWwncyBzY2hlbWEgYmVjYXVzZSBgJHByb2plY3RgIGFuZCBgJGdyb3VwYCBvcGVyYXRvcnMgYWxsb3cgcmVkZWZpbmluZyB0aGUgXCJzaGFwZVwiIG9mIHRoZSBkb2N1bWVudHMgYXQgYW55IHN0YWdlIG9mIHRoZSBwaXBlbGluZSwgd2hpY2ggbWF5IGxlYXZlIGRvY3VtZW50cyBpbiBhbiBpbmNvbXBhdGlibGUgZm9ybWF0LiBZb3UgY2FuIHVzZSB0aGUgW21vbmdvb3NlLWNhc3QtYWdncmVnYXRpb24gcGx1Z2luXShodHRwczovL2dpdGh1Yi5jb20vQWJkZWxyYWhtYW5IYWZlei9tb25nb29zZS1jYXN0LWFnZ3JlZ2F0aW9uKSB0byBlbmFibGUgbWluaW1hbCBjYXN0aW5nIGZvciBhZ2dyZWdhdGlvbiBwaXBlbGluZXMuXG4gKiAtIFRoZSBkb2N1bWVudHMgcmV0dXJuZWQgYXJlIHBsYWluIGphdmFzY3JpcHQgb2JqZWN0cywgbm90IG1vbmdvb3NlIGRvY3VtZW50cyAoc2luY2UgYW55IHNoYXBlIG9mIGRvY3VtZW50IGNhbiBiZSByZXR1cm5lZCkuXG4gKlxuICogIyMjIyBNb3JlIEFib3V0IEFnZ3JlZ2F0aW9uczpcbiAqXG4gKiAtIFtNb25nb29zZSBgQWdncmVnYXRlYF0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2FwaS9hZ2dyZWdhdGUuaHRtbClcbiAqIC0gW0FuIEludHJvZHVjdGlvbiB0byBNb25nb29zZSBBZ2dyZWdhdGVdKGh0dHBzOi8vbWFzdGVyaW5nanMuaW8vdHV0b3JpYWxzL21vbmdvb3NlL2FnZ3JlZ2F0ZSlcbiAqIC0gW01vbmdvREIgQWdncmVnYXRpb24gZG9jc10oaHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZG9jcy9tYW51YWwvYXBwbGljYXRpb25zL2FnZ3JlZ2F0aW9uLylcbiAqXG4gKiBAc2VlIEFnZ3JlZ2F0ZSBodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvYXBpL2FnZ3JlZ2F0ZS5odG1sI0FnZ3JlZ2F0ZSgpXG4gKiBAc2VlIE1vbmdvREIgaHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZG9jcy9tYW51YWwvYXBwbGljYXRpb25zL2FnZ3JlZ2F0aW9uL1xuICogQHBhcmFtIHtBcnJheX0gW3BpcGVsaW5lXSBhZ2dyZWdhdGlvbiBwaXBlbGluZSBhcyBhbiBhcnJheSBvZiBvYmplY3RzXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIGFnZ3JlZ2F0aW9uIG9wdGlvbnNcbiAqIEByZXR1cm4ge0FnZ3JlZ2F0ZX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTW9kZWwuYWdncmVnYXRlID0gZnVuY3Rpb24gYWdncmVnYXRlKHBpcGVsaW5lLCBvcHRpb25zKSB7XG4gIF9jaGVja0NvbnRleHQodGhpcywgJ2FnZ3JlZ2F0ZScpO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgYXJndW1lbnRzWzJdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IE1vbmdvb3NlRXJyb3IoJ01vZGVsLmFnZ3JlZ2F0ZSgpIG5vIGxvbmdlciBhY2NlcHRzIGEgY2FsbGJhY2snKTtcbiAgfVxuXG4gIGNvbnN0IGFnZ3JlZ2F0ZSA9IG5ldyBBZ2dyZWdhdGUocGlwZWxpbmUgfHwgW10pO1xuICBhZ2dyZWdhdGUubW9kZWwodGhpcyk7XG4gIGlmIChvcHRpb25zICE9IG51bGwpIHtcbiAgICBhZ2dyZWdhdGUub3B0aW9uKG9wdGlvbnMpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gYWdncmVnYXRlO1xuICB9XG5cbiAgcmV0dXJuIGFnZ3JlZ2F0ZTtcbn07XG5cbi8qKlxuICogQ2FzdHMgYW5kIHZhbGlkYXRlcyB0aGUgZ2l2ZW4gb2JqZWN0IGFnYWluc3QgdGhpcyBtb2RlbCdzIHNjaGVtYSwgcGFzc2luZyB0aGVcbiAqIGdpdmVuIGBjb250ZXh0YCB0byBjdXN0b20gdmFsaWRhdG9ycy5cbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKlxuICogICAgIGNvbnN0IE1vZGVsID0gbW9uZ29vc2UubW9kZWwoJ1Rlc3QnLCBTY2hlbWEoe1xuICogICAgICAgbmFtZTogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlIH0sXG4gKiAgICAgICBhZ2U6IHsgdHlwZTogTnVtYmVyLCByZXF1aXJlZDogdHJ1ZSB9XG4gKiAgICAgfSk7XG4gKlxuICogICAgIHRyeSB7XG4gKiAgICAgICBhd2FpdCBNb2RlbC52YWxpZGF0ZSh7IG5hbWU6IG51bGwgfSwgWyduYW1lJ10pXG4gKiAgICAgfSBjYXRjaCAoZXJyKSB7XG4gKiAgICAgICBlcnIgaW5zdGFuY2VvZiBtb25nb29zZS5FcnJvci5WYWxpZGF0aW9uRXJyb3I7IC8vIHRydWVcbiAqICAgICAgIE9iamVjdC5rZXlzKGVyci5lcnJvcnMpOyAvLyBbJ25hbWUnXVxuICogICAgIH1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheXxTdHJpbmd9IHBhdGhzT3JPcHRpb25zXG4gKiBAcGFyYW0ge09iamVjdH0gW2NvbnRleHRdXG4gKiBAcmV0dXJuIHtQcm9taXNlPE9iamVjdD59IGNhc3RlZCBhbmQgdmFsaWRhdGVkIGNvcHkgb2YgYG9iamAgaWYgdmFsaWRhdGlvbiBzdWNjZWVkZWRcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTW9kZWwudmFsaWRhdGUgPSBhc3luYyBmdW5jdGlvbiB2YWxpZGF0ZShvYmosIHBhdGhzT3JPcHRpb25zLCBjb250ZXh0KSB7XG4gIGlmICgoYXJndW1lbnRzLmxlbmd0aCA8IDMpIHx8IChhcmd1bWVudHMubGVuZ3RoID09PSAzICYmIHR5cGVvZiBhcmd1bWVudHNbMl0gPT09ICdmdW5jdGlvbicpKSB7XG4gICAgLy8gRm9yIGNvbnZlbmllbmNlLCBpZiB3ZSdyZSB2YWxpZGF0aW5nIGEgZG9jdW1lbnQgb3IgYW4gb2JqZWN0LCBtYWtlIGBjb250ZXh0YCBkZWZhdWx0IHRvXG4gICAgLy8gdGhlIG1vZGVsIHNvIHVzZXJzIGRvbid0IGhhdmUgdG8gYWx3YXlzIHBhc3MgYGNvbnRleHRgLCByZTogZ2gtMTAxMzIsIGdoLTEwMzQ2XG4gICAgY29udGV4dCA9IG9iajtcbiAgfVxuICBpZiAodHlwZW9mIGNvbnRleHQgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGFyZ3VtZW50c1szXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBNb25nb29zZUVycm9yKCdNb2RlbC52YWxpZGF0ZSgpIG5vIGxvbmdlciBhY2NlcHRzIGEgY2FsbGJhY2snKTtcbiAgfVxuXG4gIGxldCBzY2hlbWEgPSB0aGlzLnNjaGVtYTtcbiAgY29uc3QgZGlzY3JpbWluYXRvcktleSA9IHNjaGVtYS5vcHRpb25zLmRpc2NyaW1pbmF0b3JLZXk7XG4gIGlmIChzY2hlbWEuZGlzY3JpbWluYXRvcnMgIT0gbnVsbCAmJiBvYmogIT0gbnVsbCAmJiBvYmpbZGlzY3JpbWluYXRvcktleV0gIT0gbnVsbCkge1xuICAgIHNjaGVtYSA9IGdldFNjaGVtYURpc2NyaW1pbmF0b3JCeVZhbHVlKHNjaGVtYSwgb2JqW2Rpc2NyaW1pbmF0b3JLZXldKSB8fCBzY2hlbWE7XG4gIH1cbiAgbGV0IHBhdGhzID0gT2JqZWN0LmtleXMoc2NoZW1hLnBhdGhzKTtcblxuICBpZiAocGF0aHNPck9wdGlvbnMgIT0gbnVsbCkge1xuICAgIGNvbnN0IF9wYXRoc1RvVmFsaWRhdGUgPSB0eXBlb2YgcGF0aHNPck9wdGlvbnMgPT09ICdzdHJpbmcnID8gbmV3IFNldChwYXRoc09yT3B0aW9ucy5zcGxpdCgnICcpKSA6IEFycmF5LmlzQXJyYXkocGF0aHNPck9wdGlvbnMpID8gbmV3IFNldChwYXRoc09yT3B0aW9ucykgOiBuZXcgU2V0KHBhdGhzKTtcbiAgICBwYXRocyA9IHBhdGhzLmZpbHRlcihwID0+IHtcbiAgICAgIGlmIChwYXRoc09yT3B0aW9ucy5wYXRoc1RvU2tpcCkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwYXRoc09yT3B0aW9ucy5wYXRoc1RvU2tpcCkpIHtcbiAgICAgICAgICBpZiAocGF0aHNPck9wdGlvbnMucGF0aHNUb1NraXAuZmluZCh4ID0+IHggPT0gcCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHBhdGhzT3JPcHRpb25zLnBhdGhzVG9Ta2lwID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHBhdGhzT3JPcHRpb25zLnBhdGhzVG9Ta2lwLmluY2x1ZGVzKHApKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBwaWVjZXMgPSBwLnNwbGl0KCcuJyk7XG4gICAgICBsZXQgY3VyID0gcGllY2VzWzBdO1xuXG4gICAgICBmb3IgKGNvbnN0IHBpZWNlIG9mIHBpZWNlcykge1xuICAgICAgICBpZiAoX3BhdGhzVG9WYWxpZGF0ZS5oYXMoY3VyKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGN1ciArPSAnLicgKyBwaWVjZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9wYXRoc1RvVmFsaWRhdGUuaGFzKHApO1xuICAgIH0pO1xuICB9XG5cbiAgZm9yIChjb25zdCBwYXRoIG9mIHBhdGhzKSB7XG4gICAgY29uc3Qgc2NoZW1hVHlwZSA9IHNjaGVtYS5wYXRoKHBhdGgpO1xuICAgIGlmICghc2NoZW1hVHlwZSB8fCAhc2NoZW1hVHlwZS4kaXNNb25nb29zZUFycmF5IHx8IHNjaGVtYVR5cGUuJGlzTW9uZ29vc2VEb2N1bWVudEFycmF5KSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBjb25zdCB2YWwgPSBnZXQob2JqLCBwYXRoKTtcbiAgICBwdXNoTmVzdGVkQXJyYXlQYXRocyhwYXRocywgdmFsLCBwYXRoKTtcbiAgfVxuXG4gIGxldCBlcnJvciA9IG51bGw7XG4gIHBhdGhzID0gbmV3IFNldChwYXRocyk7XG5cbiAgdHJ5IHtcbiAgICBvYmogPSB0aGlzLmNhc3RPYmplY3Qob2JqKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyb3IgPSBlcnI7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoZXJyb3IuZXJyb3JzIHx8IHt9KSkge1xuICAgICAgcGF0aHMuZGVsZXRlKGtleSk7XG4gICAgfVxuICB9XG5cbiAgbGV0IHJlbWFpbmluZyA9IHBhdGhzLnNpemU7XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBmb3IgKGNvbnN0IHBhdGggb2YgcGF0aHMpIHtcbiAgICAgIGNvbnN0IHNjaGVtYVR5cGUgPSBzY2hlbWEucGF0aChwYXRoKTtcbiAgICAgIGlmIChzY2hlbWFUeXBlID09IG51bGwpIHtcbiAgICAgICAgX2NoZWNrRG9uZSgpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcGllY2VzID0gcGF0aC5pbmRleE9mKCcuJykgPT09IC0xID8gW3BhdGhdIDogcGF0aC5zcGxpdCgnLicpO1xuICAgICAgbGV0IGN1ciA9IG9iajtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGllY2VzLmxlbmd0aCAtIDE7ICsraSkge1xuICAgICAgICBjdXIgPSBjdXJbcGllY2VzW2ldXTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdmFsID0gZ2V0KG9iaiwgcGF0aCwgdm9pZCAwKTtcblxuICAgICAgc2NoZW1hVHlwZS5kb1ZhbGlkYXRlKHZhbCwgZXJyID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGVycm9yID0gZXJyb3IgfHwgbmV3IFZhbGlkYXRpb25FcnJvcigpO1xuICAgICAgICAgIGVycm9yLmFkZEVycm9yKHBhdGgsIGVycik7XG4gICAgICAgIH1cbiAgICAgICAgX2NoZWNrRG9uZSgpO1xuICAgICAgfSwgY29udGV4dCwgeyBwYXRoOiBwYXRoIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9jaGVja0RvbmUoKSB7XG4gICAgICBpZiAoLS1yZW1haW5pbmcgPD0gMCkge1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUob2JqKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIFBvcHVsYXRlcyBkb2N1bWVudCByZWZlcmVuY2VzLlxuICpcbiAqIENoYW5nZWQgaW4gTW9uZ29vc2UgNjogdGhlIG1vZGVsIHlvdSBjYWxsIGBwb3B1bGF0ZSgpYCBvbiBzaG91bGQgYmUgdGhlXG4gKiBcImxvY2FsIGZpZWxkXCIgbW9kZWwsICoqbm90KiogdGhlIFwiZm9yZWlnbiBmaWVsZFwiIG1vZGVsLlxuICpcbiAqICMjIyMgQXZhaWxhYmxlIHRvcC1sZXZlbCBvcHRpb25zOlxuICpcbiAqIC0gcGF0aDogc3BhY2UgZGVsaW1pdGVkIHBhdGgocykgdG8gcG9wdWxhdGVcbiAqIC0gc2VsZWN0OiBvcHRpb25hbCBmaWVsZHMgdG8gc2VsZWN0XG4gKiAtIG1hdGNoOiBvcHRpb25hbCBxdWVyeSBjb25kaXRpb25zIHRvIG1hdGNoXG4gKiAtIG1vZGVsOiBvcHRpb25hbCBuYW1lIG9mIHRoZSBtb2RlbCB0byB1c2UgZm9yIHBvcHVsYXRpb25cbiAqIC0gb3B0aW9uczogb3B0aW9uYWwgcXVlcnkgb3B0aW9ucyBsaWtlIHNvcnQsIGxpbWl0LCBldGNcbiAqIC0ganVzdE9uZTogb3B0aW9uYWwgYm9vbGVhbiwgaWYgdHJ1ZSBNb25nb29zZSB3aWxsIGFsd2F5cyBzZXQgYHBhdGhgIHRvIGEgZG9jdW1lbnQsIG9yIGBudWxsYCBpZiBubyBkb2N1bWVudCB3YXMgZm91bmQuIElmIGZhbHNlLCBNb25nb29zZSB3aWxsIGFsd2F5cyBzZXQgYHBhdGhgIHRvIGFuIGFycmF5LCB3aGljaCB3aWxsIGJlIGVtcHR5IGlmIG5vIGRvY3VtZW50cyBhcmUgZm91bmQuIEluZmVycmVkIGZyb20gc2NoZW1hIGJ5IGRlZmF1bHQuXG4gKiAtIHN0cmljdFBvcHVsYXRlOiBvcHRpb25hbCBib29sZWFuLCBzZXQgdG8gYGZhbHNlYCB0byBhbGxvdyBwb3B1bGF0aW5nIHBhdGhzIHRoYXQgYXJlbid0IGluIHRoZSBzY2hlbWEuXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBjb25zdCBEb2cgPSBtb25nb29zZS5tb2RlbCgnRG9nJywgbmV3IFNjaGVtYSh7IG5hbWU6IFN0cmluZywgYnJlZWQ6IFN0cmluZyB9KSk7XG4gKiAgICAgY29uc3QgUGVyc29uID0gbW9uZ29vc2UubW9kZWwoJ1BlcnNvbicsIG5ldyBTY2hlbWEoe1xuICogICAgICAgbmFtZTogU3RyaW5nLFxuICogICAgICAgcGV0OiB7IHR5cGU6IG1vbmdvb3NlLk9iamVjdElkLCByZWY6ICdEb2cnIH1cbiAqICAgICB9KSk7XG4gKlxuICogICAgIGNvbnN0IHBldHMgPSBhd2FpdCBQZXQuY3JlYXRlKFtcbiAqICAgICAgIHsgbmFtZTogJ0RhaXN5JywgYnJlZWQ6ICdCZWFnbGUnIH0sXG4gKiAgICAgICB7IG5hbWU6ICdFaW5zdGVpbicsIGJyZWVkOiAnQ2F0YWxhbiBTaGVlcGRvZycgfVxuICogICAgIF0pO1xuICpcbiAqICAgICAvLyBwb3B1bGF0ZSBtYW55IHBsYWluIG9iamVjdHNcbiAqICAgICBjb25zdCB1c2VycyA9IFtcbiAqICAgICAgIHsgbmFtZTogJ0pvaG4gV2ljaycsIGRvZzogcGV0c1swXS5faWQgfSxcbiAqICAgICAgIHsgbmFtZTogJ0RvYyBCcm93bicsIGRvZzogcGV0c1sxXS5faWQgfVxuICogICAgIF07XG4gKiAgICAgYXdhaXQgVXNlci5wb3B1bGF0ZSh1c2VycywgeyBwYXRoOiAnZG9nJywgc2VsZWN0OiAnbmFtZScgfSk7XG4gKiAgICAgdXNlcnNbMF0uZG9nLm5hbWU7IC8vICdEYWlzeSdcbiAqICAgICB1c2Vyc1swXS5kb2cuYnJlZWQ7IC8vIHVuZGVmaW5lZCBiZWNhdXNlIG9mIGBzZWxlY3RgXG4gKlxuICogQHBhcmFtIHtEb2N1bWVudHxBcnJheX0gZG9jcyBFaXRoZXIgYSBzaW5nbGUgZG9jdW1lbnQgb3IgYXJyYXkgb2YgZG9jdW1lbnRzIHRvIHBvcHVsYXRlLlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBvcHRpb25zIEVpdGhlciB0aGUgcGF0aHMgdG8gcG9wdWxhdGUgb3IgYW4gb2JqZWN0IHNwZWNpZnlpbmcgYWxsIHBhcmFtZXRlcnNcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5wYXRoPW51bGxdIFRoZSBwYXRoIHRvIHBvcHVsYXRlLlxuICogQHBhcmFtIHtzdHJpbmd8UG9wdWxhdGVPcHRpb25zfSBbb3B0aW9ucy5wb3B1bGF0ZT1udWxsXSBSZWN1cnNpdmVseSBwb3B1bGF0ZSBwYXRocyBpbiB0aGUgcG9wdWxhdGVkIGRvY3VtZW50cy4gU2VlIFtkZWVwIHBvcHVsYXRlIGRvY3NdKGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9wb3B1bGF0ZS5odG1sI2RlZXAtcG9wdWxhdGUpLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5yZXRhaW5OdWxsVmFsdWVzPWZhbHNlXSBCeSBkZWZhdWx0LCBNb25nb29zZSByZW1vdmVzIG51bGwgYW5kIHVuZGVmaW5lZCB2YWx1ZXMgZnJvbSBwb3B1bGF0ZWQgYXJyYXlzLiBVc2UgdGhpcyBvcHRpb24gdG8gbWFrZSBgcG9wdWxhdGUoKWAgcmV0YWluIGBudWxsYCBhbmQgYHVuZGVmaW5lZGAgYXJyYXkgZW50cmllcy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuZ2V0dGVycz1mYWxzZV0gSWYgdHJ1ZSwgTW9uZ29vc2Ugd2lsbCBjYWxsIGFueSBnZXR0ZXJzIGRlZmluZWQgb24gdGhlIGBsb2NhbEZpZWxkYC4gQnkgZGVmYXVsdCwgTW9uZ29vc2UgZ2V0cyB0aGUgcmF3IHZhbHVlIG9mIGBsb2NhbEZpZWxkYC4gRm9yIGV4YW1wbGUsIHlvdSB3b3VsZCBuZWVkIHRvIHNldCB0aGlzIG9wdGlvbiB0byBgdHJ1ZWAgaWYgeW91IHdhbnRlZCB0byBbYWRkIGEgYGxvd2VyY2FzZWAgZ2V0dGVyIHRvIHlvdXIgYGxvY2FsRmllbGRgXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3Mvc2NoZW1hdHlwZXMuaHRtbCNzY2hlbWF0eXBlLW9wdGlvbnMpLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jbG9uZT1mYWxzZV0gV2hlbiB5b3UgZG8gYEJsb2dQb3N0LmZpbmQoKS5wb3B1bGF0ZSgnYXV0aG9yJylgLCBibG9nIHBvc3RzIHdpdGggdGhlIHNhbWUgYXV0aG9yIHdpbGwgc2hhcmUgMSBjb3B5IG9mIGFuIGBhdXRob3JgIGRvYy4gRW5hYmxlIHRoaXMgb3B0aW9uIHRvIG1ha2UgTW9uZ29vc2UgY2xvbmUgcG9wdWxhdGVkIGRvY3MgYmVmb3JlIGFzc2lnbmluZyB0aGVtLlxuICogQHBhcmFtIHtPYmplY3R8RnVuY3Rpb259IFtvcHRpb25zLm1hdGNoPW51bGxdIEFkZCBhbiBhZGRpdGlvbmFsIGZpbHRlciB0byB0aGUgcG9wdWxhdGUgcXVlcnkuIENhbiBiZSBhIGZpbHRlciBvYmplY3QgY29udGFpbmluZyBbTW9uZ29EQiBxdWVyeSBzeW50YXhdKGh0dHBzOi8vd3d3Lm1vbmdvZGIuY29tL2RvY3MvbWFudWFsL3R1dG9yaWFsL3F1ZXJ5LWRvY3VtZW50cy8pLCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGZpbHRlciBvYmplY3QuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnNraXBJbnZhbGlkSWRzPWZhbHNlXSBCeSBkZWZhdWx0LCBNb25nb29zZSB0aHJvd3MgYSBjYXN0IGVycm9yIGlmIGBsb2NhbEZpZWxkYCBhbmQgYGZvcmVpZ25GaWVsZGAgc2NoZW1hcyBkb24ndCBsaW5lIHVwLiBJZiB5b3UgZW5hYmxlIHRoaXMgb3B0aW9uLCBNb25nb29zZSB3aWxsIGluc3RlYWQgZmlsdGVyIG91dCBhbnkgYGxvY2FsRmllbGRgIHByb3BlcnRpZXMgdGhhdCBjYW5ub3QgYmUgY2FzdGVkIHRvIGBmb3JlaWduRmllbGRgJ3Mgc2NoZW1hIHR5cGUuXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMucGVyRG9jdW1lbnRMaW1pdD1udWxsXSBGb3IgbGVnYWN5IHJlYXNvbnMsIGBsaW1pdGAgd2l0aCBgcG9wdWxhdGUoKWAgbWF5IGdpdmUgaW5jb3JyZWN0IHJlc3VsdHMgYmVjYXVzZSBpdCBvbmx5IGV4ZWN1dGVzIGEgc2luZ2xlIHF1ZXJ5IGZvciBldmVyeSBkb2N1bWVudCBiZWluZyBwb3B1bGF0ZWQuIElmIHlvdSBzZXQgYHBlckRvY3VtZW50TGltaXRgLCBNb25nb29zZSB3aWxsIGVuc3VyZSBjb3JyZWN0IGBsaW1pdGAgcGVyIGRvY3VtZW50IGJ5IGV4ZWN1dGluZyBhIHNlcGFyYXRlIHF1ZXJ5IGZvciBlYWNoIGRvY3VtZW50IHRvIGBwb3B1bGF0ZSgpYC4gRm9yIGV4YW1wbGUsIGAuZmluZCgpLnBvcHVsYXRlKHsgcGF0aDogJ3Rlc3QnLCBwZXJEb2N1bWVudExpbWl0OiAyIH0pYCB3aWxsIGV4ZWN1dGUgMiBhZGRpdGlvbmFsIHF1ZXJpZXMgaWYgYC5maW5kKClgIHJldHVybnMgMiBkb2N1bWVudHMuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnN0cmljdFBvcHVsYXRlPXRydWVdIFNldCB0byBmYWxzZSB0byBhbGxvdyBwb3B1bGF0aW5nIHBhdGhzIHRoYXQgYXJlbid0IGRlZmluZWQgaW4gdGhlIGdpdmVuIG1vZGVsJ3Mgc2NoZW1hLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLm9wdGlvbnM9bnVsbF0gQWRkaXRpb25hbCBvcHRpb25zIGxpa2UgYGxpbWl0YCBhbmQgYGxlYW5gLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMudHJhbnNmb3JtPW51bGxdIEZ1bmN0aW9uIHRoYXQgTW9uZ29vc2Ugd2lsbCBjYWxsIG9uIGV2ZXJ5IHBvcHVsYXRlZCBkb2N1bWVudCB0aGF0IGFsbG93cyB5b3UgdG8gdHJhbnNmb3JtIHRoZSBwb3B1bGF0ZWQgZG9jdW1lbnQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2soZXJyLGRvYyldIE9wdGlvbmFsIGNhbGxiYWNrLCBleGVjdXRlZCB1cG9uIGNvbXBsZXRpb24uIFJlY2VpdmVzIGBlcnJgIGFuZCB0aGUgYGRvYyhzKWAuXG4gKiBAcmV0dXJuIHtQcm9taXNlfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Nb2RlbC5wb3B1bGF0ZSA9IGFzeW5jIGZ1bmN0aW9uIHBvcHVsYXRlKGRvY3MsIHBhdGhzKSB7XG4gIF9jaGVja0NvbnRleHQodGhpcywgJ3BvcHVsYXRlJyk7XG4gIGlmICh0eXBlb2YgcGF0aHMgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGFyZ3VtZW50c1syXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBNb25nb29zZUVycm9yKCdNb2RlbC5wb3B1bGF0ZSgpIG5vIGxvbmdlciBhY2NlcHRzIGEgY2FsbGJhY2snKTtcbiAgfVxuICBjb25zdCBfdGhpcyA9IHRoaXM7XG4gIC8vIG5vcm1hbGl6ZWQgcGF0aHNcbiAgcGF0aHMgPSB1dGlscy5wb3B1bGF0ZShwYXRocyk7XG4gIC8vIGRhdGEgdGhhdCBzaG91bGQgcGVyc2lzdCBhY3Jvc3Mgc3ViUG9wdWxhdGUgY2FsbHNcbiAgY29uc3QgY2FjaGUgPSB7fTtcblxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIF9wb3B1bGF0ZShfdGhpcywgZG9jcywgcGF0aHMsIGNhY2hlLCAoZXJyLCByZXMpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShyZXMpO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbi8qKlxuICogUG9wdWxhdGUgaGVscGVyXG4gKlxuICogQHBhcmFtIHtNb2RlbH0gbW9kZWwgdGhlIG1vZGVsIHRvIHVzZVxuICogQHBhcmFtIHtEb2N1bWVudHxBcnJheX0gZG9jcyBFaXRoZXIgYSBzaW5nbGUgZG9jdW1lbnQgb3IgYXJyYXkgb2YgZG9jdW1lbnRzIHRvIHBvcHVsYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IHBhdGhzXG4gKiBAcGFyYW0ge25ldmVyfSBjYWNoZSBVbnVzZWRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gT3B0aW9uYWwgY2FsbGJhY2ssIGV4ZWN1dGVkIHVwb24gY29tcGxldGlvbi4gUmVjZWl2ZXMgYGVycmAgYW5kIHRoZSBgZG9jKHMpYC5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gX3BvcHVsYXRlKG1vZGVsLCBkb2NzLCBwYXRocywgY2FjaGUsIGNhbGxiYWNrKSB7XG4gIGxldCBwZW5kaW5nID0gcGF0aHMubGVuZ3RoO1xuICBpZiAocGF0aHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIGRvY3MpO1xuICB9XG4gIC8vIGVhY2ggcGF0aCBoYXMgaXRzIG93biBxdWVyeSBvcHRpb25zIGFuZCBtdXN0IGJlIGV4ZWN1dGVkIHNlcGFyYXRlbHlcbiAgZm9yIChjb25zdCBwYXRoIG9mIHBhdGhzKSB7XG4gICAgcG9wdWxhdGUobW9kZWwsIGRvY3MsIHBhdGgsIG5leHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbmV4dChlcnIpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCBudWxsKTtcbiAgICB9XG4gICAgaWYgKC0tcGVuZGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjYWxsYmFjayhudWxsLCBkb2NzKTtcbiAgfVxufVxuXG4vKiFcbiAqIFBvcHVsYXRlcyBgZG9jc2BcbiAqL1xuY29uc3QgZXhjbHVkZUlkUmVnID0gL1xccz8tX2lkXFxzPy87XG5jb25zdCBleGNsdWRlSWRSZWdHbG9iYWwgPSAvXFxzPy1faWRcXHM/L2c7XG5cbmZ1bmN0aW9uIHBvcHVsYXRlKG1vZGVsLCBkb2NzLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICBjb25zdCBwb3B1bGF0ZU9wdGlvbnMgPSBvcHRpb25zO1xuICBpZiAob3B0aW9ucy5zdHJpY3RQb3B1bGF0ZSA9PSBudWxsKSB7XG4gICAgaWYgKG9wdGlvbnMuX2xvY2FsTW9kZWwgIT0gbnVsbCAmJiBvcHRpb25zLl9sb2NhbE1vZGVsLnNjaGVtYS5fdXNlclByb3ZpZGVkT3B0aW9ucy5zdHJpY3RQb3B1bGF0ZSAhPSBudWxsKSB7XG4gICAgICBwb3B1bGF0ZU9wdGlvbnMuc3RyaWN0UG9wdWxhdGUgPSBvcHRpb25zLl9sb2NhbE1vZGVsLnNjaGVtYS5fdXNlclByb3ZpZGVkT3B0aW9ucy5zdHJpY3RQb3B1bGF0ZTtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuX2xvY2FsTW9kZWwgIT0gbnVsbCAmJiBtb2RlbC5iYXNlLm9wdGlvbnMuc3RyaWN0UG9wdWxhdGUgIT0gbnVsbCkge1xuICAgICAgcG9wdWxhdGVPcHRpb25zLnN0cmljdFBvcHVsYXRlID0gbW9kZWwuYmFzZS5vcHRpb25zLnN0cmljdFBvcHVsYXRlO1xuICAgIH0gZWxzZSBpZiAobW9kZWwuYmFzZS5vcHRpb25zLnN0cmljdFBvcHVsYXRlICE9IG51bGwpIHtcbiAgICAgIHBvcHVsYXRlT3B0aW9ucy5zdHJpY3RQb3B1bGF0ZSA9IG1vZGVsLmJhc2Uub3B0aW9ucy5zdHJpY3RQb3B1bGF0ZTtcbiAgICB9XG4gIH1cblxuICAvLyBub3JtYWxpemUgc2luZ2xlIC8gbXVsdGlwbGUgZG9jcyBwYXNzZWRcbiAgaWYgKCFBcnJheS5pc0FycmF5KGRvY3MpKSB7XG4gICAgZG9jcyA9IFtkb2NzXTtcbiAgfVxuICBpZiAoZG9jcy5sZW5ndGggPT09IDAgfHwgZG9jcy5ldmVyeSh1dGlscy5pc051bGxPclVuZGVmaW5lZCkpIHtcbiAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgfVxuXG4gIGNvbnN0IG1vZGVsc01hcCA9IGdldE1vZGVsc01hcEZvclBvcHVsYXRlKG1vZGVsLCBkb2NzLCBwb3B1bGF0ZU9wdGlvbnMpO1xuXG4gIGlmIChtb2RlbHNNYXAgaW5zdGFuY2VvZiBNb25nb29zZUVycm9yKSB7XG4gICAgcmV0dXJuIGltbWVkaWF0ZShmdW5jdGlvbigpIHtcbiAgICAgIGNhbGxiYWNrKG1vZGVsc01hcCk7XG4gICAgfSk7XG4gIH1cbiAgY29uc3QgbGVuID0gbW9kZWxzTWFwLmxlbmd0aDtcbiAgbGV0IHZhbHMgPSBbXTtcblxuICBmdW5jdGlvbiBmbGF0dGVuKGl0ZW0pIHtcbiAgICAvLyBubyBuZWVkIHRvIGluY2x1ZGUgdW5kZWZpbmVkIHZhbHVlcyBpbiBvdXIgcXVlcnlcbiAgICByZXR1cm4gdW5kZWZpbmVkICE9PSBpdGVtO1xuICB9XG5cbiAgbGV0IF9yZW1haW5pbmcgPSBsZW47XG4gIGxldCBoYXNPbmUgPSBmYWxzZTtcbiAgY29uc3QgcGFyYW1zID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBjb25zdCBtb2QgPSBtb2RlbHNNYXBbaV07XG4gICAgbGV0IHNlbGVjdCA9IG1vZC5vcHRpb25zLnNlbGVjdDtcbiAgICBsZXQgaWRzID0gdXRpbHMuYXJyYXkuZmxhdHRlbihtb2QuaWRzLCBmbGF0dGVuKTtcbiAgICBpZHMgPSB1dGlscy5hcnJheS51bmlxdWUoaWRzKTtcblxuICAgIGNvbnN0IGFzc2lnbm1lbnRPcHRzID0ge307XG4gICAgYXNzaWdubWVudE9wdHMuc29ydCA9IG1vZCAmJlxuICAgICAgbW9kLm9wdGlvbnMgJiZcbiAgICAgIG1vZC5vcHRpb25zLm9wdGlvbnMgJiZcbiAgICAgIG1vZC5vcHRpb25zLm9wdGlvbnMuc29ydCB8fCB2b2lkIDA7XG4gICAgYXNzaWdubWVudE9wdHMuZXhjbHVkZUlkID0gZXhjbHVkZUlkUmVnLnRlc3Qoc2VsZWN0KSB8fCAoc2VsZWN0ICYmIHNlbGVjdC5faWQgPT09IDApO1xuXG4gICAgLy8gTGVhbiB0cmFuc2Zvcm0gbWF5IGRlbGV0ZSBgX2lkYCwgd2hpY2ggd291bGQgY2F1c2UgYXNzaWdubWVudFxuICAgIC8vIHRvIGZhaWwuIFNvIGRlbGF5IHJ1bm5pbmcgbGVhbiB0cmFuc2Zvcm0gdW50aWwgX2FmdGVyX1xuICAgIC8vIGBfYXNzaWduKClgXG4gICAgaWYgKG1vZC5vcHRpb25zICYmXG4gICAgICAgIG1vZC5vcHRpb25zLm9wdGlvbnMgJiZcbiAgICAgICAgbW9kLm9wdGlvbnMub3B0aW9ucy5sZWFuICYmXG4gICAgICAgIG1vZC5vcHRpb25zLm9wdGlvbnMubGVhbi50cmFuc2Zvcm0pIHtcbiAgICAgIG1vZC5vcHRpb25zLm9wdGlvbnMuX2xlYW5UcmFuc2Zvcm0gPSBtb2Qub3B0aW9ucy5vcHRpb25zLmxlYW4udHJhbnNmb3JtO1xuICAgICAgbW9kLm9wdGlvbnMub3B0aW9ucy5sZWFuID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoaWRzLmxlbmd0aCA9PT0gMCB8fCBpZHMuZXZlcnkodXRpbHMuaXNOdWxsT3JVbmRlZmluZWQpKSB7XG4gICAgICAvLyBFbnN1cmUgdGhhdCB3ZSBzZXQgdG8gMCBvciBlbXB0eSBhcnJheSBldmVuXG4gICAgICAvLyBpZiB3ZSBkb24ndCBhY3R1YWxseSBleGVjdXRlIGEgcXVlcnkgdG8gbWFrZSBzdXJlIHRoZXJlJ3MgYSB2YWx1ZVxuICAgICAgLy8gYW5kIHdlIGtub3cgdGhpcyBwYXRoIHdhcyBwb3B1bGF0ZWQgZm9yIGZ1dHVyZSBzZXRzLiBTZWUgZ2gtNzczMSwgZ2gtODIzMFxuICAgICAgLS1fcmVtYWluaW5nO1xuICAgICAgX2Fzc2lnbihtb2RlbCwgW10sIG1vZCwgYXNzaWdubWVudE9wdHMpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaGFzT25lID0gdHJ1ZTtcbiAgICBpZiAodHlwZW9mIHBvcHVsYXRlT3B0aW9ucy5mb3JlaWduRmllbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBtb2QuZm9yZWlnbkZpZWxkLmNsZWFyKCk7XG4gICAgICBtb2QuZm9yZWlnbkZpZWxkLmFkZChwb3B1bGF0ZU9wdGlvbnMuZm9yZWlnbkZpZWxkKTtcbiAgICB9XG4gICAgY29uc3QgbWF0Y2ggPSBjcmVhdGVQb3B1bGF0ZVF1ZXJ5RmlsdGVyKGlkcywgbW9kLm1hdGNoLCBtb2QuZm9yZWlnbkZpZWxkLCBtb2QubW9kZWwsIG1vZC5vcHRpb25zLnNraXBJbnZhbGlkSWRzKTtcbiAgICBpZiAoYXNzaWdubWVudE9wdHMuZXhjbHVkZUlkKSB7XG4gICAgICAvLyBvdmVycmlkZSB0aGUgZXhjbHVzaW9uIGZyb20gdGhlIHF1ZXJ5IHNvIHdlIGNhbiB1c2UgdGhlIF9pZFxuICAgICAgLy8gZm9yIGRvY3VtZW50IG1hdGNoaW5nIGR1cmluZyBhc3NpZ25tZW50LiB3ZSdsbCBkZWxldGUgdGhlXG4gICAgICAvLyBfaWQgYmFjayBvZmYgYmVmb3JlIHJldHVybmluZyB0aGUgcmVzdWx0LlxuICAgICAgaWYgKHR5cGVvZiBzZWxlY3QgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHNlbGVjdCA9IHNlbGVjdC5yZXBsYWNlKGV4Y2x1ZGVJZFJlZ0dsb2JhbCwgJyAnKTtcbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShzZWxlY3QpKSB7XG4gICAgICAgIHNlbGVjdCA9IHNlbGVjdC5maWx0ZXIoZmllbGQgPT4gZmllbGQgIT09ICctX2lkJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBwcmVzZXJ2ZSBvcmlnaW5hbCBzZWxlY3QgY29uZGl0aW9ucyBieSBjb3B5aW5nXG4gICAgICAgIHNlbGVjdCA9IHsgLi4uc2VsZWN0IH07XG4gICAgICAgIGRlbGV0ZSBzZWxlY3QuX2lkO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtb2Qub3B0aW9ucy5vcHRpb25zICYmIG1vZC5vcHRpb25zLm9wdGlvbnMubGltaXQgIT0gbnVsbCkge1xuICAgICAgYXNzaWdubWVudE9wdHMub3JpZ2luYWxMaW1pdCA9IG1vZC5vcHRpb25zLm9wdGlvbnMubGltaXQ7XG4gICAgfSBlbHNlIGlmIChtb2Qub3B0aW9ucy5saW1pdCAhPSBudWxsKSB7XG4gICAgICBhc3NpZ25tZW50T3B0cy5vcmlnaW5hbExpbWl0ID0gbW9kLm9wdGlvbnMubGltaXQ7XG4gICAgfVxuICAgIHBhcmFtcy5wdXNoKFttb2QsIG1hdGNoLCBzZWxlY3QsIGFzc2lnbm1lbnRPcHRzLCBfbmV4dF0pO1xuICB9XG4gIGlmICghaGFzT25lKSB7XG4gICAgLy8gSWYgbW9kZWxzIGJ1dCBubyBkb2NzLCBza2lwIGZ1cnRoZXIgZGVlcCBwb3B1bGF0ZS5cbiAgICBpZiAobW9kZWxzTWFwLmxlbmd0aCAhPT0gMCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuICAgIC8vIElmIG5vIG1vZGVscyB0byBwb3B1bGF0ZSBidXQgd2UgaGF2ZSBhIG5lc3RlZCBwb3B1bGF0ZSxcbiAgICAvLyBrZWVwIHRyeWluZywgcmU6IGdoLTg5NDZcbiAgICBpZiAocG9wdWxhdGVPcHRpb25zLnBvcHVsYXRlICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IG9wdHMgPSB1dGlscy5wb3B1bGF0ZShwb3B1bGF0ZU9wdGlvbnMucG9wdWxhdGUpLm1hcChwb3AgPT4gT2JqZWN0LmFzc2lnbih7fSwgcG9wLCB7XG4gICAgICAgIHBhdGg6IHBvcHVsYXRlT3B0aW9ucy5wYXRoICsgJy4nICsgcG9wLnBhdGhcbiAgICAgIH0pKTtcbiAgICAgIG1vZGVsLnBvcHVsYXRlKGRvY3MsIG9wdHMpLnRoZW4ocmVzID0+IHsgY2FsbGJhY2sobnVsbCwgcmVzKTsgfSwgZXJyID0+IHsgY2FsbGJhY2soZXJyKTsgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBjYWxsYmFjaygpO1xuICB9XG5cbiAgZm9yIChjb25zdCBhcnIgb2YgcGFyYW1zKSB7XG4gICAgX2V4ZWNQb3B1bGF0ZVF1ZXJ5LmFwcGx5KG51bGwsIGFycik7XG4gIH1cbiAgZnVuY3Rpb24gX25leHQoZXJyLCB2YWxzRnJvbURiKSB7XG4gICAgaWYgKGVyciAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCBudWxsKTtcbiAgICB9XG4gICAgdmFscyA9IHZhbHMuY29uY2F0KHZhbHNGcm9tRGIpO1xuICAgIGlmICgtLV9yZW1haW5pbmcgPT09IDApIHtcbiAgICAgIF9kb25lKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2RvbmUoKSB7XG4gICAgZm9yIChjb25zdCBhcnIgb2YgcGFyYW1zKSB7XG4gICAgICBjb25zdCBtb2QgPSBhcnJbMF07XG4gICAgICBjb25zdCBhc3NpZ25tZW50T3B0cyA9IGFyclszXTtcbiAgICAgIGZvciAoY29uc3QgdmFsIG9mIHZhbHMpIHtcbiAgICAgICAgbW9kLm9wdGlvbnMuX2NoaWxkRG9jcy5wdXNoKHZhbCk7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICBfYXNzaWduKG1vZGVsLCB2YWxzLCBtb2QsIGFzc2lnbm1lbnRPcHRzKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGFyciBvZiBwYXJhbXMpIHtcbiAgICAgIHJlbW92ZURlc2VsZWN0ZWRGb3JlaWduRmllbGQoYXJyWzBdLmZvcmVpZ25GaWVsZCwgYXJyWzBdLm9wdGlvbnMsIHZhbHMpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGFyciBvZiBwYXJhbXMpIHtcbiAgICAgIGNvbnN0IG1vZCA9IGFyclswXTtcbiAgICAgIGlmIChtb2Qub3B0aW9ucyAmJiBtb2Qub3B0aW9ucy5vcHRpb25zICYmIG1vZC5vcHRpb25zLm9wdGlvbnMuX2xlYW5UcmFuc2Zvcm0pIHtcbiAgICAgICAgZm9yIChjb25zdCBkb2Mgb2YgdmFscykge1xuICAgICAgICAgIG1vZC5vcHRpb25zLm9wdGlvbnMuX2xlYW5UcmFuc2Zvcm0oZG9jKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjYWxsYmFjaygpO1xuICB9XG59XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxuZnVuY3Rpb24gX2V4ZWNQb3B1bGF0ZVF1ZXJ5KG1vZCwgbWF0Y2gsIHNlbGVjdCwgYXNzaWdubWVudE9wdHMsIGNhbGxiYWNrKSB7XG4gIGxldCBzdWJQb3B1bGF0ZSA9IGNsb25lKG1vZC5vcHRpb25zLnBvcHVsYXRlKTtcbiAgY29uc3QgcXVlcnlPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG4gICAgc2tpcDogbW9kLm9wdGlvbnMuc2tpcCxcbiAgICBsaW1pdDogbW9kLm9wdGlvbnMubGltaXQsXG4gICAgcGVyRG9jdW1lbnRMaW1pdDogbW9kLm9wdGlvbnMucGVyRG9jdW1lbnRMaW1pdFxuICB9LCBtb2Qub3B0aW9ucy5vcHRpb25zKTtcblxuICBpZiAobW9kLmNvdW50KSB7XG4gICAgZGVsZXRlIHF1ZXJ5T3B0aW9ucy5za2lwO1xuICB9XG5cbiAgaWYgKHF1ZXJ5T3B0aW9ucy5wZXJEb2N1bWVudExpbWl0ICE9IG51bGwpIHtcbiAgICBxdWVyeU9wdGlvbnMubGltaXQgPSBxdWVyeU9wdGlvbnMucGVyRG9jdW1lbnRMaW1pdDtcbiAgICBkZWxldGUgcXVlcnlPcHRpb25zLnBlckRvY3VtZW50TGltaXQ7XG4gIH0gZWxzZSBpZiAocXVlcnlPcHRpb25zLmxpbWl0ICE9IG51bGwpIHtcbiAgICBxdWVyeU9wdGlvbnMubGltaXQgPSBxdWVyeU9wdGlvbnMubGltaXQgKiBtb2QuaWRzLmxlbmd0aDtcbiAgfVxuXG4gIGNvbnN0IHF1ZXJ5ID0gbW9kLm1vZGVsLmZpbmQobWF0Y2gsIHNlbGVjdCwgcXVlcnlPcHRpb25zKTtcbiAgLy8gSWYgd2UncmUgZG9pbmcgdmlydHVhbCBwb3B1bGF0ZSBhbmQgcHJvamVjdGlvbiBpcyBpbmNsdXNpdmUgYW5kIGZvcmVpZ25cbiAgLy8gZmllbGQgaXMgbm90IHNlbGVjdGVkLCBhdXRvbWF0aWNhbGx5IHNlbGVjdCBpdCBiZWNhdXNlIG1vbmdvb3NlIG5lZWRzIGl0LlxuICAvLyBJZiBwcm9qZWN0aW9uIGlzIGV4Y2x1c2l2ZSBhbmQgY2xpZW50IGV4cGxpY2l0bHkgdW5zZWxlY3RlZCB0aGUgZm9yZWlnblxuICAvLyBmaWVsZCwgdGhhdCdzIHRoZSBjbGllbnQncyBmYXVsdC5cbiAgZm9yIChjb25zdCBmb3JlaWduRmllbGQgb2YgbW9kLmZvcmVpZ25GaWVsZCkge1xuICAgIGlmIChmb3JlaWduRmllbGQgIT09ICdfaWQnICYmXG4gICAgICAgIHF1ZXJ5LnNlbGVjdGVkSW5jbHVzaXZlbHkoKSAmJlxuICAgICAgICAhaXNQYXRoU2VsZWN0ZWRJbmNsdXNpdmUocXVlcnkuX2ZpZWxkcywgZm9yZWlnbkZpZWxkKSkge1xuICAgICAgcXVlcnkuc2VsZWN0KGZvcmVpZ25GaWVsZCk7XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgdXNpbmcgY291bnQsIHN0aWxsIG5lZWQgdGhlIGBmb3JlaWduRmllbGRgIHNvIHdlIGNhbiBtYXRjaCBjb3VudHNcbiAgLy8gdG8gZG9jdW1lbnRzLCBvdGhlcndpc2Ugd2Ugd291bGQgbmVlZCBhIHNlcGFyYXRlIGBjb3VudCgpYCBmb3IgZXZlcnkgZG9jLlxuICBpZiAobW9kLmNvdW50KSB7XG4gICAgZm9yIChjb25zdCBmb3JlaWduRmllbGQgb2YgbW9kLmZvcmVpZ25GaWVsZCkge1xuICAgICAgcXVlcnkuc2VsZWN0KGZvcmVpZ25GaWVsZCk7XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgd2UgbmVlZCB0byBzdWItcG9wdWxhdGUsIGNhbGwgcG9wdWxhdGUgcmVjdXJzaXZlbHlcbiAgaWYgKHN1YlBvcHVsYXRlKSB7XG4gICAgLy8gSWYgc3VicG9wdWxhdGluZyBvbiBhIGRpc2NyaW1pbmF0b3IsIHNraXAgY2hlY2sgZm9yIG5vbi1leGlzdGVudFxuICAgIC8vIHBhdGhzLiBCZWNhdXNlIHRoZSBkaXNjcmltaW5hdG9yIG1heSBub3QgaGF2ZSB0aGUgcGF0aCBkZWZpbmVkLlxuICAgIGlmIChtb2QubW9kZWwuYmFzZU1vZGVsTmFtZSAhPSBudWxsKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShzdWJQb3B1bGF0ZSkpIHtcbiAgICAgICAgc3ViUG9wdWxhdGUuZm9yRWFjaChwb3AgPT4geyBwb3Auc3RyaWN0UG9wdWxhdGUgPSBmYWxzZTsgfSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzdWJQb3B1bGF0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgc3ViUG9wdWxhdGUgPSB7IHBhdGg6IHN1YlBvcHVsYXRlLCBzdHJpY3RQb3B1bGF0ZTogZmFsc2UgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN1YlBvcHVsYXRlLnN0cmljdFBvcHVsYXRlID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGJhc2VQYXRoID0gbW9kLm9wdGlvbnMuX2Z1bGxQYXRoIHx8IG1vZC5vcHRpb25zLnBhdGg7XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdWJQb3B1bGF0ZSkpIHtcbiAgICAgIGZvciAoY29uc3QgcG9wIG9mIHN1YlBvcHVsYXRlKSB7XG4gICAgICAgIHBvcC5fZnVsbFBhdGggPSBiYXNlUGF0aCArICcuJyArIHBvcC5wYXRoO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHN1YlBvcHVsYXRlID09PSAnb2JqZWN0Jykge1xuICAgICAgc3ViUG9wdWxhdGUuX2Z1bGxQYXRoID0gYmFzZVBhdGggKyAnLicgKyBzdWJQb3B1bGF0ZS5wYXRoO1xuICAgIH1cblxuICAgIHF1ZXJ5LnBvcHVsYXRlKHN1YlBvcHVsYXRlKTtcbiAgfVxuXG4gIHF1ZXJ5LmV4ZWMoKS50aGVuKFxuICAgIGRvY3MgPT4ge1xuICAgICAgZm9yIChjb25zdCB2YWwgb2YgZG9jcykge1xuICAgICAgICBsZWFuUG9wdWxhdGVNYXAuc2V0KHZhbCwgbW9kLm1vZGVsKTtcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrKG51bGwsIGRvY3MpO1xuICAgIH0sXG4gICAgZXJyID0+IHtcbiAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgfVxuICApO1xufVxuXG4vKiFcbiAqIGlnbm9yZVxuICovXG5cbmZ1bmN0aW9uIF9hc3NpZ24obW9kZWwsIHZhbHMsIG1vZCwgYXNzaWdubWVudE9wdHMpIHtcbiAgY29uc3Qgb3B0aW9ucyA9IG1vZC5vcHRpb25zO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBtb2QuaXNWaXJ0dWFsO1xuICBjb25zdCBqdXN0T25lID0gbW9kLmp1c3RPbmU7XG4gIGxldCBfdmFsO1xuICBjb25zdCBsZWFuID0gb3B0aW9ucyAmJlxuICAgIG9wdGlvbnMub3B0aW9ucyAmJlxuICAgIG9wdGlvbnMub3B0aW9ucy5sZWFuIHx8IGZhbHNlO1xuICBjb25zdCBsZW4gPSB2YWxzLmxlbmd0aDtcbiAgY29uc3QgcmF3T3JkZXIgPSB7fTtcbiAgY29uc3QgcmF3RG9jcyA9IHt9O1xuICBsZXQga2V5O1xuICBsZXQgdmFsO1xuXG4gIC8vIENsb25lIGJlY2F1c2UgYGFzc2lnblJhd0RvY3NUb0lkU3RydWN0dXJlYCB3aWxsIG11dGF0ZSB0aGUgYXJyYXlcbiAgY29uc3QgYWxsSWRzID0gY2xvbmUobW9kLmFsbElkcyk7XG4gIC8vIG9wdGltaXphdGlvbjpcbiAgLy8gcmVjb3JkIHRoZSBkb2N1bWVudCBwb3NpdGlvbnMgYXMgcmV0dXJuZWQgYnlcbiAgLy8gdGhlIHF1ZXJ5IHJlc3VsdC5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIHZhbCA9IHZhbHNbaV07XG4gICAgaWYgKHZhbCA9PSBudWxsKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBmb3JlaWduRmllbGQgb2YgbW9kLmZvcmVpZ25GaWVsZCkge1xuICAgICAgX3ZhbCA9IHV0aWxzLmdldFZhbHVlKGZvcmVpZ25GaWVsZCwgdmFsKTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KF92YWwpKSB7XG4gICAgICAgIF92YWwgPSB1dGlscy5hcnJheS51bmlxdWUodXRpbHMuYXJyYXkuZmxhdHRlbihfdmFsKSk7XG5cbiAgICAgICAgZm9yIChsZXQgX192YWwgb2YgX3ZhbCkge1xuICAgICAgICAgIGlmIChfX3ZhbCBpbnN0YW5jZW9mIERvY3VtZW50KSB7XG4gICAgICAgICAgICBfX3ZhbCA9IF9fdmFsLl9pZDtcbiAgICAgICAgICB9XG4gICAgICAgICAga2V5ID0gU3RyaW5nKF9fdmFsKTtcbiAgICAgICAgICBpZiAocmF3RG9jc1trZXldKSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyYXdEb2NzW2tleV0pKSB7XG4gICAgICAgICAgICAgIHJhd0RvY3Nba2V5XS5wdXNoKHZhbCk7XG4gICAgICAgICAgICAgIHJhd09yZGVyW2tleV0ucHVzaChpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJhd0RvY3Nba2V5XSA9IFtyYXdEb2NzW2tleV0sIHZhbF07XG4gICAgICAgICAgICAgIHJhd09yZGVyW2tleV0gPSBbcmF3T3JkZXJba2V5XSwgaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpc1ZpcnR1YWwgJiYgIWp1c3RPbmUpIHtcbiAgICAgICAgICAgICAgcmF3RG9jc1trZXldID0gW3ZhbF07XG4gICAgICAgICAgICAgIHJhd09yZGVyW2tleV0gPSBbaV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByYXdEb2NzW2tleV0gPSB2YWw7XG4gICAgICAgICAgICAgIHJhd09yZGVyW2tleV0gPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKF92YWwgaW5zdGFuY2VvZiBEb2N1bWVudCkge1xuICAgICAgICAgIF92YWwgPSBfdmFsLl9pZDtcbiAgICAgICAgfVxuICAgICAgICBrZXkgPSBTdHJpbmcoX3ZhbCk7XG4gICAgICAgIGlmIChyYXdEb2NzW2tleV0pIHtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyYXdEb2NzW2tleV0pKSB7XG4gICAgICAgICAgICByYXdEb2NzW2tleV0ucHVzaCh2YWwpO1xuICAgICAgICAgICAgcmF3T3JkZXJba2V5XS5wdXNoKGkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNWaXJ0dWFsIHx8XG4gICAgICAgICAgICByYXdEb2NzW2tleV0uY29uc3RydWN0b3IgIT09IHZhbC5jb25zdHJ1Y3RvciB8fFxuICAgICAgICAgICAgU3RyaW5nKHJhd0RvY3Nba2V5XS5faWQpICE9PSBTdHJpbmcodmFsLl9pZCkpIHtcbiAgICAgICAgICAgIC8vIE1heSBuZWVkIHRvIHN0b3JlIG11bHRpcGxlIGRvY3Mgd2l0aCB0aGUgc2FtZSBpZCBpZiB0aGVyZSdzIG11bHRpcGxlIG1vZGVsc1xuICAgICAgICAgICAgLy8gaWYgd2UgaGF2ZSBkaXNjcmltaW5hdG9ycyBvciBhIHJlZiBmdW5jdGlvbi4gQnV0IGF2b2lkIGNvbnZlcnRpbmcgdG8gYW4gYXJyYXlcbiAgICAgICAgICAgIC8vIGlmIHdlIGhhdmUgbXVsdGlwbGUgcXVlcmllcyBvbiB0aGUgc2FtZSBtb2RlbCBiZWNhdXNlIG9mIGBwZXJEb2N1bWVudExpbWl0YCByZTogZ2gtOTkwNlxuICAgICAgICAgICAgcmF3RG9jc1trZXldID0gW3Jhd0RvY3Nba2V5XSwgdmFsXTtcbiAgICAgICAgICAgIHJhd09yZGVyW2tleV0gPSBbcmF3T3JkZXJba2V5XSwgaV07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJhd0RvY3Nba2V5XSA9IHZhbDtcbiAgICAgICAgICByYXdPcmRlcltrZXldID0gaTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gZmxhZyBlYWNoIGFzIHJlc3VsdCBvZiBwb3B1bGF0aW9uXG4gICAgICBpZiAoIWxlYW4pIHtcbiAgICAgICAgdmFsLiRfXy53YXNQb3B1bGF0ZWQgPSB2YWwuJF9fLndhc1BvcHVsYXRlZCB8fCB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFzc2lnblZhbHMoe1xuICAgIG9yaWdpbmFsTW9kZWw6IG1vZGVsLFxuICAgIC8vIElmIHZpcnR1YWwsIG1ha2Ugc3VyZSB0byBub3QgbXV0YXRlIG9yaWdpbmFsIGZpZWxkXG4gICAgcmF3SWRzOiBtb2QuaXNWaXJ0dWFsID8gYWxsSWRzIDogbW9kLmFsbElkcyxcbiAgICBhbGxJZHM6IGFsbElkcyxcbiAgICB1bnBvcHVsYXRlZFZhbHVlczogbW9kLnVucG9wdWxhdGVkVmFsdWVzLFxuICAgIGZvcmVpZ25GaWVsZDogbW9kLmZvcmVpZ25GaWVsZCxcbiAgICByYXdEb2NzOiByYXdEb2NzLFxuICAgIHJhd09yZGVyOiByYXdPcmRlcixcbiAgICBkb2NzOiBtb2QuZG9jcyxcbiAgICBwYXRoOiBvcHRpb25zLnBhdGgsXG4gICAgb3B0aW9uczogYXNzaWdubWVudE9wdHMsXG4gICAganVzdE9uZTogbW9kLmp1c3RPbmUsXG4gICAgaXNWaXJ0dWFsOiBtb2QuaXNWaXJ0dWFsLFxuICAgIGFsbE9wdGlvbnM6IG1vZCxcbiAgICBwb3B1bGF0ZWRNb2RlbDogbW9kLm1vZGVsLFxuICAgIGxlYW46IGxlYW4sXG4gICAgdmlydHVhbDogbW9kLnZpcnR1YWwsXG4gICAgY291bnQ6IG1vZC5jb3VudCxcbiAgICBtYXRjaDogbW9kLm1hdGNoXG4gIH0pO1xufVxuXG4vKipcbiAqIENvbXBpbGVyIHV0aWxpdHkuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IG5hbWUgbW9kZWwgbmFtZSBvciBjbGFzcyBleHRlbmRpbmcgTW9kZWxcbiAqIEBwYXJhbSB7U2NoZW1hfSBzY2hlbWFcbiAqIEBwYXJhbSB7U3RyaW5nfSBjb2xsZWN0aW9uTmFtZVxuICogQHBhcmFtIHtDb25uZWN0aW9ufSBjb25uZWN0aW9uXG4gKiBAcGFyYW0ge01vbmdvb3NlfSBiYXNlIG1vbmdvb3NlIGluc3RhbmNlXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Nb2RlbC5jb21waWxlID0gZnVuY3Rpb24gY29tcGlsZShuYW1lLCBzY2hlbWEsIGNvbGxlY3Rpb25OYW1lLCBjb25uZWN0aW9uLCBiYXNlKSB7XG4gIGNvbnN0IHZlcnNpb25pbmdFbmFibGVkID0gc2NoZW1hLm9wdGlvbnMudmVyc2lvbktleSAhPT0gZmFsc2U7XG5cbiAgaWYgKHZlcnNpb25pbmdFbmFibGVkICYmICFzY2hlbWEucGF0aHNbc2NoZW1hLm9wdGlvbnMudmVyc2lvbktleV0pIHtcbiAgICAvLyBhZGQgdmVyc2lvbmluZyB0byB0b3AgbGV2ZWwgZG9jdW1lbnRzIG9ubHlcbiAgICBjb25zdCBvID0ge307XG4gICAgb1tzY2hlbWEub3B0aW9ucy52ZXJzaW9uS2V5XSA9IE51bWJlcjtcbiAgICBzY2hlbWEuYWRkKG8pO1xuICB9XG4gIGxldCBtb2RlbDtcbiAgaWYgKHR5cGVvZiBuYW1lID09PSAnZnVuY3Rpb24nICYmIG5hbWUucHJvdG90eXBlIGluc3RhbmNlb2YgTW9kZWwpIHtcbiAgICBtb2RlbCA9IG5hbWU7XG4gICAgbmFtZSA9IG1vZGVsLm5hbWU7XG4gICAgc2NoZW1hLmxvYWRDbGFzcyhtb2RlbCwgZmFsc2UpO1xuICAgIG1vZGVsLnByb3RvdHlwZS4kaXNNb25nb29zZU1vZGVsUHJvdG90eXBlID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBnZW5lcmF0ZSBuZXcgY2xhc3NcbiAgICBtb2RlbCA9IGZ1bmN0aW9uIG1vZGVsKGRvYywgZmllbGRzLCBza2lwSWQpIHtcbiAgICAgIG1vZGVsLmhvb2tzLmV4ZWNQcmVTeW5jKCdjcmVhdGVNb2RlbCcsIGRvYyk7XG4gICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgbW9kZWwpKSB7XG4gICAgICAgIHJldHVybiBuZXcgbW9kZWwoZG9jLCBmaWVsZHMsIHNraXBJZCk7XG4gICAgICB9XG4gICAgICBjb25zdCBkaXNjcmltaW5hdG9yS2V5ID0gbW9kZWwuc2NoZW1hLm9wdGlvbnMuZGlzY3JpbWluYXRvcktleTtcblxuICAgICAgaWYgKG1vZGVsLmRpc2NyaW1pbmF0b3JzID09IG51bGwgfHwgZG9jID09IG51bGwgfHwgZG9jW2Rpc2NyaW1pbmF0b3JLZXldID09IG51bGwpIHtcbiAgICAgICAgTW9kZWwuY2FsbCh0aGlzLCBkb2MsIGZpZWxkcywgc2tpcElkKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBkaXNjcmltaW5hdG9yIGtleSBpcyBzZXQsIHVzZSB0aGUgZGlzY3JpbWluYXRvciBpbnN0ZWFkIChnaC03NTg2KVxuICAgICAgY29uc3QgRGlzY3JpbWluYXRvciA9IG1vZGVsLmRpc2NyaW1pbmF0b3JzW2RvY1tkaXNjcmltaW5hdG9yS2V5XV0gfHxcbiAgICAgICAgZ2V0RGlzY3JpbWluYXRvckJ5VmFsdWUobW9kZWwuZGlzY3JpbWluYXRvcnMsIGRvY1tkaXNjcmltaW5hdG9yS2V5XSk7XG4gICAgICBpZiAoRGlzY3JpbWluYXRvciAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGlzY3JpbWluYXRvcihkb2MsIGZpZWxkcywgc2tpcElkKTtcbiAgICAgIH1cblxuICAgICAgLy8gT3RoZXJ3aXNlLCBqdXN0IHVzZSB0aGUgdG9wLWxldmVsIG1vZGVsXG4gICAgICBNb2RlbC5jYWxsKHRoaXMsIGRvYywgZmllbGRzLCBza2lwSWQpO1xuICAgIH07XG4gIH1cblxuICBtb2RlbC5ob29rcyA9IHNjaGVtYS5zLmhvb2tzLmNsb25lKCk7XG4gIG1vZGVsLmJhc2UgPSBiYXNlO1xuICBtb2RlbC5tb2RlbE5hbWUgPSBuYW1lO1xuXG4gIGlmICghKG1vZGVsLnByb3RvdHlwZSBpbnN0YW5jZW9mIE1vZGVsKSkge1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihtb2RlbCwgTW9kZWwpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihtb2RlbC5wcm90b3R5cGUsIE1vZGVsLnByb3RvdHlwZSk7XG4gIH1cbiAgbW9kZWwubW9kZWwgPSBmdW5jdGlvbiBtb2RlbChuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuZGIubW9kZWwobmFtZSk7XG4gIH07XG5cbiAgbW9kZWwuZGIgPSBjb25uZWN0aW9uO1xuICBtb2RlbC5wcm90b3R5cGUuZGIgPSBjb25uZWN0aW9uO1xuICBtb2RlbC5wcm90b3R5cGVbbW9kZWxEYlN5bWJvbF0gPSBjb25uZWN0aW9uO1xuICBtb2RlbC5kaXNjcmltaW5hdG9ycyA9IG1vZGVsLnByb3RvdHlwZS5kaXNjcmltaW5hdG9ycyA9IHVuZGVmaW5lZDtcbiAgbW9kZWxbbW9kZWxTeW1ib2xdID0gdHJ1ZTtcbiAgbW9kZWwuZXZlbnRzID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIHNjaGVtYS5fcHJlQ29tcGlsZSgpO1xuXG4gIGNvbnN0IF91c2VyUHJvdmlkZWRPcHRpb25zID0gc2NoZW1hLl91c2VyUHJvdmlkZWRPcHRpb25zIHx8IHt9O1xuXG4gIGNvbnN0IGNvbGxlY3Rpb25PcHRpb25zID0ge1xuICAgIHNjaGVtYVVzZXJQcm92aWRlZE9wdGlvbnM6IF91c2VyUHJvdmlkZWRPcHRpb25zLFxuICAgIGNhcHBlZDogc2NoZW1hLm9wdGlvbnMuY2FwcGVkLFxuICAgIFByb21pc2U6IG1vZGVsLmJhc2UuUHJvbWlzZSxcbiAgICBtb2RlbE5hbWU6IG5hbWVcbiAgfTtcbiAgaWYgKHNjaGVtYS5vcHRpb25zLmF1dG9DcmVhdGUgIT09IHZvaWQgMCkge1xuICAgIGNvbGxlY3Rpb25PcHRpb25zLmF1dG9DcmVhdGUgPSBzY2hlbWEub3B0aW9ucy5hdXRvQ3JlYXRlO1xuICB9XG5cbiAgY29uc3QgY29sbGVjdGlvbiA9IGNvbm5lY3Rpb24uY29sbGVjdGlvbihcbiAgICBjb2xsZWN0aW9uTmFtZSxcbiAgICBjb2xsZWN0aW9uT3B0aW9uc1xuICApO1xuXG4gIG1vZGVsLnByb3RvdHlwZS5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgbW9kZWwucHJvdG90eXBlLiRjb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgbW9kZWwucHJvdG90eXBlW21vZGVsQ29sbGVjdGlvblN5bWJvbF0gPSBjb2xsZWN0aW9uO1xuXG4gIG1vZGVsLnByb3RvdHlwZS4kX19zZXRTY2hlbWEoc2NoZW1hKTtcblxuICAvLyBhcHBseSBtZXRob2RzIGFuZCBzdGF0aWNzXG4gIGFwcGx5TWV0aG9kcyhtb2RlbCwgc2NoZW1hKTtcbiAgYXBwbHlTdGF0aWNzKG1vZGVsLCBzY2hlbWEpO1xuICBhcHBseUhvb2tzKG1vZGVsLCBzY2hlbWEpO1xuICBhcHBseVN0YXRpY0hvb2tzKG1vZGVsLCBzY2hlbWEucy5ob29rcywgc2NoZW1hLnN0YXRpY3MpO1xuXG4gIG1vZGVsLnNjaGVtYSA9IG1vZGVsLnByb3RvdHlwZS4kX19zY2hlbWE7XG4gIG1vZGVsLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICBtb2RlbC4kX19jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcblxuICAvLyBDcmVhdGUgY3VzdG9tIHF1ZXJ5IGNvbnN0cnVjdG9yXG4gIG1vZGVsLlF1ZXJ5ID0gZnVuY3Rpb24oKSB7XG4gICAgUXVlcnkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKG1vZGVsLlF1ZXJ5LnByb3RvdHlwZSwgUXVlcnkucHJvdG90eXBlKTtcbiAgbW9kZWwuUXVlcnkuYmFzZSA9IFF1ZXJ5LmJhc2U7XG4gIG1vZGVsLlF1ZXJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFF1ZXJ5O1xuICBtb2RlbC5fYXBwbHlRdWVyeU1pZGRsZXdhcmUoKTtcbiAgYXBwbHlRdWVyeU1ldGhvZHMobW9kZWwsIHNjaGVtYS5xdWVyeSk7XG5cbiAgcmV0dXJuIG1vZGVsO1xufTtcblxuLyoqXG4gKiBSZWdpc3RlciBjdXN0b20gcXVlcnkgbWV0aG9kcyBmb3IgdGhpcyBtb2RlbFxuICpcbiAqIEBwYXJhbSB7TW9kZWx9IG1vZGVsXG4gKiBAcGFyYW0ge1NjaGVtYX0gc2NoZW1hXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBhcHBseVF1ZXJ5TWV0aG9kcyhtb2RlbCwgbWV0aG9kcykge1xuICBmb3IgKGNvbnN0IGkgaW4gbWV0aG9kcykge1xuICAgIG1vZGVsLlF1ZXJ5LnByb3RvdHlwZVtpXSA9IG1ldGhvZHNbaV07XG4gIH1cbn1cblxuLyoqXG4gKiBTdWJjbGFzcyB0aGlzIG1vZGVsIHdpdGggYGNvbm5gLCBgc2NoZW1hYCwgYW5kIGBjb2xsZWN0aW9uYCBzZXR0aW5ncy5cbiAqXG4gKiBAcGFyYW0ge0Nvbm5lY3Rpb259IGNvbm5cbiAqIEBwYXJhbSB7U2NoZW1hfSBbc2NoZW1hXVxuICogQHBhcmFtIHtTdHJpbmd9IFtjb2xsZWN0aW9uXVxuICogQHJldHVybiB7TW9kZWx9XG4gKiBAYXBpIHByaXZhdGVcbiAqIEBtZW1iZXJPZiBNb2RlbFxuICogQHN0YXRpY1xuICogQG1ldGhvZCBfX3N1YmNsYXNzXG4gKi9cblxuTW9kZWwuX19zdWJjbGFzcyA9IGZ1bmN0aW9uIHN1YmNsYXNzKGNvbm4sIHNjaGVtYSwgY29sbGVjdGlvbikge1xuICAvLyBzdWJjbGFzcyBtb2RlbCB1c2luZyB0aGlzIGNvbm5lY3Rpb24gYW5kIGNvbGxlY3Rpb24gbmFtZVxuICBjb25zdCBfdGhpcyA9IHRoaXM7XG5cbiAgY29uc3QgTW9kZWwgPSBmdW5jdGlvbiBNb2RlbChkb2MsIGZpZWxkcywgc2tpcElkKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIE1vZGVsKSkge1xuICAgICAgcmV0dXJuIG5ldyBNb2RlbChkb2MsIGZpZWxkcywgc2tpcElkKTtcbiAgICB9XG4gICAgX3RoaXMuY2FsbCh0aGlzLCBkb2MsIGZpZWxkcywgc2tpcElkKTtcbiAgfTtcblxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YoTW9kZWwsIF90aGlzKTtcbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKE1vZGVsLnByb3RvdHlwZSwgX3RoaXMucHJvdG90eXBlKTtcbiAgTW9kZWwuZGIgPSBjb25uO1xuICBNb2RlbC5wcm90b3R5cGUuZGIgPSBjb25uO1xuICBNb2RlbC5wcm90b3R5cGVbbW9kZWxEYlN5bWJvbF0gPSBjb25uO1xuXG4gIF90aGlzW3N1YmNsYXNzZWRTeW1ib2xdID0gX3RoaXNbc3ViY2xhc3NlZFN5bWJvbF0gfHwgW107XG4gIF90aGlzW3N1YmNsYXNzZWRTeW1ib2xdLnB1c2goTW9kZWwpO1xuICBpZiAoX3RoaXMuZGlzY3JpbWluYXRvcnMgIT0gbnVsbCkge1xuICAgIE1vZGVsLmRpc2NyaW1pbmF0b3JzID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoX3RoaXMuZGlzY3JpbWluYXRvcnMpKSB7XG4gICAgICBNb2RlbC5kaXNjcmltaW5hdG9yc1trZXldID0gX3RoaXMuZGlzY3JpbWluYXRvcnNba2V5XS5cbiAgICAgICAgX19zdWJjbGFzcyhfdGhpcy5kYiwgX3RoaXMuZGlzY3JpbWluYXRvcnNba2V5XS5zY2hlbWEsIGNvbGxlY3Rpb24pO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHMgPSBzY2hlbWEgJiYgdHlwZW9mIHNjaGVtYSAhPT0gJ3N0cmluZydcbiAgICA/IHNjaGVtYVxuICAgIDogX3RoaXMucHJvdG90eXBlLiRfX3NjaGVtYTtcblxuICBjb25zdCBvcHRpb25zID0gcy5vcHRpb25zIHx8IHt9O1xuICBjb25zdCBfdXNlclByb3ZpZGVkT3B0aW9ucyA9IHMuX3VzZXJQcm92aWRlZE9wdGlvbnMgfHwge307XG5cbiAgaWYgKCFjb2xsZWN0aW9uKSB7XG4gICAgY29sbGVjdGlvbiA9IF90aGlzLnByb3RvdHlwZS4kX19zY2hlbWEuZ2V0KCdjb2xsZWN0aW9uJykgfHxcbiAgICAgIHV0aWxzLnRvQ29sbGVjdGlvbk5hbWUoX3RoaXMubW9kZWxOYW1lLCB0aGlzLmJhc2UucGx1cmFsaXplKCkpO1xuICB9XG5cbiAgY29uc3QgY29sbGVjdGlvbk9wdGlvbnMgPSB7XG4gICAgc2NoZW1hVXNlclByb3ZpZGVkT3B0aW9uczogX3VzZXJQcm92aWRlZE9wdGlvbnMsXG4gICAgY2FwcGVkOiBzICYmIG9wdGlvbnMuY2FwcGVkXG4gIH07XG5cbiAgTW9kZWwucHJvdG90eXBlLmNvbGxlY3Rpb24gPSBjb25uLmNvbGxlY3Rpb24oY29sbGVjdGlvbiwgY29sbGVjdGlvbk9wdGlvbnMpO1xuICBNb2RlbC5wcm90b3R5cGUuJGNvbGxlY3Rpb24gPSBNb2RlbC5wcm90b3R5cGUuY29sbGVjdGlvbjtcbiAgTW9kZWwucHJvdG90eXBlW21vZGVsQ29sbGVjdGlvblN5bWJvbF0gPSBNb2RlbC5wcm90b3R5cGUuY29sbGVjdGlvbjtcbiAgTW9kZWwuY29sbGVjdGlvbiA9IE1vZGVsLnByb3RvdHlwZS5jb2xsZWN0aW9uO1xuICBNb2RlbC4kX19jb2xsZWN0aW9uID0gTW9kZWwuY29sbGVjdGlvbjtcbiAgLy8gRXJyb3JzIGhhbmRsZWQgaW50ZXJuYWxseSwgc28gaWdub3JlXG4gIE1vZGVsLmluaXQoKS5jYXRjaCgoKSA9PiB7fSk7XG4gIHJldHVybiBNb2RlbDtcbn07XG5cbi8qKlxuICogQXBwbHkgY2hhbmdlcyBtYWRlIHRvIHRoaXMgbW9kZWwncyBzY2hlbWEgYWZ0ZXIgdGhpcyBtb2RlbCB3YXMgY29tcGlsZWQuXG4gKiBCeSBkZWZhdWx0LCBhZGRpbmcgdmlydHVhbHMgYW5kIG90aGVyIHByb3BlcnRpZXMgdG8gYSBzY2hlbWEgYWZ0ZXIgdGhlIG1vZGVsIGlzIGNvbXBpbGVkIGRvZXMgbm90aGluZy5cbiAqIENhbGwgdGhpcyBmdW5jdGlvbiB0byBhcHBseSB2aXJ0dWFscyBhbmQgcHJvcGVydGllcyB0aGF0IHdlcmUgYWRkZWQgbGF0ZXIuXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBjb25zdCBzY2hlbWEgPSBuZXcgbW9uZ29vc2UuU2NoZW1hKHsgZmllbGQ6IFN0cmluZyB9KTtcbiAqICAgICBjb25zdCBUZXN0TW9kZWwgPSBtb25nb29zZS5tb2RlbCgnVGVzdCcsIHNjaGVtYSk7XG4gKiAgICAgVGVzdE1vZGVsLnNjaGVtYS52aXJ0dWFsKCdteVZpcnR1YWwnKS5nZXQoZnVuY3Rpb24oKSB7XG4gKiAgICAgICByZXR1cm4gdGhpcy5maWVsZCArICcgZnJvbSBteVZpcnR1YWwnO1xuICogICAgIH0pO1xuICogICAgIGNvbnN0IGRvYyA9IG5ldyBUZXN0TW9kZWwoeyBmaWVsZDogJ0hlbGxvJyB9KTtcbiAqICAgICBkb2MubXlWaXJ0dWFsOyAvLyB1bmRlZmluZWRcbiAqXG4gKiAgICAgVGVzdE1vZGVsLnJlY29tcGlsZVNjaGVtYSgpO1xuICogICAgIGRvYy5teVZpcnR1YWw7IC8vICdIZWxsbyBmcm9tIG15VmlydHVhbCdcbiAqXG4gKiBAcmV0dXJuIHt1bmRlZmluZWR9XG4gKiBAYXBpIHB1YmxpY1xuICogQG1lbWJlck9mIE1vZGVsXG4gKiBAc3RhdGljXG4gKiBAbWV0aG9kIHJlY29tcGlsZVNjaGVtYVxuICovXG5cbk1vZGVsLnJlY29tcGlsZVNjaGVtYSA9IGZ1bmN0aW9uIHJlY29tcGlsZVNjaGVtYSgpIHtcbiAgdGhpcy5wcm90b3R5cGUuJF9fc2V0U2NoZW1hKHRoaXMuc2NoZW1hKTtcbn07XG5cbi8qKlxuICogSGVscGVyIGZvciBjb25zb2xlLmxvZy4gR2l2ZW4gYSBtb2RlbCBuYW1lZCAnTXlNb2RlbCcsIHJldHVybnMgdGhlIHN0cmluZ1xuICogYCdNb2RlbCB7IE15TW9kZWwgfSdgLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3QgTXlNb2RlbCA9IG1vbmdvb3NlLm1vZGVsKCdUZXN0JywgU2NoZW1hKHsgbmFtZTogU3RyaW5nIH0pKTtcbiAqICAgICBNeU1vZGVsLmluc3BlY3QoKTsgLy8gJ01vZGVsIHsgVGVzdCB9J1xuICogICAgIGNvbnNvbGUubG9nKE15TW9kZWwpOyAvLyBQcmludHMgJ01vZGVsIHsgVGVzdCB9J1xuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTW9kZWwuaW5zcGVjdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gYE1vZGVsIHsgJHt0aGlzLm1vZGVsTmFtZX0gfWA7XG59O1xuXG5pZiAodXRpbC5pbnNwZWN0LmN1c3RvbSkge1xuICAvLyBBdm9pZCBOb2RlIGRlcHJlY2F0aW9uIHdhcm5pbmcgREVQMDA3OVxuICBNb2RlbFt1dGlsLmluc3BlY3QuY3VzdG9tXSA9IE1vZGVsLmluc3BlY3Q7XG59XG5cbi8qIVxuICogQXBwbGllcyBxdWVyeSBtaWRkbGV3YXJlIGZyb20gdGhpcyBtb2RlbCdzIHNjaGVtYSB0byB0aGlzIG1vZGVsJ3NcbiAqIFF1ZXJ5IGNvbnN0cnVjdG9yLlxuICovXG5cbk1vZGVsLl9hcHBseVF1ZXJ5TWlkZGxld2FyZSA9IGZ1bmN0aW9uIF9hcHBseVF1ZXJ5TWlkZGxld2FyZSgpIHtcbiAgY29uc3QgUXVlcnkgPSB0aGlzLlF1ZXJ5O1xuICBjb25zdCBxdWVyeU1pZGRsZXdhcmUgPSB0aGlzLnNjaGVtYS5zLmhvb2tzLmZpbHRlcihob29rID0+IHtcbiAgICBjb25zdCBjb250ZXh0cyA9IF9nZXRDb250ZXh0cyhob29rKTtcbiAgICBpZiAoaG9vay5uYW1lID09PSAndmFsaWRhdGUnKSB7XG4gICAgICByZXR1cm4gISFjb250ZXh0cy5xdWVyeTtcbiAgICB9XG4gICAgaWYgKGhvb2submFtZSA9PT0gJ2RlbGV0ZU9uZScgfHwgaG9vay5uYW1lID09PSAndXBkYXRlT25lJykge1xuICAgICAgcmV0dXJuICEhY29udGV4dHMucXVlcnkgfHwgT2JqZWN0LmtleXMoY29udGV4dHMpLmxlbmd0aCA9PT0gMDtcbiAgICB9XG4gICAgaWYgKGhvb2sucXVlcnkgIT0gbnVsbCB8fCBob29rLmRvY3VtZW50ICE9IG51bGwpIHtcbiAgICAgIHJldHVybiAhIWhvb2sucXVlcnk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9KTtcblxuICBRdWVyeS5wcm90b3R5cGUuX3F1ZXJ5TWlkZGxld2FyZSA9IHF1ZXJ5TWlkZGxld2FyZTtcbn07XG5cbmZ1bmN0aW9uIF9nZXRDb250ZXh0cyhob29rKSB7XG4gIGNvbnN0IHJldCA9IHt9O1xuICBpZiAoaG9vay5oYXNPd25Qcm9wZXJ0eSgncXVlcnknKSkge1xuICAgIHJldC5xdWVyeSA9IGhvb2sucXVlcnk7XG4gIH1cbiAgaWYgKGhvb2suaGFzT3duUHJvcGVydHkoJ2RvY3VtZW50JykpIHtcbiAgICByZXQuZG9jdW1lbnQgPSBob29rLmRvY3VtZW50O1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbi8qIVxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gTW9kZWw7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/model.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/mongoose.js":
/*!***********************************************!*\
  !*** ./node_modules/mongoose/lib/mongoose.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\nconst Document = __webpack_require__(/*! ./document */ \"(ssr)/./node_modules/mongoose/lib/document.js\");\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst Kareem = __webpack_require__(/*! kareem */ \"(ssr)/./node_modules/kareem/index.js\");\nconst Schema = __webpack_require__(/*! ./schema */ \"(ssr)/./node_modules/mongoose/lib/schema.js\");\nconst SchemaType = __webpack_require__(/*! ./schemaType */ \"(ssr)/./node_modules/mongoose/lib/schemaType.js\");\nconst SchemaTypes = __webpack_require__(/*! ./schema/index */ \"(ssr)/./node_modules/mongoose/lib/schema/index.js\");\nconst VirtualType = __webpack_require__(/*! ./virtualType */ \"(ssr)/./node_modules/mongoose/lib/virtualType.js\");\nconst STATES = __webpack_require__(/*! ./connectionState */ \"(ssr)/./node_modules/mongoose/lib/connectionState.js\");\nconst VALID_OPTIONS = __webpack_require__(/*! ./validOptions */ \"(ssr)/./node_modules/mongoose/lib/validOptions.js\");\nconst Types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/mongoose/lib/types/index.js\");\nconst Query = __webpack_require__(/*! ./query */ \"(ssr)/./node_modules/mongoose/lib/query.js\");\nconst Model = __webpack_require__(/*! ./model */ \"(ssr)/./node_modules/mongoose/lib/model.js\");\nconst applyPlugins = __webpack_require__(/*! ./helpers/schema/applyPlugins */ \"(ssr)/./node_modules/mongoose/lib/helpers/schema/applyPlugins.js\");\nconst builtinPlugins = __webpack_require__(/*! ./plugins */ \"(ssr)/./node_modules/mongoose/lib/plugins/index.js\");\nconst driver = __webpack_require__(/*! ./driver */ \"(ssr)/./node_modules/mongoose/lib/driver.js\");\nconst legacyPluralize = __webpack_require__(/*! ./helpers/pluralize */ \"(ssr)/./node_modules/mongoose/lib/helpers/pluralize.js\");\nconst utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\nconst pkg = __webpack_require__(/*! ../package.json */ \"(ssr)/./node_modules/mongoose/package.json\");\nconst cast = __webpack_require__(/*! ./cast */ \"(ssr)/./node_modules/mongoose/lib/cast.js\");\n\nconst Aggregate = __webpack_require__(/*! ./aggregate */ \"(ssr)/./node_modules/mongoose/lib/aggregate.js\");\nconst trusted = (__webpack_require__(/*! ./helpers/query/trusted */ \"(ssr)/./node_modules/mongoose/lib/helpers/query/trusted.js\").trusted);\nconst sanitizeFilter = __webpack_require__(/*! ./helpers/query/sanitizeFilter */ \"(ssr)/./node_modules/mongoose/lib/helpers/query/sanitizeFilter.js\");\nconst isBsonType = __webpack_require__(/*! ./helpers/isBsonType */ \"(ssr)/./node_modules/mongoose/lib/helpers/isBsonType.js\");\nconst MongooseError = __webpack_require__(/*! ./error/mongooseError */ \"(ssr)/./node_modules/mongoose/lib/error/mongooseError.js\");\nconst SetOptionError = __webpack_require__(/*! ./error/setOptionError */ \"(ssr)/./node_modules/mongoose/lib/error/setOptionError.js\");\nconst applyEmbeddedDiscriminators = __webpack_require__(/*! ./helpers/discriminator/applyEmbeddedDiscriminators */ \"(ssr)/./node_modules/mongoose/lib/helpers/discriminator/applyEmbeddedDiscriminators.js\");\n\nconst defaultMongooseSymbol = Symbol.for('mongoose:default');\n\n__webpack_require__(/*! ./helpers/printJestWarning */ \"(ssr)/./node_modules/mongoose/lib/helpers/printJestWarning.js\");\n\nconst objectIdHexRegexp = /^[0-9A-Fa-f]{24}$/;\n\n/**\n * Mongoose constructor.\n *\n * The exports object of the `mongoose` module is an instance of this class.\n * Most apps will only use this one instance.\n *\n * #### Example:\n *\n *     const mongoose = require('mongoose');\n *     mongoose instanceof mongoose.Mongoose; // true\n *\n *     // Create a new Mongoose instance with its own `connect()`, `set()`, `model()`, etc.\n *     const m = new mongoose.Mongoose();\n *\n * @api public\n * @param {Object} options see [`Mongoose#set()` docs](https://mongoosejs.com/docs/api/mongoose.html#Mongoose.prototype.set())\n */\nfunction Mongoose(options) {\n  this.connections = [];\n  this.nextConnectionId = 0;\n  this.models = {};\n  this.events = new EventEmitter();\n  this.__driver = driver.get();\n  // default global options\n  this.options = Object.assign({\n    pluralization: true,\n    autoIndex: true,\n    autoCreate: true,\n    autoSearchIndex: false\n  }, options);\n  const createInitialConnection = utils.getOption('createInitialConnection', this.options);\n  if (createInitialConnection == null || createInitialConnection) {\n    const conn = this.createConnection(); // default connection\n    conn.models = this.models;\n  }\n\n  if (this.options.pluralization) {\n    this._pluralize = legacyPluralize;\n  }\n\n  // If a user creates their own Mongoose instance, give them a separate copy\n  // of the `Schema` constructor so they get separate custom types. (gh-6933)\n  if (!options || !options[defaultMongooseSymbol]) {\n    const _this = this;\n    this.Schema = function() {\n      this.base = _this;\n      return Schema.apply(this, arguments);\n    };\n    this.Schema.prototype = Object.create(Schema.prototype);\n\n    Object.assign(this.Schema, Schema);\n    this.Schema.base = this;\n    this.Schema.Types = Object.assign({}, Schema.Types);\n  } else {\n    // Hack to work around babel's strange behavior with\n    // `import mongoose, { Schema } from 'mongoose'`. Because `Schema` is not\n    // an own property of a Mongoose global, Schema will be undefined. See gh-5648\n    for (const key of ['Schema', 'model']) {\n      this[key] = Mongoose.prototype[key];\n    }\n  }\n  this.Schema.prototype.base = this;\n\n  Object.defineProperty(this, 'plugins', {\n    configurable: false,\n    enumerable: true,\n    writable: false,\n    value: Object.values(builtinPlugins).map(plugin => ([plugin, { deduplicate: true }]))\n  });\n}\n\nMongoose.prototype.cast = cast;\n/**\n * Expose connection states for user-land\n *\n * @memberOf Mongoose\n * @property STATES\n * @api public\n */\nMongoose.prototype.STATES = STATES;\n\n/**\n * Expose connection states for user-land\n *\n * @memberOf Mongoose\n * @property ConnectionStates\n * @api public\n */\nMongoose.prototype.ConnectionStates = STATES;\n\n/**\n * Object with `get()` and `set()` containing the underlying driver this Mongoose instance\n * uses to communicate with the database. A driver is a Mongoose-specific interface that defines functions\n * like `find()`.\n *\n * @deprecated\n * @memberOf Mongoose\n * @property driver\n * @api public\n */\n\nMongoose.prototype.driver = driver;\n\n/**\n * Overwrites the current driver used by this Mongoose instance. A driver is a\n * Mongoose-specific interface that defines functions like `find()`.\n *\n * @memberOf Mongoose\n * @method setDriver\n * @api public\n */\n\nMongoose.prototype.setDriver = function setDriver(driver) {\n  const _mongoose = this instanceof Mongoose ? this : mongoose;\n\n  if (_mongoose.__driver === driver) {\n    return _mongoose;\n  }\n\n  const openConnection = _mongoose.connections && _mongoose.connections.find(conn => conn.readyState !== STATES.disconnected);\n  if (openConnection) {\n    const msg = 'Cannot modify Mongoose driver if a connection is already open. ' +\n      'Call `mongoose.disconnect()` before modifying the driver';\n    throw new MongooseError(msg);\n  }\n  _mongoose.__driver = driver;\n\n  const Connection = driver.Connection;\n  _mongoose.connections = [new Connection(_mongoose)];\n  _mongoose.connections[0].models = _mongoose.models;\n\n  return _mongoose;\n};\n\n/**\n * Sets mongoose options\n *\n * `key` can be used a object to set multiple options at once.\n * If a error gets thrown for one option, other options will still be evaluated.\n *\n * #### Example:\n *\n *     mongoose.set('test', value) // sets the 'test' option to `value`\n *\n *     mongoose.set('debug', true) // enable logging collection methods + arguments to the console/file\n *\n *     mongoose.set('debug', function(collectionName, methodName, ...methodArgs) {}); // use custom function to log collection methods + arguments\n *\n *     mongoose.set({ debug: true, autoIndex: false }); // set multiple options at once\n *\n * Currently supported options are:\n * - `allowDiskUse`: Set to `true` to set `allowDiskUse` to true to all aggregation operations by default.\n * - `applyPluginsToChildSchemas`: `true` by default. Set to false to skip applying global plugins to child schemas\n * - `applyPluginsToDiscriminators`: `false` by default. Set to true to apply global plugins to discriminator schemas. This typically isn't necessary because plugins are applied to the base schema and discriminators copy all middleware, methods, statics, and properties from the base schema.\n * - `autoCreate`: Set to `true` to make Mongoose call [`Model.createCollection()`](https://mongoosejs.com/docs/api/model.html#Model.createCollection()) automatically when you create a model with `mongoose.model()` or `conn.model()`. This is useful for testing transactions, change streams, and other features that require the collection to exist.\n * - `autoIndex`: `true` by default. Set to false to disable automatic index creation for all models associated with this Mongoose instance.\n * - `bufferCommands`: enable/disable mongoose's buffering mechanism for all connections and models\n * - `bufferTimeoutMS`: If bufferCommands is on, this option sets the maximum amount of time Mongoose buffering will wait before throwing an error. If not specified, Mongoose will use 10000 (10 seconds).\n * - `cloneSchemas`: `false` by default. Set to `true` to `clone()` all schemas before compiling into a model.\n * - `debug`: If `true`, prints the operations mongoose sends to MongoDB to the console. If a writable stream is passed, it will log to that stream, without colorization. If a callback function is passed, it will receive the collection name, the method name, then all arguments passed to the method. For example, if you wanted to replicate the default logging, you could output from the callback `Mongoose: ${collectionName}.${methodName}(${methodArgs.join(', ')})`.\n * - `id`: If `true`, adds a `id` virtual to all schemas unless overwritten on a per-schema basis.\n * - `timestamps.createdAt.immutable`: `true` by default. If `false`, it will change the `createdAt` field to be [`immutable: false`](https://mongoosejs.com/docs/api/schematype.html#SchemaType.prototype.immutable) which means you can update the `createdAt`\n * - `maxTimeMS`: If set, attaches [maxTimeMS](https://www.mongodb.com/docs/manual/reference/operator/meta/maxTimeMS/) to every query\n * - `objectIdGetter`: `true` by default. Mongoose adds a getter to MongoDB ObjectId's called `_id` that returns `this` for convenience with populate. Set this to false to remove the getter.\n * - `overwriteModels`: Set to `true` to default to overwriting models with the same name when calling `mongoose.model()`, as opposed to throwing an `OverwriteModelError`.\n * - `returnOriginal`: If `false`, changes the default `returnOriginal` option to `findOneAndUpdate()`, `findByIdAndUpdate`, and `findOneAndReplace()` to false. This is equivalent to setting the `new` option to `true` for `findOneAndX()` calls by default. Read our [`findOneAndUpdate()` tutorial](https://mongoosejs.com/docs/tutorials/findoneandupdate.html) for more information.\n * - `runValidators`: `false` by default. Set to true to enable [update validators](https://mongoosejs.com/docs/validation.html#update-validators) for all validators by default.\n * - `sanitizeFilter`: `false` by default. Set to true to enable the [sanitization of the query filters](https://mongoosejs.com/docs/api/mongoose.html#Mongoose.prototype.sanitizeFilter()) against query selector injection attacks by wrapping any nested objects that have a property whose name starts with `$` in a `$eq`.\n * - `selectPopulatedPaths`: `true` by default. Set to false to opt out of Mongoose adding all fields that you `populate()` to your `select()`. The schema-level option `selectPopulatedPaths` overwrites this one.\n * - `strict`: `true` by default, may be `false`, `true`, or `'throw'`. Sets the default strict mode for schemas.\n * - `strictQuery`: `false` by default. May be `false`, `true`, or `'throw'`. Sets the default [strictQuery](https://mongoosejs.com/docs/guide.html#strictQuery) mode for schemas.\n * - `toJSON`: `{ transform: true, flattenDecimals: true }` by default. Overwrites default objects to [`toJSON()`](https://mongoosejs.com/docs/api/document.html#Document.prototype.toJSON()), for determining how Mongoose documents get serialized by `JSON.stringify()`\n * - `toObject`: `{ transform: true, flattenDecimals: true }` by default. Overwrites default objects to [`toObject()`](https://mongoosejs.com/docs/api/document.html#Document.prototype.toObject())\n *\n * @param {String|Object} key The name of the option or a object of multiple key-value pairs\n * @param {String|Function|Boolean} value The value of the option, unused if \"key\" is a object\n * @returns {Mongoose} The used Mongoose instnace\n * @api public\n */\n\nMongoose.prototype.set = function(key, value) {\n  const _mongoose = this instanceof Mongoose ? this : mongoose;\n\n  if (arguments.length === 1 && typeof key !== 'object') {\n    if (VALID_OPTIONS.indexOf(key) === -1) {\n      const error = new SetOptionError();\n      error.addError(key, new SetOptionError.SetOptionInnerError(key));\n      throw error;\n    }\n\n    return _mongoose.options[key];\n  }\n\n  let options = {};\n\n  if (arguments.length === 2) {\n    options = { [key]: value };\n  }\n\n  if (arguments.length === 1 && typeof key === 'object') {\n    options = key;\n  }\n\n  // array for errors to collect all errors for all key-value pairs, like \".validate\"\n  let error = undefined;\n\n  for (const [optionKey, optionValue] of Object.entries(options)) {\n    if (VALID_OPTIONS.indexOf(optionKey) === -1) {\n      if (!error) {\n        error = new SetOptionError();\n      }\n      error.addError(optionKey, new SetOptionError.SetOptionInnerError(optionKey));\n      continue;\n    }\n\n    _mongoose.options[optionKey] = optionValue;\n\n    if (optionKey === 'objectIdGetter') {\n      if (optionValue) {\n        Object.defineProperty(mongoose.Types.ObjectId.prototype, '_id', {\n          enumerable: false,\n          configurable: true,\n          get: function() {\n            return this;\n          }\n        });\n      } else {\n        delete mongoose.Types.ObjectId.prototype._id;\n      }\n    }\n  }\n\n  if (error) {\n    throw error;\n  }\n\n  return _mongoose;\n};\n\n/**\n * Gets mongoose options\n *\n * #### Example:\n *\n *     mongoose.get('test') // returns the 'test' value\n *\n * @param {String} key\n * @method get\n * @api public\n */\n\nMongoose.prototype.get = Mongoose.prototype.set;\n\n/**\n * Creates a Connection instance.\n *\n * Each `connection` instance maps to a single database. This method is helpful when managing multiple db connections.\n *\n *\n * _Options passed take precedence over options included in connection strings._\n *\n * #### Example:\n *\n *     // with mongodb:// URI\n *     db = mongoose.createConnection('mongodb://user:pass@127.0.0.1:port/database');\n *\n *     // and options\n *     const opts = { db: { native_parser: true }}\n *     db = mongoose.createConnection('mongodb://user:pass@127.0.0.1:port/database', opts);\n *\n *     // replica sets\n *     db = mongoose.createConnection('mongodb://user:pass@127.0.0.1:port,anotherhost:port,yetanother:port/database');\n *\n *     // and options\n *     const opts = { replset: { strategy: 'ping', rs_name: 'testSet' }}\n *     db = mongoose.createConnection('mongodb://user:pass@127.0.0.1:port,anotherhost:port,yetanother:port/database', opts);\n *\n *     // initialize now, connect later\n *     db = mongoose.createConnection();\n *     db.openUri('127.0.0.1', 'database', port, [opts]);\n *\n * @param {String} uri mongodb URI to connect to\n * @param {Object} [options] passed down to the [MongoDB driver's `connect()` function](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/MongoClientOptions.html), except for 4 mongoose-specific options explained below.\n * @param {Boolean} [options.bufferCommands=true] Mongoose specific option. Set to false to [disable buffering](https://mongoosejs.com/docs/faq.html#callback_never_executes) on all models associated with this connection.\n * @param {String} [options.dbName] The name of the database you want to use. If not provided, Mongoose uses the database name from connection string.\n * @param {String} [options.user] username for authentication, equivalent to `options.auth.user`. Maintained for backwards compatibility.\n * @param {String} [options.pass] password for authentication, equivalent to `options.auth.password`. Maintained for backwards compatibility.\n * @param {Boolean} [options.autoIndex=true] Mongoose-specific option. Set to false to disable automatic index creation for all models associated with this connection.\n * @param {Class} [options.promiseLibrary] Sets the [underlying driver's promise library](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/MongoClientOptions.html#promiseLibrary).\n * @param {Number} [options.maxPoolSize=5] The maximum number of sockets the MongoDB driver will keep open for this connection. Keep in mind that MongoDB only allows one operation per socket at a time, so you may want to increase this if you find you have a few slow queries that are blocking faster queries from proceeding. See [Slow Trains in MongoDB and Node.js](https://thecodebarbarian.com/slow-trains-in-mongodb-and-nodejs).\n * @param {Number} [options.minPoolSize=1] The minimum number of sockets the MongoDB driver will keep open for this connection. Keep in mind that MongoDB only allows one operation per socket at a time, so you may want to increase this if you find you have a few slow queries that are blocking faster queries from proceeding. See [Slow Trains in MongoDB and Node.js](https://thecodebarbarian.com/slow-trains-in-mongodb-and-nodejs).\n * @param {Number} [options.socketTimeoutMS=0] How long the MongoDB driver will wait before killing a socket due to inactivity _after initial connection_. Defaults to 0, which means Node.js will not time out the socket due to inactivity. A socket may be inactive because of either no activity or a long-running operation. This option is passed to [Node.js `socket#setTimeout()` function](https://nodejs.org/api/net.html#net_socket_settimeout_timeout_callback) after the MongoDB driver successfully completes.\n * @param {Number} [options.family=0] Passed transparently to [Node.js' `dns.lookup()`](https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback) function. May be either `0`, `4`, or `6`. `4` means use IPv4 only, `6` means use IPv6 only, `0` means try both.\n * @return {Connection} the created Connection object. Connections are not thenable, so you can't do `await mongoose.createConnection()`. To await use `mongoose.createConnection(uri).asPromise()` instead.\n * @api public\n */\n\nMongoose.prototype.createConnection = function(uri, options) {\n  const _mongoose = this instanceof Mongoose ? this : mongoose;\n\n  const Connection = _mongoose.__driver.Connection;\n  const conn = new Connection(_mongoose);\n  _mongoose.connections.push(conn);\n  _mongoose.nextConnectionId++;\n  _mongoose.events.emit('createConnection', conn);\n\n  if (arguments.length > 0) {\n    conn.openUri(uri, { ...options, _fireAndForget: true });\n  }\n\n  return conn;\n};\n\n/**\n * Opens the default mongoose connection.\n *\n * #### Example:\n *\n *     mongoose.connect('mongodb://user:pass@127.0.0.1:port/database');\n *\n *     // replica sets\n *     const uri = 'mongodb://user:pass@127.0.0.1:port,anotherhost:port,yetanother:port/mydatabase';\n *     mongoose.connect(uri);\n *\n *     // with options\n *     mongoose.connect(uri, options);\n *\n *     // optional callback that gets fired when initial connection completed\n *     const uri = 'mongodb://nonexistent.domain:27000';\n *     mongoose.connect(uri, function(error) {\n *       // if error is truthy, the initial connection failed.\n *     })\n *\n * @param {String} uri mongodb URI to connect to\n * @param {Object} [options] passed down to the [MongoDB driver's `connect()` function](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/MongoClientOptions.html), except for 4 mongoose-specific options explained below.\n * @param {Boolean} [options.bufferCommands=true] Mongoose specific option. Set to false to [disable buffering](https://mongoosejs.com/docs/faq.html#callback_never_executes) on all models associated with this connection.\n * @param {Number} [options.bufferTimeoutMS=10000] Mongoose specific option. If `bufferCommands` is true, Mongoose will throw an error after `bufferTimeoutMS` if the operation is still buffered.\n * @param {String} [options.dbName] The name of the database we want to use. If not provided, use database name from connection string.\n * @param {String} [options.user] username for authentication, equivalent to `options.auth.user`. Maintained for backwards compatibility.\n * @param {String} [options.pass] password for authentication, equivalent to `options.auth.password`. Maintained for backwards compatibility.\n * @param {Number} [options.maxPoolSize=100] The maximum number of sockets the MongoDB driver will keep open for this connection. Keep in mind that MongoDB only allows one operation per socket at a time, so you may want to increase this if you find you have a few slow queries that are blocking faster queries from proceeding. See [Slow Trains in MongoDB and Node.js](https://thecodebarbarian.com/slow-trains-in-mongodb-and-nodejs).\n * @param {Number} [options.minPoolSize=0] The minimum number of sockets the MongoDB driver will keep open for this connection.\n * @param {Number} [options.serverSelectionTimeoutMS] If `useUnifiedTopology = true`, the MongoDB driver will try to find a server to send any given operation to, and keep retrying for `serverSelectionTimeoutMS` milliseconds before erroring out. If not set, the MongoDB driver defaults to using `30000` (30 seconds).\n * @param {Number} [options.heartbeatFrequencyMS] If `useUnifiedTopology = true`, the MongoDB driver sends a heartbeat every `heartbeatFrequencyMS` to check on the status of the connection. A heartbeat is subject to `serverSelectionTimeoutMS`, so the MongoDB driver will retry failed heartbeats for up to 30 seconds by default. Mongoose only emits a `'disconnected'` event after a heartbeat has failed, so you may want to decrease this setting to reduce the time between when your server goes down and when Mongoose emits `'disconnected'`. We recommend you do **not** set this setting below 1000, too many heartbeats can lead to performance degradation.\n * @param {Boolean} [options.autoIndex=true] Mongoose-specific option. Set to false to disable automatic index creation for all models associated with this connection.\n * @param {Class} [options.promiseLibrary] Sets the [underlying driver's promise library](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/MongoClientOptions.html#promiseLibrary).\n * @param {Number} [options.socketTimeoutMS=0] How long the MongoDB driver will wait before killing a socket due to inactivity _after initial connection_. A socket may be inactive because of either no activity or a long-running operation. `socketTimeoutMS` defaults to 0, which means Node.js will not time out the socket due to inactivity. This option is passed to [Node.js `socket#setTimeout()` function](https://nodejs.org/api/net.html#net_socket_settimeout_timeout_callback) after the MongoDB driver successfully completes.\n * @param {Number} [options.family=0] Passed transparently to [Node.js' `dns.lookup()`](https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback) function. May be either `0`, `4`, or `6`. `4` means use IPv4 only, `6` means use IPv6 only, `0` means try both.\n * @param {Boolean} [options.autoCreate=false] Set to `true` to make Mongoose automatically call `createCollection()` on every model created on this connection.\n * @param {Function} [callback]\n * @see Mongoose#createConnection https://mongoosejs.com/docs/api/mongoose.html#Mongoose.prototype.createConnection()\n * @api public\n * @return {Promise} resolves to `this` if connection succeeded\n */\n\nMongoose.prototype.connect = async function connect(uri, options) {\n  if (typeof options === 'function' || (arguments.length >= 3 && typeof arguments[2] === 'function')) {\n    throw new MongooseError('Mongoose.prototype.connect() no longer accepts a callback');\n  }\n\n  const _mongoose = this instanceof Mongoose ? this : mongoose;\n  const conn = _mongoose.connection;\n\n  return conn.openUri(uri, options).then(() => _mongoose);\n};\n\n/**\n * Runs `.close()` on all connections in parallel.\n *\n * @return {Promise} resolves when all connections are closed, or rejects with the first error that occurred.\n * @api public\n */\n\nMongoose.prototype.disconnect = async function disconnect() {\n  if (arguments.length >= 1 && typeof arguments[0] === 'function') {\n    throw new MongooseError('Mongoose.prototype.disconnect() no longer accepts a callback');\n  }\n\n  const _mongoose = this instanceof Mongoose ? this : mongoose;\n\n  const remaining = _mongoose.connections.length;\n  if (remaining <= 0) {\n    return;\n  }\n  await Promise.all(_mongoose.connections.map(conn => conn.close()));\n};\n\n/**\n * _Requires MongoDB >= 3.6.0._ Starts a [MongoDB session](https://www.mongodb.com/docs/manual/release-notes/3.6/#client-sessions)\n * for benefits like causal consistency, [retryable writes](https://www.mongodb.com/docs/manual/core/retryable-writes/),\n * and [transactions](https://thecodebarbarian.com/a-node-js-perspective-on-mongodb-4-transactions.html).\n *\n * Calling `mongoose.startSession()` is equivalent to calling `mongoose.connection.startSession()`.\n * Sessions are scoped to a connection, so calling `mongoose.startSession()`\n * starts a session on the [default mongoose connection](https://mongoosejs.com/docs/api/mongoose.html#Mongoose.prototype.connection).\n *\n * @param {Object} [options] see the [mongodb driver options](https://mongodb.github.io/node-mongodb-native/4.9/classes/MongoClient.html#startSession)\n * @param {Boolean} [options.causalConsistency=true] set to false to disable causal consistency\n * @param {Function} [callback]\n * @return {Promise<ClientSession>} promise that resolves to a MongoDB driver `ClientSession`\n * @api public\n */\n\nMongoose.prototype.startSession = function() {\n  const _mongoose = this instanceof Mongoose ? this : mongoose;\n\n  return _mongoose.connection.startSession.apply(_mongoose.connection, arguments);\n};\n\n/**\n * Getter/setter around function for pluralizing collection names.\n *\n * @param {Function|null} [fn] overwrites the function used to pluralize collection names\n * @return {Function|null} the current function used to pluralize collection names, defaults to the legacy function from `mongoose-legacy-pluralize`.\n * @api public\n */\n\nMongoose.prototype.pluralize = function(fn) {\n  const _mongoose = this instanceof Mongoose ? this : mongoose;\n\n  if (arguments.length > 0) {\n    _mongoose._pluralize = fn;\n  }\n  return _mongoose._pluralize;\n};\n\n/**\n * Defines a model or retrieves it.\n *\n * Models defined on the `mongoose` instance are available to all connection\n * created by the same `mongoose` instance.\n *\n * If you call `mongoose.model()` with twice the same name but a different schema,\n * you will get an `OverwriteModelError`. If you call `mongoose.model()` with\n * the same name and same schema, you'll get the same schema back.\n *\n * #### Example:\n *\n *     const mongoose = require('mongoose');\n *\n *     // define an Actor model with this mongoose instance\n *     const schema = new Schema({ name: String });\n *     mongoose.model('Actor', schema);\n *\n *     // create a new connection\n *     const conn = mongoose.createConnection(..);\n *\n *     // create Actor model\n *     const Actor = conn.model('Actor', schema);\n *     conn.model('Actor') === Actor; // true\n *     conn.model('Actor', schema) === Actor; // true, same schema\n *     conn.model('Actor', schema, 'actors') === Actor; // true, same schema and collection name\n *\n *     // This throws an `OverwriteModelError` because the schema is different.\n *     conn.model('Actor', new Schema({ name: String }));\n *\n * _When no `collection` argument is passed, Mongoose uses the model name. If you don't like this behavior, either pass a collection name, use `mongoose.pluralize()`, or set your schemas collection name option._\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: String }, { collection: 'actor' });\n *\n *     // or\n *\n *     schema.set('collection', 'actor');\n *\n *     // or\n *\n *     const collectionName = 'actor'\n *     const M = mongoose.model('Actor', schema, collectionName)\n *\n * @param {String|Function} name model name or class extending Model\n * @param {Schema} [schema] the schema to use.\n * @param {String} [collection] name (optional, inferred from model name)\n * @return {Model} The model associated with `name`. Mongoose will create the model if it doesn't already exist.\n * @api public\n */\n\nMongoose.prototype.model = function(name, schema, collection, options) {\n  const _mongoose = this instanceof Mongoose ? this : mongoose;\n\n  if (typeof schema === 'string') {\n    collection = schema;\n    schema = false;\n  }\n\n  if (arguments.length === 1) {\n    const model = _mongoose.models[name];\n    if (!model) {\n      throw new MongooseError.MissingSchemaError(name);\n    }\n    return model;\n  }\n\n  if (utils.isObject(schema) && !(schema instanceof Schema)) {\n    schema = new Schema(schema);\n  }\n  if (schema && !(schema instanceof Schema)) {\n    throw new Error('The 2nd parameter to `mongoose.model()` should be a ' +\n      'schema or a POJO');\n  }\n\n  // handle internal options from connection.model()\n  options = options || {};\n\n  const originalSchema = schema;\n  if (schema) {\n    if (_mongoose.get('cloneSchemas')) {\n      schema = schema.clone();\n    }\n    _mongoose._applyPlugins(schema);\n  }\n\n  // connection.model() may be passing a different schema for\n  // an existing model name. in this case don't read from cache.\n  const overwriteModels = _mongoose.options.hasOwnProperty('overwriteModels') ?\n    _mongoose.options.overwriteModels :\n    options.overwriteModels;\n  if (_mongoose.models.hasOwnProperty(name) && options.cache !== false && overwriteModels !== true) {\n    if (originalSchema &&\n        originalSchema.instanceOfSchema &&\n        originalSchema !== _mongoose.models[name].schema) {\n      throw new _mongoose.Error.OverwriteModelError(name);\n    }\n    if (collection && collection !== _mongoose.models[name].collection.name) {\n      // subclass current model with alternate collection\n      const model = _mongoose.models[name];\n      schema = model.prototype.schema;\n      const sub = model.__subclass(_mongoose.connection, schema, collection);\n      // do not cache the sub model\n      return sub;\n    }\n    return _mongoose.models[name];\n  }\n  if (schema == null) {\n    throw new _mongoose.Error.MissingSchemaError(name);\n  }\n\n  const model = _mongoose._model(name, schema, collection, options);\n  _mongoose.connection.models[name] = model;\n  _mongoose.models[name] = model;\n\n  return model;\n};\n\n/*!\n * ignore\n */\n\nMongoose.prototype._model = function(name, schema, collection, options) {\n  const _mongoose = this instanceof Mongoose ? this : mongoose;\n\n  let model;\n  if (typeof name === 'function') {\n    model = name;\n    name = model.name;\n    if (!(model.prototype instanceof Model)) {\n      throw new _mongoose.Error('The provided class ' + name + ' must extend Model');\n    }\n  }\n\n  if (schema) {\n    if (_mongoose.get('cloneSchemas')) {\n      schema = schema.clone();\n    }\n    _mongoose._applyPlugins(schema);\n  }\n\n  // Apply relevant \"global\" options to the schema\n  if (schema == null || !('pluralization' in schema.options)) {\n    schema.options.pluralization = _mongoose.options.pluralization;\n  }\n\n  if (!collection) {\n    collection = schema.get('collection') ||\n      utils.toCollectionName(name, _mongoose.pluralize());\n  }\n\n  const connection = options.connection || _mongoose.connection;\n  model = _mongoose.Model.compile(model || name, schema, collection, connection, _mongoose);\n  // Errors handled internally, so safe to ignore error\n  model.init().catch(function $modelInitNoop() {});\n\n  connection.emit('model', model);\n\n  if (schema._applyDiscriminators != null) {\n    for (const disc of schema._applyDiscriminators.keys()) {\n      model.discriminator(disc, schema._applyDiscriminators.get(disc));\n    }\n  }\n\n  applyEmbeddedDiscriminators(schema);\n\n  return model;\n};\n\n/**\n * Removes the model named `name` from the default connection, if it exists.\n * You can use this function to clean up any models you created in your tests to\n * prevent OverwriteModelErrors.\n *\n * Equivalent to `mongoose.connection.deleteModel(name)`.\n *\n * #### Example:\n *\n *     mongoose.model('User', new Schema({ name: String }));\n *     console.log(mongoose.model('User')); // Model object\n *     mongoose.deleteModel('User');\n *     console.log(mongoose.model('User')); // undefined\n *\n *     // Usually useful in a Mocha `afterEach()` hook\n *     afterEach(function() {\n *       mongoose.deleteModel(/.+/); // Delete every model\n *     });\n *\n * @api public\n * @param {String|RegExp} name if string, the name of the model to remove. If regexp, removes all models whose name matches the regexp.\n * @return {Mongoose} this\n */\n\nMongoose.prototype.deleteModel = function(name) {\n  const _mongoose = this instanceof Mongoose ? this : mongoose;\n\n  _mongoose.connection.deleteModel(name);\n  delete _mongoose.models[name];\n  return _mongoose;\n};\n\n/**\n * Returns an array of model names created on this instance of Mongoose.\n *\n * #### Note:\n *\n * _Does not include names of models created using `connection.model()`._\n *\n * @api public\n * @return {Array}\n */\n\nMongoose.prototype.modelNames = function() {\n  const _mongoose = this instanceof Mongoose ? this : mongoose;\n\n  const names = Object.keys(_mongoose.models);\n  return names;\n};\n\n/**\n * Applies global plugins to `schema`.\n *\n * @param {Schema} schema\n * @api private\n */\n\nMongoose.prototype._applyPlugins = function(schema, options) {\n  const _mongoose = this instanceof Mongoose ? this : mongoose;\n\n  options = options || {};\n  options.applyPluginsToDiscriminators = _mongoose.options && _mongoose.options.applyPluginsToDiscriminators || false;\n  options.applyPluginsToChildSchemas = typeof (_mongoose.options && _mongoose.options.applyPluginsToChildSchemas) === 'boolean' ?\n    _mongoose.options.applyPluginsToChildSchemas :\n    true;\n  applyPlugins(schema, _mongoose.plugins, options, '$globalPluginsApplied');\n};\n\n/**\n * Declares a global plugin executed on all Schemas.\n *\n * Equivalent to calling `.plugin(fn)` on each Schema you create.\n *\n * @param {Function} fn plugin callback\n * @param {Object} [opts] optional options\n * @return {Mongoose} this\n * @see plugins https://mongoosejs.com/docs/plugins.html\n * @api public\n */\n\nMongoose.prototype.plugin = function(fn, opts) {\n  const _mongoose = this instanceof Mongoose ? this : mongoose;\n\n  _mongoose.plugins.push([fn, opts]);\n  return _mongoose;\n};\n\n/**\n * The Mongoose module's default connection. Equivalent to `mongoose.connections[0]`, see [`connections`](https://mongoosejs.com/docs/api/mongoose.html#Mongoose.prototype.connections).\n *\n * #### Example:\n *\n *     const mongoose = require('mongoose');\n *     mongoose.connect(...);\n *     mongoose.connection.on('error', cb);\n *\n * This is the connection used by default for every model created using [mongoose.model](https://mongoosejs.com/docs/api/mongoose.html#Mongoose.prototype.model()).\n *\n * To create a new connection, use [`createConnection()`](https://mongoosejs.com/docs/api/mongoose.html#Mongoose.prototype.createConnection()).\n *\n * @memberOf Mongoose\n * @instance\n * @property {Connection} connection\n * @api public\n */\n\nMongoose.prototype.__defineGetter__('connection', function() {\n  return this.connections[0];\n});\n\nMongoose.prototype.__defineSetter__('connection', function(v) {\n  if (v instanceof this.__driver.Connection) {\n    this.connections[0] = v;\n    this.models = v.models;\n  }\n});\n\n/**\n * An array containing all [connections](connection.html) associated with this\n * Mongoose instance. By default, there is 1 connection. Calling\n * [`createConnection()`](https://mongoosejs.com/docs/api/mongoose.html#Mongoose.prototype.createConnection()) adds a connection\n * to this array.\n *\n * #### Example:\n *\n *     const mongoose = require('mongoose');\n *     mongoose.connections.length; // 1, just the default connection\n *     mongoose.connections[0] === mongoose.connection; // true\n *\n *     mongoose.createConnection('mongodb://127.0.0.1:27017/test');\n *     mongoose.connections.length; // 2\n *\n * @memberOf Mongoose\n * @instance\n * @property {Array} connections\n * @api public\n */\n\nMongoose.prototype.connections;\n\n/**\n * An integer containing the value of the next connection id. Calling\n * [`createConnection()`](https://mongoosejs.com/docs/api/mongoose.html#Mongoose.prototype.createConnection()) increments\n * this value.\n *\n * #### Example:\n *\n *     const mongoose = require('mongoose');\n *     mongoose.createConnection(); // id `0`, `nextConnectionId` becomes `1`\n *     mongoose.createConnection(); // id `1`, `nextConnectionId` becomes `2`\n *     mongoose.connections[0].destroy() // Removes connection with id `0`\n *     mongoose.createConnection(); // id `2`, `nextConnectionId` becomes `3`\n *\n * @memberOf Mongoose\n * @instance\n * @property {Number} nextConnectionId\n * @api private\n */\n\nMongoose.prototype.nextConnectionId;\n\n/**\n * The Mongoose Aggregate constructor\n *\n * @method Aggregate\n * @api public\n */\n\nMongoose.prototype.Aggregate = Aggregate;\n\n/**\n * The Mongoose Collection constructor\n *\n * @memberOf Mongoose\n * @instance\n * @method Collection\n * @api public\n */\n\nObject.defineProperty(Mongoose.prototype, 'Collection', {\n  get: function() {\n    return this.__driver.Collection;\n  },\n  set: function(Collection) {\n    this.__driver.Collection = Collection;\n  }\n});\n\n/**\n * The Mongoose [Connection](https://mongoosejs.com/docs/api/connection.html#Connection()) constructor\n *\n * @memberOf Mongoose\n * @instance\n * @method Connection\n * @api public\n */\n\nObject.defineProperty(Mongoose.prototype, 'Connection', {\n  get: function() {\n    return this.__driver.Connection;\n  },\n  set: function(Connection) {\n    if (Connection === this.__driver.Connection) {\n      return;\n    }\n\n    this.__driver.Connection = Connection;\n  }\n});\n\n/**\n * The Mongoose version\n *\n * #### Example:\n *\n *     console.log(mongoose.version); // '5.x.x'\n *\n * @property version\n * @api public\n */\n\nMongoose.prototype.version = pkg.version;\n\n/**\n * The Mongoose constructor\n *\n * The exports of the mongoose module is an instance of this class.\n *\n * #### Example:\n *\n *     const mongoose = require('mongoose');\n *     const mongoose2 = new mongoose.Mongoose();\n *\n * @method Mongoose\n * @api public\n */\n\nMongoose.prototype.Mongoose = Mongoose;\n\n/**\n * The Mongoose [Schema](https://mongoosejs.com/docs/api/schema.html#Schema()) constructor\n *\n * #### Example:\n *\n *     const mongoose = require('mongoose');\n *     const Schema = mongoose.Schema;\n *     const CatSchema = new Schema(..);\n *\n * @method Schema\n * @api public\n */\n\nMongoose.prototype.Schema = Schema;\n\n/**\n * The Mongoose [SchemaType](https://mongoosejs.com/docs/api/schematype.html#SchemaType()) constructor\n *\n * @method SchemaType\n * @api public\n */\n\nMongoose.prototype.SchemaType = SchemaType;\n\n/**\n * The various Mongoose SchemaTypes.\n *\n * #### Note:\n *\n * _Alias of mongoose.Schema.Types for backwards compatibility._\n *\n * @property SchemaTypes\n * @see Schema.SchemaTypes https://mongoosejs.com/docs/schematypes.html\n * @api public\n */\n\nMongoose.prototype.SchemaTypes = Schema.Types;\n\n/**\n * The Mongoose [VirtualType](https://mongoosejs.com/docs/api/virtualtype.html#VirtualType()) constructor\n *\n * @method VirtualType\n * @api public\n */\n\nMongoose.prototype.VirtualType = VirtualType;\n\n/**\n * The various Mongoose Types.\n *\n * #### Example:\n *\n *     const mongoose = require('mongoose');\n *     const array = mongoose.Types.Array;\n *\n * #### Types:\n *\n * - [Array](https://mongoosejs.com/docs/schematypes.html#arrays)\n * - [Buffer](https://mongoosejs.com/docs/schematypes.html#buffers)\n * - [Embedded](https://mongoosejs.com/docs/schematypes.html#schemas)\n * - [DocumentArray](https://mongoosejs.com/docs/api/documentarraypath.html)\n * - [Decimal128](https://mongoosejs.com/docs/api/mongoose.html#Mongoose.prototype.Decimal128)\n * - [ObjectId](https://mongoosejs.com/docs/schematypes.html#objectids)\n * - [Map](https://mongoosejs.com/docs/schematypes.html#maps)\n * - [Subdocument](https://mongoosejs.com/docs/schematypes.html#schemas)\n *\n * Using this exposed access to the `ObjectId` type, we can construct ids on demand.\n *\n *     const ObjectId = mongoose.Types.ObjectId;\n *     const id1 = new ObjectId;\n *\n * @property Types\n * @api public\n */\n\nMongoose.prototype.Types = Types;\n\n/**\n * The Mongoose [Query](https://mongoosejs.com/docs/api/query.html#Query()) constructor.\n *\n * @method Query\n * @api public\n */\n\nMongoose.prototype.Query = Query;\n\n/**\n * The Mongoose [Model](https://mongoosejs.com/docs/api/model.html#Model()) constructor.\n *\n * @method Model\n * @api public\n */\n\nMongoose.prototype.Model = Model;\n\n/**\n * The Mongoose [Document](https://mongoosejs.com/docs/api/document.html#Document()) constructor.\n *\n * @method Document\n * @api public\n */\n\nMongoose.prototype.Document = Document;\n\n/**\n * The Mongoose DocumentProvider constructor. Mongoose users should not have to\n * use this directly\n *\n * @method DocumentProvider\n * @api public\n */\n\nMongoose.prototype.DocumentProvider = __webpack_require__(/*! ./documentProvider */ \"(ssr)/./node_modules/mongoose/lib/documentProvider.js\");\n\n/**\n * The Mongoose ObjectId [SchemaType](https://mongoosejs.com/docs/schematypes.html). Used for\n * declaring paths in your schema that should be\n * [MongoDB ObjectIds](https://www.mongodb.com/docs/manual/reference/method/ObjectId/).\n * Do not use this to create a new ObjectId instance, use `mongoose.Types.ObjectId`\n * instead.\n *\n * #### Example:\n *\n *     const childSchema = new Schema({ parentId: mongoose.ObjectId });\n *\n * @property ObjectId\n * @api public\n */\n\nMongoose.prototype.ObjectId = SchemaTypes.ObjectId;\n\n/**\n * Returns true if Mongoose can cast the given value to an ObjectId, or\n * false otherwise.\n *\n * #### Example:\n *\n *     mongoose.isValidObjectId(new mongoose.Types.ObjectId()); // true\n *     mongoose.isValidObjectId('0123456789ab'); // true\n *     mongoose.isValidObjectId(6); // true\n *     mongoose.isValidObjectId(new User({ name: 'test' })); // true\n *\n *     mongoose.isValidObjectId({ test: 42 }); // false\n *\n * @method isValidObjectId\n * @param {Any} v\n * @returns {boolean} true if `v` is something Mongoose can coerce to an ObjectId\n * @api public\n */\n\nMongoose.prototype.isValidObjectId = function(v) {\n  const _mongoose = this instanceof Mongoose ? this : mongoose;\n  return _mongoose.Types.ObjectId.isValid(v);\n};\n\n/**\n * Returns true if the given value is a Mongoose ObjectId (using `instanceof`) or if the\n * given value is a 24 character hex string, which is the most commonly used string representation\n * of an ObjectId.\n *\n * This function is similar to `isValidObjectId()`, but considerably more strict, because\n * `isValidObjectId()` will return `true` for _any_ value that Mongoose can convert to an\n * ObjectId. That includes Mongoose documents, any string of length 12, and any number.\n * `isObjectIdOrHexString()` returns true only for `ObjectId` instances or 24 character hex\n * strings, and will return false for numbers, documents, and strings of length 12.\n *\n * #### Example:\n *\n *     mongoose.isObjectIdOrHexString(new mongoose.Types.ObjectId()); // true\n *     mongoose.isObjectIdOrHexString('62261a65d66c6be0a63c051f'); // true\n *\n *     mongoose.isObjectIdOrHexString('0123456789ab'); // false\n *     mongoose.isObjectIdOrHexString(6); // false\n *     mongoose.isObjectIdOrHexString(new User({ name: 'test' })); // false\n *     mongoose.isObjectIdOrHexString({ test: 42 }); // false\n *\n * @method isObjectIdOrHexString\n * @param {Any} v\n * @returns {boolean} true if `v` is an ObjectId instance _or_ a 24 char hex string\n * @api public\n */\n\nMongoose.prototype.isObjectIdOrHexString = function(v) {\n  return isBsonType(v, 'ObjectId') || (typeof v === 'string' && objectIdHexRegexp.test(v));\n};\n\n/**\n *\n * Syncs all the indexes for the models registered with this connection.\n *\n * @param {Object} options\n * @param {Boolean} options.continueOnError `false` by default. If set to `true`, mongoose will not throw an error if one model syncing failed, and will return an object where the keys are the names of the models, and the values are the results/errors for each model.\n * @return {Promise} Returns a Promise, when the Promise resolves the value is a list of the dropped indexes.\n */\nMongoose.prototype.syncIndexes = function(options) {\n  const _mongoose = this instanceof Mongoose ? this : mongoose;\n  return _mongoose.connection.syncIndexes(options);\n};\n\n/**\n * The Mongoose Decimal128 [SchemaType](https://mongoosejs.com/docs/schematypes.html). Used for\n * declaring paths in your schema that should be\n * [128-bit decimal floating points](https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-34-decimal.html).\n * Do not use this to create a new Decimal128 instance, use `mongoose.Types.Decimal128`\n * instead.\n *\n * #### Example:\n *\n *     const vehicleSchema = new Schema({ fuelLevel: mongoose.Decimal128 });\n *\n * @property Decimal128\n * @api public\n */\n\nMongoose.prototype.Decimal128 = SchemaTypes.Decimal128;\n\n/**\n * The Mongoose Mixed [SchemaType](https://mongoosejs.com/docs/schematypes.html). Used for\n * declaring paths in your schema that Mongoose's change tracking, casting,\n * and validation should ignore.\n *\n * #### Example:\n *\n *     const schema = new Schema({ arbitrary: mongoose.Mixed });\n *\n * @property Mixed\n * @api public\n */\n\nMongoose.prototype.Mixed = SchemaTypes.Mixed;\n\n/**\n * The Mongoose Date [SchemaType](https://mongoosejs.com/docs/schematypes.html).\n *\n * #### Example:\n *\n *     const schema = new Schema({ test: Date });\n *     schema.path('test') instanceof mongoose.Date; // true\n *\n * @property Date\n * @api public\n */\n\nMongoose.prototype.Date = SchemaTypes.Date;\n\n/**\n * The Mongoose Number [SchemaType](https://mongoosejs.com/docs/schematypes.html). Used for\n * declaring paths in your schema that Mongoose should cast to numbers.\n *\n * #### Example:\n *\n *     const schema = new Schema({ num: mongoose.Number });\n *     // Equivalent to:\n *     const schema = new Schema({ num: 'number' });\n *\n * @property Number\n * @api public\n */\n\nMongoose.prototype.Number = SchemaTypes.Number;\n\n/**\n * The [MongooseError](https://mongoosejs.com/docs/api/error.html#Error()) constructor.\n *\n * @method Error\n * @api public\n */\n\nMongoose.prototype.Error = __webpack_require__(/*! ./error/index */ \"(ssr)/./node_modules/mongoose/lib/error/index.js\");\nMongoose.prototype.MongooseError = __webpack_require__(/*! ./error/mongooseError */ \"(ssr)/./node_modules/mongoose/lib/error/mongooseError.js\");\n\n/**\n * Mongoose uses this function to get the current time when setting\n * [timestamps](https://mongoosejs.com/docs/guide.html#timestamps). You may stub out this function\n * using a tool like [Sinon](https://www.npmjs.com/package/sinon) for testing.\n *\n * @method now\n * @returns Date the current time\n * @api public\n */\n\nMongoose.prototype.now = function now() { return new Date(); };\n\n/**\n * The Mongoose CastError constructor\n *\n * @method CastError\n * @param {String} type The name of the type\n * @param {Any} value The value that failed to cast\n * @param {String} path The path `a.b.c` in the doc where this cast error occurred\n * @param {Error} [reason] The original error that was thrown\n * @api public\n */\n\nMongoose.prototype.CastError = __webpack_require__(/*! ./error/cast */ \"(ssr)/./node_modules/mongoose/lib/error/cast.js\");\n\n/**\n * The constructor used for schematype options\n *\n * @method SchemaTypeOptions\n * @api public\n */\n\nMongoose.prototype.SchemaTypeOptions = __webpack_require__(/*! ./options/schemaTypeOptions */ \"(ssr)/./node_modules/mongoose/lib/options/schemaTypeOptions.js\");\n\n/**\n * The [mquery](https://github.com/aheckmann/mquery) query builder Mongoose uses.\n *\n * @property mquery\n * @api public\n */\n\nMongoose.prototype.mquery = __webpack_require__(/*! mquery */ \"(ssr)/./node_modules/mquery/lib/mquery.js\");\n\n/**\n * Sanitizes query filters against [query selector injection attacks](https://thecodebarbarian.com/2014/09/04/defending-against-query-selector-injection-attacks.html)\n * by wrapping any nested objects that have a property whose name starts with `$` in a `$eq`.\n *\n * ```javascript\n * const obj = { username: 'val', pwd: { $ne: null } };\n * sanitizeFilter(obj);\n * obj; // { username: 'val', pwd: { $eq: { $ne: null } } });\n * ```\n *\n * @method sanitizeFilter\n * @param {Object} filter\n * @returns Object the sanitized object\n * @api public\n */\n\nMongoose.prototype.sanitizeFilter = sanitizeFilter;\n\n/**\n * Tells `sanitizeFilter()` to skip the given object when filtering out potential [query selector injection attacks](https://thecodebarbarian.com/2014/09/04/defending-against-query-selector-injection-attacks.html).\n * Use this method when you have a known query selector that you want to use.\n *\n * ```javascript\n * const obj = { username: 'val', pwd: trusted({ $type: 'string', $eq: 'my secret' }) };\n * sanitizeFilter(obj);\n *\n * // Note that `sanitizeFilter()` did not add `$eq` around `$type`.\n * obj; // { username: 'val', pwd: { $type: 'string', $eq: 'my secret' } });\n * ```\n *\n * @method trusted\n * @param {Object} obj\n * @returns Object the passed in object\n * @api public\n */\n\nMongoose.prototype.trusted = trusted;\n\n/**\n * Use this function in `pre()` middleware to skip calling the wrapped function.\n *\n * #### Example:\n *\n *     schema.pre('save', function() {\n *       // Will skip executing `save()`, but will execute post hooks as if\n *       // `save()` had executed with the result `{ matchedCount: 0 }`\n *       return mongoose.skipMiddlewareFunction({ matchedCount: 0 });\n *     });\n *\n * @method skipMiddlewareFunction\n * @param {any} result\n * @api public\n */\n\nMongoose.prototype.skipMiddlewareFunction = Kareem.skipWrappedFunction;\n\n/**\n * Use this function in `post()` middleware to replace the result\n *\n * #### Example:\n *\n *     schema.post('find', function(res) {\n *       // Normally you have to modify `res` in place. But with\n *       // `overwriteMiddlewarResult()`, you can make `find()` return a\n *       // completely different value.\n *       return mongoose.overwriteMiddlewareResult(res.filter(doc => !doc.isDeleted));\n *     });\n *\n * @method overwriteMiddlewareResult\n * @param {any} result\n * @api public\n */\n\nMongoose.prototype.overwriteMiddlewareResult = Kareem.overwriteResult;\n\n/**\n * The exports object is an instance of Mongoose.\n *\n * @api private\n */\n\nconst mongoose = module.exports = exports = new Mongoose({\n  [defaultMongooseSymbol]: true\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/mongoose.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/options.js":
/*!**********************************************!*\
  !*** ./node_modules/mongoose/lib/options.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\n/*!\n * ignore\n */\n\nexports.internalToObjectOptions = {\n  transform: false,\n  virtuals: false,\n  getters: false,\n  _skipDepopulateTopLevel: true,\n  depopulate: true,\n  flattenDecimals: false,\n  useProjection: false,\n  versionKey: true\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL29wdGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9vcHRpb25zLmpzPzkzNGUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKiFcbiAqIGlnbm9yZVxuICovXG5cbmV4cG9ydHMuaW50ZXJuYWxUb09iamVjdE9wdGlvbnMgPSB7XG4gIHRyYW5zZm9ybTogZmFsc2UsXG4gIHZpcnR1YWxzOiBmYWxzZSxcbiAgZ2V0dGVyczogZmFsc2UsXG4gIF9za2lwRGVwb3B1bGF0ZVRvcExldmVsOiB0cnVlLFxuICBkZXBvcHVsYXRlOiB0cnVlLFxuICBmbGF0dGVuRGVjaW1hbHM6IGZhbHNlLFxuICB1c2VQcm9qZWN0aW9uOiBmYWxzZSxcbiAgdmVyc2lvbktleTogdHJ1ZVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/options.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/options/populateOptions.js":
/*!**************************************************************!*\
  !*** ./node_modules/mongoose/lib/options/populateOptions.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst clone = __webpack_require__(/*! ../helpers/clone */ \"(ssr)/./node_modules/mongoose/lib/helpers/clone.js\");\n\nclass PopulateOptions {\n  constructor(obj) {\n    this._docs = {};\n    this._childDocs = [];\n\n    if (obj == null) {\n      return;\n    }\n    obj = clone(obj);\n    Object.assign(this, obj);\n    if (typeof obj.subPopulate === 'object') {\n      this.populate = obj.subPopulate;\n    }\n\n\n    if (obj.perDocumentLimit != null && obj.limit != null) {\n      throw new Error('Can not use `limit` and `perDocumentLimit` at the same time. Path: `' + obj.path + '`.');\n    }\n  }\n}\n\n/**\n * The connection used to look up models by name. If not specified, Mongoose\n * will default to using the connection associated with the model in\n * `PopulateOptions#model`.\n *\n * @memberOf PopulateOptions\n * @property {Connection} connection\n * @api public\n */\n\nmodule.exports = PopulateOptions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL29wdGlvbnMvcG9wdWxhdGVPcHRpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGNBQWMsbUJBQU8sQ0FBQyw0RUFBa0I7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxZQUFZO0FBQzFCO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9vcHRpb25zL3BvcHVsYXRlT3B0aW9ucy5qcz9jN2Y3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY2xvbmUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2Nsb25lJyk7XG5cbmNsYXNzIFBvcHVsYXRlT3B0aW9ucyB7XG4gIGNvbnN0cnVjdG9yKG9iaikge1xuICAgIHRoaXMuX2RvY3MgPSB7fTtcbiAgICB0aGlzLl9jaGlsZERvY3MgPSBbXTtcblxuICAgIGlmIChvYmogPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBvYmogPSBjbG9uZShvYmopO1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb2JqKTtcbiAgICBpZiAodHlwZW9mIG9iai5zdWJQb3B1bGF0ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHRoaXMucG9wdWxhdGUgPSBvYmouc3ViUG9wdWxhdGU7XG4gICAgfVxuXG5cbiAgICBpZiAob2JqLnBlckRvY3VtZW50TGltaXQgIT0gbnVsbCAmJiBvYmoubGltaXQgIT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW4gbm90IHVzZSBgbGltaXRgIGFuZCBgcGVyRG9jdW1lbnRMaW1pdGAgYXQgdGhlIHNhbWUgdGltZS4gUGF0aDogYCcgKyBvYmoucGF0aCArICdgLicpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFRoZSBjb25uZWN0aW9uIHVzZWQgdG8gbG9vayB1cCBtb2RlbHMgYnkgbmFtZS4gSWYgbm90IHNwZWNpZmllZCwgTW9uZ29vc2VcbiAqIHdpbGwgZGVmYXVsdCB0byB1c2luZyB0aGUgY29ubmVjdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIG1vZGVsIGluXG4gKiBgUG9wdWxhdGVPcHRpb25zI21vZGVsYC5cbiAqXG4gKiBAbWVtYmVyT2YgUG9wdWxhdGVPcHRpb25zXG4gKiBAcHJvcGVydHkge0Nvbm5lY3Rpb259IGNvbm5lY3Rpb25cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBQb3B1bGF0ZU9wdGlvbnM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/options/populateOptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/options/propertyOptions.js":
/*!**************************************************************!*\
  !*** ./node_modules/mongoose/lib/options/propertyOptions.js ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = Object.freeze({\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: void 0\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL29wdGlvbnMvcHJvcGVydHlPcHRpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvb3B0aW9ucy9wcm9wZXJ0eU9wdGlvbnMuanM/YzNmZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgd3JpdGFibGU6IHRydWUsXG4gIHZhbHVlOiB2b2lkIDBcbn0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/options/propertyOptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/options/saveOptions.js":
/*!**********************************************************!*\
  !*** ./node_modules/mongoose/lib/options/saveOptions.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst clone = __webpack_require__(/*! ../helpers/clone */ \"(ssr)/./node_modules/mongoose/lib/helpers/clone.js\");\n\nclass SaveOptions {\n  constructor(obj) {\n    if (obj == null) {\n      return;\n    }\n    Object.assign(this, clone(obj));\n  }\n}\n\nmodule.exports = SaveOptions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL29wdGlvbnMvc2F2ZU9wdGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLDRFQUFrQjs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL29wdGlvbnMvc2F2ZU9wdGlvbnMuanM/NDBkMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNsb25lID0gcmVxdWlyZSgnLi4vaGVscGVycy9jbG9uZScpO1xuXG5jbGFzcyBTYXZlT3B0aW9ucyB7XG4gIGNvbnN0cnVjdG9yKG9iaikge1xuICAgIGlmIChvYmogPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNsb25lKG9iaikpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2F2ZU9wdGlvbnM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/options/saveOptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/options/schemaArrayOptions.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongoose/lib/options/schemaArrayOptions.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst SchemaTypeOptions = __webpack_require__(/*! ./schemaTypeOptions */ \"(ssr)/./node_modules/mongoose/lib/options/schemaTypeOptions.js\");\n\n/**\n * The options defined on an Array schematype.\n *\n * #### Example:\n *\n *     const schema = new Schema({ tags: [String] });\n *     schema.path('tags').options; // SchemaArrayOptions instance\n *\n * @api public\n * @inherits SchemaTypeOptions\n * @constructor SchemaArrayOptions\n */\n\nclass SchemaArrayOptions extends SchemaTypeOptions {}\n\nconst opts = __webpack_require__(/*! ./propertyOptions */ \"(ssr)/./node_modules/mongoose/lib/options/propertyOptions.js\");\n\n/**\n * If this is an array of strings, an array of allowed values for this path.\n * Throws an error if this array isn't an array of strings.\n *\n * @api public\n * @property enum\n * @memberOf SchemaArrayOptions\n * @type {Array}\n * @instance\n */\n\nObject.defineProperty(SchemaArrayOptions.prototype, 'enum', opts);\n\n/**\n * If set, specifies the type of this array's values. Equivalent to setting\n * `type` to an array whose first element is `of`.\n *\n * #### Example:\n *\n *     // `arr` is an array of numbers.\n *     new Schema({ arr: [Number] });\n *     // Equivalent way to define `arr` as an array of numbers\n *     new Schema({ arr: { type: Array, of: Number } });\n *\n * @api public\n * @property of\n * @memberOf SchemaArrayOptions\n * @type {Function|String}\n * @instance\n */\n\nObject.defineProperty(SchemaArrayOptions.prototype, 'of', opts);\n\n/**\n * If set to `false`, will always deactivate casting non-array values to arrays.\n * If set to `true`, will cast non-array values to arrays if `init` and `SchemaArray.options.castNonArrays` are also `true`\n *\n * #### Example:\n *\n *     const Model = db.model('Test', new Schema({ x1: { castNonArrays: false, type: [String] } }));\n *     const doc = new Model({ x1: \"some non-array value\" });\n *     await doc.validate(); // Errors with \"CastError\"\n *\n * @api public\n * @property castNonArrays\n * @memberOf SchemaArrayOptions\n * @type {Boolean}\n * @instance\n */\n\nObject.defineProperty(SchemaArrayOptions.prototype, 'castNonArrays', opts);\n\n/*!\n * ignore\n */\n\nmodule.exports = SchemaArrayOptions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL29wdGlvbnMvc2NoZW1hQXJyYXlPcHRpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDBCQUEwQixtQkFBTyxDQUFDLDJGQUFxQjs7QUFFdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxnQkFBZ0I7QUFDbkQsb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsYUFBYSxtQkFBTyxDQUFDLHVGQUFtQjs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixlQUFlO0FBQ25DO0FBQ0Esb0JBQW9CLE9BQU8sMkJBQTJCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELE1BQU0sd0NBQXdDO0FBQ2pHLCtCQUErQiw0QkFBNEI7QUFDM0QsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvb3B0aW9ucy9zY2hlbWFBcnJheU9wdGlvbnMuanM/ODFjYyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFNjaGVtYVR5cGVPcHRpb25zID0gcmVxdWlyZSgnLi9zY2hlbWFUeXBlT3B0aW9ucycpO1xuXG4vKipcbiAqIFRoZSBvcHRpb25zIGRlZmluZWQgb24gYW4gQXJyYXkgc2NoZW1hdHlwZS5cbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKlxuICogICAgIGNvbnN0IHNjaGVtYSA9IG5ldyBTY2hlbWEoeyB0YWdzOiBbU3RyaW5nXSB9KTtcbiAqICAgICBzY2hlbWEucGF0aCgndGFncycpLm9wdGlvbnM7IC8vIFNjaGVtYUFycmF5T3B0aW9ucyBpbnN0YW5jZVxuICpcbiAqIEBhcGkgcHVibGljXG4gKiBAaW5oZXJpdHMgU2NoZW1hVHlwZU9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvciBTY2hlbWFBcnJheU9wdGlvbnNcbiAqL1xuXG5jbGFzcyBTY2hlbWFBcnJheU9wdGlvbnMgZXh0ZW5kcyBTY2hlbWFUeXBlT3B0aW9ucyB7fVxuXG5jb25zdCBvcHRzID0gcmVxdWlyZSgnLi9wcm9wZXJ0eU9wdGlvbnMnKTtcblxuLyoqXG4gKiBJZiB0aGlzIGlzIGFuIGFycmF5IG9mIHN0cmluZ3MsIGFuIGFycmF5IG9mIGFsbG93ZWQgdmFsdWVzIGZvciB0aGlzIHBhdGguXG4gKiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhpcyBhcnJheSBpc24ndCBhbiBhcnJheSBvZiBzdHJpbmdzLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKiBAcHJvcGVydHkgZW51bVxuICogQG1lbWJlck9mIFNjaGVtYUFycmF5T3B0aW9uc1xuICogQHR5cGUge0FycmF5fVxuICogQGluc3RhbmNlXG4gKi9cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFNjaGVtYUFycmF5T3B0aW9ucy5wcm90b3R5cGUsICdlbnVtJywgb3B0cyk7XG5cbi8qKlxuICogSWYgc2V0LCBzcGVjaWZpZXMgdGhlIHR5cGUgb2YgdGhpcyBhcnJheSdzIHZhbHVlcy4gRXF1aXZhbGVudCB0byBzZXR0aW5nXG4gKiBgdHlwZWAgdG8gYW4gYXJyYXkgd2hvc2UgZmlyc3QgZWxlbWVudCBpcyBgb2ZgLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgLy8gYGFycmAgaXMgYW4gYXJyYXkgb2YgbnVtYmVycy5cbiAqICAgICBuZXcgU2NoZW1hKHsgYXJyOiBbTnVtYmVyXSB9KTtcbiAqICAgICAvLyBFcXVpdmFsZW50IHdheSB0byBkZWZpbmUgYGFycmAgYXMgYW4gYXJyYXkgb2YgbnVtYmVyc1xuICogICAgIG5ldyBTY2hlbWEoeyBhcnI6IHsgdHlwZTogQXJyYXksIG9mOiBOdW1iZXIgfSB9KTtcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICogQHByb3BlcnR5IG9mXG4gKiBAbWVtYmVyT2YgU2NoZW1hQXJyYXlPcHRpb25zXG4gKiBAdHlwZSB7RnVuY3Rpb258U3RyaW5nfVxuICogQGluc3RhbmNlXG4gKi9cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFNjaGVtYUFycmF5T3B0aW9ucy5wcm90b3R5cGUsICdvZicsIG9wdHMpO1xuXG4vKipcbiAqIElmIHNldCB0byBgZmFsc2VgLCB3aWxsIGFsd2F5cyBkZWFjdGl2YXRlIGNhc3Rpbmcgbm9uLWFycmF5IHZhbHVlcyB0byBhcnJheXMuXG4gKiBJZiBzZXQgdG8gYHRydWVgLCB3aWxsIGNhc3Qgbm9uLWFycmF5IHZhbHVlcyB0byBhcnJheXMgaWYgYGluaXRgIGFuZCBgU2NoZW1hQXJyYXkub3B0aW9ucy5jYXN0Tm9uQXJyYXlzYCBhcmUgYWxzbyBgdHJ1ZWBcbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKlxuICogICAgIGNvbnN0IE1vZGVsID0gZGIubW9kZWwoJ1Rlc3QnLCBuZXcgU2NoZW1hKHsgeDE6IHsgY2FzdE5vbkFycmF5czogZmFsc2UsIHR5cGU6IFtTdHJpbmddIH0gfSkpO1xuICogICAgIGNvbnN0IGRvYyA9IG5ldyBNb2RlbCh7IHgxOiBcInNvbWUgbm9uLWFycmF5IHZhbHVlXCIgfSk7XG4gKiAgICAgYXdhaXQgZG9jLnZhbGlkYXRlKCk7IC8vIEVycm9ycyB3aXRoIFwiQ2FzdEVycm9yXCJcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICogQHByb3BlcnR5IGNhc3ROb25BcnJheXNcbiAqIEBtZW1iZXJPZiBTY2hlbWFBcnJheU9wdGlvbnNcbiAqIEB0eXBlIHtCb29sZWFufVxuICogQGluc3RhbmNlXG4gKi9cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFNjaGVtYUFycmF5T3B0aW9ucy5wcm90b3R5cGUsICdjYXN0Tm9uQXJyYXlzJywgb3B0cyk7XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBTY2hlbWFBcnJheU9wdGlvbnM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/options/schemaArrayOptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/options/schemaBufferOptions.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongoose/lib/options/schemaBufferOptions.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst SchemaTypeOptions = __webpack_require__(/*! ./schemaTypeOptions */ \"(ssr)/./node_modules/mongoose/lib/options/schemaTypeOptions.js\");\n\n/**\n * The options defined on a Buffer schematype.\n *\n * #### Example:\n *\n *     const schema = new Schema({ bitmap: Buffer });\n *     schema.path('bitmap').options; // SchemaBufferOptions instance\n *\n * @api public\n * @inherits SchemaTypeOptions\n * @constructor SchemaBufferOptions\n */\n\nclass SchemaBufferOptions extends SchemaTypeOptions {}\n\nconst opts = __webpack_require__(/*! ./propertyOptions */ \"(ssr)/./node_modules/mongoose/lib/options/propertyOptions.js\");\n\n/**\n * Set the default subtype for this buffer.\n *\n * @api public\n * @property subtype\n * @memberOf SchemaBufferOptions\n * @type {Number}\n * @instance\n */\n\nObject.defineProperty(SchemaBufferOptions.prototype, 'subtype', opts);\n\n/*!\n * ignore\n */\n\nmodule.exports = SchemaBufferOptions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL29wdGlvbnMvc2NoZW1hQnVmZmVyT3B0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiwwQkFBMEIsbUJBQU8sQ0FBQywyRkFBcUI7O0FBRXZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsZ0JBQWdCO0FBQ25ELHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLGFBQWEsbUJBQU8sQ0FBQyx1RkFBbUI7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL29wdGlvbnMvc2NoZW1hQnVmZmVyT3B0aW9ucy5qcz9iM2FkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgU2NoZW1hVHlwZU9wdGlvbnMgPSByZXF1aXJlKCcuL3NjaGVtYVR5cGVPcHRpb25zJyk7XG5cbi8qKlxuICogVGhlIG9wdGlvbnMgZGVmaW5lZCBvbiBhIEJ1ZmZlciBzY2hlbWF0eXBlLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3Qgc2NoZW1hID0gbmV3IFNjaGVtYSh7IGJpdG1hcDogQnVmZmVyIH0pO1xuICogICAgIHNjaGVtYS5wYXRoKCdiaXRtYXAnKS5vcHRpb25zOyAvLyBTY2hlbWFCdWZmZXJPcHRpb25zIGluc3RhbmNlXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqIEBpbmhlcml0cyBTY2hlbWFUeXBlT3B0aW9uc1xuICogQGNvbnN0cnVjdG9yIFNjaGVtYUJ1ZmZlck9wdGlvbnNcbiAqL1xuXG5jbGFzcyBTY2hlbWFCdWZmZXJPcHRpb25zIGV4dGVuZHMgU2NoZW1hVHlwZU9wdGlvbnMge31cblxuY29uc3Qgb3B0cyA9IHJlcXVpcmUoJy4vcHJvcGVydHlPcHRpb25zJyk7XG5cbi8qKlxuICogU2V0IHRoZSBkZWZhdWx0IHN1YnR5cGUgZm9yIHRoaXMgYnVmZmVyLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKiBAcHJvcGVydHkgc3VidHlwZVxuICogQG1lbWJlck9mIFNjaGVtYUJ1ZmZlck9wdGlvbnNcbiAqIEB0eXBlIHtOdW1iZXJ9XG4gKiBAaW5zdGFuY2VcbiAqL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoU2NoZW1hQnVmZmVyT3B0aW9ucy5wcm90b3R5cGUsICdzdWJ0eXBlJywgb3B0cyk7XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBTY2hlbWFCdWZmZXJPcHRpb25zO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/options/schemaBufferOptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/options/schemaDateOptions.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongoose/lib/options/schemaDateOptions.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst SchemaTypeOptions = __webpack_require__(/*! ./schemaTypeOptions */ \"(ssr)/./node_modules/mongoose/lib/options/schemaTypeOptions.js\");\n\n/**\n * The options defined on a Date schematype.\n *\n * #### Example:\n *\n *     const schema = new Schema({ startedAt: Date });\n *     schema.path('startedAt').options; // SchemaDateOptions instance\n *\n * @api public\n * @inherits SchemaTypeOptions\n * @constructor SchemaDateOptions\n */\n\nclass SchemaDateOptions extends SchemaTypeOptions {}\n\nconst opts = __webpack_require__(/*! ./propertyOptions */ \"(ssr)/./node_modules/mongoose/lib/options/propertyOptions.js\");\n\n/**\n * If set, Mongoose adds a validator that checks that this path is after the\n * given `min`.\n *\n * @api public\n * @property min\n * @memberOf SchemaDateOptions\n * @type {Date}\n * @instance\n */\n\nObject.defineProperty(SchemaDateOptions.prototype, 'min', opts);\n\n/**\n * If set, Mongoose adds a validator that checks that this path is before the\n * given `max`.\n *\n * @api public\n * @property max\n * @memberOf SchemaDateOptions\n * @type {Date}\n * @instance\n */\n\nObject.defineProperty(SchemaDateOptions.prototype, 'max', opts);\n\n/**\n * If set, Mongoose creates a TTL index on this path.\n *\n * mongo TTL index `expireAfterSeconds` value will take 'expires' value expressed in seconds.\n *\n * #### Example:\n *\n *     const schema = new Schema({ \"expireAt\": { type: Date,  expires: 11 } });\n *     // if 'expireAt' is set, then document expires at expireAt + 11 seconds\n *\n * @api public\n * @property expires\n * @memberOf SchemaDateOptions\n * @type {Date}\n * @instance\n */\n\nObject.defineProperty(SchemaDateOptions.prototype, 'expires', opts);\n\n/*!\n * ignore\n */\n\nmodule.exports = SchemaDateOptions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL29wdGlvbnMvc2NoZW1hRGF0ZU9wdGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsMEJBQTBCLG1CQUFPLENBQUMsMkZBQXFCOztBQUV2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGlCQUFpQjtBQUNwRCx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxhQUFhLG1CQUFPLENBQUMsdUZBQW1COztBQUV4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsY0FBYyw0QkFBNEI7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL29wdGlvbnMvc2NoZW1hRGF0ZU9wdGlvbnMuanM/MzNmMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFNjaGVtYVR5cGVPcHRpb25zID0gcmVxdWlyZSgnLi9zY2hlbWFUeXBlT3B0aW9ucycpO1xuXG4vKipcbiAqIFRoZSBvcHRpb25zIGRlZmluZWQgb24gYSBEYXRlIHNjaGVtYXR5cGUuXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBjb25zdCBzY2hlbWEgPSBuZXcgU2NoZW1hKHsgc3RhcnRlZEF0OiBEYXRlIH0pO1xuICogICAgIHNjaGVtYS5wYXRoKCdzdGFydGVkQXQnKS5vcHRpb25zOyAvLyBTY2hlbWFEYXRlT3B0aW9ucyBpbnN0YW5jZVxuICpcbiAqIEBhcGkgcHVibGljXG4gKiBAaW5oZXJpdHMgU2NoZW1hVHlwZU9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvciBTY2hlbWFEYXRlT3B0aW9uc1xuICovXG5cbmNsYXNzIFNjaGVtYURhdGVPcHRpb25zIGV4dGVuZHMgU2NoZW1hVHlwZU9wdGlvbnMge31cblxuY29uc3Qgb3B0cyA9IHJlcXVpcmUoJy4vcHJvcGVydHlPcHRpb25zJyk7XG5cbi8qKlxuICogSWYgc2V0LCBNb25nb29zZSBhZGRzIGEgdmFsaWRhdG9yIHRoYXQgY2hlY2tzIHRoYXQgdGhpcyBwYXRoIGlzIGFmdGVyIHRoZVxuICogZ2l2ZW4gYG1pbmAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqIEBwcm9wZXJ0eSBtaW5cbiAqIEBtZW1iZXJPZiBTY2hlbWFEYXRlT3B0aW9uc1xuICogQHR5cGUge0RhdGV9XG4gKiBAaW5zdGFuY2VcbiAqL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoU2NoZW1hRGF0ZU9wdGlvbnMucHJvdG90eXBlLCAnbWluJywgb3B0cyk7XG5cbi8qKlxuICogSWYgc2V0LCBNb25nb29zZSBhZGRzIGEgdmFsaWRhdG9yIHRoYXQgY2hlY2tzIHRoYXQgdGhpcyBwYXRoIGlzIGJlZm9yZSB0aGVcbiAqIGdpdmVuIGBtYXhgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKiBAcHJvcGVydHkgbWF4XG4gKiBAbWVtYmVyT2YgU2NoZW1hRGF0ZU9wdGlvbnNcbiAqIEB0eXBlIHtEYXRlfVxuICogQGluc3RhbmNlXG4gKi9cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFNjaGVtYURhdGVPcHRpb25zLnByb3RvdHlwZSwgJ21heCcsIG9wdHMpO1xuXG4vKipcbiAqIElmIHNldCwgTW9uZ29vc2UgY3JlYXRlcyBhIFRUTCBpbmRleCBvbiB0aGlzIHBhdGguXG4gKlxuICogbW9uZ28gVFRMIGluZGV4IGBleHBpcmVBZnRlclNlY29uZHNgIHZhbHVlIHdpbGwgdGFrZSAnZXhwaXJlcycgdmFsdWUgZXhwcmVzc2VkIGluIHNlY29uZHMuXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBjb25zdCBzY2hlbWEgPSBuZXcgU2NoZW1hKHsgXCJleHBpcmVBdFwiOiB7IHR5cGU6IERhdGUsICBleHBpcmVzOiAxMSB9IH0pO1xuICogICAgIC8vIGlmICdleHBpcmVBdCcgaXMgc2V0LCB0aGVuIGRvY3VtZW50IGV4cGlyZXMgYXQgZXhwaXJlQXQgKyAxMSBzZWNvbmRzXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqIEBwcm9wZXJ0eSBleHBpcmVzXG4gKiBAbWVtYmVyT2YgU2NoZW1hRGF0ZU9wdGlvbnNcbiAqIEB0eXBlIHtEYXRlfVxuICogQGluc3RhbmNlXG4gKi9cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFNjaGVtYURhdGVPcHRpb25zLnByb3RvdHlwZSwgJ2V4cGlyZXMnLCBvcHRzKTtcblxuLyohXG4gKiBpZ25vcmVcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNjaGVtYURhdGVPcHRpb25zO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/options/schemaDateOptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/options/schemaDocumentArrayOptions.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mongoose/lib/options/schemaDocumentArrayOptions.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst SchemaTypeOptions = __webpack_require__(/*! ./schemaTypeOptions */ \"(ssr)/./node_modules/mongoose/lib/options/schemaTypeOptions.js\");\n\n/**\n * The options defined on an Document Array schematype.\n *\n * #### Example:\n *\n *     const schema = new Schema({ users: [{ name: string }] });\n *     schema.path('users').options; // SchemaDocumentArrayOptions instance\n *\n * @api public\n * @inherits SchemaTypeOptions\n * @constructor SchemaDocumentOptions\n */\n\nclass SchemaDocumentArrayOptions extends SchemaTypeOptions {}\n\nconst opts = __webpack_require__(/*! ./propertyOptions */ \"(ssr)/./node_modules/mongoose/lib/options/propertyOptions.js\");\n\n/**\n * If `true`, Mongoose will skip building any indexes defined in this array's schema.\n * If not set, Mongoose will build all indexes defined in this array's schema.\n *\n * #### Example:\n *\n *     const childSchema = Schema({ name: { type: String, index: true } });\n *     // If `excludeIndexes` is `true`, Mongoose will skip building an index\n *     // on `arr.name`. Otherwise, Mongoose will build an index on `arr.name`.\n *     const parentSchema = Schema({\n *       arr: { type: [childSchema], excludeIndexes: true }\n *     });\n *\n * @api public\n * @property excludeIndexes\n * @memberOf SchemaDocumentArrayOptions\n * @type {Array}\n * @instance\n */\n\nObject.defineProperty(SchemaDocumentArrayOptions.prototype, 'excludeIndexes', opts);\n\n/**\n * If set, overwrites the child schema's `_id` option.\n *\n * #### Example:\n *\n *     const childSchema = Schema({ name: String });\n *     const parentSchema = Schema({\n *       child: { type: childSchema, _id: false }\n *     });\n *     parentSchema.path('child').schema.options._id; // false\n *\n * @api public\n * @property _id\n * @memberOf SchemaDocumentArrayOptions\n * @type {Array}\n * @instance\n */\n\nObject.defineProperty(SchemaDocumentArrayOptions.prototype, '_id', opts);\n\n/*!\n * ignore\n */\n\nmodule.exports = SchemaDocumentArrayOptions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL29wdGlvbnMvc2NoZW1hRG9jdW1lbnRBcnJheU9wdGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsMEJBQTBCLG1CQUFPLENBQUMsMkZBQXFCOztBQUV2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLFVBQVUsY0FBYyxHQUFHO0FBQzlELHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLGFBQWEsbUJBQU8sQ0FBQyx1RkFBbUI7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxRQUFRLDZCQUE2QjtBQUN6RTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEIsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxjQUFjO0FBQ2xEO0FBQ0Esa0JBQWtCO0FBQ2xCLFFBQVE7QUFDUixzREFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9vcHRpb25zL3NjaGVtYURvY3VtZW50QXJyYXlPcHRpb25zLmpzP2Y4ZTkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBTY2hlbWFUeXBlT3B0aW9ucyA9IHJlcXVpcmUoJy4vc2NoZW1hVHlwZU9wdGlvbnMnKTtcblxuLyoqXG4gKiBUaGUgb3B0aW9ucyBkZWZpbmVkIG9uIGFuIERvY3VtZW50IEFycmF5IHNjaGVtYXR5cGUuXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBjb25zdCBzY2hlbWEgPSBuZXcgU2NoZW1hKHsgdXNlcnM6IFt7IG5hbWU6IHN0cmluZyB9XSB9KTtcbiAqICAgICBzY2hlbWEucGF0aCgndXNlcnMnKS5vcHRpb25zOyAvLyBTY2hlbWFEb2N1bWVudEFycmF5T3B0aW9ucyBpbnN0YW5jZVxuICpcbiAqIEBhcGkgcHVibGljXG4gKiBAaW5oZXJpdHMgU2NoZW1hVHlwZU9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvciBTY2hlbWFEb2N1bWVudE9wdGlvbnNcbiAqL1xuXG5jbGFzcyBTY2hlbWFEb2N1bWVudEFycmF5T3B0aW9ucyBleHRlbmRzIFNjaGVtYVR5cGVPcHRpb25zIHt9XG5cbmNvbnN0IG9wdHMgPSByZXF1aXJlKCcuL3Byb3BlcnR5T3B0aW9ucycpO1xuXG4vKipcbiAqIElmIGB0cnVlYCwgTW9uZ29vc2Ugd2lsbCBza2lwIGJ1aWxkaW5nIGFueSBpbmRleGVzIGRlZmluZWQgaW4gdGhpcyBhcnJheSdzIHNjaGVtYS5cbiAqIElmIG5vdCBzZXQsIE1vbmdvb3NlIHdpbGwgYnVpbGQgYWxsIGluZGV4ZXMgZGVmaW5lZCBpbiB0aGlzIGFycmF5J3Mgc2NoZW1hLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3QgY2hpbGRTY2hlbWEgPSBTY2hlbWEoeyBuYW1lOiB7IHR5cGU6IFN0cmluZywgaW5kZXg6IHRydWUgfSB9KTtcbiAqICAgICAvLyBJZiBgZXhjbHVkZUluZGV4ZXNgIGlzIGB0cnVlYCwgTW9uZ29vc2Ugd2lsbCBza2lwIGJ1aWxkaW5nIGFuIGluZGV4XG4gKiAgICAgLy8gb24gYGFyci5uYW1lYC4gT3RoZXJ3aXNlLCBNb25nb29zZSB3aWxsIGJ1aWxkIGFuIGluZGV4IG9uIGBhcnIubmFtZWAuXG4gKiAgICAgY29uc3QgcGFyZW50U2NoZW1hID0gU2NoZW1hKHtcbiAqICAgICAgIGFycjogeyB0eXBlOiBbY2hpbGRTY2hlbWFdLCBleGNsdWRlSW5kZXhlczogdHJ1ZSB9XG4gKiAgICAgfSk7XG4gKlxuICogQGFwaSBwdWJsaWNcbiAqIEBwcm9wZXJ0eSBleGNsdWRlSW5kZXhlc1xuICogQG1lbWJlck9mIFNjaGVtYURvY3VtZW50QXJyYXlPcHRpb25zXG4gKiBAdHlwZSB7QXJyYXl9XG4gKiBAaW5zdGFuY2VcbiAqL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoU2NoZW1hRG9jdW1lbnRBcnJheU9wdGlvbnMucHJvdG90eXBlLCAnZXhjbHVkZUluZGV4ZXMnLCBvcHRzKTtcblxuLyoqXG4gKiBJZiBzZXQsIG92ZXJ3cml0ZXMgdGhlIGNoaWxkIHNjaGVtYSdzIGBfaWRgIG9wdGlvbi5cbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKlxuICogICAgIGNvbnN0IGNoaWxkU2NoZW1hID0gU2NoZW1hKHsgbmFtZTogU3RyaW5nIH0pO1xuICogICAgIGNvbnN0IHBhcmVudFNjaGVtYSA9IFNjaGVtYSh7XG4gKiAgICAgICBjaGlsZDogeyB0eXBlOiBjaGlsZFNjaGVtYSwgX2lkOiBmYWxzZSB9XG4gKiAgICAgfSk7XG4gKiAgICAgcGFyZW50U2NoZW1hLnBhdGgoJ2NoaWxkJykuc2NoZW1hLm9wdGlvbnMuX2lkOyAvLyBmYWxzZVxuICpcbiAqIEBhcGkgcHVibGljXG4gKiBAcHJvcGVydHkgX2lkXG4gKiBAbWVtYmVyT2YgU2NoZW1hRG9jdW1lbnRBcnJheU9wdGlvbnNcbiAqIEB0eXBlIHtBcnJheX1cbiAqIEBpbnN0YW5jZVxuICovXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShTY2hlbWFEb2N1bWVudEFycmF5T3B0aW9ucy5wcm90b3R5cGUsICdfaWQnLCBvcHRzKTtcblxuLyohXG4gKiBpZ25vcmVcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNjaGVtYURvY3VtZW50QXJyYXlPcHRpb25zO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/options/schemaDocumentArrayOptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/options/schemaMapOptions.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongoose/lib/options/schemaMapOptions.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst SchemaTypeOptions = __webpack_require__(/*! ./schemaTypeOptions */ \"(ssr)/./node_modules/mongoose/lib/options/schemaTypeOptions.js\");\n\n/**\n * The options defined on a Map schematype.\n *\n * #### Example:\n *\n *     const schema = new Schema({ socialMediaHandles: { type: Map, of: String } });\n *     schema.path('socialMediaHandles').options; // SchemaMapOptions instance\n *\n * @api public\n * @inherits SchemaTypeOptions\n * @constructor SchemaMapOptions\n */\n\nclass SchemaMapOptions extends SchemaTypeOptions {}\n\nconst opts = __webpack_require__(/*! ./propertyOptions */ \"(ssr)/./node_modules/mongoose/lib/options/propertyOptions.js\");\n\n/**\n * If set, specifies the type of this map's values. Mongoose will cast\n * this map's values to the given type.\n *\n * If not set, Mongoose will not cast the map's values.\n *\n * #### Example:\n *\n *     // Mongoose will cast `socialMediaHandles` values to strings\n *     const schema = new Schema({ socialMediaHandles: { type: Map, of: String } });\n *     schema.path('socialMediaHandles').options.of; // String\n *\n * @api public\n * @property of\n * @memberOf SchemaMapOptions\n * @type {Function|string}\n * @instance\n */\n\nObject.defineProperty(SchemaMapOptions.prototype, 'of', opts);\n\nmodule.exports = SchemaMapOptions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL29wdGlvbnMvc2NoZW1hTWFwT3B0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiwwQkFBMEIsbUJBQU8sQ0FBQywyRkFBcUI7O0FBRXZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsc0JBQXNCLHlCQUF5QjtBQUNsRixrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxhQUFhLG1CQUFPLENBQUMsdUZBQW1COztBQUV4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsc0JBQXNCLHlCQUF5QjtBQUNsRixxREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL29wdGlvbnMvc2NoZW1hTWFwT3B0aW9ucy5qcz9kZjRmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgU2NoZW1hVHlwZU9wdGlvbnMgPSByZXF1aXJlKCcuL3NjaGVtYVR5cGVPcHRpb25zJyk7XG5cbi8qKlxuICogVGhlIG9wdGlvbnMgZGVmaW5lZCBvbiBhIE1hcCBzY2hlbWF0eXBlLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3Qgc2NoZW1hID0gbmV3IFNjaGVtYSh7IHNvY2lhbE1lZGlhSGFuZGxlczogeyB0eXBlOiBNYXAsIG9mOiBTdHJpbmcgfSB9KTtcbiAqICAgICBzY2hlbWEucGF0aCgnc29jaWFsTWVkaWFIYW5kbGVzJykub3B0aW9uczsgLy8gU2NoZW1hTWFwT3B0aW9ucyBpbnN0YW5jZVxuICpcbiAqIEBhcGkgcHVibGljXG4gKiBAaW5oZXJpdHMgU2NoZW1hVHlwZU9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvciBTY2hlbWFNYXBPcHRpb25zXG4gKi9cblxuY2xhc3MgU2NoZW1hTWFwT3B0aW9ucyBleHRlbmRzIFNjaGVtYVR5cGVPcHRpb25zIHt9XG5cbmNvbnN0IG9wdHMgPSByZXF1aXJlKCcuL3Byb3BlcnR5T3B0aW9ucycpO1xuXG4vKipcbiAqIElmIHNldCwgc3BlY2lmaWVzIHRoZSB0eXBlIG9mIHRoaXMgbWFwJ3MgdmFsdWVzLiBNb25nb29zZSB3aWxsIGNhc3RcbiAqIHRoaXMgbWFwJ3MgdmFsdWVzIHRvIHRoZSBnaXZlbiB0eXBlLlxuICpcbiAqIElmIG5vdCBzZXQsIE1vbmdvb3NlIHdpbGwgbm90IGNhc3QgdGhlIG1hcCdzIHZhbHVlcy5cbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKlxuICogICAgIC8vIE1vbmdvb3NlIHdpbGwgY2FzdCBgc29jaWFsTWVkaWFIYW5kbGVzYCB2YWx1ZXMgdG8gc3RyaW5nc1xuICogICAgIGNvbnN0IHNjaGVtYSA9IG5ldyBTY2hlbWEoeyBzb2NpYWxNZWRpYUhhbmRsZXM6IHsgdHlwZTogTWFwLCBvZjogU3RyaW5nIH0gfSk7XG4gKiAgICAgc2NoZW1hLnBhdGgoJ3NvY2lhbE1lZGlhSGFuZGxlcycpLm9wdGlvbnMub2Y7IC8vIFN0cmluZ1xuICpcbiAqIEBhcGkgcHVibGljXG4gKiBAcHJvcGVydHkgb2ZcbiAqIEBtZW1iZXJPZiBTY2hlbWFNYXBPcHRpb25zXG4gKiBAdHlwZSB7RnVuY3Rpb258c3RyaW5nfVxuICogQGluc3RhbmNlXG4gKi9cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFNjaGVtYU1hcE9wdGlvbnMucHJvdG90eXBlLCAnb2YnLCBvcHRzKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTY2hlbWFNYXBPcHRpb25zO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/options/schemaMapOptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/options/schemaNumberOptions.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongoose/lib/options/schemaNumberOptions.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst SchemaTypeOptions = __webpack_require__(/*! ./schemaTypeOptions */ \"(ssr)/./node_modules/mongoose/lib/options/schemaTypeOptions.js\");\n\n/**\n * The options defined on a Number schematype.\n *\n * #### Example:\n *\n *     const schema = new Schema({ count: Number });\n *     schema.path('count').options; // SchemaNumberOptions instance\n *\n * @api public\n * @inherits SchemaTypeOptions\n * @constructor SchemaNumberOptions\n */\n\nclass SchemaNumberOptions extends SchemaTypeOptions {}\n\nconst opts = __webpack_require__(/*! ./propertyOptions */ \"(ssr)/./node_modules/mongoose/lib/options/propertyOptions.js\");\n\n/**\n * If set, Mongoose adds a validator that checks that this path is at least the\n * given `min`.\n *\n * @api public\n * @property min\n * @memberOf SchemaNumberOptions\n * @type {Number}\n * @instance\n */\n\nObject.defineProperty(SchemaNumberOptions.prototype, 'min', opts);\n\n/**\n * If set, Mongoose adds a validator that checks that this path is less than the\n * given `max`.\n *\n * @api public\n * @property max\n * @memberOf SchemaNumberOptions\n * @type {Number}\n * @instance\n */\n\nObject.defineProperty(SchemaNumberOptions.prototype, 'max', opts);\n\n/**\n * If set, Mongoose adds a validator that checks that this path is strictly\n * equal to one of the given values.\n *\n * #### Example:\n *\n *     const schema = new Schema({\n *       favoritePrime: {\n *         type: Number,\n *         enum: [3, 5, 7]\n *       }\n *     });\n *     schema.path('favoritePrime').options.enum; // [3, 5, 7]\n *\n * @api public\n * @property enum\n * @memberOf SchemaNumberOptions\n * @type {Array}\n * @instance\n */\n\nObject.defineProperty(SchemaNumberOptions.prototype, 'enum', opts);\n\n/**\n * Sets default [populate options](https://mongoosejs.com/docs/populate.html#query-conditions).\n *\n * #### Example:\n *\n *     const schema = new Schema({\n *       child: {\n *         type: Number,\n *         ref: 'Child',\n *         populate: { select: 'name' }\n *       }\n *     });\n *     const Parent = mongoose.model('Parent', schema);\n *\n *     // Automatically adds `.select('name')`\n *     Parent.findOne().populate('child');\n *\n * @api public\n * @property populate\n * @memberOf SchemaNumberOptions\n * @type {Object}\n * @instance\n */\n\nObject.defineProperty(SchemaNumberOptions.prototype, 'populate', opts);\n\n/*!\n * ignore\n */\n\nmodule.exports = SchemaNumberOptions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL29wdGlvbnMvc2NoZW1hTnVtYmVyT3B0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiwwQkFBMEIsbUJBQU8sQ0FBQywyRkFBcUI7O0FBRXZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsZUFBZTtBQUNsRCxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxhQUFhLG1CQUFPLENBQUMsdUZBQW1COztBQUV4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUixrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL29wdGlvbnMvc2NoZW1hTnVtYmVyT3B0aW9ucy5qcz8yYjNiIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgU2NoZW1hVHlwZU9wdGlvbnMgPSByZXF1aXJlKCcuL3NjaGVtYVR5cGVPcHRpb25zJyk7XG5cbi8qKlxuICogVGhlIG9wdGlvbnMgZGVmaW5lZCBvbiBhIE51bWJlciBzY2hlbWF0eXBlLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3Qgc2NoZW1hID0gbmV3IFNjaGVtYSh7IGNvdW50OiBOdW1iZXIgfSk7XG4gKiAgICAgc2NoZW1hLnBhdGgoJ2NvdW50Jykub3B0aW9uczsgLy8gU2NoZW1hTnVtYmVyT3B0aW9ucyBpbnN0YW5jZVxuICpcbiAqIEBhcGkgcHVibGljXG4gKiBAaW5oZXJpdHMgU2NoZW1hVHlwZU9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvciBTY2hlbWFOdW1iZXJPcHRpb25zXG4gKi9cblxuY2xhc3MgU2NoZW1hTnVtYmVyT3B0aW9ucyBleHRlbmRzIFNjaGVtYVR5cGVPcHRpb25zIHt9XG5cbmNvbnN0IG9wdHMgPSByZXF1aXJlKCcuL3Byb3BlcnR5T3B0aW9ucycpO1xuXG4vKipcbiAqIElmIHNldCwgTW9uZ29vc2UgYWRkcyBhIHZhbGlkYXRvciB0aGF0IGNoZWNrcyB0aGF0IHRoaXMgcGF0aCBpcyBhdCBsZWFzdCB0aGVcbiAqIGdpdmVuIGBtaW5gLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKiBAcHJvcGVydHkgbWluXG4gKiBAbWVtYmVyT2YgU2NoZW1hTnVtYmVyT3B0aW9uc1xuICogQHR5cGUge051bWJlcn1cbiAqIEBpbnN0YW5jZVxuICovXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShTY2hlbWFOdW1iZXJPcHRpb25zLnByb3RvdHlwZSwgJ21pbicsIG9wdHMpO1xuXG4vKipcbiAqIElmIHNldCwgTW9uZ29vc2UgYWRkcyBhIHZhbGlkYXRvciB0aGF0IGNoZWNrcyB0aGF0IHRoaXMgcGF0aCBpcyBsZXNzIHRoYW4gdGhlXG4gKiBnaXZlbiBgbWF4YC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICogQHByb3BlcnR5IG1heFxuICogQG1lbWJlck9mIFNjaGVtYU51bWJlck9wdGlvbnNcbiAqIEB0eXBlIHtOdW1iZXJ9XG4gKiBAaW5zdGFuY2VcbiAqL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoU2NoZW1hTnVtYmVyT3B0aW9ucy5wcm90b3R5cGUsICdtYXgnLCBvcHRzKTtcblxuLyoqXG4gKiBJZiBzZXQsIE1vbmdvb3NlIGFkZHMgYSB2YWxpZGF0b3IgdGhhdCBjaGVja3MgdGhhdCB0aGlzIHBhdGggaXMgc3RyaWN0bHlcbiAqIGVxdWFsIHRvIG9uZSBvZiB0aGUgZ2l2ZW4gdmFsdWVzLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3Qgc2NoZW1hID0gbmV3IFNjaGVtYSh7XG4gKiAgICAgICBmYXZvcml0ZVByaW1lOiB7XG4gKiAgICAgICAgIHR5cGU6IE51bWJlcixcbiAqICAgICAgICAgZW51bTogWzMsIDUsIDddXG4gKiAgICAgICB9XG4gKiAgICAgfSk7XG4gKiAgICAgc2NoZW1hLnBhdGgoJ2Zhdm9yaXRlUHJpbWUnKS5vcHRpb25zLmVudW07IC8vIFszLCA1LCA3XVxuICpcbiAqIEBhcGkgcHVibGljXG4gKiBAcHJvcGVydHkgZW51bVxuICogQG1lbWJlck9mIFNjaGVtYU51bWJlck9wdGlvbnNcbiAqIEB0eXBlIHtBcnJheX1cbiAqIEBpbnN0YW5jZVxuICovXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShTY2hlbWFOdW1iZXJPcHRpb25zLnByb3RvdHlwZSwgJ2VudW0nLCBvcHRzKTtcblxuLyoqXG4gKiBTZXRzIGRlZmF1bHQgW3BvcHVsYXRlIG9wdGlvbnNdKGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9wb3B1bGF0ZS5odG1sI3F1ZXJ5LWNvbmRpdGlvbnMpLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3Qgc2NoZW1hID0gbmV3IFNjaGVtYSh7XG4gKiAgICAgICBjaGlsZDoge1xuICogICAgICAgICB0eXBlOiBOdW1iZXIsXG4gKiAgICAgICAgIHJlZjogJ0NoaWxkJyxcbiAqICAgICAgICAgcG9wdWxhdGU6IHsgc2VsZWN0OiAnbmFtZScgfVxuICogICAgICAgfVxuICogICAgIH0pO1xuICogICAgIGNvbnN0IFBhcmVudCA9IG1vbmdvb3NlLm1vZGVsKCdQYXJlbnQnLCBzY2hlbWEpO1xuICpcbiAqICAgICAvLyBBdXRvbWF0aWNhbGx5IGFkZHMgYC5zZWxlY3QoJ25hbWUnKWBcbiAqICAgICBQYXJlbnQuZmluZE9uZSgpLnBvcHVsYXRlKCdjaGlsZCcpO1xuICpcbiAqIEBhcGkgcHVibGljXG4gKiBAcHJvcGVydHkgcG9wdWxhdGVcbiAqIEBtZW1iZXJPZiBTY2hlbWFOdW1iZXJPcHRpb25zXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQGluc3RhbmNlXG4gKi9cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFNjaGVtYU51bWJlck9wdGlvbnMucHJvdG90eXBlLCAncG9wdWxhdGUnLCBvcHRzKTtcblxuLyohXG4gKiBpZ25vcmVcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNjaGVtYU51bWJlck9wdGlvbnM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/options/schemaNumberOptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/options/schemaObjectIdOptions.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongoose/lib/options/schemaObjectIdOptions.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst SchemaTypeOptions = __webpack_require__(/*! ./schemaTypeOptions */ \"(ssr)/./node_modules/mongoose/lib/options/schemaTypeOptions.js\");\n\n/**\n * The options defined on an ObjectId schematype.\n *\n * #### Example:\n *\n *     const schema = new Schema({ testId: mongoose.ObjectId });\n *     schema.path('testId').options; // SchemaObjectIdOptions instance\n *\n * @api public\n * @inherits SchemaTypeOptions\n * @constructor SchemaObjectIdOptions\n */\n\nclass SchemaObjectIdOptions extends SchemaTypeOptions {}\n\nconst opts = __webpack_require__(/*! ./propertyOptions */ \"(ssr)/./node_modules/mongoose/lib/options/propertyOptions.js\");\n\n/**\n * If truthy, uses Mongoose's default built-in ObjectId path.\n *\n * @api public\n * @property auto\n * @memberOf SchemaObjectIdOptions\n * @type {Boolean}\n * @instance\n */\n\nObject.defineProperty(SchemaObjectIdOptions.prototype, 'auto', opts);\n\n/**\n * Sets default [populate options](https://mongoosejs.com/docs/populate.html#query-conditions).\n *\n * #### Example:\n *\n *     const schema = new Schema({\n *       child: {\n *         type: 'ObjectId',\n *         ref: 'Child',\n *         populate: { select: 'name' }\n *       }\n *     });\n *     const Parent = mongoose.model('Parent', schema);\n *\n *     // Automatically adds `.select('name')`\n *     Parent.findOne().populate('child');\n *\n * @api public\n * @property populate\n * @memberOf SchemaObjectIdOptions\n * @type {Object}\n * @instance\n */\n\nObject.defineProperty(SchemaObjectIdOptions.prototype, 'populate', opts);\n\n/*!\n * ignore\n */\n\nmodule.exports = SchemaObjectIdOptions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL29wdGlvbnMvc2NoZW1hT2JqZWN0SWRPcHRpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDBCQUEwQixtQkFBTyxDQUFDLDJGQUFxQjs7QUFFdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQywyQkFBMkI7QUFDOUQsc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsYUFBYSxtQkFBTyxDQUFDLHVGQUFtQjs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9vcHRpb25zL3NjaGVtYU9iamVjdElkT3B0aW9ucy5qcz9mNzM1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgU2NoZW1hVHlwZU9wdGlvbnMgPSByZXF1aXJlKCcuL3NjaGVtYVR5cGVPcHRpb25zJyk7XG5cbi8qKlxuICogVGhlIG9wdGlvbnMgZGVmaW5lZCBvbiBhbiBPYmplY3RJZCBzY2hlbWF0eXBlLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3Qgc2NoZW1hID0gbmV3IFNjaGVtYSh7IHRlc3RJZDogbW9uZ29vc2UuT2JqZWN0SWQgfSk7XG4gKiAgICAgc2NoZW1hLnBhdGgoJ3Rlc3RJZCcpLm9wdGlvbnM7IC8vIFNjaGVtYU9iamVjdElkT3B0aW9ucyBpbnN0YW5jZVxuICpcbiAqIEBhcGkgcHVibGljXG4gKiBAaW5oZXJpdHMgU2NoZW1hVHlwZU9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvciBTY2hlbWFPYmplY3RJZE9wdGlvbnNcbiAqL1xuXG5jbGFzcyBTY2hlbWFPYmplY3RJZE9wdGlvbnMgZXh0ZW5kcyBTY2hlbWFUeXBlT3B0aW9ucyB7fVxuXG5jb25zdCBvcHRzID0gcmVxdWlyZSgnLi9wcm9wZXJ0eU9wdGlvbnMnKTtcblxuLyoqXG4gKiBJZiB0cnV0aHksIHVzZXMgTW9uZ29vc2UncyBkZWZhdWx0IGJ1aWx0LWluIE9iamVjdElkIHBhdGguXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqIEBwcm9wZXJ0eSBhdXRvXG4gKiBAbWVtYmVyT2YgU2NoZW1hT2JqZWN0SWRPcHRpb25zXG4gKiBAdHlwZSB7Qm9vbGVhbn1cbiAqIEBpbnN0YW5jZVxuICovXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShTY2hlbWFPYmplY3RJZE9wdGlvbnMucHJvdG90eXBlLCAnYXV0bycsIG9wdHMpO1xuXG4vKipcbiAqIFNldHMgZGVmYXVsdCBbcG9wdWxhdGUgb3B0aW9uc10oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL3BvcHVsYXRlLmh0bWwjcXVlcnktY29uZGl0aW9ucykuXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBjb25zdCBzY2hlbWEgPSBuZXcgU2NoZW1hKHtcbiAqICAgICAgIGNoaWxkOiB7XG4gKiAgICAgICAgIHR5cGU6ICdPYmplY3RJZCcsXG4gKiAgICAgICAgIHJlZjogJ0NoaWxkJyxcbiAqICAgICAgICAgcG9wdWxhdGU6IHsgc2VsZWN0OiAnbmFtZScgfVxuICogICAgICAgfVxuICogICAgIH0pO1xuICogICAgIGNvbnN0IFBhcmVudCA9IG1vbmdvb3NlLm1vZGVsKCdQYXJlbnQnLCBzY2hlbWEpO1xuICpcbiAqICAgICAvLyBBdXRvbWF0aWNhbGx5IGFkZHMgYC5zZWxlY3QoJ25hbWUnKWBcbiAqICAgICBQYXJlbnQuZmluZE9uZSgpLnBvcHVsYXRlKCdjaGlsZCcpO1xuICpcbiAqIEBhcGkgcHVibGljXG4gKiBAcHJvcGVydHkgcG9wdWxhdGVcbiAqIEBtZW1iZXJPZiBTY2hlbWFPYmplY3RJZE9wdGlvbnNcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAaW5zdGFuY2VcbiAqL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoU2NoZW1hT2JqZWN0SWRPcHRpb25zLnByb3RvdHlwZSwgJ3BvcHVsYXRlJywgb3B0cyk7XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBTY2hlbWFPYmplY3RJZE9wdGlvbnM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/options/schemaObjectIdOptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/options/schemaStringOptions.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongoose/lib/options/schemaStringOptions.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst SchemaTypeOptions = __webpack_require__(/*! ./schemaTypeOptions */ \"(ssr)/./node_modules/mongoose/lib/options/schemaTypeOptions.js\");\n\n/**\n * The options defined on a string schematype.\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: String });\n *     schema.path('name').options; // SchemaStringOptions instance\n *\n * @api public\n * @inherits SchemaTypeOptions\n * @constructor SchemaStringOptions\n */\n\nclass SchemaStringOptions extends SchemaTypeOptions {}\n\nconst opts = __webpack_require__(/*! ./propertyOptions */ \"(ssr)/./node_modules/mongoose/lib/options/propertyOptions.js\");\n\n/**\n * Array of allowed values for this path\n *\n * @api public\n * @property enum\n * @memberOf SchemaStringOptions\n * @type {Array}\n * @instance\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'enum', opts);\n\n/**\n * Attach a validator that succeeds if the data string matches the given regular\n * expression, and fails otherwise.\n *\n * @api public\n * @property match\n * @memberOf SchemaStringOptions\n * @type {RegExp}\n * @instance\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'match', opts);\n\n/**\n * If truthy, Mongoose will add a custom setter that lowercases this string\n * using JavaScript's built-in `String#toLowerCase()`.\n *\n * @api public\n * @property lowercase\n * @memberOf SchemaStringOptions\n * @type {Boolean}\n * @instance\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'lowercase', opts);\n\n/**\n * If truthy, Mongoose will add a custom setter that removes leading and trailing\n * whitespace using [JavaScript's built-in `String#trim()`](https://masteringjs.io/tutorials/fundamentals/trim-string).\n *\n * @api public\n * @property trim\n * @memberOf SchemaStringOptions\n * @type {Boolean}\n * @instance\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'trim', opts);\n\n/**\n * If truthy, Mongoose will add a custom setter that uppercases this string\n * using JavaScript's built-in [`String#toUpperCase()`](https://masteringjs.io/tutorials/fundamentals/uppercase).\n *\n * @api public\n * @property uppercase\n * @memberOf SchemaStringOptions\n * @type {Boolean}\n * @instance\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'uppercase', opts);\n\n/**\n * If set, Mongoose will add a custom validator that ensures the given\n * string's `length` is at least the given number.\n *\n * Mongoose supports two different spellings for this option: `minLength` and `minlength`.\n * `minLength` is the recommended way to specify this option, but Mongoose also supports\n * `minlength` (lowercase \"l\").\n *\n * @api public\n * @property minLength\n * @memberOf SchemaStringOptions\n * @type {Number}\n * @instance\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'minLength', opts);\nObject.defineProperty(SchemaStringOptions.prototype, 'minlength', opts);\n\n/**\n * If set, Mongoose will add a custom validator that ensures the given\n * string's `length` is at most the given number.\n *\n * Mongoose supports two different spellings for this option: `maxLength` and `maxlength`.\n * `maxLength` is the recommended way to specify this option, but Mongoose also supports\n * `maxlength` (lowercase \"l\").\n *\n * @api public\n * @property maxLength\n * @memberOf SchemaStringOptions\n * @type {Number}\n * @instance\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'maxLength', opts);\nObject.defineProperty(SchemaStringOptions.prototype, 'maxlength', opts);\n\n/**\n * Sets default [populate options](https://mongoosejs.com/docs/populate.html#query-conditions).\n *\n * @api public\n * @property populate\n * @memberOf SchemaStringOptions\n * @type {Object}\n * @instance\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'populate', opts);\n\n/*!\n * ignore\n */\n\nmodule.exports = SchemaStringOptions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL29wdGlvbnMvc2NoZW1hU3RyaW5nT3B0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiwwQkFBMEIsbUJBQU8sQ0FBQywyRkFBcUI7O0FBRXZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsY0FBYztBQUNqRCxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxhQUFhLG1CQUFPLENBQUMsdUZBQW1COztBQUV4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL29wdGlvbnMvc2NoZW1hU3RyaW5nT3B0aW9ucy5qcz84YzdmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgU2NoZW1hVHlwZU9wdGlvbnMgPSByZXF1aXJlKCcuL3NjaGVtYVR5cGVPcHRpb25zJyk7XG5cbi8qKlxuICogVGhlIG9wdGlvbnMgZGVmaW5lZCBvbiBhIHN0cmluZyBzY2hlbWF0eXBlLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3Qgc2NoZW1hID0gbmV3IFNjaGVtYSh7IG5hbWU6IFN0cmluZyB9KTtcbiAqICAgICBzY2hlbWEucGF0aCgnbmFtZScpLm9wdGlvbnM7IC8vIFNjaGVtYVN0cmluZ09wdGlvbnMgaW5zdGFuY2VcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICogQGluaGVyaXRzIFNjaGVtYVR5cGVPcHRpb25zXG4gKiBAY29uc3RydWN0b3IgU2NoZW1hU3RyaW5nT3B0aW9uc1xuICovXG5cbmNsYXNzIFNjaGVtYVN0cmluZ09wdGlvbnMgZXh0ZW5kcyBTY2hlbWFUeXBlT3B0aW9ucyB7fVxuXG5jb25zdCBvcHRzID0gcmVxdWlyZSgnLi9wcm9wZXJ0eU9wdGlvbnMnKTtcblxuLyoqXG4gKiBBcnJheSBvZiBhbGxvd2VkIHZhbHVlcyBmb3IgdGhpcyBwYXRoXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqIEBwcm9wZXJ0eSBlbnVtXG4gKiBAbWVtYmVyT2YgU2NoZW1hU3RyaW5nT3B0aW9uc1xuICogQHR5cGUge0FycmF5fVxuICogQGluc3RhbmNlXG4gKi9cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFNjaGVtYVN0cmluZ09wdGlvbnMucHJvdG90eXBlLCAnZW51bScsIG9wdHMpO1xuXG4vKipcbiAqIEF0dGFjaCBhIHZhbGlkYXRvciB0aGF0IHN1Y2NlZWRzIGlmIHRoZSBkYXRhIHN0cmluZyBtYXRjaGVzIHRoZSBnaXZlbiByZWd1bGFyXG4gKiBleHByZXNzaW9uLCBhbmQgZmFpbHMgb3RoZXJ3aXNlLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKiBAcHJvcGVydHkgbWF0Y2hcbiAqIEBtZW1iZXJPZiBTY2hlbWFTdHJpbmdPcHRpb25zXG4gKiBAdHlwZSB7UmVnRXhwfVxuICogQGluc3RhbmNlXG4gKi9cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFNjaGVtYVN0cmluZ09wdGlvbnMucHJvdG90eXBlLCAnbWF0Y2gnLCBvcHRzKTtcblxuLyoqXG4gKiBJZiB0cnV0aHksIE1vbmdvb3NlIHdpbGwgYWRkIGEgY3VzdG9tIHNldHRlciB0aGF0IGxvd2VyY2FzZXMgdGhpcyBzdHJpbmdcbiAqIHVzaW5nIEphdmFTY3JpcHQncyBidWlsdC1pbiBgU3RyaW5nI3RvTG93ZXJDYXNlKClgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKiBAcHJvcGVydHkgbG93ZXJjYXNlXG4gKiBAbWVtYmVyT2YgU2NoZW1hU3RyaW5nT3B0aW9uc1xuICogQHR5cGUge0Jvb2xlYW59XG4gKiBAaW5zdGFuY2VcbiAqL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoU2NoZW1hU3RyaW5nT3B0aW9ucy5wcm90b3R5cGUsICdsb3dlcmNhc2UnLCBvcHRzKTtcblxuLyoqXG4gKiBJZiB0cnV0aHksIE1vbmdvb3NlIHdpbGwgYWRkIGEgY3VzdG9tIHNldHRlciB0aGF0IHJlbW92ZXMgbGVhZGluZyBhbmQgdHJhaWxpbmdcbiAqIHdoaXRlc3BhY2UgdXNpbmcgW0phdmFTY3JpcHQncyBidWlsdC1pbiBgU3RyaW5nI3RyaW0oKWBdKGh0dHBzOi8vbWFzdGVyaW5nanMuaW8vdHV0b3JpYWxzL2Z1bmRhbWVudGFscy90cmltLXN0cmluZykuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqIEBwcm9wZXJ0eSB0cmltXG4gKiBAbWVtYmVyT2YgU2NoZW1hU3RyaW5nT3B0aW9uc1xuICogQHR5cGUge0Jvb2xlYW59XG4gKiBAaW5zdGFuY2VcbiAqL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoU2NoZW1hU3RyaW5nT3B0aW9ucy5wcm90b3R5cGUsICd0cmltJywgb3B0cyk7XG5cbi8qKlxuICogSWYgdHJ1dGh5LCBNb25nb29zZSB3aWxsIGFkZCBhIGN1c3RvbSBzZXR0ZXIgdGhhdCB1cHBlcmNhc2VzIHRoaXMgc3RyaW5nXG4gKiB1c2luZyBKYXZhU2NyaXB0J3MgYnVpbHQtaW4gW2BTdHJpbmcjdG9VcHBlckNhc2UoKWBdKGh0dHBzOi8vbWFzdGVyaW5nanMuaW8vdHV0b3JpYWxzL2Z1bmRhbWVudGFscy91cHBlcmNhc2UpLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKiBAcHJvcGVydHkgdXBwZXJjYXNlXG4gKiBAbWVtYmVyT2YgU2NoZW1hU3RyaW5nT3B0aW9uc1xuICogQHR5cGUge0Jvb2xlYW59XG4gKiBAaW5zdGFuY2VcbiAqL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoU2NoZW1hU3RyaW5nT3B0aW9ucy5wcm90b3R5cGUsICd1cHBlcmNhc2UnLCBvcHRzKTtcblxuLyoqXG4gKiBJZiBzZXQsIE1vbmdvb3NlIHdpbGwgYWRkIGEgY3VzdG9tIHZhbGlkYXRvciB0aGF0IGVuc3VyZXMgdGhlIGdpdmVuXG4gKiBzdHJpbmcncyBgbGVuZ3RoYCBpcyBhdCBsZWFzdCB0aGUgZ2l2ZW4gbnVtYmVyLlxuICpcbiAqIE1vbmdvb3NlIHN1cHBvcnRzIHR3byBkaWZmZXJlbnQgc3BlbGxpbmdzIGZvciB0aGlzIG9wdGlvbjogYG1pbkxlbmd0aGAgYW5kIGBtaW5sZW5ndGhgLlxuICogYG1pbkxlbmd0aGAgaXMgdGhlIHJlY29tbWVuZGVkIHdheSB0byBzcGVjaWZ5IHRoaXMgb3B0aW9uLCBidXQgTW9uZ29vc2UgYWxzbyBzdXBwb3J0c1xuICogYG1pbmxlbmd0aGAgKGxvd2VyY2FzZSBcImxcIikuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqIEBwcm9wZXJ0eSBtaW5MZW5ndGhcbiAqIEBtZW1iZXJPZiBTY2hlbWFTdHJpbmdPcHRpb25zXG4gKiBAdHlwZSB7TnVtYmVyfVxuICogQGluc3RhbmNlXG4gKi9cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFNjaGVtYVN0cmluZ09wdGlvbnMucHJvdG90eXBlLCAnbWluTGVuZ3RoJywgb3B0cyk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoU2NoZW1hU3RyaW5nT3B0aW9ucy5wcm90b3R5cGUsICdtaW5sZW5ndGgnLCBvcHRzKTtcblxuLyoqXG4gKiBJZiBzZXQsIE1vbmdvb3NlIHdpbGwgYWRkIGEgY3VzdG9tIHZhbGlkYXRvciB0aGF0IGVuc3VyZXMgdGhlIGdpdmVuXG4gKiBzdHJpbmcncyBgbGVuZ3RoYCBpcyBhdCBtb3N0IHRoZSBnaXZlbiBudW1iZXIuXG4gKlxuICogTW9uZ29vc2Ugc3VwcG9ydHMgdHdvIGRpZmZlcmVudCBzcGVsbGluZ3MgZm9yIHRoaXMgb3B0aW9uOiBgbWF4TGVuZ3RoYCBhbmQgYG1heGxlbmd0aGAuXG4gKiBgbWF4TGVuZ3RoYCBpcyB0aGUgcmVjb21tZW5kZWQgd2F5IHRvIHNwZWNpZnkgdGhpcyBvcHRpb24sIGJ1dCBNb25nb29zZSBhbHNvIHN1cHBvcnRzXG4gKiBgbWF4bGVuZ3RoYCAobG93ZXJjYXNlIFwibFwiKS5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICogQHByb3BlcnR5IG1heExlbmd0aFxuICogQG1lbWJlck9mIFNjaGVtYVN0cmluZ09wdGlvbnNcbiAqIEB0eXBlIHtOdW1iZXJ9XG4gKiBAaW5zdGFuY2VcbiAqL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoU2NoZW1hU3RyaW5nT3B0aW9ucy5wcm90b3R5cGUsICdtYXhMZW5ndGgnLCBvcHRzKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShTY2hlbWFTdHJpbmdPcHRpb25zLnByb3RvdHlwZSwgJ21heGxlbmd0aCcsIG9wdHMpO1xuXG4vKipcbiAqIFNldHMgZGVmYXVsdCBbcG9wdWxhdGUgb3B0aW9uc10oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL3BvcHVsYXRlLmh0bWwjcXVlcnktY29uZGl0aW9ucykuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqIEBwcm9wZXJ0eSBwb3B1bGF0ZVxuICogQG1lbWJlck9mIFNjaGVtYVN0cmluZ09wdGlvbnNcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAaW5zdGFuY2VcbiAqL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoU2NoZW1hU3RyaW5nT3B0aW9ucy5wcm90b3R5cGUsICdwb3B1bGF0ZScsIG9wdHMpO1xuXG4vKiFcbiAqIGlnbm9yZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gU2NoZW1hU3RyaW5nT3B0aW9ucztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/options/schemaStringOptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/options/schemaSubdocumentOptions.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mongoose/lib/options/schemaSubdocumentOptions.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst SchemaTypeOptions = __webpack_require__(/*! ./schemaTypeOptions */ \"(ssr)/./node_modules/mongoose/lib/options/schemaTypeOptions.js\");\n\n/**\n * The options defined on a single nested schematype.\n *\n * #### Example:\n *\n *     const schema = Schema({ child: Schema({ name: String }) });\n *     schema.path('child').options; // SchemaSubdocumentOptions instance\n *\n * @api public\n * @inherits SchemaTypeOptions\n * @constructor SchemaSubdocumentOptions\n */\n\nclass SchemaSubdocumentOptions extends SchemaTypeOptions {}\n\nconst opts = __webpack_require__(/*! ./propertyOptions */ \"(ssr)/./node_modules/mongoose/lib/options/propertyOptions.js\");\n\n/**\n * If set, overwrites the child schema's `_id` option.\n *\n * #### Example:\n *\n *     const childSchema = Schema({ name: String });\n *     const parentSchema = Schema({\n *       child: { type: childSchema, _id: false }\n *     });\n *     parentSchema.path('child').schema.options._id; // false\n *\n * @api public\n * @property of\n * @memberOf SchemaSubdocumentOptions\n * @type {Function|string}\n * @instance\n */\n\nObject.defineProperty(SchemaSubdocumentOptions.prototype, '_id', opts);\n\nmodule.exports = SchemaSubdocumentOptions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL29wdGlvbnMvc2NoZW1hU3ViZG9jdW1lbnRPcHRpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDBCQUEwQixtQkFBTyxDQUFDLDJGQUFxQjs7QUFFdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixnQkFBZ0IsY0FBYyxHQUFHO0FBQ2hFLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLGFBQWEsbUJBQU8sQ0FBQyx1RkFBbUI7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsY0FBYztBQUNsRDtBQUNBLGtCQUFrQjtBQUNsQixRQUFRO0FBQ1Isc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9vcHRpb25zL3NjaGVtYVN1YmRvY3VtZW50T3B0aW9ucy5qcz85MzBmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgU2NoZW1hVHlwZU9wdGlvbnMgPSByZXF1aXJlKCcuL3NjaGVtYVR5cGVPcHRpb25zJyk7XG5cbi8qKlxuICogVGhlIG9wdGlvbnMgZGVmaW5lZCBvbiBhIHNpbmdsZSBuZXN0ZWQgc2NoZW1hdHlwZS5cbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKlxuICogICAgIGNvbnN0IHNjaGVtYSA9IFNjaGVtYSh7IGNoaWxkOiBTY2hlbWEoeyBuYW1lOiBTdHJpbmcgfSkgfSk7XG4gKiAgICAgc2NoZW1hLnBhdGgoJ2NoaWxkJykub3B0aW9uczsgLy8gU2NoZW1hU3ViZG9jdW1lbnRPcHRpb25zIGluc3RhbmNlXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqIEBpbmhlcml0cyBTY2hlbWFUeXBlT3B0aW9uc1xuICogQGNvbnN0cnVjdG9yIFNjaGVtYVN1YmRvY3VtZW50T3B0aW9uc1xuICovXG5cbmNsYXNzIFNjaGVtYVN1YmRvY3VtZW50T3B0aW9ucyBleHRlbmRzIFNjaGVtYVR5cGVPcHRpb25zIHt9XG5cbmNvbnN0IG9wdHMgPSByZXF1aXJlKCcuL3Byb3BlcnR5T3B0aW9ucycpO1xuXG4vKipcbiAqIElmIHNldCwgb3ZlcndyaXRlcyB0aGUgY2hpbGQgc2NoZW1hJ3MgYF9pZGAgb3B0aW9uLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3QgY2hpbGRTY2hlbWEgPSBTY2hlbWEoeyBuYW1lOiBTdHJpbmcgfSk7XG4gKiAgICAgY29uc3QgcGFyZW50U2NoZW1hID0gU2NoZW1hKHtcbiAqICAgICAgIGNoaWxkOiB7IHR5cGU6IGNoaWxkU2NoZW1hLCBfaWQ6IGZhbHNlIH1cbiAqICAgICB9KTtcbiAqICAgICBwYXJlbnRTY2hlbWEucGF0aCgnY2hpbGQnKS5zY2hlbWEub3B0aW9ucy5faWQ7IC8vIGZhbHNlXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqIEBwcm9wZXJ0eSBvZlxuICogQG1lbWJlck9mIFNjaGVtYVN1YmRvY3VtZW50T3B0aW9uc1xuICogQHR5cGUge0Z1bmN0aW9ufHN0cmluZ31cbiAqIEBpbnN0YW5jZVxuICovXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShTY2hlbWFTdWJkb2N1bWVudE9wdGlvbnMucHJvdG90eXBlLCAnX2lkJywgb3B0cyk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2NoZW1hU3ViZG9jdW1lbnRPcHRpb25zO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/options/schemaSubdocumentOptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/options/schemaTypeOptions.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongoose/lib/options/schemaTypeOptions.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst clone = __webpack_require__(/*! ../helpers/clone */ \"(ssr)/./node_modules/mongoose/lib/helpers/clone.js\");\n\n/**\n * The options defined on a schematype.\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: String });\n *     schema.path('name').options instanceof mongoose.SchemaTypeOptions; // true\n *\n * @api public\n * @constructor SchemaTypeOptions\n */\n\nclass SchemaTypeOptions {\n  constructor(obj) {\n    if (obj == null) {\n      return this;\n    }\n    Object.assign(this, clone(obj));\n  }\n}\n\nconst opts = __webpack_require__(/*! ./propertyOptions */ \"(ssr)/./node_modules/mongoose/lib/options/propertyOptions.js\");\n\n/**\n * The type to cast this path to.\n *\n * @api public\n * @property type\n * @memberOf SchemaTypeOptions\n * @type {Function|String|Object}\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'type', opts);\n\n/**\n * Function or object describing how to validate this schematype.\n *\n * @api public\n * @property validate\n * @memberOf SchemaTypeOptions\n * @type {Function|Object}\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'validate', opts);\n\n/**\n * Allows overriding casting logic for this individual path. If a string, the\n * given string overwrites Mongoose's default cast error message.\n *\n * #### Example:\n *\n *     const schema = new Schema({\n *       num: {\n *         type: Number,\n *         cast: '{VALUE} is not a valid number'\n *       }\n *     });\n *\n *     // Throws 'CastError: \"bad\" is not a valid number'\n *     schema.path('num').cast('bad');\n *\n *     const Model = mongoose.model('Test', schema);\n *     const doc = new Model({ num: 'fail' });\n *     const err = doc.validateSync();\n *\n *     err.errors['num']; // 'CastError: \"fail\" is not a valid number'\n *\n * @api public\n * @property cast\n * @memberOf SchemaTypeOptions\n * @type {String}\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'cast', opts);\n\n/**\n * If true, attach a required validator to this path, which ensures this path\n * cannot be set to a nullish value. If a function, Mongoose calls the\n * function and only checks for nullish values if the function returns a truthy value.\n *\n * @api public\n * @property required\n * @memberOf SchemaTypeOptions\n * @type {Function|Boolean}\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'required', opts);\n\n/**\n * The default value for this path. If a function, Mongoose executes the function\n * and uses the return value as the default.\n *\n * @api public\n * @property default\n * @memberOf SchemaTypeOptions\n * @type {Function|Any}\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'default', opts);\n\n/**\n * The model that `populate()` should use if populating this path.\n *\n * @api public\n * @property ref\n * @memberOf SchemaTypeOptions\n * @type {Function|String}\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'ref', opts);\n\n/**\n * The path in the document that `populate()` should use to find the model\n * to use.\n *\n * @api public\n * @property ref\n * @memberOf SchemaTypeOptions\n * @type {Function|String}\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'refPath', opts);\n\n/**\n * Whether to include or exclude this path by default when loading documents\n * using `find()`, `findOne()`, etc.\n *\n * @api public\n * @property select\n * @memberOf SchemaTypeOptions\n * @type {Boolean|Number}\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'select', opts);\n\n/**\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose will\n * build an index on this path when the model is compiled.\n *\n * @api public\n * @property index\n * @memberOf SchemaTypeOptions\n * @type {Boolean|Number|Object}\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'index', opts);\n\n/**\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose\n * will build a unique index on this path when the\n * model is compiled. [The `unique` option is **not** a validator](https://mongoosejs.com/docs/validation.html#the-unique-option-is-not-a-validator).\n *\n * @api public\n * @property unique\n * @memberOf SchemaTypeOptions\n * @type {Boolean|Number}\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'unique', opts);\n\n/**\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose will\n * disallow changes to this path once the document\n * is saved to the database for the first time. Read more about [immutability in Mongoose here](https://thecodebarbarian.com/whats-new-in-mongoose-5-6-immutable-properties.html).\n *\n * @api public\n * @property immutable\n * @memberOf SchemaTypeOptions\n * @type {Function|Boolean}\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'immutable', opts);\n\n/**\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose will\n * build a sparse index on this path.\n *\n * @api public\n * @property sparse\n * @memberOf SchemaTypeOptions\n * @type {Boolean|Number}\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'sparse', opts);\n\n/**\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose\n * will build a text index on this path.\n *\n * @api public\n * @property text\n * @memberOf SchemaTypeOptions\n * @type {Boolean|Number|Object}\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'text', opts);\n\n/**\n * Define a transform function for this individual schema type.\n * Only called when calling `toJSON()` or `toObject()`.\n *\n * #### Example:\n *\n *     const schema = Schema({\n *       myDate: {\n *         type: Date,\n *         transform: v => v.getFullYear()\n *       }\n *     });\n *     const Model = mongoose.model('Test', schema);\n *\n *     const doc = new Model({ myDate: new Date('2019/06/01') });\n *     doc.myDate instanceof Date; // true\n *\n *     const res = doc.toObject({ transform: true });\n *     res.myDate; // 2019\n *\n * @api public\n * @property transform\n * @memberOf SchemaTypeOptions\n * @type {Function}\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'transform', opts);\n\nmodule.exports = SchemaTypeOptions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/options/schemaTypeOptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/options/virtualOptions.js":
/*!*************************************************************!*\
  !*** ./node_modules/mongoose/lib/options/virtualOptions.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst opts = __webpack_require__(/*! ./propertyOptions */ \"(ssr)/./node_modules/mongoose/lib/options/propertyOptions.js\");\n\nclass VirtualOptions {\n  constructor(obj) {\n    Object.assign(this, obj);\n\n    if (obj != null && obj.options != null) {\n      this.options = Object.assign({}, obj.options);\n    }\n  }\n}\n\n/**\n * Marks this virtual as a populate virtual, and specifies the model to\n * use for populate.\n *\n * @api public\n * @property ref\n * @memberOf VirtualOptions\n * @type {String|Model|Function}\n * @instance\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'ref', opts);\n\n/**\n * Marks this virtual as a populate virtual, and specifies the path that\n * contains the name of the model to populate\n *\n * @api public\n * @property refPath\n * @memberOf VirtualOptions\n * @type {String|Function}\n * @instance\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'refPath', opts);\n\n/**\n * The name of the property in the local model to match to `foreignField`\n * in the foreign model.\n *\n * @api public\n * @property localField\n * @memberOf VirtualOptions\n * @type {String|Function}\n * @instance\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'localField', opts);\n\n/**\n * The name of the property in the foreign model to match to `localField`\n * in the local model.\n *\n * @api public\n * @property foreignField\n * @memberOf VirtualOptions\n * @type {String|Function}\n * @instance\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'foreignField', opts);\n\n/**\n * Whether to populate this virtual as a single document (true) or an\n * array of documents (false).\n *\n * @api public\n * @property justOne\n * @memberOf VirtualOptions\n * @type {Boolean}\n * @instance\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'justOne', opts);\n\n/**\n * If true, populate just the number of documents where `localField`\n * matches `foreignField`, as opposed to the documents themselves.\n *\n * If `count` is set, it overrides `justOne`.\n *\n * @api public\n * @property count\n * @memberOf VirtualOptions\n * @type {Boolean}\n * @instance\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'count', opts);\n\n/**\n * Add an additional filter to populate, in addition to `localField`\n * matches `foreignField`.\n *\n * @api public\n * @property match\n * @memberOf VirtualOptions\n * @type {Object|Function}\n * @instance\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'match', opts);\n\n/**\n * Additional options to pass to the query used to `populate()`:\n *\n * - `sort`\n * - `skip`\n * - `limit`\n *\n * @api public\n * @property options\n * @memberOf VirtualOptions\n * @type {Object}\n * @instance\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'options', opts);\n\n/**\n * If true, add a `skip` to the query used to `populate()`.\n *\n * @api public\n * @property skip\n * @memberOf VirtualOptions\n * @type {Number}\n * @instance\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'skip', opts);\n\n/**\n * If true, add a `limit` to the query used to `populate()`.\n *\n * @api public\n * @property limit\n * @memberOf VirtualOptions\n * @type {Number}\n * @instance\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'limit', opts);\n\n/**\n * The `limit` option for `populate()` has [some unfortunate edge cases](https://mongoosejs.com/docs/populate.html#query-conditions)\n * when working with multiple documents, like `.find().populate()`. The\n * `perDocumentLimit` option makes `populate()` execute a separate query\n * for each document returned from `find()` to ensure each document\n * gets up to `perDocumentLimit` populated docs if possible.\n *\n * @api public\n * @property perDocumentLimit\n * @memberOf VirtualOptions\n * @type {Number}\n * @instance\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'perDocumentLimit', opts);\n\nmodule.exports = VirtualOptions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL29wdGlvbnMvdmlydHVhbE9wdGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsYUFBYSxtQkFBTyxDQUFDLHVGQUFtQjs7QUFFeEM7QUFDQTtBQUNBOztBQUVBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9vcHRpb25zL3ZpcnR1YWxPcHRpb25zLmpzPzczNzEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBvcHRzID0gcmVxdWlyZSgnLi9wcm9wZXJ0eU9wdGlvbnMnKTtcblxuY2xhc3MgVmlydHVhbE9wdGlvbnMge1xuICBjb25zdHJ1Y3RvcihvYmopIHtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIG9iaik7XG5cbiAgICBpZiAob2JqICE9IG51bGwgJiYgb2JqLm9wdGlvbnMgIT0gbnVsbCkge1xuICAgICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb2JqLm9wdGlvbnMpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIE1hcmtzIHRoaXMgdmlydHVhbCBhcyBhIHBvcHVsYXRlIHZpcnR1YWwsIGFuZCBzcGVjaWZpZXMgdGhlIG1vZGVsIHRvXG4gKiB1c2UgZm9yIHBvcHVsYXRlLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKiBAcHJvcGVydHkgcmVmXG4gKiBAbWVtYmVyT2YgVmlydHVhbE9wdGlvbnNcbiAqIEB0eXBlIHtTdHJpbmd8TW9kZWx8RnVuY3Rpb259XG4gKiBAaW5zdGFuY2VcbiAqL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVmlydHVhbE9wdGlvbnMucHJvdG90eXBlLCAncmVmJywgb3B0cyk7XG5cbi8qKlxuICogTWFya3MgdGhpcyB2aXJ0dWFsIGFzIGEgcG9wdWxhdGUgdmlydHVhbCwgYW5kIHNwZWNpZmllcyB0aGUgcGF0aCB0aGF0XG4gKiBjb250YWlucyB0aGUgbmFtZSBvZiB0aGUgbW9kZWwgdG8gcG9wdWxhdGVcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICogQHByb3BlcnR5IHJlZlBhdGhcbiAqIEBtZW1iZXJPZiBWaXJ0dWFsT3B0aW9uc1xuICogQHR5cGUge1N0cmluZ3xGdW5jdGlvbn1cbiAqIEBpbnN0YW5jZVxuICovXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWaXJ0dWFsT3B0aW9ucy5wcm90b3R5cGUsICdyZWZQYXRoJywgb3B0cyk7XG5cbi8qKlxuICogVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IGluIHRoZSBsb2NhbCBtb2RlbCB0byBtYXRjaCB0byBgZm9yZWlnbkZpZWxkYFxuICogaW4gdGhlIGZvcmVpZ24gbW9kZWwuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqIEBwcm9wZXJ0eSBsb2NhbEZpZWxkXG4gKiBAbWVtYmVyT2YgVmlydHVhbE9wdGlvbnNcbiAqIEB0eXBlIHtTdHJpbmd8RnVuY3Rpb259XG4gKiBAaW5zdGFuY2VcbiAqL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVmlydHVhbE9wdGlvbnMucHJvdG90eXBlLCAnbG9jYWxGaWVsZCcsIG9wdHMpO1xuXG4vKipcbiAqIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSBpbiB0aGUgZm9yZWlnbiBtb2RlbCB0byBtYXRjaCB0byBgbG9jYWxGaWVsZGBcbiAqIGluIHRoZSBsb2NhbCBtb2RlbC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICogQHByb3BlcnR5IGZvcmVpZ25GaWVsZFxuICogQG1lbWJlck9mIFZpcnR1YWxPcHRpb25zXG4gKiBAdHlwZSB7U3RyaW5nfEZ1bmN0aW9ufVxuICogQGluc3RhbmNlXG4gKi9cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZpcnR1YWxPcHRpb25zLnByb3RvdHlwZSwgJ2ZvcmVpZ25GaWVsZCcsIG9wdHMpO1xuXG4vKipcbiAqIFdoZXRoZXIgdG8gcG9wdWxhdGUgdGhpcyB2aXJ0dWFsIGFzIGEgc2luZ2xlIGRvY3VtZW50ICh0cnVlKSBvciBhblxuICogYXJyYXkgb2YgZG9jdW1lbnRzIChmYWxzZSkuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqIEBwcm9wZXJ0eSBqdXN0T25lXG4gKiBAbWVtYmVyT2YgVmlydHVhbE9wdGlvbnNcbiAqIEB0eXBlIHtCb29sZWFufVxuICogQGluc3RhbmNlXG4gKi9cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZpcnR1YWxPcHRpb25zLnByb3RvdHlwZSwgJ2p1c3RPbmUnLCBvcHRzKTtcblxuLyoqXG4gKiBJZiB0cnVlLCBwb3B1bGF0ZSBqdXN0IHRoZSBudW1iZXIgb2YgZG9jdW1lbnRzIHdoZXJlIGBsb2NhbEZpZWxkYFxuICogbWF0Y2hlcyBgZm9yZWlnbkZpZWxkYCwgYXMgb3Bwb3NlZCB0byB0aGUgZG9jdW1lbnRzIHRoZW1zZWx2ZXMuXG4gKlxuICogSWYgYGNvdW50YCBpcyBzZXQsIGl0IG92ZXJyaWRlcyBganVzdE9uZWAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqIEBwcm9wZXJ0eSBjb3VudFxuICogQG1lbWJlck9mIFZpcnR1YWxPcHRpb25zXG4gKiBAdHlwZSB7Qm9vbGVhbn1cbiAqIEBpbnN0YW5jZVxuICovXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWaXJ0dWFsT3B0aW9ucy5wcm90b3R5cGUsICdjb3VudCcsIG9wdHMpO1xuXG4vKipcbiAqIEFkZCBhbiBhZGRpdGlvbmFsIGZpbHRlciB0byBwb3B1bGF0ZSwgaW4gYWRkaXRpb24gdG8gYGxvY2FsRmllbGRgXG4gKiBtYXRjaGVzIGBmb3JlaWduRmllbGRgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKiBAcHJvcGVydHkgbWF0Y2hcbiAqIEBtZW1iZXJPZiBWaXJ0dWFsT3B0aW9uc1xuICogQHR5cGUge09iamVjdHxGdW5jdGlvbn1cbiAqIEBpbnN0YW5jZVxuICovXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWaXJ0dWFsT3B0aW9ucy5wcm90b3R5cGUsICdtYXRjaCcsIG9wdHMpO1xuXG4vKipcbiAqIEFkZGl0aW9uYWwgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBxdWVyeSB1c2VkIHRvIGBwb3B1bGF0ZSgpYDpcbiAqXG4gKiAtIGBzb3J0YFxuICogLSBgc2tpcGBcbiAqIC0gYGxpbWl0YFxuICpcbiAqIEBhcGkgcHVibGljXG4gKiBAcHJvcGVydHkgb3B0aW9uc1xuICogQG1lbWJlck9mIFZpcnR1YWxPcHRpb25zXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQGluc3RhbmNlXG4gKi9cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZpcnR1YWxPcHRpb25zLnByb3RvdHlwZSwgJ29wdGlvbnMnLCBvcHRzKTtcblxuLyoqXG4gKiBJZiB0cnVlLCBhZGQgYSBgc2tpcGAgdG8gdGhlIHF1ZXJ5IHVzZWQgdG8gYHBvcHVsYXRlKClgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKiBAcHJvcGVydHkgc2tpcFxuICogQG1lbWJlck9mIFZpcnR1YWxPcHRpb25zXG4gKiBAdHlwZSB7TnVtYmVyfVxuICogQGluc3RhbmNlXG4gKi9cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZpcnR1YWxPcHRpb25zLnByb3RvdHlwZSwgJ3NraXAnLCBvcHRzKTtcblxuLyoqXG4gKiBJZiB0cnVlLCBhZGQgYSBgbGltaXRgIHRvIHRoZSBxdWVyeSB1c2VkIHRvIGBwb3B1bGF0ZSgpYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICogQHByb3BlcnR5IGxpbWl0XG4gKiBAbWVtYmVyT2YgVmlydHVhbE9wdGlvbnNcbiAqIEB0eXBlIHtOdW1iZXJ9XG4gKiBAaW5zdGFuY2VcbiAqL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVmlydHVhbE9wdGlvbnMucHJvdG90eXBlLCAnbGltaXQnLCBvcHRzKTtcblxuLyoqXG4gKiBUaGUgYGxpbWl0YCBvcHRpb24gZm9yIGBwb3B1bGF0ZSgpYCBoYXMgW3NvbWUgdW5mb3J0dW5hdGUgZWRnZSBjYXNlc10oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL3BvcHVsYXRlLmh0bWwjcXVlcnktY29uZGl0aW9ucylcbiAqIHdoZW4gd29ya2luZyB3aXRoIG11bHRpcGxlIGRvY3VtZW50cywgbGlrZSBgLmZpbmQoKS5wb3B1bGF0ZSgpYC4gVGhlXG4gKiBgcGVyRG9jdW1lbnRMaW1pdGAgb3B0aW9uIG1ha2VzIGBwb3B1bGF0ZSgpYCBleGVjdXRlIGEgc2VwYXJhdGUgcXVlcnlcbiAqIGZvciBlYWNoIGRvY3VtZW50IHJldHVybmVkIGZyb20gYGZpbmQoKWAgdG8gZW5zdXJlIGVhY2ggZG9jdW1lbnRcbiAqIGdldHMgdXAgdG8gYHBlckRvY3VtZW50TGltaXRgIHBvcHVsYXRlZCBkb2NzIGlmIHBvc3NpYmxlLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKiBAcHJvcGVydHkgcGVyRG9jdW1lbnRMaW1pdFxuICogQG1lbWJlck9mIFZpcnR1YWxPcHRpb25zXG4gKiBAdHlwZSB7TnVtYmVyfVxuICogQGluc3RhbmNlXG4gKi9cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZpcnR1YWxPcHRpb25zLnByb3RvdHlwZSwgJ3BlckRvY3VtZW50TGltaXQnLCBvcHRzKTtcblxubW9kdWxlLmV4cG9ydHMgPSBWaXJ0dWFsT3B0aW9ucztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/options/virtualOptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/plugins/index.js":
/*!****************************************************!*\
  !*** ./node_modules/mongoose/lib/plugins/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.saveSubdocs = __webpack_require__(/*! ./saveSubdocs */ \"(ssr)/./node_modules/mongoose/lib/plugins/saveSubdocs.js\");\nexports.sharding = __webpack_require__(/*! ./sharding */ \"(ssr)/./node_modules/mongoose/lib/plugins/sharding.js\");\nexports.trackTransaction = __webpack_require__(/*! ./trackTransaction */ \"(ssr)/./node_modules/mongoose/lib/plugins/trackTransaction.js\");\nexports.validateBeforeSave = __webpack_require__(/*! ./validateBeforeSave */ \"(ssr)/./node_modules/mongoose/lib/plugins/validateBeforeSave.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3BsdWdpbnMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsMEhBQThDO0FBQzlDLGlIQUF3QztBQUN4Qyx5SUFBd0Q7QUFDeEQsK0lBQTREIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvcGx1Z2lucy9pbmRleC5qcz8wMzdjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5zYXZlU3ViZG9jcyA9IHJlcXVpcmUoJy4vc2F2ZVN1YmRvY3MnKTtcbmV4cG9ydHMuc2hhcmRpbmcgPSByZXF1aXJlKCcuL3NoYXJkaW5nJyk7XG5leHBvcnRzLnRyYWNrVHJhbnNhY3Rpb24gPSByZXF1aXJlKCcuL3RyYWNrVHJhbnNhY3Rpb24nKTtcbmV4cG9ydHMudmFsaWRhdGVCZWZvcmVTYXZlID0gcmVxdWlyZSgnLi92YWxpZGF0ZUJlZm9yZVNhdmUnKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/plugins/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/plugins/saveSubdocs.js":
/*!**********************************************************!*\
  !*** ./node_modules/mongoose/lib/plugins/saveSubdocs.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst each = __webpack_require__(/*! ../helpers/each */ \"(ssr)/./node_modules/mongoose/lib/helpers/each.js\");\n\n/*!\n * ignore\n */\n\nmodule.exports = function saveSubdocs(schema) {\n  const unshift = true;\n  schema.s.hooks.pre('save', false, function saveSubdocsPreSave(next) {\n    if (this.$isSubdocument) {\n      next();\n      return;\n    }\n\n    const _this = this;\n    const subdocs = this.$getAllSubdocs();\n\n    if (!subdocs.length) {\n      next();\n      return;\n    }\n\n    each(subdocs, function(subdoc, cb) {\n      subdoc.$__schema.s.hooks.execPre('save', subdoc, function(err) {\n        cb(err);\n      });\n    }, function(error) {\n      if (error) {\n        return _this.$__schema.s.hooks.execPost('save:error', _this, [_this], { error: error }, function(error) {\n          next(error);\n        });\n      }\n      next();\n    });\n  }, null, unshift);\n\n  schema.s.hooks.post('save', function saveSubdocsPostSave(doc, next) {\n    if (this.$isSubdocument) {\n      next();\n      return;\n    }\n\n    const _this = this;\n    const subdocs = this.$getAllSubdocs();\n\n    if (!subdocs.length) {\n      next();\n      return;\n    }\n\n    each(subdocs, function(subdoc, cb) {\n      subdoc.$__schema.s.hooks.execPost('save', subdoc, [subdoc], function(err) {\n        cb(err);\n      });\n    }, function(error) {\n      if (error) {\n        return _this.$__schema.s.hooks.execPost('save:error', _this, [_this], { error: error }, function(error) {\n          next(error);\n        });\n      }\n      next();\n    });\n  }, null, unshift);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3BsdWdpbnMvc2F2ZVN1YmRvY3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsYUFBYSxtQkFBTyxDQUFDLDBFQUFpQjs7QUFFdEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLGdGQUFnRixjQUFjO0FBQzlGO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLGdGQUFnRixjQUFjO0FBQzlGO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvcGx1Z2lucy9zYXZlU3ViZG9jcy5qcz8wMTQwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZWFjaCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvZWFjaCcpO1xuXG4vKiFcbiAqIGlnbm9yZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2F2ZVN1YmRvY3Moc2NoZW1hKSB7XG4gIGNvbnN0IHVuc2hpZnQgPSB0cnVlO1xuICBzY2hlbWEucy5ob29rcy5wcmUoJ3NhdmUnLCBmYWxzZSwgZnVuY3Rpb24gc2F2ZVN1YmRvY3NQcmVTYXZlKG5leHQpIHtcbiAgICBpZiAodGhpcy4kaXNTdWJkb2N1bWVudCkge1xuICAgICAgbmV4dCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IF90aGlzID0gdGhpcztcbiAgICBjb25zdCBzdWJkb2NzID0gdGhpcy4kZ2V0QWxsU3ViZG9jcygpO1xuXG4gICAgaWYgKCFzdWJkb2NzLmxlbmd0aCkge1xuICAgICAgbmV4dCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGVhY2goc3ViZG9jcywgZnVuY3Rpb24oc3ViZG9jLCBjYikge1xuICAgICAgc3ViZG9jLiRfX3NjaGVtYS5zLmhvb2tzLmV4ZWNQcmUoJ3NhdmUnLCBzdWJkb2MsIGZ1bmN0aW9uKGVycikge1xuICAgICAgICBjYihlcnIpO1xuICAgICAgfSk7XG4gICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICByZXR1cm4gX3RoaXMuJF9fc2NoZW1hLnMuaG9va3MuZXhlY1Bvc3QoJ3NhdmU6ZXJyb3InLCBfdGhpcywgW190aGlzXSwgeyBlcnJvcjogZXJyb3IgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICBuZXh0KGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBuZXh0KCk7XG4gICAgfSk7XG4gIH0sIG51bGwsIHVuc2hpZnQpO1xuXG4gIHNjaGVtYS5zLmhvb2tzLnBvc3QoJ3NhdmUnLCBmdW5jdGlvbiBzYXZlU3ViZG9jc1Bvc3RTYXZlKGRvYywgbmV4dCkge1xuICAgIGlmICh0aGlzLiRpc1N1YmRvY3VtZW50KSB7XG4gICAgICBuZXh0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgX3RoaXMgPSB0aGlzO1xuICAgIGNvbnN0IHN1YmRvY3MgPSB0aGlzLiRnZXRBbGxTdWJkb2NzKCk7XG5cbiAgICBpZiAoIXN1YmRvY3MubGVuZ3RoKSB7XG4gICAgICBuZXh0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZWFjaChzdWJkb2NzLCBmdW5jdGlvbihzdWJkb2MsIGNiKSB7XG4gICAgICBzdWJkb2MuJF9fc2NoZW1hLnMuaG9va3MuZXhlY1Bvc3QoJ3NhdmUnLCBzdWJkb2MsIFtzdWJkb2NdLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgY2IoZXJyKTtcbiAgICAgIH0pO1xuICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLiRfX3NjaGVtYS5zLmhvb2tzLmV4ZWNQb3N0KCdzYXZlOmVycm9yJywgX3RoaXMsIFtfdGhpc10sIHsgZXJyb3I6IGVycm9yIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgbmV4dChlcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgbmV4dCgpO1xuICAgIH0pO1xuICB9LCBudWxsLCB1bnNoaWZ0KTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/plugins/saveSubdocs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/plugins/sharding.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongoose/lib/plugins/sharding.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst objectIdSymbol = (__webpack_require__(/*! ../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").objectIdSymbol);\nconst utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\n\n/*!\n * ignore\n */\n\nmodule.exports = function shardingPlugin(schema) {\n  schema.post('init', function shardingPluginPostInit() {\n    storeShard.call(this);\n    return this;\n  });\n  schema.pre('save', function shardingPluginPreSave(next) {\n    applyWhere.call(this);\n    next();\n  });\n  schema.pre('remove', function shardingPluginPreRemove(next) {\n    applyWhere.call(this);\n    next();\n  });\n  schema.post('save', function shardingPluginPostSave() {\n    storeShard.call(this);\n  });\n};\n\n/*!\n * ignore\n */\n\nfunction applyWhere() {\n  let paths;\n  let len;\n\n  if (this.$__.shardval) {\n    paths = Object.keys(this.$__.shardval);\n    len = paths.length;\n\n    this.$where = this.$where || {};\n    for (let i = 0; i < len; ++i) {\n      this.$where[paths[i]] = this.$__.shardval[paths[i]];\n    }\n  }\n}\n\n/*!\n * ignore\n */\n\nmodule.exports.storeShard = storeShard;\n\n/*!\n * ignore\n */\n\nfunction storeShard() {\n  // backwards compat\n  const key = this.$__schema.options.shardKey || this.$__schema.options.shardkey;\n  if (!utils.isPOJO(key)) {\n    return;\n  }\n\n  const orig = this.$__.shardval = {};\n  const paths = Object.keys(key);\n  const len = paths.length;\n  let val;\n\n  for (let i = 0; i < len; ++i) {\n    val = this.$__getValue(paths[i]);\n    if (val == null) {\n      orig[paths[i]] = val;\n    } else if (utils.isMongooseObject(val)) {\n      orig[paths[i]] = val.toObject({ depopulate: true, _isNested: true });\n    } else if (val instanceof Date || val[objectIdSymbol]) {\n      orig[paths[i]] = val;\n    } else if (typeof val.valueOf === 'function') {\n      orig[paths[i]] = val.valueOf();\n    } else {\n      orig[paths[i]] = val;\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3BsdWdpbnMvc2hhcmRpbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsdUJBQXVCLHNIQUE0QztBQUNuRSxjQUFjLG1CQUFPLENBQUMsNERBQVU7O0FBRWhDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEseUJBQXlCOztBQUV6QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQixTQUFTO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixzQ0FBc0MsbUNBQW1DO0FBQ3pFLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3BsdWdpbnMvc2hhcmRpbmcuanM/YmRlOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IG9iamVjdElkU3ltYm9sID0gcmVxdWlyZSgnLi4vaGVscGVycy9zeW1ib2xzJykub2JqZWN0SWRTeW1ib2w7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGFyZGluZ1BsdWdpbihzY2hlbWEpIHtcbiAgc2NoZW1hLnBvc3QoJ2luaXQnLCBmdW5jdGlvbiBzaGFyZGluZ1BsdWdpblBvc3RJbml0KCkge1xuICAgIHN0b3JlU2hhcmQuY2FsbCh0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG4gIHNjaGVtYS5wcmUoJ3NhdmUnLCBmdW5jdGlvbiBzaGFyZGluZ1BsdWdpblByZVNhdmUobmV4dCkge1xuICAgIGFwcGx5V2hlcmUuY2FsbCh0aGlzKTtcbiAgICBuZXh0KCk7XG4gIH0pO1xuICBzY2hlbWEucHJlKCdyZW1vdmUnLCBmdW5jdGlvbiBzaGFyZGluZ1BsdWdpblByZVJlbW92ZShuZXh0KSB7XG4gICAgYXBwbHlXaGVyZS5jYWxsKHRoaXMpO1xuICAgIG5leHQoKTtcbiAgfSk7XG4gIHNjaGVtYS5wb3N0KCdzYXZlJywgZnVuY3Rpb24gc2hhcmRpbmdQbHVnaW5Qb3N0U2F2ZSgpIHtcbiAgICBzdG9yZVNoYXJkLmNhbGwodGhpcyk7XG4gIH0pO1xufTtcblxuLyohXG4gKiBpZ25vcmVcbiAqL1xuXG5mdW5jdGlvbiBhcHBseVdoZXJlKCkge1xuICBsZXQgcGF0aHM7XG4gIGxldCBsZW47XG5cbiAgaWYgKHRoaXMuJF9fLnNoYXJkdmFsKSB7XG4gICAgcGF0aHMgPSBPYmplY3Qua2V5cyh0aGlzLiRfXy5zaGFyZHZhbCk7XG4gICAgbGVuID0gcGF0aHMubGVuZ3RoO1xuXG4gICAgdGhpcy4kd2hlcmUgPSB0aGlzLiR3aGVyZSB8fCB7fTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB0aGlzLiR3aGVyZVtwYXRoc1tpXV0gPSB0aGlzLiRfXy5zaGFyZHZhbFtwYXRoc1tpXV07XG4gICAgfVxuICB9XG59XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMuc3RvcmVTaGFyZCA9IHN0b3JlU2hhcmQ7XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxuZnVuY3Rpb24gc3RvcmVTaGFyZCgpIHtcbiAgLy8gYmFja3dhcmRzIGNvbXBhdFxuICBjb25zdCBrZXkgPSB0aGlzLiRfX3NjaGVtYS5vcHRpb25zLnNoYXJkS2V5IHx8IHRoaXMuJF9fc2NoZW1hLm9wdGlvbnMuc2hhcmRrZXk7XG4gIGlmICghdXRpbHMuaXNQT0pPKGtleSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBvcmlnID0gdGhpcy4kX18uc2hhcmR2YWwgPSB7fTtcbiAgY29uc3QgcGF0aHMgPSBPYmplY3Qua2V5cyhrZXkpO1xuICBjb25zdCBsZW4gPSBwYXRocy5sZW5ndGg7XG4gIGxldCB2YWw7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIHZhbCA9IHRoaXMuJF9fZ2V0VmFsdWUocGF0aHNbaV0pO1xuICAgIGlmICh2YWwgPT0gbnVsbCkge1xuICAgICAgb3JpZ1twYXRoc1tpXV0gPSB2YWw7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc01vbmdvb3NlT2JqZWN0KHZhbCkpIHtcbiAgICAgIG9yaWdbcGF0aHNbaV1dID0gdmFsLnRvT2JqZWN0KHsgZGVwb3B1bGF0ZTogdHJ1ZSwgX2lzTmVzdGVkOiB0cnVlIH0pO1xuICAgIH0gZWxzZSBpZiAodmFsIGluc3RhbmNlb2YgRGF0ZSB8fCB2YWxbb2JqZWN0SWRTeW1ib2xdKSB7XG4gICAgICBvcmlnW3BhdGhzW2ldXSA9IHZhbDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwudmFsdWVPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb3JpZ1twYXRoc1tpXV0gPSB2YWwudmFsdWVPZigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcmlnW3BhdGhzW2ldXSA9IHZhbDtcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/plugins/sharding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/plugins/trackTransaction.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongoose/lib/plugins/trackTransaction.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst arrayAtomicsSymbol = (__webpack_require__(/*! ../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").arrayAtomicsSymbol);\nconst sessionNewDocuments = (__webpack_require__(/*! ../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").sessionNewDocuments);\nconst utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\n\nmodule.exports = function trackTransaction(schema) {\n  schema.pre('save', function trackTransactionPreSave() {\n    const session = this.$session();\n    if (session == null) {\n      return;\n    }\n    if (session.transaction == null || session[sessionNewDocuments] == null) {\n      return;\n    }\n\n    if (!session[sessionNewDocuments].has(this)) {\n      const initialState = {};\n      if (this.isNew) {\n        initialState.isNew = true;\n      }\n      if (this.$__schema.options.versionKey) {\n        initialState.versionKey = this.get(this.$__schema.options.versionKey);\n      }\n\n      initialState.modifiedPaths = new Set(Object.keys(this.$__.activePaths.getStatePaths('modify')));\n      initialState.atomics = _getAtomics(this);\n\n      session[sessionNewDocuments].set(this, initialState);\n    } else {\n      const state = session[sessionNewDocuments].get(this);\n\n      for (const path of Object.keys(this.$__.activePaths.getStatePaths('modify'))) {\n        state.modifiedPaths.add(path);\n      }\n      state.atomics = _getAtomics(this, state.atomics);\n    }\n  });\n};\n\nfunction _getAtomics(doc, previous) {\n  const pathToAtomics = new Map();\n  previous = previous || new Map();\n\n  const pathsToCheck = Object.keys(doc.$__.activePaths.init).concat(Object.keys(doc.$__.activePaths.modify));\n\n  for (const path of pathsToCheck) {\n    const val = doc.$__getValue(path);\n    if (val != null &&\n        Array.isArray(val) &&\n        utils.isMongooseDocumentArray(val) &&\n        val.length &&\n        val[arrayAtomicsSymbol] != null &&\n        Object.keys(val[arrayAtomicsSymbol]).length !== 0) {\n      const existing = previous.get(path) || {};\n      pathToAtomics.set(path, mergeAtomics(existing, val[arrayAtomicsSymbol]));\n    }\n  }\n\n  const dirty = doc.$__dirty();\n  for (const dirt of dirty) {\n    const path = dirt.path;\n\n    const val = dirt.value;\n    if (val != null && val[arrayAtomicsSymbol] != null && Object.keys(val[arrayAtomicsSymbol]).length !== 0) {\n      const existing = previous.get(path) || {};\n      pathToAtomics.set(path, mergeAtomics(existing, val[arrayAtomicsSymbol]));\n    }\n  }\n\n  return pathToAtomics;\n}\n\nfunction mergeAtomics(destination, source) {\n  destination = destination || {};\n\n  if (source.$pullAll != null) {\n    destination.$pullAll = (destination.$pullAll || []).concat(source.$pullAll);\n  }\n  if (source.$push != null) {\n    destination.$push = destination.$push || {};\n    destination.$push.$each = (destination.$push.$each || []).concat(source.$push.$each);\n  }\n  if (source.$addToSet != null) {\n    destination.$addToSet = (destination.$addToSet || []).concat(source.$addToSet);\n  }\n  if (source.$set != null) {\n    destination.$set = Array.isArray(source.$set) ? [...source.$set] : Object.assign({}, source.$set);\n  }\n\n  return destination;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3BsdWdpbnMvdHJhY2tUcmFuc2FjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiwyQkFBMkIsMEhBQWdEO0FBQzNFLDRCQUE0QiwySEFBaUQ7QUFDN0UsY0FBYyxtQkFBTyxDQUFDLDREQUFVOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTtBQUNOOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUZBQXVGO0FBQ3ZGOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9wbHVnaW5zL3RyYWNrVHJhbnNhY3Rpb24uanM/ZGQzYyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGFycmF5QXRvbWljc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvc3ltYm9scycpLmFycmF5QXRvbWljc1N5bWJvbDtcbmNvbnN0IHNlc3Npb25OZXdEb2N1bWVudHMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3N5bWJvbHMnKS5zZXNzaW9uTmV3RG9jdW1lbnRzO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYWNrVHJhbnNhY3Rpb24oc2NoZW1hKSB7XG4gIHNjaGVtYS5wcmUoJ3NhdmUnLCBmdW5jdGlvbiB0cmFja1RyYW5zYWN0aW9uUHJlU2F2ZSgpIHtcbiAgICBjb25zdCBzZXNzaW9uID0gdGhpcy4kc2Vzc2lvbigpO1xuICAgIGlmIChzZXNzaW9uID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHNlc3Npb24udHJhbnNhY3Rpb24gPT0gbnVsbCB8fCBzZXNzaW9uW3Nlc3Npb25OZXdEb2N1bWVudHNdID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXNlc3Npb25bc2Vzc2lvbk5ld0RvY3VtZW50c10uaGFzKHRoaXMpKSB7XG4gICAgICBjb25zdCBpbml0aWFsU3RhdGUgPSB7fTtcbiAgICAgIGlmICh0aGlzLmlzTmV3KSB7XG4gICAgICAgIGluaXRpYWxTdGF0ZS5pc05ldyA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy4kX19zY2hlbWEub3B0aW9ucy52ZXJzaW9uS2V5KSB7XG4gICAgICAgIGluaXRpYWxTdGF0ZS52ZXJzaW9uS2V5ID0gdGhpcy5nZXQodGhpcy4kX19zY2hlbWEub3B0aW9ucy52ZXJzaW9uS2V5KTtcbiAgICAgIH1cblxuICAgICAgaW5pdGlhbFN0YXRlLm1vZGlmaWVkUGF0aHMgPSBuZXcgU2V0KE9iamVjdC5rZXlzKHRoaXMuJF9fLmFjdGl2ZVBhdGhzLmdldFN0YXRlUGF0aHMoJ21vZGlmeScpKSk7XG4gICAgICBpbml0aWFsU3RhdGUuYXRvbWljcyA9IF9nZXRBdG9taWNzKHRoaXMpO1xuXG4gICAgICBzZXNzaW9uW3Nlc3Npb25OZXdEb2N1bWVudHNdLnNldCh0aGlzLCBpbml0aWFsU3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzdGF0ZSA9IHNlc3Npb25bc2Vzc2lvbk5ld0RvY3VtZW50c10uZ2V0KHRoaXMpO1xuXG4gICAgICBmb3IgKGNvbnN0IHBhdGggb2YgT2JqZWN0LmtleXModGhpcy4kX18uYWN0aXZlUGF0aHMuZ2V0U3RhdGVQYXRocygnbW9kaWZ5JykpKSB7XG4gICAgICAgIHN0YXRlLm1vZGlmaWVkUGF0aHMuYWRkKHBhdGgpO1xuICAgICAgfVxuICAgICAgc3RhdGUuYXRvbWljcyA9IF9nZXRBdG9taWNzKHRoaXMsIHN0YXRlLmF0b21pY3MpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBfZ2V0QXRvbWljcyhkb2MsIHByZXZpb3VzKSB7XG4gIGNvbnN0IHBhdGhUb0F0b21pY3MgPSBuZXcgTWFwKCk7XG4gIHByZXZpb3VzID0gcHJldmlvdXMgfHwgbmV3IE1hcCgpO1xuXG4gIGNvbnN0IHBhdGhzVG9DaGVjayA9IE9iamVjdC5rZXlzKGRvYy4kX18uYWN0aXZlUGF0aHMuaW5pdCkuY29uY2F0KE9iamVjdC5rZXlzKGRvYy4kX18uYWN0aXZlUGF0aHMubW9kaWZ5KSk7XG5cbiAgZm9yIChjb25zdCBwYXRoIG9mIHBhdGhzVG9DaGVjaykge1xuICAgIGNvbnN0IHZhbCA9IGRvYy4kX19nZXRWYWx1ZShwYXRoKTtcbiAgICBpZiAodmFsICE9IG51bGwgJiZcbiAgICAgICAgQXJyYXkuaXNBcnJheSh2YWwpICYmXG4gICAgICAgIHV0aWxzLmlzTW9uZ29vc2VEb2N1bWVudEFycmF5KHZhbCkgJiZcbiAgICAgICAgdmFsLmxlbmd0aCAmJlxuICAgICAgICB2YWxbYXJyYXlBdG9taWNzU3ltYm9sXSAhPSBudWxsICYmXG4gICAgICAgIE9iamVjdC5rZXlzKHZhbFthcnJheUF0b21pY3NTeW1ib2xdKS5sZW5ndGggIT09IDApIHtcbiAgICAgIGNvbnN0IGV4aXN0aW5nID0gcHJldmlvdXMuZ2V0KHBhdGgpIHx8IHt9O1xuICAgICAgcGF0aFRvQXRvbWljcy5zZXQocGF0aCwgbWVyZ2VBdG9taWNzKGV4aXN0aW5nLCB2YWxbYXJyYXlBdG9taWNzU3ltYm9sXSkpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGRpcnR5ID0gZG9jLiRfX2RpcnR5KCk7XG4gIGZvciAoY29uc3QgZGlydCBvZiBkaXJ0eSkge1xuICAgIGNvbnN0IHBhdGggPSBkaXJ0LnBhdGg7XG5cbiAgICBjb25zdCB2YWwgPSBkaXJ0LnZhbHVlO1xuICAgIGlmICh2YWwgIT0gbnVsbCAmJiB2YWxbYXJyYXlBdG9taWNzU3ltYm9sXSAhPSBudWxsICYmIE9iamVjdC5rZXlzKHZhbFthcnJheUF0b21pY3NTeW1ib2xdKS5sZW5ndGggIT09IDApIHtcbiAgICAgIGNvbnN0IGV4aXN0aW5nID0gcHJldmlvdXMuZ2V0KHBhdGgpIHx8IHt9O1xuICAgICAgcGF0aFRvQXRvbWljcy5zZXQocGF0aCwgbWVyZ2VBdG9taWNzKGV4aXN0aW5nLCB2YWxbYXJyYXlBdG9taWNzU3ltYm9sXSkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXRoVG9BdG9taWNzO1xufVxuXG5mdW5jdGlvbiBtZXJnZUF0b21pY3MoZGVzdGluYXRpb24sIHNvdXJjZSkge1xuICBkZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uIHx8IHt9O1xuXG4gIGlmIChzb3VyY2UuJHB1bGxBbGwgIT0gbnVsbCkge1xuICAgIGRlc3RpbmF0aW9uLiRwdWxsQWxsID0gKGRlc3RpbmF0aW9uLiRwdWxsQWxsIHx8IFtdKS5jb25jYXQoc291cmNlLiRwdWxsQWxsKTtcbiAgfVxuICBpZiAoc291cmNlLiRwdXNoICE9IG51bGwpIHtcbiAgICBkZXN0aW5hdGlvbi4kcHVzaCA9IGRlc3RpbmF0aW9uLiRwdXNoIHx8IHt9O1xuICAgIGRlc3RpbmF0aW9uLiRwdXNoLiRlYWNoID0gKGRlc3RpbmF0aW9uLiRwdXNoLiRlYWNoIHx8IFtdKS5jb25jYXQoc291cmNlLiRwdXNoLiRlYWNoKTtcbiAgfVxuICBpZiAoc291cmNlLiRhZGRUb1NldCAhPSBudWxsKSB7XG4gICAgZGVzdGluYXRpb24uJGFkZFRvU2V0ID0gKGRlc3RpbmF0aW9uLiRhZGRUb1NldCB8fCBbXSkuY29uY2F0KHNvdXJjZS4kYWRkVG9TZXQpO1xuICB9XG4gIGlmIChzb3VyY2UuJHNldCAhPSBudWxsKSB7XG4gICAgZGVzdGluYXRpb24uJHNldCA9IEFycmF5LmlzQXJyYXkoc291cmNlLiRzZXQpID8gWy4uLnNvdXJjZS4kc2V0XSA6IE9iamVjdC5hc3NpZ24oe30sIHNvdXJjZS4kc2V0KTtcbiAgfVxuXG4gIHJldHVybiBkZXN0aW5hdGlvbjtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/plugins/trackTransaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/plugins/validateBeforeSave.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongoose/lib/plugins/validateBeforeSave.js ***!
  \*****************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/*!\n * ignore\n */\n\nmodule.exports = function validateBeforeSave(schema) {\n  const unshift = true;\n  schema.pre('save', false, function validateBeforeSave(next, options) {\n    const _this = this;\n    // Nested docs have their own presave\n    if (this.$isSubdocument) {\n      return next();\n    }\n\n    const hasValidateBeforeSaveOption = options &&\n        (typeof options === 'object') &&\n        ('validateBeforeSave' in options);\n\n    let shouldValidate;\n    if (hasValidateBeforeSaveOption) {\n      shouldValidate = !!options.validateBeforeSave;\n    } else {\n      shouldValidate = this.$__schema.options.validateBeforeSave;\n    }\n\n    // Validate\n    if (shouldValidate) {\n      const hasValidateModifiedOnlyOption = options &&\n          (typeof options === 'object') &&\n          ('validateModifiedOnly' in options);\n      const validateOptions = hasValidateModifiedOnlyOption ?\n        { validateModifiedOnly: options.validateModifiedOnly } :\n        null;\n      this.$validate(validateOptions).then(\n        () => {\n          this.$op = 'save';\n          next();\n        },\n        error => {\n          _this.$__schema.s.hooks.execPost('save:error', _this, [_this], { error: error }, function(error) {\n            _this.$op = 'save';\n            next(error);\n          });\n        }\n      );\n    } else {\n      next();\n    }\n  }, null, unshift);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3BsdWdpbnMvdmFsaWRhdGVCZWZvcmVTYXZlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHFEQUFxRDtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsMkVBQTJFLGNBQWM7QUFDekY7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxHQUFHO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9wbHVnaW5zL3ZhbGlkYXRlQmVmb3JlU2F2ZS5qcz8wYzViIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyohXG4gKiBpZ25vcmVcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHZhbGlkYXRlQmVmb3JlU2F2ZShzY2hlbWEpIHtcbiAgY29uc3QgdW5zaGlmdCA9IHRydWU7XG4gIHNjaGVtYS5wcmUoJ3NhdmUnLCBmYWxzZSwgZnVuY3Rpb24gdmFsaWRhdGVCZWZvcmVTYXZlKG5leHQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBfdGhpcyA9IHRoaXM7XG4gICAgLy8gTmVzdGVkIGRvY3MgaGF2ZSB0aGVpciBvd24gcHJlc2F2ZVxuICAgIGlmICh0aGlzLiRpc1N1YmRvY3VtZW50KSB7XG4gICAgICByZXR1cm4gbmV4dCgpO1xuICAgIH1cblxuICAgIGNvbnN0IGhhc1ZhbGlkYXRlQmVmb3JlU2F2ZU9wdGlvbiA9IG9wdGlvbnMgJiZcbiAgICAgICAgKHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0JykgJiZcbiAgICAgICAgKCd2YWxpZGF0ZUJlZm9yZVNhdmUnIGluIG9wdGlvbnMpO1xuXG4gICAgbGV0IHNob3VsZFZhbGlkYXRlO1xuICAgIGlmIChoYXNWYWxpZGF0ZUJlZm9yZVNhdmVPcHRpb24pIHtcbiAgICAgIHNob3VsZFZhbGlkYXRlID0gISFvcHRpb25zLnZhbGlkYXRlQmVmb3JlU2F2ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvdWxkVmFsaWRhdGUgPSB0aGlzLiRfX3NjaGVtYS5vcHRpb25zLnZhbGlkYXRlQmVmb3JlU2F2ZTtcbiAgICB9XG5cbiAgICAvLyBWYWxpZGF0ZVxuICAgIGlmIChzaG91bGRWYWxpZGF0ZSkge1xuICAgICAgY29uc3QgaGFzVmFsaWRhdGVNb2RpZmllZE9ubHlPcHRpb24gPSBvcHRpb25zICYmXG4gICAgICAgICAgKHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0JykgJiZcbiAgICAgICAgICAoJ3ZhbGlkYXRlTW9kaWZpZWRPbmx5JyBpbiBvcHRpb25zKTtcbiAgICAgIGNvbnN0IHZhbGlkYXRlT3B0aW9ucyA9IGhhc1ZhbGlkYXRlTW9kaWZpZWRPbmx5T3B0aW9uID9cbiAgICAgICAgeyB2YWxpZGF0ZU1vZGlmaWVkT25seTogb3B0aW9ucy52YWxpZGF0ZU1vZGlmaWVkT25seSB9IDpcbiAgICAgICAgbnVsbDtcbiAgICAgIHRoaXMuJHZhbGlkYXRlKHZhbGlkYXRlT3B0aW9ucykudGhlbihcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIHRoaXMuJG9wID0gJ3NhdmUnO1xuICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3IgPT4ge1xuICAgICAgICAgIF90aGlzLiRfX3NjaGVtYS5zLmhvb2tzLmV4ZWNQb3N0KCdzYXZlOmVycm9yJywgX3RoaXMsIFtfdGhpc10sIHsgZXJyb3I6IGVycm9yIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgICBfdGhpcy4kb3AgPSAnc2F2ZSc7XG4gICAgICAgICAgICBuZXh0KGVycm9yKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV4dCgpO1xuICAgIH1cbiAgfSwgbnVsbCwgdW5zaGlmdCk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/plugins/validateBeforeSave.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/query.js":
/*!********************************************!*\
  !*** ./node_modules/mongoose/lib/query.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\nconst CastError = __webpack_require__(/*! ./error/cast */ \"(ssr)/./node_modules/mongoose/lib/error/cast.js\");\nconst DocumentNotFoundError = __webpack_require__(/*! ./error/notFound */ \"(ssr)/./node_modules/mongoose/lib/error/notFound.js\");\nconst Kareem = __webpack_require__(/*! kareem */ \"(ssr)/./node_modules/kareem/index.js\");\nconst MongooseError = __webpack_require__(/*! ./error/mongooseError */ \"(ssr)/./node_modules/mongoose/lib/error/mongooseError.js\");\nconst ObjectParameterError = __webpack_require__(/*! ./error/objectParameter */ \"(ssr)/./node_modules/mongoose/lib/error/objectParameter.js\");\nconst QueryCursor = __webpack_require__(/*! ./cursor/queryCursor */ \"(ssr)/./node_modules/mongoose/lib/cursor/queryCursor.js\");\nconst ValidationError = __webpack_require__(/*! ./error/validation */ \"(ssr)/./node_modules/mongoose/lib/error/validation.js\");\nconst { applyGlobalMaxTimeMS, applyGlobalDiskUse } = __webpack_require__(/*! ./helpers/query/applyGlobalOption */ \"(ssr)/./node_modules/mongoose/lib/helpers/query/applyGlobalOption.js\");\nconst handleReadPreferenceAliases = __webpack_require__(/*! ./helpers/query/handleReadPreferenceAliases */ \"(ssr)/./node_modules/mongoose/lib/helpers/query/handleReadPreferenceAliases.js\");\nconst applyWriteConcern = __webpack_require__(/*! ./helpers/schema/applyWriteConcern */ \"(ssr)/./node_modules/mongoose/lib/helpers/schema/applyWriteConcern.js\");\nconst cast = __webpack_require__(/*! ./cast */ \"(ssr)/./node_modules/mongoose/lib/cast.js\");\nconst castArrayFilters = __webpack_require__(/*! ./helpers/update/castArrayFilters */ \"(ssr)/./node_modules/mongoose/lib/helpers/update/castArrayFilters.js\");\nconst castNumber = __webpack_require__(/*! ./cast/number */ \"(ssr)/./node_modules/mongoose/lib/cast/number.js\");\nconst castUpdate = __webpack_require__(/*! ./helpers/query/castUpdate */ \"(ssr)/./node_modules/mongoose/lib/helpers/query/castUpdate.js\");\nconst clone = __webpack_require__(/*! ./helpers/clone */ \"(ssr)/./node_modules/mongoose/lib/helpers/clone.js\");\nconst getDiscriminatorByValue = __webpack_require__(/*! ./helpers/discriminator/getDiscriminatorByValue */ \"(ssr)/./node_modules/mongoose/lib/helpers/discriminator/getDiscriminatorByValue.js\");\nconst helpers = __webpack_require__(/*! ./queryHelpers */ \"(ssr)/./node_modules/mongoose/lib/queryHelpers.js\");\nconst immediate = __webpack_require__(/*! ./helpers/immediate */ \"(ssr)/./node_modules/mongoose/lib/helpers/immediate.js\");\nconst internalToObjectOptions = (__webpack_require__(/*! ./options */ \"(ssr)/./node_modules/mongoose/lib/options.js\").internalToObjectOptions);\nconst isExclusive = __webpack_require__(/*! ./helpers/projection/isExclusive */ \"(ssr)/./node_modules/mongoose/lib/helpers/projection/isExclusive.js\");\nconst isInclusive = __webpack_require__(/*! ./helpers/projection/isInclusive */ \"(ssr)/./node_modules/mongoose/lib/helpers/projection/isInclusive.js\");\nconst isPathSelectedInclusive = __webpack_require__(/*! ./helpers/projection/isPathSelectedInclusive */ \"(ssr)/./node_modules/mongoose/lib/helpers/projection/isPathSelectedInclusive.js\");\nconst isSubpath = __webpack_require__(/*! ./helpers/projection/isSubpath */ \"(ssr)/./node_modules/mongoose/lib/helpers/projection/isSubpath.js\");\nconst mpath = __webpack_require__(/*! mpath */ \"(ssr)/./node_modules/mpath/index.js\");\nconst mquery = __webpack_require__(/*! mquery */ \"(ssr)/./node_modules/mquery/lib/mquery.js\");\nconst parseProjection = __webpack_require__(/*! ./helpers/projection/parseProjection */ \"(ssr)/./node_modules/mongoose/lib/helpers/projection/parseProjection.js\");\nconst removeUnusedArrayFilters = __webpack_require__(/*! ./helpers/update/removeUnusedArrayFilters */ \"(ssr)/./node_modules/mongoose/lib/helpers/update/removeUnusedArrayFilters.js\");\nconst sanitizeFilter = __webpack_require__(/*! ./helpers/query/sanitizeFilter */ \"(ssr)/./node_modules/mongoose/lib/helpers/query/sanitizeFilter.js\");\nconst sanitizeProjection = __webpack_require__(/*! ./helpers/query/sanitizeProjection */ \"(ssr)/./node_modules/mongoose/lib/helpers/query/sanitizeProjection.js\");\nconst selectPopulatedFields = __webpack_require__(/*! ./helpers/query/selectPopulatedFields */ \"(ssr)/./node_modules/mongoose/lib/helpers/query/selectPopulatedFields.js\");\nconst setDefaultsOnInsert = __webpack_require__(/*! ./helpers/setDefaultsOnInsert */ \"(ssr)/./node_modules/mongoose/lib/helpers/setDefaultsOnInsert.js\");\nconst specialProperties = __webpack_require__(/*! ./helpers/specialProperties */ \"(ssr)/./node_modules/mongoose/lib/helpers/specialProperties.js\");\nconst updateValidators = __webpack_require__(/*! ./helpers/updateValidators */ \"(ssr)/./node_modules/mongoose/lib/helpers/updateValidators.js\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\nconst queryMiddlewareFunctions = (__webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongoose/lib/constants.js\").queryMiddlewareFunctions);\n\nconst queryOptionMethods = new Set([\n  'allowDiskUse',\n  'batchSize',\n  'collation',\n  'comment',\n  'explain',\n  'hint',\n  'j',\n  'lean',\n  'limit',\n  'maxTimeMS',\n  'populate',\n  'projection',\n  'read',\n  'select',\n  'skip',\n  'slice',\n  'sort',\n  'tailable',\n  'w',\n  'writeConcern',\n  'wtimeout'\n]);\n\n/**\n * Query constructor used for building queries. You do not need\n * to instantiate a `Query` directly. Instead use Model functions like\n * [`Model.find()`](https://mongoosejs.com/docs/api/model.html#Model.find()).\n *\n * #### Example:\n *\n *     const query = MyModel.find(); // `query` is an instance of `Query`\n *     query.setOptions({ lean : true });\n *     query.collection(MyModel.collection);\n *     query.where('age').gte(21).exec(callback);\n *\n *     // You can instantiate a query directly. There is no need to do\n *     // this unless you're an advanced user with a very good reason to.\n *     const query = new mongoose.Query();\n *\n * @param {Object} [options]\n * @param {Object} [model]\n * @param {Object} [conditions]\n * @param {Object} [collection] Mongoose collection\n * @api public\n */\n\nfunction Query(conditions, options, model, collection) {\n  // this stuff is for dealing with custom queries created by #toConstructor\n  if (!this._mongooseOptions) {\n    this._mongooseOptions = {};\n  }\n  options = options || {};\n\n  this._transforms = [];\n  this._hooks = new Kareem();\n  this._executionStack = null;\n\n  // this is the case where we have a CustomQuery, we need to check if we got\n  // options passed in, and if we did, merge them in\n  const keys = Object.keys(options);\n  for (const key of keys) {\n    this._mongooseOptions[key] = options[key];\n  }\n\n  if (collection) {\n    this.mongooseCollection = collection;\n  }\n\n  if (model) {\n    this.model = model;\n    this.schema = model.schema;\n  }\n\n  // this is needed because map reduce returns a model that can be queried, but\n  // all of the queries on said model should be lean\n  if (this.model && this.model._mapreduce) {\n    this.lean();\n  }\n\n  // inherit mquery\n  mquery.call(this, null, options);\n  if (collection) {\n    this.collection(collection);\n  }\n\n  if (conditions) {\n    this.find(conditions);\n  }\n\n  this.options = this.options || {};\n\n  // For gh-6880. mquery still needs to support `fields` by default for old\n  // versions of MongoDB\n  this.$useProjection = true;\n\n  const collation = this &&\n    this.schema &&\n    this.schema.options &&\n    this.schema.options.collation || null;\n  if (collation != null) {\n    this.options.collation = collation;\n  }\n}\n\n/*!\n * inherit mquery\n */\n\nQuery.prototype = new mquery();\nQuery.prototype.constructor = Query;\nQuery.base = mquery.prototype;\n\n/*!\n * Overwrite mquery's `_distinct`, because Mongoose uses that name\n * to store the field to apply distinct on.\n */\n\nObject.defineProperty(Query.prototype, '_distinct', {\n  configurable: true,\n  writable: true,\n  enumerable: true,\n  value: undefined\n});\n\n/**\n * Flag to opt out of using `$geoWithin`.\n *\n * ```javascript\n * mongoose.Query.use$geoWithin = false;\n * ```\n *\n * MongoDB 2.4 deprecated the use of `$within`, replacing it with `$geoWithin`. Mongoose uses `$geoWithin` by default (which is 100% backward compatible with `$within`). If you are running an older version of MongoDB, set this flag to `false` so your `within()` queries continue to work.\n *\n * @see geoWithin https://www.mongodb.com/docs/manual/reference/operator/geoWithin/\n * @default true\n * @property use$geoWithin\n * @memberOf Query\n * @static\n * @api public\n */\n\nQuery.use$geoWithin = mquery.use$geoWithin;\n\n/**\n * Converts this query to a customized, reusable query constructor with all arguments and options retained.\n *\n * #### Example:\n *\n *     // Create a query for adventure movies and read from the primary\n *     // node in the replica-set unless it is down, in which case we'll\n *     // read from a secondary node.\n *     const query = Movie.find({ tags: 'adventure' }).read('primaryPreferred');\n *\n *     // create a custom Query constructor based off these settings\n *     const Adventure = query.toConstructor();\n *\n *     // further narrow down our query results while still using the previous settings\n *     await Adventure().where({ name: /^Life/ }).exec();\n *\n *     // since Adventure is a stand-alone constructor we can also add our own\n *     // helper methods and getters without impacting global queries\n *     Adventure.prototype.startsWith = function (prefix) {\n *       this.where({ name: new RegExp('^' + prefix) })\n *       return this;\n *     }\n *     Object.defineProperty(Adventure.prototype, 'highlyRated', {\n *       get: function () {\n *         this.where({ rating: { $gt: 4.5 }});\n *         return this;\n *       }\n *     })\n *     await Adventure().highlyRated.startsWith('Life').exec();\n *\n * @return {Query} subclass-of-Query\n * @api public\n */\n\nQuery.prototype.toConstructor = function toConstructor() {\n  const model = this.model;\n  const coll = this.mongooseCollection;\n\n  const CustomQuery = function(criteria, options) {\n    if (!(this instanceof CustomQuery)) {\n      return new CustomQuery(criteria, options);\n    }\n    this._mongooseOptions = clone(p._mongooseOptions);\n    Query.call(this, criteria, options || null, model, coll);\n  };\n\n  util.inherits(CustomQuery, model.Query);\n\n  // set inherited defaults\n  const p = CustomQuery.prototype;\n\n  p.options = {};\n\n  // Need to handle `sort()` separately because entries-style `sort()` syntax\n  // `sort([['prop1', 1]])` confuses mquery into losing the outer nested array.\n  // See gh-8159\n  const options = Object.assign({}, this.options);\n  if (options.sort != null) {\n    p.sort(options.sort);\n    delete options.sort;\n  }\n  p.setOptions(options);\n\n  p.op = this.op;\n  p._validateOp();\n  p._conditions = clone(this._conditions);\n  p._fields = clone(this._fields);\n  p._update = clone(this._update, {\n    flattenDecimals: false\n  });\n  p._path = this._path;\n  p._distinct = this._distinct;\n  p._collection = this._collection;\n  p._mongooseOptions = this._mongooseOptions;\n\n  return CustomQuery;\n};\n\n/**\n * Make a copy of this query so you can re-execute it.\n *\n * #### Example:\n *\n *     const q = Book.findOne({ title: 'Casino Royale' });\n *     await q.exec();\n *     await q.exec(); // Throws an error because you can't execute a query twice\n *\n *     await q.clone().exec(); // Works\n *\n * @method clone\n * @return {Query} copy\n * @memberOf Query\n * @instance\n * @api public\n */\n\nQuery.prototype.clone = function() {\n  const model = this.model;\n  const collection = this.mongooseCollection;\n\n  const q = new this.model.Query({}, {}, model, collection);\n\n  // Need to handle `sort()` separately because entries-style `sort()` syntax\n  // `sort([['prop1', 1]])` confuses mquery into losing the outer nested array.\n  // See gh-8159\n  const options = Object.assign({}, this.options);\n  if (options.sort != null) {\n    q.sort(options.sort);\n    delete options.sort;\n  }\n  q.setOptions(options);\n\n  q.op = this.op;\n  q._validateOp();\n  q._conditions = clone(this._conditions);\n  q._fields = clone(this._fields);\n  q._update = clone(this._update, {\n    flattenDecimals: false\n  });\n  q._path = this._path;\n  q._distinct = this._distinct;\n  q._collection = this._collection;\n  q._mongooseOptions = this._mongooseOptions;\n\n  return q;\n};\n\n/**\n * Specifies a javascript function or expression to pass to MongoDBs query system.\n *\n * #### Example:\n *\n *     query.$where('this.comments.length === 10 || this.name.length === 5')\n *\n *     // or\n *\n *     query.$where(function () {\n *       return this.comments.length === 10 || this.name.length === 5;\n *     })\n *\n * #### Note:\n *\n * Only use `$where` when you have a condition that cannot be met using other MongoDB operators like `$lt`.\n * **Be sure to read about all of [its caveats](https://www.mongodb.com/docs/manual/reference/operator/where/) before using.**\n *\n * @see $where https://www.mongodb.com/docs/manual/reference/operator/where/\n * @method $where\n * @param {String|Function} js javascript string or function\n * @return {Query} this\n * @memberOf Query\n * @instance\n * @method $where\n * @api public\n */\n\n/**\n * Specifies a `path` for use with chaining.\n *\n * #### Example:\n *\n *     // instead of writing:\n *     User.find({age: {$gte: 21, $lte: 65}});\n *\n *     // we can instead write:\n *     User.where('age').gte(21).lte(65);\n *\n *     // passing query conditions is permitted\n *     User.find().where({ name: 'vonderful' })\n *\n *     // chaining\n *     User\n *     .where('age').gte(21).lte(65)\n *     .where('name', /^vonderful/i)\n *     .where('friends').slice(10)\n *     .exec()\n *\n * @method where\n * @memberOf Query\n * @instance\n * @param {String|Object} [path]\n * @param {any} [val]\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies a `$slice` projection for an array.\n *\n * #### Example:\n *\n *     query.slice('comments', 5); // Returns the first 5 comments\n *     query.slice('comments', -5); // Returns the last 5 comments\n *     query.slice('comments', [10, 5]); // Returns the first 5 comments after the 10-th\n *     query.where('comments').slice(5); // Returns the first 5 comments\n *     query.where('comments').slice([-10, 5]); // Returns the first 5 comments after the 10-th to last\n *\n * **Note:** If the absolute value of the number of elements to be sliced is greater than the number of elements in the array, all array elements will be returned.\n *\n *      // Given `arr`: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n *      query.slice('arr', 20); // Returns [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n *      query.slice('arr', -20); // Returns [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n *\n * **Note:** If the number of elements to skip is positive and greater than the number of elements in the array, an empty array will be returned.\n *\n *      // Given `arr`: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n *      query.slice('arr', [20, 5]); // Returns []\n *\n * **Note:** If the number of elements to skip is negative and its absolute value is greater than the number of elements in the array, the starting position is the start of the array.\n *\n *      // Given `arr`: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n *      query.slice('arr', [-20, 5]); // Returns [1, 2, 3, 4, 5]\n *\n * @method slice\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number|Array} val number of elements to slice or array with number of elements to skip and number of elements to slice\n * @return {Query} this\n * @see mongodb https://www.mongodb.com/docs/manual/tutorial/query-documents/#projection\n * @see $slice https://www.mongodb.com/docs/manual/reference/projection/slice/#prj._S_slice\n * @api public\n */\n\nQuery.prototype.slice = function() {\n  if (arguments.length === 0) {\n    return this;\n  }\n\n  this._validate('slice');\n\n  let path;\n  let val;\n\n  if (arguments.length === 1) {\n    const arg = arguments[0];\n    if (typeof arg === 'object' && !Array.isArray(arg)) {\n      const keys = Object.keys(arg);\n      const numKeys = keys.length;\n      for (let i = 0; i < numKeys; ++i) {\n        this.slice(keys[i], arg[keys[i]]);\n      }\n      return this;\n    }\n    this._ensurePath('slice');\n    path = this._path;\n    val = arguments[0];\n  } else if (arguments.length === 2) {\n    if ('number' === typeof arguments[0]) {\n      this._ensurePath('slice');\n      path = this._path;\n      val = [arguments[0], arguments[1]];\n    } else {\n      path = arguments[0];\n      val = arguments[1];\n    }\n  } else if (arguments.length === 3) {\n    path = arguments[0];\n    val = [arguments[1], arguments[2]];\n  }\n\n  const p = {};\n  p[path] = { $slice: val };\n  this.select(p);\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nconst validOpsSet = new Set(queryMiddlewareFunctions);\n\nQuery.prototype._validateOp = function() {\n  if (this.op != null && !validOpsSet.has(this.op)) {\n    this.error(new Error('Query has invalid `op`: \"' + this.op + '\"'));\n  }\n};\n\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n *\n * #### Example:\n *\n *     User.where('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @method equals\n * @memberOf Query\n * @instance\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for an `$or` condition.\n *\n * #### Example:\n *\n *     query.or([{ color: 'red' }, { status: 'emergency' }]);\n *\n * @see $or https://www.mongodb.com/docs/manual/reference/operator/or/\n * @method or\n * @memberOf Query\n * @instance\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for a `$nor` condition.\n *\n * #### Example:\n *\n *     query.nor([{ color: 'green' }, { status: 'ok' }]);\n *\n * @see $nor https://www.mongodb.com/docs/manual/reference/operator/nor/\n * @method nor\n * @memberOf Query\n * @instance\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for a `$and` condition.\n *\n * #### Example:\n *\n *     query.and([{ color: 'green' }, { status: 'ok' }])\n *\n * @method and\n * @memberOf Query\n * @instance\n * @see $and https://www.mongodb.com/docs/manual/reference/operator/and/\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies a `$gt` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * #### Example:\n *\n *     Thing.find().where('age').gt(21);\n *\n *     // or\n *     Thing.find().gt('age', 21);\n *\n * @method gt\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @see $gt https://www.mongodb.com/docs/manual/reference/operator/gt/\n * @api public\n */\n\n/**\n * Specifies a `$gte` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method gte\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @see $gte https://www.mongodb.com/docs/manual/reference/operator/gte/\n * @api public\n */\n\n/**\n * Specifies a `$lt` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lt\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @see $lt https://www.mongodb.com/docs/manual/reference/operator/lt/\n * @api public\n */\n\n/**\n * Specifies a `$lte` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lte\n * @see $lte https://www.mongodb.com/docs/manual/reference/operator/lte/\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a `$ne` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $ne https://www.mongodb.com/docs/manual/reference/operator/ne/\n * @method ne\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {any} val\n * @api public\n */\n\n/**\n * Specifies an `$in` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $in https://www.mongodb.com/docs/manual/reference/operator/in/\n * @method in\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Array} val\n * @api public\n */\n\n/**\n * Specifies an `$nin` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $nin https://www.mongodb.com/docs/manual/reference/operator/nin/\n * @method nin\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Array} val\n * @api public\n */\n\n/**\n * Specifies an `$all` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * #### Example:\n *\n *     MyModel.find().where('pets').all(['dog', 'cat', 'ferret']);\n *     // Equivalent:\n *     MyModel.find().all('pets', ['dog', 'cat', 'ferret']);\n *\n * @see $all https://www.mongodb.com/docs/manual/reference/operator/all/\n * @method all\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Array} val\n * @api public\n */\n\n/**\n * Specifies a `$size` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * #### Example:\n *\n *     const docs = await MyModel.where('tags').size(0).exec();\n *     assert(Array.isArray(docs));\n *     console.log('documents with 0 tags', docs);\n *\n * @see $size https://www.mongodb.com/docs/manual/reference/operator/size/\n * @method size\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a `$regex` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $regex https://www.mongodb.com/docs/manual/reference/operator/regex/\n * @method regex\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {String|RegExp} val\n * @api public\n */\n\n/**\n * Specifies a `maxDistance` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $maxDistance https://www.mongodb.com/docs/manual/reference/operator/maxDistance/\n * @method maxDistance\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a `$mod` condition, filters documents for documents whose\n * `path` property is a number that is equal to `remainder` modulo `divisor`.\n *\n * #### Example:\n *\n *     // All find products whose inventory is odd\n *     Product.find().mod('inventory', [2, 1]);\n *     Product.find().where('inventory').mod([2, 1]);\n *     // This syntax is a little strange, but supported.\n *     Product.find().where('inventory').mod(2, 1);\n *\n * @method mod\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Array} val must be of length 2, first element is `divisor`, 2nd element is `remainder`.\n * @return {Query} this\n * @see $mod https://www.mongodb.com/docs/manual/reference/operator/mod/\n * @api public\n */\n\nQuery.prototype.mod = function() {\n  let val;\n  let path;\n\n  if (arguments.length === 1) {\n    this._ensurePath('mod');\n    val = arguments[0];\n    path = this._path;\n  } else if (arguments.length === 2 && !Array.isArray(arguments[1])) {\n    this._ensurePath('mod');\n    val = [arguments[0], arguments[1]];\n    path = this._path;\n  } else if (arguments.length === 3) {\n    val = [arguments[1], arguments[2]];\n    path = arguments[0];\n  } else {\n    val = arguments[1];\n    path = arguments[0];\n  }\n\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$mod = val;\n  return this;\n};\n\n/**\n * Specifies an `$exists` condition\n *\n * #### Example:\n *\n *     // { name: { $exists: true }}\n *     Thing.where('name').exists()\n *     Thing.where('name').exists(true)\n *     Thing.find().exists('name')\n *\n *     // { name: { $exists: false }}\n *     Thing.where('name').exists(false);\n *     Thing.find().exists('name', false);\n *\n * @method exists\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Boolean} val\n * @return {Query} this\n * @see $exists https://www.mongodb.com/docs/manual/reference/operator/exists/\n * @api public\n */\n\n/**\n * Specifies an `$elemMatch` condition\n *\n * #### Example:\n *\n *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\n *\n *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\n *\n *     query.elemMatch('comment', function (elem) {\n *       elem.where('author').equals('autobot');\n *       elem.where('votes').gte(5);\n *     })\n *\n *     query.where('comment').elemMatch(function (elem) {\n *       elem.where({ author: 'autobot' });\n *       elem.where('votes').gte(5);\n *     })\n *\n * @method elemMatch\n * @memberOf Query\n * @instance\n * @param {String|Object|Function} path\n * @param {Object|Function} filter\n * @return {Query} this\n * @see $elemMatch https://www.mongodb.com/docs/manual/reference/operator/elemMatch/\n * @api public\n */\n\n/**\n * Defines a `$within` or `$geoWithin` argument for geo-spatial queries.\n *\n * #### Example:\n *\n *     query.where(path).within().box()\n *     query.where(path).within().circle()\n *     query.where(path).within().geometry()\n *\n *     query.where('loc').within({ center: [50,50], radius: 10, unique: true, spherical: true });\n *     query.where('loc').within({ box: [[40.73, -73.9], [40.7, -73.988]] });\n *     query.where('loc').within({ polygon: [[],[],[],[]] });\n *\n *     query.where('loc').within([], [], []) // polygon\n *     query.where('loc').within([], []) // box\n *     query.where('loc').within({ type: 'LineString', coordinates: [...] }); // geometry\n *\n * **MUST** be used after `where()`.\n *\n * #### Note:\n *\n * As of Mongoose 3.7, `$geoWithin` is always used for queries. To change this behavior, see [Query.use$geoWithin](https://mongoosejs.com/docs/api/query.html#Query.prototype.use$geoWithin).\n *\n * #### Note:\n *\n * In Mongoose 3.7, `within` changed from a getter to a function. If you need the old syntax, use [this](https://github.com/ebensing/mongoose-within).\n *\n * @method within\n * @see $polygon https://www.mongodb.com/docs/manual/reference/operator/polygon/\n * @see $box https://www.mongodb.com/docs/manual/reference/operator/box/\n * @see $geometry https://www.mongodb.com/docs/manual/reference/operator/geometry/\n * @see $center https://www.mongodb.com/docs/manual/reference/operator/center/\n * @see $centerSphere https://www.mongodb.com/docs/manual/reference/operator/centerSphere/\n * @memberOf Query\n * @instance\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies the maximum number of documents the query will return.\n *\n * #### Example:\n *\n *     query.limit(20);\n *\n * #### Note:\n *\n * Cannot be used with `distinct()`\n *\n * @method limit\n * @memberOf Query\n * @instance\n * @param {Number} val\n * @api public\n */\n\nQuery.prototype.limit = function limit(v) {\n  this._validate('limit');\n\n  if (typeof v === 'string') {\n    try {\n      v = castNumber(v);\n    } catch (err) {\n      throw new CastError('Number', v, 'limit');\n    }\n  }\n\n  this.options.limit = v;\n  return this;\n};\n\n/**\n * Specifies the number of documents to skip.\n *\n * #### Example:\n *\n *     query.skip(100).limit(20);\n *\n * #### Note:\n *\n * Cannot be used with `distinct()`\n *\n * @method skip\n * @memberOf Query\n * @instance\n * @param {Number} val\n * @see cursor.skip https://www.mongodb.com/docs/manual/reference/method/cursor.skip/\n * @api public\n */\n\nQuery.prototype.skip = function skip(v) {\n  this._validate('skip');\n\n  if (typeof v === 'string') {\n    try {\n      v = castNumber(v);\n    } catch (err) {\n      throw new CastError('Number', v, 'skip');\n    }\n  }\n\n  this.options.skip = v;\n  return this;\n};\n\n/**\n * Specifies the batchSize option.\n *\n * #### Example:\n *\n *     query.batchSize(100)\n *\n * #### Note:\n *\n * Cannot be used with `distinct()`\n *\n * @method batchSize\n * @memberOf Query\n * @instance\n * @param {Number} val\n * @see batchSize https://www.mongodb.com/docs/manual/reference/method/cursor.batchSize/\n * @api public\n */\n\n/**\n * Specifies the `comment` option.\n *\n * #### Example:\n *\n *     query.comment('login query')\n *\n * #### Note:\n *\n * Cannot be used with `distinct()`\n *\n * @method comment\n * @memberOf Query\n * @instance\n * @param {String} val\n * @see comment https://www.mongodb.com/docs/manual/reference/operator/comment/\n * @api public\n */\n\n/**\n * Sets query hints.\n *\n * #### Example:\n *\n *     query.hint({ indexA: 1, indexB: -1 });\n *\n * #### Note:\n *\n * Cannot be used with `distinct()`\n *\n * @method hint\n * @memberOf Query\n * @instance\n * @param {Object} val a hint object\n * @return {Query} this\n * @see $hint https://www.mongodb.com/docs/manual/reference/operator/hint/\n * @api public\n */\n\n/**\n * Get/set the current projection (AKA fields). Pass `null` to remove the\n * current projection.\n *\n * Unlike `projection()`, the `select()` function modifies the current\n * projection in place. This function overwrites the existing projection.\n *\n * #### Example:\n *\n *     const q = Model.find();\n *     q.projection(); // null\n *\n *     q.select('a b');\n *     q.projection(); // { a: 1, b: 1 }\n *\n *     q.projection({ c: 1 });\n *     q.projection(); // { c: 1 }\n *\n *     q.projection(null);\n *     q.projection(); // null\n *\n *\n * @method projection\n * @memberOf Query\n * @instance\n * @param {Object|null} arg\n * @return {Object} the current projection\n * @api public\n */\n\nQuery.prototype.projection = function(arg) {\n  if (arguments.length === 0) {\n    return this._fields;\n  }\n\n  this._fields = {};\n  this._userProvidedFields = {};\n  this.select(arg);\n  return this._fields;\n};\n\n/**\n * Specifies which document fields to include or exclude (also known as the query \"projection\")\n *\n * When using string syntax, prefixing a path with `-` will flag that path as excluded. When a path does not have the `-` prefix, it is included. Lastly, if a path is prefixed with `+`, it forces inclusion of the path, which is useful for paths excluded at the [schema level](https://mongoosejs.com/docs/api/schematype.html#SchemaType.prototype.select()).\n *\n * A projection _must_ be either inclusive or exclusive. In other words, you must\n * either list the fields to include (which excludes all others), or list the fields\n * to exclude (which implies all other fields are included). The [`_id` field is the only exception because MongoDB includes it by default](https://www.mongodb.com/docs/manual/tutorial/project-fields-from-query-results/#suppress-id-field).\n *\n * #### Example:\n *\n *     // include a and b, exclude other fields\n *     query.select('a b');\n *     // Equivalent syntaxes:\n *     query.select(['a', 'b']);\n *     query.select({ a: 1, b: 1 });\n *\n *     // exclude c and d, include other fields\n *     query.select('-c -d');\n *\n *     // Use `+` to override schema-level `select: false` without making the\n *     // projection inclusive.\n *     const schema = new Schema({\n *       foo: { type: String, select: false },\n *       bar: String\n *     });\n *     // ...\n *     query.select('+foo'); // Override foo's `select: false` without excluding `bar`\n *\n *     // or you may use object notation, useful when\n *     // you have keys already prefixed with a \"-\"\n *     query.select({ a: 1, b: 1 });\n *     query.select({ c: 0, d: 0 });\n *\n *     Additional calls to select can override the previous selection:\n *     query.select({ a: 1, b: 1 }).select({ b: 0 }); // selection is now { a: 1 }\n *     query.select({ a: 0, b: 0 }).select({ b: 1 }); // selection is now { a: 0 }\n *\n *\n * @method select\n * @memberOf Query\n * @instance\n * @param {Object|String|String[]} arg\n * @return {Query} this\n * @see SchemaType https://mongoosejs.com/docs/api/schematype.html\n * @api public\n */\n\nQuery.prototype.select = function select() {\n  let arg = arguments[0];\n  if (!arg) return this;\n\n  if (arguments.length !== 1) {\n    throw new Error('Invalid select: select only takes 1 argument');\n  }\n\n  this._validate('select');\n\n  const fields = this._fields || (this._fields = {});\n  const userProvidedFields = this._userProvidedFields || (this._userProvidedFields = {});\n  let sanitizeProjection = undefined;\n  if (this.model != null && utils.hasUserDefinedProperty(this.model.db.options, 'sanitizeProjection')) {\n    sanitizeProjection = this.model.db.options.sanitizeProjection;\n  } else if (this.model != null && utils.hasUserDefinedProperty(this.model.base.options, 'sanitizeProjection')) {\n    sanitizeProjection = this.model.base.options.sanitizeProjection;\n  } else {\n    sanitizeProjection = this._mongooseOptions.sanitizeProjection;\n  }\n\n  function sanitizeValue(value) {\n    return typeof value === 'string' && sanitizeProjection ? value = 1 : value;\n  }\n  arg = parseProjection(arg, true); // we want to keep the minus and pluses, so add boolean arg.\n  if (utils.isObject(arg)) {\n    if (this.selectedInclusively()) {\n      Object.entries(arg).forEach(([key, value]) => {\n        if (value) {\n          // Add the field to the projection\n          if (fields['-' + key] != null) {\n            delete fields['-' + key];\n          }\n          fields[key] = userProvidedFields[key] = sanitizeValue(value);\n        } else {\n          // Remove the field from the projection\n          Object.keys(userProvidedFields).forEach(field => {\n            if (isSubpath(key, field)) {\n              delete fields[field];\n              delete userProvidedFields[field];\n            }\n          });\n        }\n      });\n    } else if (this.selectedExclusively()) {\n      Object.entries(arg).forEach(([key, value]) => {\n        if (!value) {\n          // Add the field to the projection\n          if (fields['+' + key] != null) {\n            delete fields['+' + key];\n          }\n          fields[key] = userProvidedFields[key] = sanitizeValue(value);\n        } else {\n          // Remove the field from the projection\n          Object.keys(userProvidedFields).forEach(field => {\n            if (isSubpath(key, field)) {\n              delete fields[field];\n              delete userProvidedFields[field];\n            }\n          });\n        }\n      });\n    } else {\n      const keys = Object.keys(arg);\n      for (let i = 0; i < keys.length; ++i) {\n        const value = arg[keys[i]];\n        const key = keys[i];\n        fields[key] = sanitizeValue(value);\n        userProvidedFields[key] = sanitizeValue(value);\n      }\n    }\n\n    return this;\n  }\n\n  throw new TypeError('Invalid select() argument. Must be string or object.');\n};\n\n/**\n * Determines the MongoDB nodes from which to read.\n *\n * #### Preferences:\n *\n * ```\n * primary - (default) Read from primary only. Operations will produce an error if primary is unavailable. Cannot be combined with tags.\n * secondary            Read from secondary if available, otherwise error.\n * primaryPreferred     Read from primary if available, otherwise a secondary.\n * secondaryPreferred   Read from a secondary if available, otherwise read from the primary.\n * nearest              All operations read from among the nearest candidates, but unlike other modes, this option will include both the primary and all secondaries in the random selection.\n * ```\n *\n * Aliases\n *\n * ```\n * p   primary\n * pp  primaryPreferred\n * s   secondary\n * sp  secondaryPreferred\n * n   nearest\n * ```\n *\n * #### Example:\n *\n *     new Query().read('primary')\n *     new Query().read('p')  // same as primary\n *\n *     new Query().read('primaryPreferred')\n *     new Query().read('pp') // same as primaryPreferred\n *\n *     new Query().read('secondary')\n *     new Query().read('s')  // same as secondary\n *\n *     new Query().read('secondaryPreferred')\n *     new Query().read('sp') // same as secondaryPreferred\n *\n *     new Query().read('nearest')\n *     new Query().read('n')  // same as nearest\n *\n *     // read from secondaries with matching tags\n *     new Query().read('s', [{ dc:'sf', s: 1 },{ dc:'ma', s: 2 }])\n *\n * Read more about how to use read preferences [here](https://www.mongodb.com/docs/manual/applications/replication/#read-preference).\n *\n * @method read\n * @memberOf Query\n * @instance\n * @param {String} mode one of the listed preference options or aliases\n * @param {Array} [tags] optional tags for this query\n * @see mongodb https://www.mongodb.com/docs/manual/applications/replication/#read-preference\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.read = function read(mode, tags) {\n  if (typeof mode === 'string') {\n    mode = handleReadPreferenceAliases(mode);\n    this.options.readPreference = { mode, tags };\n  } else {\n    this.options.readPreference = mode;\n  }\n  return this;\n};\n\n/**\n * Overwrite default `.toString` to make logging more useful\n *\n * @memberOf Query\n * @instance\n * @method toString\n * @api private\n */\n\nQuery.prototype.toString = function toString() {\n  if (this.op === 'count' ||\n      this.op === 'countDocuments' ||\n      this.op === 'find' ||\n      this.op === 'findOne' ||\n      this.op === 'deleteMany' ||\n      this.op === 'deleteOne' ||\n      this.op === 'findOneAndDelete' ||\n      this.op === 'remove') {\n    return `${this.model.modelName}.${this.op}(${util.inspect(this._conditions)})`;\n  }\n  if (this.op === 'distinct') {\n    return `${this.model.modelName}.distinct('${this._distinct}', ${util.inspect(this._conditions)})`;\n  }\n  if (this.op === 'findOneAndReplace' ||\n      this.op === 'findOneAndUpdate' ||\n      this.op === 'replaceOne' ||\n      this.op === 'update' ||\n      this.op === 'updateMany' ||\n      this.op === 'updateOne') {\n    return `${this.model.modelName}.${this.op}(${util.inspect(this._conditions)}, ${util.inspect(this._update)})`;\n  }\n\n  // 'estimatedDocumentCount' or any others\n  return `${this.model.modelName}.${this.op}()`;\n};\n\n/**\n * Sets the [MongoDB session](https://www.mongodb.com/docs/manual/reference/server-sessions/)\n * associated with this query. Sessions are how you mark a query as part of a\n * [transaction](https://mongoosejs.com/docs/transactions.html).\n *\n * Calling `session(null)` removes the session from this query.\n *\n * #### Example:\n *\n *     const s = await mongoose.startSession();\n *     await mongoose.model('Person').findOne({ name: 'Axl Rose' }).session(s);\n *\n * @method session\n * @memberOf Query\n * @instance\n * @param {ClientSession} [session] from `await conn.startSession()`\n * @see Connection.prototype.startSession() https://mongoosejs.com/docs/api/connection.html#Connection.prototype.startSession()\n * @see mongoose.startSession() https://mongoosejs.com/docs/api/mongoose.html#Mongoose.prototype.startSession()\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.session = function session(v) {\n  if (v == null) {\n    delete this.options.session;\n  }\n  this.options.session = v;\n  return this;\n};\n\n/**\n * Sets the 3 write concern parameters for this query:\n *\n * - `w`: Sets the specified number of `mongod` servers, or tag set of `mongod` servers, that must acknowledge this write before this write is considered successful.\n * - `j`: Boolean, set to `true` to request acknowledgement that this operation has been persisted to MongoDB's on-disk journal.\n * - `wtimeout`: If [`w > 1`](https://mongoosejs.com/docs/api/query.html#Query.prototype.w()), the maximum amount of time to wait for this write to propagate through the replica set before this operation fails. The default is `0`, which means no timeout.\n *\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndReplace()`\n * - `findOneAndUpdate()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the schema's [`writeConcern` option](https://mongoosejs.com/docs/guide.html#writeConcern)\n *\n * #### Example:\n *\n *     // The 'majority' option means the `deleteOne()` promise won't resolve\n *     // until the `deleteOne()` has propagated to the majority of the replica set\n *     await mongoose.model('Person').\n *       deleteOne({ name: 'Ned Stark' }).\n *       writeConcern({ w: 'majority' });\n *\n * @method writeConcern\n * @memberOf Query\n * @instance\n * @param {Object} writeConcern the write concern value to set\n * @see WriteConcernSettings https://mongodb.github.io/node-mongodb-native/4.9/interfaces/WriteConcernSettings.html\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.writeConcern = function writeConcern(val) {\n  if (val == null) {\n    delete this.options.writeConcern;\n    return this;\n  }\n  this.options.writeConcern = val;\n  return this;\n};\n\n/**\n * Sets the specified number of `mongod` servers, or tag set of `mongod` servers,\n * that must acknowledge this write before this write is considered successful.\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndReplace()`\n * - `findOneAndUpdate()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the schema's [`writeConcern.w` option](https://mongoosejs.com/docs/guide.html#writeConcern)\n *\n * #### Example:\n *\n *     // The 'majority' option means the `deleteOne()` promise won't resolve\n *     // until the `deleteOne()` has propagated to the majority of the replica set\n *     await mongoose.model('Person').\n *       deleteOne({ name: 'Ned Stark' }).\n *       w('majority');\n *\n * @method w\n * @memberOf Query\n * @instance\n * @param {String|number} val 0 for fire-and-forget, 1 for acknowledged by one server, 'majority' for majority of the replica set, or [any of the more advanced options](https://www.mongodb.com/docs/manual/reference/write-concern/#w-option).\n * @see mongodb https://www.mongodb.com/docs/manual/reference/write-concern/#w-option\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.w = function w(val) {\n  if (val == null) {\n    delete this.options.w;\n  }\n  if (this.options.writeConcern != null) {\n    this.options.writeConcern.w = val;\n  } else {\n    this.options.w = val;\n  }\n  return this;\n};\n\n/**\n * Requests acknowledgement that this operation has been persisted to MongoDB's\n * on-disk journal.\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndReplace()`\n * - `findOneAndUpdate()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the schema's [`writeConcern.j` option](https://mongoosejs.com/docs/guide.html#writeConcern)\n *\n * #### Example:\n *\n *     await mongoose.model('Person').deleteOne({ name: 'Ned Stark' }).j(true);\n *\n * @method j\n * @memberOf Query\n * @instance\n * @param {boolean} val\n * @see mongodb https://www.mongodb.com/docs/manual/reference/write-concern/#j-option\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.j = function j(val) {\n  if (val == null) {\n    delete this.options.j;\n  }\n  if (this.options.writeConcern != null) {\n    this.options.writeConcern.j = val;\n  } else {\n    this.options.j = val;\n  }\n  return this;\n};\n\n/**\n * If [`w > 1`](https://mongoosejs.com/docs/api/query.html#Query.prototype.w()), the maximum amount of time to\n * wait for this write to propagate through the replica set before this\n * operation fails. The default is `0`, which means no timeout.\n *\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndReplace()`\n * - `findOneAndUpdate()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the schema's [`writeConcern.wtimeout` option](https://mongoosejs.com/docs/guide.html#writeConcern)\n *\n * #### Example:\n *\n *     // The `deleteOne()` promise won't resolve until this `deleteOne()` has\n *     // propagated to at least `w = 2` members of the replica set. If it takes\n *     // longer than 1 second, this `deleteOne()` will fail.\n *     await mongoose.model('Person').\n *       deleteOne({ name: 'Ned Stark' }).\n *       w(2).\n *       wtimeout(1000);\n *\n * @method wtimeout\n * @memberOf Query\n * @instance\n * @param {number} ms number of milliseconds to wait\n * @see mongodb https://www.mongodb.com/docs/manual/reference/write-concern/#wtimeout\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.wtimeout = function wtimeout(ms) {\n  if (ms == null) {\n    delete this.options.wtimeout;\n  }\n  if (this.options.writeConcern != null) {\n    this.options.writeConcern.wtimeout = ms;\n  } else {\n    this.options.wtimeout = ms;\n  }\n  return this;\n};\n\n/**\n * Sets the readConcern option for the query.\n *\n * #### Example:\n *\n *     new Query().readConcern('local')\n *     new Query().readConcern('l')  // same as local\n *\n *     new Query().readConcern('available')\n *     new Query().readConcern('a')  // same as available\n *\n *     new Query().readConcern('majority')\n *     new Query().readConcern('m')  // same as majority\n *\n *     new Query().readConcern('linearizable')\n *     new Query().readConcern('lz') // same as linearizable\n *\n *     new Query().readConcern('snapshot')\n *     new Query().readConcern('s')  // same as snapshot\n *\n *\n * #### Read Concern Level:\n *\n * ```\n * local         MongoDB 3.2+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\n * available     MongoDB 3.6+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\n * majority      MongoDB 3.2+ The query returns the data that has been acknowledged by a majority of the replica set members. The documents returned by the read operation are durable, even in the event of failure.\n * linearizable  MongoDB 3.4+ The query returns data that reflects all successful majority-acknowledged writes that completed prior to the start of the read operation. The query may wait for concurrently executing writes to propagate to a majority of replica set members before returning results.\n * snapshot      MongoDB 4.0+ Only available for operations within multi-document transactions. Upon transaction commit with write concern \"majority\", the transaction operations are guaranteed to have read from a snapshot of majority-committed data.\n * ```\n *\n * Aliases\n *\n * ```\n * l   local\n * a   available\n * m   majority\n * lz  linearizable\n * s   snapshot\n * ```\n *\n * Read more about how to use read concern [here](https://www.mongodb.com/docs/manual/reference/read-concern/).\n *\n * @memberOf Query\n * @method readConcern\n * @param {String} level one of the listed read concern level or their aliases\n * @see mongodb https://www.mongodb.com/docs/manual/reference/read-concern/\n * @return {Query} this\n * @api public\n */\n\n/**\n * Gets query options.\n *\n * #### Example:\n *\n *     const query = new Query();\n *     query.limit(10);\n *     query.setOptions({ maxTimeMS: 1000 });\n *     query.getOptions(); // { limit: 10, maxTimeMS: 1000 }\n *\n * @return {Object} the options\n * @api public\n */\n\nQuery.prototype.getOptions = function() {\n  return this.options;\n};\n\n/**\n * Sets query options. Some options only make sense for certain operations.\n *\n * #### Options:\n *\n * The following options are only for `find()`:\n *\n * - [tailable](https://www.mongodb.com/docs/manual/core/tailable-cursors/)\n * - [limit](https://www.mongodb.com/docs/manual/reference/method/cursor.limit/)\n * - [skip](https://www.mongodb.com/docs/manual/reference/method/cursor.skip/)\n * - [allowDiskUse](https://www.mongodb.com/docs/manual/reference/method/cursor.allowDiskUse/)\n * - [batchSize](https://www.mongodb.com/docs/manual/reference/method/cursor.batchSize/)\n * - [readPreference](https://www.mongodb.com/docs/manual/applications/replication/#read-preference)\n * - [hint](https://www.mongodb.com/docs/manual/reference/method/cursor.hint/)\n * - [comment](https://www.mongodb.com/docs/manual/reference/method/cursor.comment/)\n *\n * The following options are only for write operations: `updateOne()`, `updateMany()`, `replaceOne()`, `findOneAndUpdate()`, and `findByIdAndUpdate()`:\n *\n * - [upsert](https://www.mongodb.com/docs/manual/reference/method/db.collection.update/)\n * - [writeConcern](https://www.mongodb.com/docs/manual/reference/method/db.collection.update/)\n * - [timestamps](https://mongoosejs.com/docs/guide.html#timestamps): If `timestamps` is set in the schema, set this option to `false` to skip timestamps for that particular update. Has no effect if `timestamps` is not enabled in the schema options.\n * - overwriteDiscriminatorKey: allow setting the discriminator key in the update. Will use the correct discriminator schema if the update changes the discriminator key.\n *\n * The following options are only for `find()`, `findOne()`, `findById()`, `findOneAndUpdate()`, `findOneAndReplace()`, `findOneAndDelete()`, and `findByIdAndUpdate()`:\n *\n * - [lean](https://mongoosejs.com/docs/api/query.html#Query.prototype.lean())\n * - [populate](https://mongoosejs.com/docs/populate.html)\n * - [projection](https://mongoosejs.com/docs/api/query.html#Query.prototype.projection())\n * - sanitizeProjection\n * - useBigInt64\n *\n * The following options are only for all operations **except** `updateOne()`, `updateMany()`, `deleteOne()`, and `deleteMany()`:\n *\n * - [maxTimeMS](https://www.mongodb.com/docs/manual/reference/operator/meta/maxTimeMS/)\n *\n * The following options are for `find()`, `findOne()`, `findOneAndUpdate()`, `findOneAndDelete()`, `updateOne()`, and `deleteOne()`:\n *\n * - [sort](https://www.mongodb.com/docs/manual/reference/method/cursor.sort/)\n *\n * The following options are for `findOneAndUpdate()` and `findOneAndDelete()`\n *\n * - includeResultMetadata\n *\n * The following options are for all operations:\n *\n * - [strict](https://mongoosejs.com/docs/guide.html#strict)\n * - [collation](https://www.mongodb.com/docs/manual/reference/collation/)\n * - [session](https://www.mongodb.com/docs/manual/reference/server-sessions/)\n * - [explain](https://www.mongodb.com/docs/manual/reference/method/cursor.explain/)\n *\n * @param {Object} options\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.setOptions = function(options, overwrite) {\n  // overwrite is only for internal use\n  if (overwrite) {\n    // ensure that _mongooseOptions & options are two different objects\n    this._mongooseOptions = (options && clone(options)) || {};\n    this.options = options || {};\n\n    if ('populate' in options) {\n      this.populate(this._mongooseOptions);\n    }\n    return this;\n  }\n  if (options == null) {\n    return this;\n  }\n  if (typeof options !== 'object') {\n    throw new Error('Options must be an object, got \"' + options + '\"');\n  }\n\n  options = Object.assign({}, options);\n\n  if (Array.isArray(options.populate)) {\n    const populate = options.populate;\n    delete options.populate;\n    const _numPopulate = populate.length;\n    for (let i = 0; i < _numPopulate; ++i) {\n      this.populate(populate[i]);\n    }\n  }\n\n  if ('setDefaultsOnInsert' in options) {\n    this._mongooseOptions.setDefaultsOnInsert = options.setDefaultsOnInsert;\n    delete options.setDefaultsOnInsert;\n  }\n  if ('overwriteDiscriminatorKey' in options) {\n    this._mongooseOptions.overwriteDiscriminatorKey = options.overwriteDiscriminatorKey;\n    delete options.overwriteDiscriminatorKey;\n  }\n  if ('sanitizeProjection' in options) {\n    if (options.sanitizeProjection && !this._mongooseOptions.sanitizeProjection) {\n      sanitizeProjection(this._fields);\n    }\n\n    this._mongooseOptions.sanitizeProjection = options.sanitizeProjection;\n    delete options.sanitizeProjection;\n  }\n  if ('sanitizeFilter' in options) {\n    this._mongooseOptions.sanitizeFilter = options.sanitizeFilter;\n    delete options.sanitizeFilter;\n  }\n  if ('timestamps' in options) {\n    this._mongooseOptions.timestamps = options.timestamps;\n    delete options.timestamps;\n  }\n  if ('defaults' in options) {\n    this._mongooseOptions.defaults = options.defaults;\n    // deleting options.defaults will cause 7287 to fail\n  }\n  if ('translateAliases' in options) {\n    this._mongooseOptions.translateAliases = options.translateAliases;\n    delete options.translateAliases;\n  }\n\n  if (options.lean == null && this.schema && 'lean' in this.schema.options) {\n    this._mongooseOptions.lean = this.schema.options.lean;\n  }\n\n  if (typeof options.limit === 'string') {\n    try {\n      options.limit = castNumber(options.limit);\n    } catch (err) {\n      throw new CastError('Number', options.limit, 'limit');\n    }\n  }\n  if (typeof options.skip === 'string') {\n    try {\n      options.skip = castNumber(options.skip);\n    } catch (err) {\n      throw new CastError('Number', options.skip, 'skip');\n    }\n  }\n\n  // set arbitrary options\n  for (const key of Object.keys(options)) {\n    if (queryOptionMethods.has(key)) {\n      const args = Array.isArray(options[key]) ?\n        options[key] :\n        [options[key]];\n      this[key].apply(this, args);\n    } else {\n      this.options[key] = options[key];\n    }\n  }\n\n  return this;\n};\n\n/**\n * Sets the [`explain` option](https://www.mongodb.com/docs/manual/reference/method/cursor.explain/),\n * which makes this query return detailed execution stats instead of the actual\n * query result. This method is useful for determining what index your queries\n * use.\n *\n * Calling `query.explain(v)` is equivalent to `query.setOptions({ explain: v })`\n *\n * #### Example:\n *\n *     const query = new Query();\n *     const res = await query.find({ a: 1 }).explain('queryPlanner');\n *     console.log(res);\n *\n * @param {String} [verbose] The verbosity mode. Either 'queryPlanner', 'executionStats', or 'allPlansExecution'. The default is 'queryPlanner'\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.explain = function explain(verbose) {\n  if (arguments.length === 0) {\n    this.options.explain = true;\n  } else if (verbose === false) {\n    delete this.options.explain;\n  } else {\n    this.options.explain = verbose;\n  }\n  return this;\n};\n\n/**\n * Sets the [`allowDiskUse` option](https://www.mongodb.com/docs/manual/reference/method/cursor.allowDiskUse/),\n * which allows the MongoDB server to use more than 100 MB for this query's `sort()`. This option can\n * let you work around `QueryExceededMemoryLimitNoDiskUseAllowed` errors from the MongoDB server.\n *\n * Note that this option requires MongoDB server >= 4.4. Setting this option is a no-op for MongoDB 4.2\n * and earlier.\n *\n * Calling `query.allowDiskUse(v)` is equivalent to `query.setOptions({ allowDiskUse: v })`\n *\n * #### Example:\n *\n *     await query.find().sort({ name: 1 }).allowDiskUse(true);\n *     // Equivalent:\n *     await query.find().sort({ name: 1 }).allowDiskUse();\n *\n * @param {Boolean} [v] Enable/disable `allowDiskUse`. If called with 0 arguments, sets `allowDiskUse: true`\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.allowDiskUse = function(v) {\n  if (arguments.length === 0) {\n    this.options.allowDiskUse = true;\n  } else if (v === false) {\n    delete this.options.allowDiskUse;\n  } else {\n    this.options.allowDiskUse = v;\n  }\n  return this;\n};\n\n/**\n * Sets the [maxTimeMS](https://www.mongodb.com/docs/manual/reference/method/cursor.maxTimeMS/)\n * option. This will tell the MongoDB server to abort if the query or write op\n * has been running for more than `ms` milliseconds.\n *\n * Calling `query.maxTimeMS(v)` is equivalent to `query.setOptions({ maxTimeMS: v })`\n *\n * #### Example:\n *\n *     const query = new Query();\n *     // Throws an error 'operation exceeded time limit' as long as there's\n *     // >= 1 doc in the queried collection\n *     const res = await query.find({ $where: 'sleep(1000) || true' }).maxTimeMS(100);\n *\n * @param {Number} [ms] The number of milliseconds\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.maxTimeMS = function(ms) {\n  this.options.maxTimeMS = ms;\n  return this;\n};\n\n/**\n * Returns the current query filter (also known as conditions) as a [POJO](https://masteringjs.io/tutorials/fundamentals/pojo).\n *\n * #### Example:\n *\n *     const query = new Query();\n *     query.find({ a: 1 }).where('b').gt(2);\n *     query.getFilter(); // { a: 1, b: { $gt: 2 } }\n *\n * @return {Object} current query filter\n * @api public\n */\n\nQuery.prototype.getFilter = function() {\n  return this._conditions;\n};\n\n/**\n * Returns the current query filter. Equivalent to `getFilter()`.\n *\n * You should use `getFilter()` instead of `getQuery()` where possible. `getQuery()`\n * will likely be deprecated in a future release.\n *\n * #### Example:\n *\n *     const query = new Query();\n *     query.find({ a: 1 }).where('b').gt(2);\n *     query.getQuery(); // { a: 1, b: { $gt: 2 } }\n *\n * @return {Object} current query filter\n * @api public\n */\n\nQuery.prototype.getQuery = function() {\n  return this._conditions;\n};\n\n/**\n * Sets the query conditions to the provided JSON object.\n *\n * #### Example:\n *\n *     const query = new Query();\n *     query.find({ a: 1 })\n *     query.setQuery({ a: 2 });\n *     query.getQuery(); // { a: 2 }\n *\n * @param {Object} new query conditions\n * @return {undefined}\n * @api public\n */\n\nQuery.prototype.setQuery = function(val) {\n  this._conditions = val;\n};\n\n/**\n * Returns the current update operations as a JSON object.\n *\n * #### Example:\n *\n *     const query = new Query();\n *     query.updateOne({}, { $set: { a: 5 } });\n *     query.getUpdate(); // { $set: { a: 5 } }\n *\n * @return {Object} current update operations\n * @api public\n */\n\nQuery.prototype.getUpdate = function() {\n  return this._update;\n};\n\n/**\n * Sets the current update operation to new value.\n *\n * #### Example:\n *\n *     const query = new Query();\n *     query.updateOne({}, { $set: { a: 5 } });\n *     query.setUpdate({ $set: { b: 6 } });\n *     query.getUpdate(); // { $set: { b: 6 } }\n *\n * @param {Object} new update operation\n * @return {undefined}\n * @api public\n */\n\nQuery.prototype.setUpdate = function(val) {\n  this._update = val;\n};\n\n/**\n * Returns fields selection for this query.\n *\n * @method _fieldsForExec\n * @return {Object}\n * @api private\n * @memberOf Query\n */\n\nQuery.prototype._fieldsForExec = function() {\n  if (this._fields == null) {\n    return null;\n  }\n  if (Object.keys(this._fields).length === 0) {\n    return null;\n  }\n  return clone(this._fields);\n};\n\n\n/**\n * Return an update document with corrected `$set` operations.\n *\n * @method _updateForExec\n * @return {Object}\n * @api private\n * @memberOf Query\n */\n\nQuery.prototype._updateForExec = function() {\n  const update = clone(this._update, {\n    transform: false,\n    depopulate: true\n  });\n  const ops = Object.keys(update);\n  let i = ops.length;\n  const ret = {};\n\n  while (i--) {\n    const op = ops[i];\n\n    if ('$' !== op[0]) {\n      // fix up $set sugar\n      if (!ret.$set) {\n        if (update.$set) {\n          ret.$set = update.$set;\n        } else {\n          ret.$set = {};\n        }\n      }\n      ret.$set[op] = update[op];\n      ops.splice(i, 1);\n      if (!~ops.indexOf('$set')) ops.push('$set');\n    } else if ('$set' === op) {\n      if (!ret.$set) {\n        ret[op] = update[op];\n      }\n    } else {\n      ret[op] = update[op];\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Makes sure _path is set.\n *\n * This method is inherited by `mquery`\n *\n * @method _ensurePath\n * @param {String} method\n * @api private\n * @memberOf Query\n */\n\n/**\n * Determines if `conds` can be merged using `mquery().merge()`\n *\n * @method canMerge\n * @memberOf Query\n * @instance\n * @param {Object} conds\n * @return {Boolean}\n * @api private\n */\n\n/**\n * Returns default options for this query.\n *\n * @param {Model} model\n * @api private\n */\n\nQuery.prototype._optionsForExec = function(model) {\n  const options = clone(this.options);\n  delete options.populate;\n  model = model || this.model;\n\n  if (!model) {\n    return options;\n  }\n  // Apply schema-level `writeConcern` option\n  applyWriteConcern(model.schema, options);\n\n  const readPreference = model &&\n  model.schema &&\n  model.schema.options &&\n  model.schema.options.read;\n  if (!('readPreference' in options) && readPreference) {\n    options.readPreference = readPreference;\n  }\n\n  if (options.upsert !== void 0) {\n    options.upsert = !!options.upsert;\n  }\n  if (options.writeConcern) {\n    if (options.j) {\n      options.writeConcern.j = options.j;\n      delete options.j;\n    }\n    if (options.w) {\n      options.writeConcern.w = options.w;\n      delete options.w;\n    }\n    if (options.wtimeout) {\n      options.writeConcern.wtimeout = options.wtimeout;\n      delete options.wtimeout;\n    }\n  }\n\n  this._applyPaths();\n  if (this._fields != null) {\n    this._fields = this._castFields(this._fields);\n    const projection = this._fieldsForExec();\n    if (projection != null) {\n      options.projection = projection;\n    }\n  }\n\n  return options;\n};\n\n/**\n * Sets the lean option.\n *\n * Documents returned from queries with the `lean` option enabled are plain\n * javascript objects, not [Mongoose Documents](https://mongoosejs.com/docs/api/document.html). They have no\n * `save` method, getters/setters, virtuals, or other Mongoose features.\n *\n * #### Example:\n *\n *     new Query().lean() // true\n *     new Query().lean(true)\n *     new Query().lean(false)\n *\n *     const docs = await Model.find().lean();\n *     docs[0] instanceof mongoose.Document; // false\n *\n * [Lean is great for high-performance, read-only cases](https://mongoosejs.com/docs/tutorials/lean.html),\n * especially when combined\n * with [cursors](https://mongoosejs.com/docs/queries.html#streaming).\n *\n * If you need virtuals, getters/setters, or defaults with `lean()`, you need\n * to use a plugin. See:\n *\n * - [mongoose-lean-virtuals](https://plugins.mongoosejs.io/plugins/lean-virtuals)\n * - [mongoose-lean-getters](https://plugins.mongoosejs.io/plugins/lean-getters)\n * - [mongoose-lean-defaults](https://www.npmjs.com/package/mongoose-lean-defaults)\n *\n * @param {Boolean|Object} bool defaults to true\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.lean = function(v) {\n  this._mongooseOptions.lean = arguments.length ? v : true;\n  return this;\n};\n\n/**\n * Adds a `$set` to this query's update without changing the operation.\n * This is useful for query middleware so you can add an update regardless\n * of whether you use `updateOne()`, `updateMany()`, `findOneAndUpdate()`, etc.\n *\n * #### Example:\n *\n *     // Updates `{ $set: { updatedAt: new Date() } }`\n *     new Query().updateOne({}, {}).set('updatedAt', new Date());\n *     new Query().updateMany({}, {}).set({ updatedAt: new Date() });\n *\n * @param {String|Object} path path or object of key/value pairs to set\n * @param {Any} [val] the value to set\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.set = function(path, val) {\n  if (typeof path === 'object') {\n    const keys = Object.keys(path);\n    for (const key of keys) {\n      this.set(key, path[key]);\n    }\n    return this;\n  }\n\n  this._update = this._update || {};\n  if (path in this._update) {\n    delete this._update[path];\n  }\n  this._update.$set = this._update.$set || {};\n  this._update.$set[path] = val;\n  return this;\n};\n\n/**\n * For update operations, returns the value of a path in the update's `$set`.\n * Useful for writing getters/setters that can work with both update operations\n * and `save()`.\n *\n * #### Example:\n *\n *     const query = Model.updateOne({}, { $set: { name: 'Jean-Luc Picard' } });\n *     query.get('name'); // 'Jean-Luc Picard'\n *\n * @param {String|Object} path path or object of key/value pairs to get\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.get = function get(path) {\n  const update = this._update;\n  if (update == null) {\n    return void 0;\n  }\n  const $set = update.$set;\n  if ($set == null) {\n    return update[path];\n  }\n\n  if (utils.hasUserDefinedProperty(update, path)) {\n    return update[path];\n  }\n  if (utils.hasUserDefinedProperty($set, path)) {\n    return $set[path];\n  }\n\n  return void 0;\n};\n\n/**\n * Gets/sets the error flag on this query. If this flag is not null or\n * undefined, the `exec()` promise will reject without executing.\n *\n * #### Example:\n *\n *     Query().error(); // Get current error value\n *     Query().error(null); // Unset the current error\n *     Query().error(new Error('test')); // `exec()` will resolve with test\n *     Schema.pre('find', function() {\n *       if (!this.getQuery().userId) {\n *         this.error(new Error('Not allowed to query without setting userId'));\n *       }\n *     });\n *\n * Note that query casting runs **after** hooks, so cast errors will override\n * custom errors.\n *\n * #### Example:\n *\n *     const TestSchema = new Schema({ num: Number });\n *     const TestModel = db.model('Test', TestSchema);\n *     TestModel.find({ num: 'not a number' }).error(new Error('woops')).exec(function(error) {\n *       // `error` will be a cast error because `num` failed to cast\n *     });\n *\n * @param {Error|null} err if set, `exec()` will fail fast before sending the query to MongoDB\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.error = function error(err) {\n  if (arguments.length === 0) {\n    return this._error;\n  }\n\n  this._error = err;\n  return this;\n};\n\n/**\n * ignore\n * @method _unsetCastError\n * @instance\n * @memberOf Query\n * @api private\n */\n\nQuery.prototype._unsetCastError = function _unsetCastError() {\n  if (this._error != null && !(this._error instanceof CastError)) {\n    return;\n  }\n  return this.error(null);\n};\n\n/**\n * Getter/setter around the current mongoose-specific options for this query\n * Below are the current Mongoose-specific options.\n *\n * - `populate`: an array representing what paths will be populated. Should have one entry for each call to [`Query.prototype.populate()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.populate())\n * - `lean`: if truthy, Mongoose will not [hydrate](https://mongoosejs.com/docs/api/model.html#Model.hydrate()) any documents that are returned from this query. See [`Query.prototype.lean()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.lean()) for more information.\n * - `strict`: controls how Mongoose handles keys that aren't in the schema for updates. This option is `true` by default, which means Mongoose will silently strip any paths in the update that aren't in the schema. See the [`strict` mode docs](https://mongoosejs.com/docs/guide.html#strict) for more information.\n * - `strictQuery`: controls how Mongoose handles keys that aren't in the schema for the query `filter`. This option is `false` by default, which means Mongoose will allow `Model.find({ foo: 'bar' })` even if `foo` is not in the schema. See the [`strictQuery` docs](https://mongoosejs.com/docs/guide.html#strictQuery) for more information.\n * - `nearSphere`: use `$nearSphere` instead of `near()`. See the [`Query.prototype.nearSphere()` docs](https://mongoosejs.com/docs/api/query.html#Query.prototype.nearSphere())\n *\n * Mongoose maintains a separate object for internal options because\n * Mongoose sends `Query.prototype.options` to the MongoDB server, and the\n * above options are not relevant for the MongoDB server.\n *\n * @param {Object} options if specified, overwrites the current options\n * @return {Object} the options\n * @api public\n */\n\nQuery.prototype.mongooseOptions = function(v) {\n  if (arguments.length > 0) {\n    this._mongooseOptions = v;\n  }\n  return this._mongooseOptions;\n};\n\n/**\n * ignore\n * @method _castConditions\n * @memberOf Query\n * @api private\n * @instance\n */\n\nQuery.prototype._castConditions = function() {\n  let sanitizeFilterOpt = undefined;\n  if (this.model != null && utils.hasUserDefinedProperty(this.model.db.options, 'sanitizeFilter')) {\n    sanitizeFilterOpt = this.model.db.options.sanitizeFilter;\n  } else if (this.model != null && utils.hasUserDefinedProperty(this.model.base.options, 'sanitizeFilter')) {\n    sanitizeFilterOpt = this.model.base.options.sanitizeFilter;\n  } else {\n    sanitizeFilterOpt = this._mongooseOptions.sanitizeFilter;\n  }\n\n  if (sanitizeFilterOpt) {\n    sanitizeFilter(this._conditions);\n  }\n\n  try {\n    this.cast(this.model);\n    this._unsetCastError();\n  } catch (err) {\n    this.error(err);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction _castArrayFilters(query) {\n  try {\n    castArrayFilters(query);\n  } catch (err) {\n    query.error(err);\n  }\n}\n\n/**\n * Execute a `find()`\n *\n * @return {Query} this\n * @api private\n */\nQuery.prototype._find = async function _find() {\n  this._castConditions();\n\n  if (this.error() != null) {\n    throw this.error();\n  }\n\n  const mongooseOptions = this._mongooseOptions;\n  const _this = this;\n  const userProvidedFields = _this._userProvidedFields || {};\n\n  applyGlobalMaxTimeMS(this.options, this.model.db.options, this.model.base.options);\n  applyGlobalDiskUse(this.options, this.model.db.options, this.model.base.options);\n\n  // Separate options to pass down to `completeMany()` in case we need to\n  // set a session on the document\n  const completeManyOptions = Object.assign({}, {\n    session: this && this.options && this.options.session || null,\n    lean: mongooseOptions.lean || null\n  });\n\n  const options = this._optionsForExec();\n\n  this._applyTranslateAliases(options);\n\n  const filter = this._conditions;\n  const fields = options.projection;\n\n  const cursor = await this.mongooseCollection.find(filter, options);\n  if (options.explain) {\n    return cursor.explain();\n  }\n\n  let docs = await cursor.toArray();\n  if (docs.length === 0) {\n    return docs;\n  }\n\n  if (!mongooseOptions.populate) {\n    const versionKey = _this.schema.options.versionKey;\n    if (mongooseOptions.lean && mongooseOptions.lean.versionKey === false && versionKey) {\n      docs.forEach((doc) => {\n        if (versionKey in doc) {\n          delete doc[versionKey];\n        }\n      });\n    }\n    return mongooseOptions.lean ?\n      _completeManyLean(_this.model.schema, docs, null, completeManyOptions) :\n      _this._completeMany(docs, fields, userProvidedFields, completeManyOptions);\n  }\n  const pop = helpers.preparePopulationOptionsMQ(_this, mongooseOptions);\n\n  if (mongooseOptions.lean) {\n    return _this.model.populate(docs, pop);\n  }\n\n  docs = await _this._completeMany(docs, fields, userProvidedFields, completeManyOptions);\n  await this.model.populate(docs, pop);\n\n  return docs;\n};\n\n/**\n * Find all documents that match `selector`. The result will be an array of documents.\n *\n * If there are too many documents in the result to fit in memory, use\n * [`Query.prototype.cursor()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.cursor())\n *\n * #### Example:\n *\n *     const arr = await Movie.find({ year: { $gte: 1980, $lte: 1989 } });\n *\n * @param {Object|ObjectId} [filter] mongodb filter. If not specified, returns all documents.\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.find = function(conditions) {\n  if (typeof conditions === 'function' ||\n      typeof arguments[1] === 'function') {\n    throw new MongooseError('Query.prototype.find() no longer accepts a callback');\n  }\n\n  this.op = 'find';\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (conditions != null) {\n    this.error(new ObjectParameterError(conditions, 'filter', 'find'));\n  }\n\n  return this;\n};\n\n/**\n * Merges another Query or conditions object into this one.\n *\n * When a Query is passed, conditions, field selection and options are merged.\n *\n * @param {Query|Object} source\n * @return {Query} this\n */\n\nQuery.prototype.merge = function(source) {\n  if (!source) {\n    return this;\n  }\n\n  const opts = { overwrite: true };\n\n  if (source instanceof Query) {\n    // if source has a feature, apply it to ourselves\n\n    if (source._conditions) {\n      opts.omit = {};\n      if (this._conditions && this._conditions.$and && source._conditions.$and) {\n        opts.omit['$and'] = true;\n        this._conditions.$and = this._conditions.$and.concat(source._conditions.$and);\n      }\n      if (this._conditions && this._conditions.$or && source._conditions.$or) {\n        opts.omit['$or'] = true;\n        this._conditions.$or = this._conditions.$or.concat(source._conditions.$or);\n      }\n      utils.merge(this._conditions, source._conditions, opts);\n    }\n\n    if (source._fields) {\n      this._fields || (this._fields = {});\n      utils.merge(this._fields, source._fields, opts);\n    }\n\n    if (source.options) {\n      this.options || (this.options = {});\n      utils.merge(this.options, source.options, opts);\n    }\n\n    if (source._update) {\n      this._update || (this._update = {});\n      utils.mergeClone(this._update, source._update);\n    }\n\n    if (source._distinct) {\n      this._distinct = source._distinct;\n    }\n\n    utils.merge(this._mongooseOptions, source._mongooseOptions);\n\n    return this;\n  } else if (this.model != null && source instanceof this.model.base.Types.ObjectId) {\n    utils.merge(this._conditions, { _id: source }, opts);\n\n    return this;\n  } else if (source && source.$__) {\n    source = source.toObject(internalToObjectOptions);\n  }\n\n  opts.omit = {};\n  if (this._conditions && this._conditions.$and && source.$and) {\n    opts.omit['$and'] = true;\n    this._conditions.$and = this._conditions.$and.concat(source.$and);\n  }\n  if (this._conditions && this._conditions.$or && source.$or) {\n    opts.omit['$or'] = true;\n    this._conditions.$or = this._conditions.$or.concat(source.$or);\n  }\n\n  // plain object\n  utils.merge(this._conditions, source, opts);\n\n  return this;\n};\n\n/**\n * Adds a collation to this op (MongoDB 3.4 and up)\n *\n * @param {Object} value\n * @return {Query} this\n * @see MongoDB docs https://www.mongodb.com/docs/manual/reference/method/cursor.collation/#cursor.collation\n * @api public\n */\n\nQuery.prototype.collation = function(value) {\n  if (this.options == null) {\n    this.options = {};\n  }\n  this.options.collation = value;\n  return this;\n};\n\n/**\n * Hydrate a single doc from `findOne()`, `findOneAndUpdate()`, etc.\n *\n * @api private\n */\n\nQuery.prototype._completeOne = function(doc, res, callback) {\n  if (!doc && !this.options.includeResultMetadata) {\n    return callback(null, null);\n  }\n\n  const model = this.model;\n  const projection = clone(this._fields);\n  const userProvidedFields = this._userProvidedFields || {};\n  // `populate`, `lean`\n  const mongooseOptions = this._mongooseOptions;\n\n  const options = this.options;\n  if (!options.lean && mongooseOptions.lean) {\n    options.lean = mongooseOptions.lean;\n  }\n\n  if (options.explain) {\n    return callback(null, doc);\n  }\n\n  if (!mongooseOptions.populate) {\n    const versionKey = this.schema.options.versionKey;\n    if (mongooseOptions.lean && mongooseOptions.lean.versionKey === false && versionKey) {\n      if (versionKey in doc) {\n        delete doc[versionKey];\n      }\n    }\n    return mongooseOptions.lean ?\n      _completeOneLean(model.schema, doc, null, res, options, callback) :\n      completeOne(model, doc, res, options, projection, userProvidedFields,\n        null, callback);\n  }\n\n  const pop = helpers.preparePopulationOptionsMQ(this, this._mongooseOptions);\n  if (mongooseOptions.lean) {\n    return model.populate(doc, pop).then(\n      doc => {\n        _completeOneLean(model.schema, doc, null, res, options, callback);\n      },\n      error => {\n        callback(error);\n      }\n    );\n  }\n\n  completeOne(model, doc, res, options, projection, userProvidedFields, [], (err, doc) => {\n    if (err != null) {\n      return callback(err);\n    }\n    model.populate(doc, pop).then(res => { callback(null, res); }, err => { callback(err); });\n  });\n};\n\n/**\n * Given a model and an array of docs, hydrates all the docs to be instances\n * of the model. Used to initialize docs returned from the db from `find()`\n *\n * @param {Array} docs\n * @param {Object} fields the projection used, including `select` from schemas\n * @param {Object} userProvidedFields the user-specified projection\n * @param {Object} [opts]\n * @param {Array} [opts.populated]\n * @param {ClientSession} [opts.session]\n * @api private\n */\n\nQuery.prototype._completeMany = async function _completeMany(docs, fields, userProvidedFields, opts) {\n  const model = this.model;\n  return Promise.all(docs.map(doc => new Promise((resolve, reject) => {\n    const rawDoc = doc;\n    doc = helpers.createModel(model, doc, fields, userProvidedFields);\n    if (opts.session != null) {\n      doc.$session(opts.session);\n    }\n    doc.$init(rawDoc, opts, (err) => {\n      if (err != null) {\n        return reject(err);\n      }\n      resolve(doc);\n    });\n  })));\n};\n\n/**\n * Internal helper to execute a findOne() operation\n *\n * @see findOne https://www.mongodb.com/docs/manual/reference/method/db.collection.findOne/\n * @api private\n */\n\nQuery.prototype._findOne = async function _findOne() {\n  this._castConditions();\n\n  if (this.error()) {\n    const err = this.error();\n    throw err;\n  }\n\n  applyGlobalMaxTimeMS(this.options, this.model.db.options, this.model.base.options);\n  applyGlobalDiskUse(this.options, this.model.db.options, this.model.base.options);\n\n  const options = this._optionsForExec();\n\n  this._applyTranslateAliases(options);\n\n  // don't pass in the conditions because we already merged them in\n  const doc = await this.mongooseCollection.findOne(this._conditions, options);\n  return new Promise((resolve, reject) => {\n    this._completeOne(doc, null, (err, res) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve(res);\n    });\n  });\n};\n\n/**\n * Declares the query a findOne operation. When executed, the first found document is passed to the callback.\n *\n * The result of the query is a single document, or `null` if no document was found.\n *\n * * *Note:* `conditions` is optional, and if `conditions` is null or undefined,\n * mongoose will send an empty `findOne` command to MongoDB, which will return\n * an arbitrary document. If you're querying by `_id`, use `Model.findById()`\n * instead.\n *\n * This function triggers the following middleware.\n *\n * - `findOne()`\n *\n * #### Example:\n *\n *     const query = Kitten.where({ color: 'white' });\n *     const kitten = await query.findOne();\n *\n * @param {Object} [filter] mongodb selector\n * @param {Object} [projection] optional fields to return\n * @param {Object} [options] see [`setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query} this\n * @see findOne https://www.mongodb.com/docs/manual/reference/method/db.collection.findOne/\n * @see Query.select https://mongoosejs.com/docs/api/query.html#Query.prototype.select()\n * @api public\n */\n\nQuery.prototype.findOne = function(conditions, projection, options) {\n  if (typeof conditions === 'function' ||\n      typeof projection === 'function' ||\n      typeof options === 'function' ||\n      typeof arguments[3] === 'function') {\n    throw new MongooseError('Query.prototype.findOne() no longer accepts a callback');\n  }\n\n  this.op = 'findOne';\n  this._validateOp();\n\n  if (options) {\n    this.setOptions(options);\n  }\n\n  if (projection) {\n    this.select(projection);\n  }\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (conditions != null) {\n    this.error(new ObjectParameterError(conditions, 'filter', 'findOne'));\n  }\n\n  return this;\n};\n\n\n/**\n * Execute a countDocuments query\n *\n * @see countDocuments https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#countDocuments\n * @api private\n */\n\nQuery.prototype._countDocuments = async function _countDocuments() {\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    this.error(err);\n  }\n\n  if (this.error()) {\n    throw this.error();\n  }\n\n  applyGlobalMaxTimeMS(this.options, this.model.db.options, this.model.base.options);\n  applyGlobalDiskUse(this.options, this.model.db.options, this.model.base.options);\n\n  const options = this._optionsForExec();\n\n  this._applyTranslateAliases(options);\n\n  const conds = this._conditions;\n\n  return this.mongooseCollection.countDocuments(conds, options);\n};\n\n/*!\n * If `translateAliases` option is set, call `Model.translateAliases()`\n * on the following query properties: filter, projection, update, distinct.\n */\n\nQuery.prototype._applyTranslateAliases = function _applyTranslateAliases(options) {\n  let applyTranslateAliases = false;\n  if ('translateAliases' in this._mongooseOptions) {\n    applyTranslateAliases = this._mongooseOptions.translateAliases;\n  } else if (this.model?.schema?._userProvidedOptions?.translateAliases != null) {\n    applyTranslateAliases = this.model.schema._userProvidedOptions.translateAliases;\n  } else if (this.model?.base?.options?.translateAliases != null) {\n    applyTranslateAliases = this.model.base.options.translateAliases;\n  }\n  if (!applyTranslateAliases) {\n    return;\n  }\n\n  if (this.model?.schema?.aliases && Object.keys(this.model.schema.aliases).length > 0) {\n    this.model.translateAliases(this._conditions, true);\n    this.model.translateAliases(options.projection, true);\n    this.model.translateAliases(this._update, true);\n    if (this._distinct != null && this.model.schema.aliases[this._distinct] != null) {\n      this._distinct = this.model.schema.aliases[this._distinct];\n    }\n  }\n};\n\n/**\n * Execute a estimatedDocumentCount() query\n *\n * @see estimatedDocumentCount https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#estimatedDocumentCount\n * @api private\n */\n\nQuery.prototype._estimatedDocumentCount = async function _estimatedDocumentCount() {\n  if (this.error()) {\n    throw this.error();\n  }\n\n  const options = this._optionsForExec();\n\n  return this.mongooseCollection.estimatedDocumentCount(options);\n};\n\n/**\n * Specifies this query as a `estimatedDocumentCount()` query. Faster than\n * using `countDocuments()` for large collections because\n * `estimatedDocumentCount()` uses collection metadata rather than scanning\n * the entire collection.\n *\n * `estimatedDocumentCount()` does **not** accept a filter. `Model.find({ foo: bar }).estimatedDocumentCount()`\n * is equivalent to `Model.find().estimatedDocumentCount()`\n *\n * This function triggers the following middleware.\n *\n * - `estimatedDocumentCount()`\n *\n * #### Example:\n *\n *     await Model.find().estimatedDocumentCount();\n *\n * @param {Object} [options] passed transparently to the [MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/EstimatedDocumentCountOptions.html)\n * @return {Query} this\n * @see estimatedDocumentCount https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#estimatedDocumentCount\n * @api public\n */\n\nQuery.prototype.estimatedDocumentCount = function(options) {\n  if (typeof options === 'function' ||\n      typeof arguments[1] === 'function') {\n    throw new MongooseError('Query.prototype.estimatedDocumentCount() no longer accepts a callback');\n  }\n\n  this.op = 'estimatedDocumentCount';\n  this._validateOp();\n\n  if (typeof options === 'object' && options != null) {\n    this.setOptions(options);\n  }\n\n  return this;\n};\n\n/**\n * Specifies this query as a `countDocuments()` query. Behaves like `count()`,\n * except it always does a full collection scan when passed an empty filter `{}`.\n *\n * There are also minor differences in how `countDocuments()` handles\n * [`$where` and a couple geospatial operators](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#countDocuments).\n * versus `count()`.\n *\n * This function triggers the following middleware.\n *\n * - `countDocuments()`\n *\n * #### Example:\n *\n *     const countQuery = model.where({ 'color': 'black' }).countDocuments();\n *\n *     query.countDocuments({ color: 'black' }).count().exec();\n *\n *     await query.countDocuments({ color: 'black' });\n *\n *     query.where('color', 'black').countDocuments().exec();\n *\n * The `countDocuments()` function is similar to `count()`, but there are a\n * [few operators that `countDocuments()` does not support](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#countDocuments).\n * Below are the operators that `count()` supports but `countDocuments()` does not,\n * and the suggested replacement:\n *\n * - `$where`: [`$expr`](https://www.mongodb.com/docs/manual/reference/operator/query/expr/)\n * - `$near`: [`$geoWithin`](https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/) with [`$center`](https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center)\n * - `$nearSphere`: [`$geoWithin`](https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/) with [`$centerSphere`](https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere)\n *\n * @param {Object} [filter] mongodb selector\n * @param {Object} [options]\n * @return {Query} this\n * @see countDocuments https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#countDocuments\n * @api public\n */\n\nQuery.prototype.countDocuments = function(conditions, options) {\n  if (typeof conditions === 'function' ||\n      typeof options === 'function' ||\n      typeof arguments[2] === 'function') {\n    throw new MongooseError('Query.prototype.countDocuments() no longer accepts a callback');\n  }\n\n  this.op = 'countDocuments';\n  this._validateOp();\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  if (typeof options === 'object' && options != null) {\n    this.setOptions(options);\n  }\n\n  return this;\n};\n\n/**\n * Execute a `distinct()` query\n *\n * @see distinct https://www.mongodb.com/docs/manual/reference/method/db.collection.distinct/\n * @api private\n */\n\nQuery.prototype.__distinct = async function __distinct() {\n  this._castConditions();\n\n  if (this.error()) {\n    throw this.error();\n  }\n\n  applyGlobalMaxTimeMS(this.options, this.model.db.options, this.model.base.options);\n  applyGlobalDiskUse(this.options, this.model.db.options, this.model.base.options);\n\n  const options = this._optionsForExec();\n  this._applyTranslateAliases(options);\n\n  return this.mongooseCollection.\n    distinct(this._distinct, this._conditions, options);\n};\n\n/**\n * Declares or executes a distinct() operation.\n *\n * This function does not trigger any middleware.\n *\n * #### Example:\n *\n *     distinct(field, conditions)\n *     distinct(field)\n *     distinct()\n *\n * @param {String} [field]\n * @param {Object|Query} [filter]\n * @return {Query} this\n * @see distinct https://www.mongodb.com/docs/manual/reference/method/db.collection.distinct/\n * @api public\n */\n\nQuery.prototype.distinct = function(field, conditions) {\n  if (typeof field === 'function' ||\n      typeof conditions === 'function' ||\n      typeof arguments[2] === 'function') {\n    throw new MongooseError('Query.prototype.distinct() no longer accepts a callback');\n  }\n\n  this.op = 'distinct';\n  this._validateOp();\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (conditions != null) {\n    this.error(new ObjectParameterError(conditions, 'filter', 'distinct'));\n  }\n\n  if (field != null) {\n    this._distinct = field;\n  }\n\n  return this;\n};\n\n/**\n * Sets the sort order\n *\n * If an object is passed, values allowed are `asc`, `desc`, `ascending`, `descending`, `1`, and `-1`.\n *\n * If a string is passed, it must be a space delimited list of path names. The\n * sort order of each path is ascending unless the path name is prefixed with `-`\n * which will be treated as descending.\n *\n * #### Example:\n *\n *     // sort by \"field\" ascending and \"test\" descending\n *     query.sort({ field: 'asc', test: -1 });\n *\n *     // equivalent\n *     query.sort('field -test');\n *\n *     // also possible is to use a array with array key-value pairs\n *     query.sort([['field', 'asc']]);\n *\n * #### Note:\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object|String|Array<Array<(string | number)>>} arg\n * @return {Query} this\n * @see cursor.sort https://www.mongodb.com/docs/manual/reference/method/cursor.sort/\n * @api public\n */\n\nQuery.prototype.sort = function(arg) {\n  if (arguments.length > 1) {\n    throw new Error('sort() only takes 1 Argument');\n  }\n\n  if (this.options.sort == null) {\n    this.options.sort = {};\n  }\n  const sort = this.options.sort;\n  if (typeof arg === 'string') {\n    const properties = arg.indexOf(' ') === -1 ? [arg] : arg.split(' ');\n    for (let property of properties) {\n      const ascend = '-' == property[0] ? -1 : 1;\n      if (ascend === -1) {\n        property = property.slice(1);\n      }\n      if (specialProperties.has(property)) {\n        continue;\n      }\n      sort[property] = ascend;\n    }\n  } else if (Array.isArray(arg)) {\n    for (const pair of arg) {\n      if (!Array.isArray(pair)) {\n        throw new TypeError('Invalid sort() argument, must be array of arrays');\n      }\n      const key = '' + pair[0];\n      if (specialProperties.has(key)) {\n        continue;\n      }\n      sort[key] = _handleSortValue(pair[1], key);\n    }\n  } else if (typeof arg === 'object' && arg != null && !(arg instanceof Map)) {\n    for (const key of Object.keys(arg)) {\n      if (specialProperties.has(key)) {\n        continue;\n      }\n      sort[key] = _handleSortValue(arg[key], key);\n    }\n  } else if (arg instanceof Map) {\n    for (let key of arg.keys()) {\n      key = '' + key;\n      if (specialProperties.has(key)) {\n        continue;\n      }\n      sort[key] = _handleSortValue(arg.get(key), key);\n    }\n  } else if (arg != null) {\n    throw new TypeError('Invalid sort() argument. Must be a string, object, array, or map.');\n  }\n\n  return this;\n};\n\n/*!\n * Convert sort values\n */\n\nfunction _handleSortValue(val, key) {\n  if (val === 1 || val === 'asc' || val === 'ascending') {\n    return 1;\n  }\n  if (val === -1 || val === 'desc' || val === 'descending') {\n    return -1;\n  }\n  if (val?.$meta != null) {\n    return { $meta: val.$meta };\n  }\n  throw new TypeError('Invalid sort value: { ' + key + ': ' + val + ' }');\n}\n\n/**\n * Declare and/or execute this query as a `deleteOne()` operation. Works like\n * remove, except it deletes at most one document regardless of the `single`\n * option.\n *\n * This function triggers `deleteOne` middleware.\n *\n * #### Example:\n *\n *     await Character.deleteOne({ name: 'Eddard Stark' });\n *\n * This function calls the MongoDB driver's [`Collection#deleteOne()` function](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#deleteOne).\n * The returned [promise](https://mongoosejs.com/docs/queries.html) resolves to an\n * object that contains 3 properties:\n *\n * - `ok`: `1` if no errors occurred\n * - `deletedCount`: the number of documents deleted\n * - `n`: the number of documents deleted. Equal to `deletedCount`.\n *\n * #### Example:\n *\n *     const res = await Character.deleteOne({ name: 'Eddard Stark' });\n *     // `1` if MongoDB deleted a doc, `0` if no docs matched the filter `{ name: ... }`\n *     res.deletedCount;\n *\n * @param {Object|Query} [filter] mongodb selector\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @return {Query} this\n * @see DeleteResult https://mongodb.github.io/node-mongodb-native/4.9/interfaces/DeleteResult.html\n * @see deleteOne https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#deleteOne\n * @api public\n */\n\nQuery.prototype.deleteOne = function deleteOne(filter, options) {\n  if (typeof filter === 'function' || typeof options === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Query.prototype.deleteOne() no longer accepts a callback');\n  }\n  this.op = 'deleteOne';\n  this.setOptions(options);\n\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (filter != null) {\n    this.error(new ObjectParameterError(filter, 'filter', 'deleteOne'));\n  }\n\n  return this;\n};\n\n/**\n * Internal thunk for `deleteOne()`\n *\n * @method _deleteOne\n * @instance\n * @memberOf Query\n * @api private\n */\n\nQuery.prototype._deleteOne = async function _deleteOne() {\n  this._castConditions();\n\n  if (this.error() != null) {\n    throw this.error();\n  }\n\n  const options = this._optionsForExec();\n  this._applyTranslateAliases(options);\n\n  return this.mongooseCollection.deleteOne(this._conditions, options);\n};\n\n/**\n * Declare and/or execute this query as a `deleteMany()` operation. Works like\n * remove, except it deletes _every_ document that matches `filter` in the\n * collection, regardless of the value of `single`.\n *\n * This function triggers `deleteMany` middleware.\n *\n * #### Example:\n *\n *     await Character.deleteMany({ name: /Stark/, age: { $gte: 18 } });\n *\n * This function calls the MongoDB driver's [`Collection#deleteMany()` function](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#deleteMany).\n * The returned [promise](https://mongoosejs.com/docs/queries.html) resolves to an\n * object that contains 3 properties:\n *\n * - `ok`: `1` if no errors occurred\n * - `deletedCount`: the number of documents deleted\n * - `n`: the number of documents deleted. Equal to `deletedCount`.\n *\n * #### Example:\n *\n *     const res = await Character.deleteMany({ name: /Stark/, age: { $gte: 18 } });\n *     // `0` if no docs matched the filter, number of docs deleted otherwise\n *     res.deletedCount;\n *\n * @param {Object|Query} [filter] mongodb selector\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @return {Query} this\n * @see DeleteResult https://mongodb.github.io/node-mongodb-native/4.9/interfaces/DeleteResult.html\n * @see deleteMany https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#deleteMany\n * @api public\n */\n\nQuery.prototype.deleteMany = function(filter, options) {\n  if (typeof filter === 'function' || typeof options === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Query.prototype.deleteMany() no longer accepts a callback');\n  }\n  this.setOptions(options);\n  this.op = 'deleteMany';\n\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (filter != null) {\n    this.error(new ObjectParameterError(filter, 'filter', 'deleteMany'));\n  }\n\n  return this;\n};\n\n/**\n * Execute a `deleteMany()` query\n *\n * @param {Function} callback\n * @method _deleteMany\n * @instance\n * @memberOf Query\n * @api private\n */\n\nQuery.prototype._deleteMany = async function _deleteMany() {\n  this._castConditions();\n\n  if (this.error() != null) {\n    throw this.error();\n  }\n\n  const options = this._optionsForExec();\n  this._applyTranslateAliases(options);\n\n  return this.mongooseCollection.deleteMany(this._conditions, options);\n};\n\n/**\n * hydrates a document\n *\n * @param {Model} model\n * @param {Document} doc\n * @param {Object} res 3rd parameter to callback\n * @param {Object} fields\n * @param {Query} self\n * @param {Array} [pop] array of paths used in population\n * @param {Function} callback\n * @api private\n */\n\nfunction completeOne(model, doc, res, options, fields, userProvidedFields, pop, callback) {\n  if (options.includeResultMetadata && doc == null) {\n    _init(null);\n    return null;\n  }\n\n  helpers.createModelAndInit(model, doc, fields, userProvidedFields, options, pop, _init);\n\n  function _init(err, casted) {\n    if (err) {\n      return immediate(() => callback(err));\n    }\n\n\n    if (options.includeResultMetadata) {\n      if (doc && casted) {\n        if (options.session != null) {\n          casted.$session(options.session);\n        }\n        res.value = casted;\n      } else {\n        res.value = null;\n      }\n      return immediate(() => callback(null, res));\n    }\n    if (options.session != null) {\n      casted.$session(options.session);\n    }\n    immediate(() => callback(null, casted));\n  }\n}\n\n/**\n * If the model is a discriminator type and not root, then add the key & value to the criteria.\n * @param {Query} query\n * @api private\n */\n\nfunction prepareDiscriminatorCriteria(query) {\n  if (!query || !query.model || !query.model.schema) {\n    return;\n  }\n\n  const schema = query.model.schema;\n\n  if (schema && schema.discriminatorMapping && !schema.discriminatorMapping.isRoot) {\n    query._conditions[schema.discriminatorMapping.key] = schema.discriminatorMapping.value;\n  }\n}\n\n/**\n * Issues a mongodb `findOneAndUpdate()` command.\n *\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found\n * document (if any).\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndUpdate()`\n *\n * #### Available options\n *\n * - `new`: bool - if true, return the modified document rather than the original. defaults to false (changed in 4.0)\n * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.\n * - `fields`: {Object|String} - Field selection. Equivalent to `.select(fields).findOneAndUpdate()`\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `runValidators`: if true, runs [update validators](https://mongoosejs.com/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.\n * - `setDefaultsOnInsert`: `true` by default. If `setDefaultsOnInsert` and `upsert` are true, mongoose will apply the [defaults](https://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created.\n *\n * #### Example:\n *\n *     query.findOneAndUpdate(conditions, update, options)  // returns Query\n *     query.findOneAndUpdate(conditions, update)           // returns Query\n *     query.findOneAndUpdate(update)                       // returns Query\n *     query.findOneAndUpdate()                             // returns Query\n *\n * @method findOneAndUpdate\n * @memberOf Query\n * @instance\n * @param {Object|Query} [filter]\n * @param {Object} [doc]\n * @param {Object} [options]\n * @param {Boolean} [options.includeResultMetadata] if true, returns the full [ModifyResult from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html) rather than just the document\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean} [options.new=false] By default, `findOneAndUpdate()` returns the document as it was **before** `update` was applied. If you set `new: true`, `findOneAndUpdate()` will instead give you the object after `update` was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.lean()) and [the Mongoose lean tutorial](https://mongoosejs.com/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.returnOriginal=null] An alias for the `new` option. `returnOriginal: false` is equivalent to `new: true`.\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @param {Boolean} [options.overwriteDiscriminatorKey=false] Mongoose removes discriminator key updates from `update` by default, set `overwriteDiscriminatorKey` to `true` to allow updating the discriminator key\n * @see Tutorial https://mongoosejs.com/docs/tutorials/findoneandupdate.html\n * @see findAndModify command https://www.mongodb.com/docs/manual/reference/command/findAndModify/\n * @see ModifyResult https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html\n * @see findOneAndUpdate https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#findOneAndUpdate\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOneAndUpdate = function(filter, doc, options) {\n  if (typeof filter === 'function' ||\n      typeof doc === 'function' ||\n      typeof options === 'function' ||\n      typeof arguments[3] === 'function') {\n    throw new MongooseError('Query.prototype.findOneAndUpdate() no longer accepts a callback');\n  }\n\n  this.op = 'findOneAndUpdate';\n  this._validateOp();\n  this._validate();\n\n  switch (arguments.length) {\n    case 2:\n      options = undefined;\n      break;\n    case 1:\n      doc = filter;\n      filter = options = undefined;\n      break;\n  }\n\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n  } else if (filter != null) {\n    this.error(\n      new ObjectParameterError(filter, 'filter', 'findOneAndUpdate')\n    );\n  }\n\n  // apply doc\n  if (doc) {\n    this._mergeUpdate(doc);\n  }\n\n  options = options ? clone(options) : {};\n\n  if (options.projection) {\n    this.select(options.projection);\n    delete options.projection;\n  }\n  if (options.fields) {\n    this.select(options.fields);\n    delete options.fields;\n  }\n\n  const returnOriginal = this &&\n    this.model &&\n    this.model.base &&\n    this.model.base.options &&\n    this.model.base.options.returnOriginal;\n  if (options.new == null && options.returnDocument == null && options.returnOriginal == null && returnOriginal != null) {\n    options.returnOriginal = returnOriginal;\n  }\n\n  this.setOptions(options);\n\n  return this;\n};\n\n/**\n * Execute a findOneAndUpdate operation\n *\n * @method _findOneAndUpdate\n * @memberOf Query\n * @api private\n */\n\nQuery.prototype._findOneAndUpdate = async function _findOneAndUpdate() {\n  this._castConditions();\n\n  _castArrayFilters(this);\n\n  if (this.error()) {\n    throw this.error();\n  }\n\n  applyGlobalMaxTimeMS(this.options, this.model.db.options, this.model.base.options);\n  applyGlobalDiskUse(this.options, this.model.db.options, this.model.base.options);\n\n  if ('strict' in this.options) {\n    this._mongooseOptions.strict = this.options.strict;\n  }\n  const options = this._optionsForExec(this.model);\n  convertNewToReturnDocument(options);\n  this._applyTranslateAliases(options);\n\n  this._update = this._castUpdate(this._update);\n\n  const _opts = Object.assign({}, options, {\n    setDefaultsOnInsert: this._mongooseOptions.setDefaultsOnInsert\n  });\n  this._update = setDefaultsOnInsert(this._conditions, this.model.schema,\n    this._update, _opts);\n\n  if (!this._update || Object.keys(this._update).length === 0) {\n    if (options.upsert) {\n      // still need to do the upsert to empty doc\n      const doc = clone(this._update);\n      delete doc._id;\n      this._update = { $set: doc };\n    } else {\n      this._executionStack = null;\n      const res = await this._findOne();\n      return res;\n    }\n  } else if (this._update instanceof Error) {\n    throw this._update;\n  } else {\n    // In order to make MongoDB 2.6 happy (see\n    // https://jira.mongodb.org/browse/SERVER-12266 and related issues)\n    // if we have an actual update document but $set is empty, junk the $set.\n    if (this._update.$set && Object.keys(this._update.$set).length === 0) {\n      delete this._update.$set;\n    }\n  }\n\n  const runValidators = _getOption(this, 'runValidators', false);\n  if (runValidators) {\n    await this.validate(this._update, options, false);\n  }\n\n  if (this._update.toBSON) {\n    this._update = this._update.toBSON();\n  }\n\n  let res = await this.mongooseCollection.findOneAndUpdate(this._conditions, this._update, options);\n  for (const fn of this._transforms) {\n    res = fn(res);\n  }\n  const doc = !options.includeResultMetadata ? res : res.value;\n\n  return new Promise((resolve, reject) => {\n    this._completeOne(doc, res, (err, res) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve(res);\n    });\n  });\n};\n\n/**\n * Issues a MongoDB [findOneAndDelete](https://www.mongodb.com/docs/manual/reference/method/db.collection.findOneAndDelete/) command.\n *\n * Finds a matching document, removes it, and returns the found document (if any).\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndDelete()`\n *\n * #### Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n *\n * #### Callback Signature\n *\n *     function(error, doc) {\n *       // error: any errors that occurred\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n *     }\n *\n * #### Example:\n *\n *     A.where().findOneAndDelete(conditions, options)  // return Query\n *     A.where().findOneAndDelete(conditions) // returns Query\n *     A.where().findOneAndDelete()           // returns Query\n *\n * @method findOneAndDelete\n * @memberOf Query\n * @param {Object} [filter]\n * @param {Object} [options]\n * @param {Boolean} [options.includeResultMetadata] if true, returns the full [ModifyResult from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html) rather than just the document\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @return {Query} this\n * @see findAndModify command https://www.mongodb.com/docs/manual/reference/command/findAndModify/\n * @api public\n */\n\nQuery.prototype.findOneAndDelete = function(filter, options) {\n  if (typeof filter === 'function' ||\n      typeof options === 'function' ||\n      typeof arguments[2] === 'function') {\n    throw new MongooseError('Query.prototype.findOneAndDelete() no longer accepts a callback');\n  }\n\n  this.op = 'findOneAndDelete';\n  this._validateOp();\n  this._validate();\n\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n  }\n\n  options && this.setOptions(options);\n\n  return this;\n};\n\n/**\n * Execute a `findOneAndDelete()` query\n *\n * @return {Query} this\n * @method _findOneAndDelete\n * @memberOf Query\n * @api private\n */\nQuery.prototype._findOneAndDelete = async function _findOneAndDelete() {\n  this._castConditions();\n\n  if (this.error() != null) {\n    throw this.error();\n  }\n\n  const includeResultMetadata = this.options.includeResultMetadata;\n\n  const filter = this._conditions;\n  const options = this._optionsForExec(this.model);\n  this._applyTranslateAliases(options);\n\n  let res = await this.mongooseCollection.findOneAndDelete(filter, options);\n  for (const fn of this._transforms) {\n    res = fn(res);\n  }\n  const doc = !includeResultMetadata ? res : res.value;\n\n  return new Promise((resolve, reject) => {\n    this._completeOne(doc, res, (err, res) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve(res);\n    });\n  });\n};\n\n/**\n * Issues a MongoDB [findOneAndReplace](https://www.mongodb.com/docs/manual/reference/method/db.collection.findOneAndReplace/) command.\n *\n * Finds a matching document, removes it, and returns the found document (if any).\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndReplace()`\n *\n * #### Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `includeResultMetadata`: if true, returns the full [ModifyResult from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html) rather than just the document\n *\n * #### Callback Signature\n *\n *     function(error, doc) {\n *       // error: any errors that occurred\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n *     }\n *\n * #### Example:\n *\n *     A.where().findOneAndReplace(filter, replacement, options); // return Query\n *     A.where().findOneAndReplace(filter); // returns Query\n *     A.where().findOneAndReplace(); // returns Query\n *\n * @method findOneAndReplace\n * @memberOf Query\n * @param {Object} [filter]\n * @param {Object} [replacement]\n * @param {Object} [options]\n * @param {Boolean} [options.includeResultMetadata] if true, returns the full [ModifyResult from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html) rather than just the document\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.new=false] By default, `findOneAndUpdate()` returns the document as it was **before** `update` was applied. If you set `new: true`, `findOneAndUpdate()` will instead give you the object after `update` was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.lean()) and [the Mongoose lean tutorial](https://mongoosejs.com/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.returnOriginal=null] An alias for the `new` option. `returnOriginal: false` is equivalent to `new: true`.\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOneAndReplace = function(filter, replacement, options) {\n  if (typeof filter === 'function' ||\n      typeof replacement === 'function' ||\n      typeof options === 'function' ||\n      typeof arguments[4] === 'function') {\n    throw new MongooseError('Query.prototype.findOneAndReplace() no longer accepts a callback');\n  }\n\n  this.op = 'findOneAndReplace';\n  this._validateOp();\n  this._validate();\n\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n  } else if (filter != null) {\n    this.error(\n      new ObjectParameterError(filter, 'filter', 'findOneAndReplace')\n    );\n  }\n\n  if (replacement != null) {\n    this._mergeUpdate(replacement);\n  }\n\n  options = options || {};\n\n  const returnOriginal = this &&\n  this.model &&\n  this.model.base &&\n  this.model.base.options &&\n  this.model.base.options.returnOriginal;\n  if (options.new == null && options.returnDocument == null && options.returnOriginal == null && returnOriginal != null) {\n    options.returnOriginal = returnOriginal;\n  }\n  this.setOptions(options);\n\n  return this;\n};\n\n/**\n * Execute a findOneAndReplace() query\n *\n * @return {Query} this\n * @method _findOneAndReplace\n * @instance\n * @memberOf Query\n * @api private\n */\nQuery.prototype._findOneAndReplace = async function _findOneAndReplace() {\n  this._castConditions();\n  if (this.error() != null) {\n    throw this.error();\n  }\n\n  if ('strict' in this.options) {\n    this._mongooseOptions.strict = this.options.strict;\n    delete this.options.strict;\n  }\n\n  const filter = this._conditions;\n  const options = this._optionsForExec();\n  this._applyTranslateAliases(options);\n  convertNewToReturnDocument(options);\n\n  const includeResultMetadata = this.options.includeResultMetadata;\n\n  const modelOpts = { skipId: true };\n  if ('strict' in this._mongooseOptions) {\n    modelOpts.strict = this._mongooseOptions.strict;\n  }\n\n  const runValidators = _getOption(this, 'runValidators', false);\n\n  try {\n    const update = new this.model(this._update, null, modelOpts);\n    if (runValidators) {\n      await update.validate();\n    } else if (update.$__.validationError) {\n      throw update.$__.validationError;\n    }\n    this._update = update.toBSON();\n  } catch (err) {\n    if (err instanceof ValidationError) {\n      throw err;\n    }\n    const validationError = new ValidationError();\n    validationError.errors[err.path] = err;\n    throw validationError;\n  }\n\n  let res = await this.mongooseCollection.findOneAndReplace(filter, this._update, options);\n\n  for (const fn of this._transforms) {\n    res = fn(res);\n  }\n\n  const doc = !includeResultMetadata ? res : res.value;\n  return new Promise((resolve, reject) => {\n    this._completeOne(doc, res, (err, res) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve(res);\n    });\n  });\n};\n\n/**\n * Support the `new` option as an alternative to `returnOriginal` for backwards\n * compat.\n * @api private\n */\n\nfunction convertNewToReturnDocument(options) {\n  if ('new' in options) {\n    options.returnDocument = options['new'] ? 'after' : 'before';\n    delete options['new'];\n  }\n  if ('returnOriginal' in options) {\n    options.returnDocument = options['returnOriginal'] ? 'before' : 'after';\n    delete options['returnOriginal'];\n  }\n  // Temporary since driver 4.0.0-beta does not support `returnDocument`\n  if (typeof options.returnDocument === 'string') {\n    options.returnOriginal = options.returnDocument === 'before';\n  }\n}\n\n/**\n * Get options from query opts, falling back to the base mongoose object.\n * @param {Query} query\n * @param {Object} option\n * @param {Any} def\n * @api private\n */\n\nfunction _getOption(query, option, def) {\n  const opts = query._optionsForExec(query.model);\n\n  if (option in opts) {\n    return opts[option];\n  }\n  if (option in query.model.base.options) {\n    return query.model.base.options[option];\n  }\n  return def;\n}\n\n/*!\n * ignore\n */\n\nfunction _completeOneLean(schema, doc, path, res, opts, callback) {\n  if (opts.lean && typeof opts.lean.transform === 'function') {\n    opts.lean.transform(doc);\n\n    for (let i = 0; i < schema.childSchemas.length; i++) {\n      const childPath = path ? path + '.' + schema.childSchemas[i].model.path : schema.childSchemas[i].model.path;\n      const _schema = schema.childSchemas[i].schema;\n      const obj = mpath.get(childPath, doc);\n      if (obj == null) {\n        continue;\n      }\n      if (Array.isArray(obj)) {\n        for (let i = 0; i < obj.length; i++) {\n          opts.lean.transform(obj[i]);\n        }\n      } else {\n        opts.lean.transform(obj);\n      }\n      _completeOneLean(_schema, obj, childPath, res, opts);\n    }\n    if (callback) {\n      return callback(null, doc);\n    } else {\n      return;\n    }\n  }\n  if (opts.includeResultMetadata) {\n    return callback(null, res);\n  }\n  return callback(null, doc);\n}\n\n/*!\n * ignore\n */\n\nfunction _completeManyLean(schema, docs, path, opts) {\n  if (opts.lean && typeof opts.lean.transform === 'function') {\n    for (const doc of docs) {\n      opts.lean.transform(doc);\n    }\n\n    for (let i = 0; i < schema.childSchemas.length; i++) {\n      const childPath = path ? path + '.' + schema.childSchemas[i].model.path : schema.childSchemas[i].model.path;\n      const _schema = schema.childSchemas[i].schema;\n      let doc = mpath.get(childPath, docs);\n      if (doc == null) {\n        continue;\n      }\n      doc = doc.flat();\n      for (let i = 0; i < doc.length; i++) {\n        opts.lean.transform(doc[i]);\n      }\n      _completeManyLean(_schema, doc, childPath, opts);\n    }\n  }\n\n  return docs;\n}\n/**\n * Override mquery.prototype._mergeUpdate to handle mongoose objects in\n * updates.\n *\n * @param {Object} doc\n * @method _mergeUpdate\n * @memberOf Query\n * @instance\n * @api private\n */\n\nQuery.prototype._mergeUpdate = function(doc) {\n  if (!this._update) {\n    this._update = Array.isArray(doc) ? [] : {};\n  }\n\n  if (doc == null || (typeof doc === 'object' && Object.keys(doc).length === 0)) {\n    return;\n  }\n\n  if (doc instanceof Query) {\n    if (Array.isArray(this._update)) {\n      throw new Error('Cannot mix array and object updates');\n    }\n    if (doc._update) {\n      utils.mergeClone(this._update, doc._update);\n    }\n  } else if (Array.isArray(doc)) {\n    if (!Array.isArray(this._update)) {\n      throw new Error('Cannot mix array and object updates');\n    }\n    this._update = this._update.concat(doc);\n  } else {\n    if (Array.isArray(this._update)) {\n      throw new Error('Cannot mix array and object updates');\n    }\n    utils.mergeClone(this._update, doc);\n  }\n};\n\n/*!\n * ignore\n */\n\nasync function _updateThunk(op) {\n  this._castConditions();\n\n  _castArrayFilters(this);\n\n  if (this.error() != null) {\n    throw this.error();\n  }\n\n  const castedQuery = this._conditions;\n  const options = this._optionsForExec(this.model);\n  this._applyTranslateAliases(options);\n\n  this._update = clone(this._update, options);\n  const isOverwriting = op === 'replaceOne';\n  if (isOverwriting) {\n    this._update = new this.model(this._update, null, true);\n  } else {\n    this._update = this._castUpdate(this._update);\n\n    if (this._update == null || Object.keys(this._update).length === 0) {\n      return { acknowledged: false };\n    }\n\n    const _opts = Object.assign({}, options, {\n      setDefaultsOnInsert: this._mongooseOptions.setDefaultsOnInsert\n    });\n    this._update = setDefaultsOnInsert(this._conditions, this.model.schema,\n      this._update, _opts);\n  }\n\n  if (Array.isArray(options.arrayFilters)) {\n    options.arrayFilters = removeUnusedArrayFilters(this._update, options.arrayFilters);\n  }\n\n  const runValidators = _getOption(this, 'runValidators', false);\n  if (runValidators) {\n    await this.validate(this._update, options, isOverwriting);\n  }\n\n  if (this._update.toBSON) {\n    this._update = this._update.toBSON();\n  }\n\n  return this.mongooseCollection[op](castedQuery, this._update, options);\n}\n\n/**\n * Mongoose calls this function internally to validate the query if\n * `runValidators` is set\n *\n * @param {Object} castedDoc the update, after casting\n * @param {Object} options the options from `_optionsForExec()`\n * @param {Boolean} isOverwriting\n * @method validate\n * @memberOf Query\n * @instance\n * @api private\n */\n\nQuery.prototype.validate = async function validate(castedDoc, options, isOverwriting) {\n  if (typeof arguments[3] === 'function') {\n    throw new MongooseError('Query.prototype.validate() no longer accepts a callback');\n  }\n\n  await _executePreHooks(this, 'validate');\n\n  if (isOverwriting) {\n    await castedDoc.$validate();\n  } else {\n    await new Promise((resolve, reject) => {\n      updateValidators(this, this.model.schema, castedDoc, options, (err) => {\n        if (err != null) {\n          return reject(err);\n        }\n        resolve();\n      });\n    });\n  }\n\n  await _executePostHooks(this, null, null, 'validate');\n};\n\n/**\n * Execute an updateMany query\n *\n * @see Model.update https://mongoosejs.com/docs/api/model.html#Model.update()\n * @method _updateMany\n * @memberOf Query\n * @instance\n * @api private\n */\nQuery.prototype._updateMany = async function _updateMany() {\n  return _updateThunk.call(this, 'updateMany');\n};\n\n/**\n * Execute an updateOne query\n *\n * @see Model.update https://mongoosejs.com/docs/api/model.html#Model.update()\n * @method _updateOne\n * @memberOf Query\n * @instance\n * @api private\n */\nQuery.prototype._updateOne = async function _updateOne() {\n  return _updateThunk.call(this, 'updateOne');\n};\n\n/**\n * Execute a replaceOne query\n *\n * @see Model.replaceOne https://mongoosejs.com/docs/api/model.html#Model.replaceOne()\n * @method _replaceOne\n * @memberOf Query\n * @instance\n * @api private\n */\nQuery.prototype._replaceOne = async function _replaceOne() {\n  return _updateThunk.call(this, 'replaceOne');\n};\n\n/**\n * Declare and/or execute this query as an updateMany() operation.\n * MongoDB will update _all_ documents that match `filter` (as opposed to just the first one).\n *\n * **Note** updateMany will _not_ fire update middleware. Use `pre('updateMany')`\n * and `post('updateMany')` instead.\n *\n * #### Example:\n *\n *     const res = await Person.updateMany({ name: /Stark$/ }, { isDeleted: true });\n *     res.n; // Number of documents matched\n *     res.nModified; // Number of documents modified\n *\n * This function triggers the following middleware.\n *\n * - `updateMany()`\n *\n * @param {Object} [filter]\n * @param {Object|Array} [update] the update command\n * @param {Object} [options]\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @param {Boolean} [options.overwriteDiscriminatorKey=false] Mongoose removes discriminator key updates from `update` by default, set `overwriteDiscriminatorKey` to `true` to allow updating the discriminator key\n * @param {Function} [callback] params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update https://mongoosejs.com/docs/api/model.html#Model.update()\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see update https://www.mongodb.com/docs/manual/reference/method/db.collection.update/\n * @see UpdateResult https://mongodb.github.io/node-mongodb-native/4.9/interfaces/UpdateResult.html\n * @see MongoDB docs https://www.mongodb.com/docs/manual/reference/command/update/#update-command-output\n * @api public\n */\n\nQuery.prototype.updateMany = function(conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n\n  return _update(this, 'updateMany', conditions, doc, options, callback);\n};\n\n/**\n * Declare and/or execute this query as an updateOne() operation.\n * MongoDB will update _only_ the first document that matches `filter`.\n *\n * - Use `replaceOne()` if you want to overwrite an entire document rather than using [atomic operators](https://www.mongodb.com/docs/manual/tutorial/model-data-for-atomic-operations/#pattern) like `$set`.\n *\n * **Note** updateOne will _not_ fire update middleware. Use `pre('updateOne')`\n * and `post('updateOne')` instead.\n *\n * #### Example:\n *\n *     const res = await Person.updateOne({ name: 'Jean-Luc Picard' }, { ship: 'USS Enterprise' });\n *     res.acknowledged; // Indicates if this write result was acknowledged. If not, then all other members of this result will be undefined.\n *     res.matchedCount; // Number of documents that matched the filter\n *     res.modifiedCount; // Number of documents that were modified\n *     res.upsertedCount; // Number of documents that were upserted\n *     res.upsertedId; // Identifier of the inserted document (if an upsert took place)\n *\n * This function triggers the following middleware.\n *\n * - `updateOne()`\n *\n * @param {Object} [filter]\n * @param {Object|Array} [update] the update command\n * @param {Object} [options]\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @param {Boolean} [options.overwriteDiscriminatorKey=false] Mongoose removes discriminator key updates from `update` by default, set `overwriteDiscriminatorKey` to `true` to allow updating the discriminator key\n * @param {Function} [callback] params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update https://mongoosejs.com/docs/api/model.html#Model.update()\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see update https://www.mongodb.com/docs/manual/reference/method/db.collection.update/\n * @see UpdateResult https://mongodb.github.io/node-mongodb-native/4.9/interfaces/UpdateResult.html\n * @see MongoDB docs https://www.mongodb.com/docs/manual/reference/command/update/#update-command-output\n * @api public\n */\n\nQuery.prototype.updateOne = function(conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n\n  return _update(this, 'updateOne', conditions, doc, options, callback);\n};\n\n/**\n * Declare and/or execute this query as a replaceOne() operation.\n * MongoDB will replace the existing document and will not accept any [atomic operators](https://www.mongodb.com/docs/manual/tutorial/model-data-for-atomic-operations/#pattern) (`$set`, etc.)\n *\n * **Note** replaceOne will _not_ fire update middleware. Use `pre('replaceOne')`\n * and `post('replaceOne')` instead.\n *\n * #### Example:\n *\n *     const res = await Person.replaceOne({ _id: 24601 }, { name: 'Jean Valjean' });\n *     res.acknowledged; // Indicates if this write result was acknowledged. If not, then all other members of this result will be undefined.\n *     res.matchedCount; // Number of documents that matched the filter\n *     res.modifiedCount; // Number of documents that were modified\n *     res.upsertedCount; // Number of documents that were upserted\n *     res.upsertedId; // Identifier of the inserted document (if an upsert took place)\n *\n * This function triggers the following middleware.\n *\n * - `replaceOne()`\n *\n * @param {Object} [filter]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @param {Function} [callback] params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update https://mongoosejs.com/docs/api/model.html#Model.update()\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see update https://www.mongodb.com/docs/manual/reference/method/db.collection.update/\n * @see UpdateResult https://mongodb.github.io/node-mongodb-native/4.9/interfaces/UpdateResult.html\n * @see MongoDB docs https://www.mongodb.com/docs/manual/reference/command/update/#update-command-output\n * @api public\n */\n\nQuery.prototype.replaceOne = function(conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n\n  return _update(this, 'replaceOne', conditions, doc, options, callback);\n};\n\n/**\n * Internal helper for update, updateMany, updateOne, replaceOne\n * @param {Query} query\n * @param {String} op\n * @param {Object} filter\n * @param {Document} [doc]\n * @param {Object} [options]\n * @param {Function} callback\n * @api private\n */\n\nfunction _update(query, op, filter, doc, options, callback) {\n  // make sure we don't send in the whole Document to merge()\n  query.op = op;\n  query._validateOp();\n  doc = doc || {};\n\n  // strict is an option used in the update checking, make sure it gets set\n  if (options != null) {\n    if ('strict' in options) {\n      query._mongooseOptions.strict = options.strict;\n    }\n  }\n\n  if (!(filter instanceof Query) &&\n      filter != null &&\n      filter.toString() !== '[object Object]') {\n    query.error(new ObjectParameterError(filter, 'filter', op));\n  } else {\n    query.merge(filter);\n  }\n\n  if (utils.isObject(options)) {\n    query.setOptions(options);\n  }\n\n  query._mergeUpdate(doc);\n\n  // Hooks\n  if (callback) {\n    query.exec(callback);\n\n    return query;\n  }\n\n  return query;\n}\n\n/**\n * Runs a function `fn` and treats the return value of `fn` as the new value\n * for the query to resolve to.\n *\n * Any functions you pass to `transform()` will run **after** any post hooks.\n *\n * #### Example:\n *\n *     const res = await MyModel.findOne().transform(res => {\n *       // Sets a `loadedAt` property on the doc that tells you the time the\n *       // document was loaded.\n *       return res == null ?\n *         res :\n *         Object.assign(res, { loadedAt: new Date() });\n *     });\n *\n * @method transform\n * @memberOf Query\n * @instance\n * @param {Function} fn function to run to transform the query result\n * @return {Query} this\n */\n\nQuery.prototype.transform = function(fn) {\n  this._transforms.push(fn);\n  return this;\n};\n\n/**\n * Make this query throw an error if no documents match the given `filter`.\n * This is handy for integrating with async/await, because `orFail()` saves you\n * an extra `if` statement to check if no document was found.\n *\n * #### Example:\n *\n *     // Throws if no doc returned\n *     await Model.findOne({ foo: 'bar' }).orFail();\n *\n *     // Throws if no document was updated. Note that `orFail()` will still\n *     // throw if the only document that matches is `{ foo: 'bar', name: 'test' }`,\n *     // because `orFail()` will throw if no document was _updated_, not\n *     // if no document was _found_.\n *     await Model.updateOne({ foo: 'bar' }, { name: 'test' }).orFail();\n *\n *     // Throws \"No docs found!\" error if no docs match `{ foo: 'bar' }`\n *     await Model.find({ foo: 'bar' }).orFail(new Error('No docs found!'));\n *\n *     // Throws \"Not found\" error if no document was found\n *     await Model.findOneAndUpdate({ foo: 'bar' }, { name: 'test' }).\n *       orFail(() => Error('Not found'));\n *\n * @method orFail\n * @memberOf Query\n * @instance\n * @param {Function|Error} [err] optional error to throw if no docs match `filter`. If not specified, `orFail()` will throw a `DocumentNotFoundError`\n * @return {Query} this\n */\n\nQuery.prototype.orFail = function(err) {\n  this.transform(res => {\n    switch (this.op) {\n      case 'find':\n        if (res.length === 0) {\n          throw _orFailError(err, this);\n        }\n        break;\n      case 'findOne':\n        if (res == null) {\n          throw _orFailError(err, this);\n        }\n        break;\n      case 'replaceOne':\n      case 'updateMany':\n      case 'updateOne':\n        if (res && res.matchedCount === 0) {\n          throw _orFailError(err, this);\n        }\n        break;\n      case 'findOneAndDelete':\n      case 'findOneAndUpdate':\n      case 'findOneAndReplace':\n        if (this.options.includeResultMetadata && res != null && res.value == null) {\n          throw _orFailError(err, this);\n        }\n        if (!this.options.includeResultMetadata && res == null) {\n          throw _orFailError(err, this);\n        }\n        break;\n      case 'deleteMany':\n      case 'deleteOne':\n        if (res.deletedCount === 0) {\n          throw _orFailError(err, this);\n        }\n        break;\n      default:\n        break;\n    }\n\n    return res;\n  });\n  return this;\n};\n\n/**\n * Get the error to throw for `orFail()`\n * @param {Error|undefined} err\n * @param {Query} query\n * @api private\n */\n\nfunction _orFailError(err, query) {\n  if (typeof err === 'function') {\n    err = err.call(query);\n  }\n\n  if (err == null) {\n    err = new DocumentNotFoundError(query.getQuery(), query.model.modelName);\n  }\n\n  return err;\n}\n\n/**\n * Wrapper function to call isPathSelectedInclusive on a query.\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\nQuery.prototype.isPathSelectedInclusive = function(path) {\n  return isPathSelectedInclusive(this._fields, path);\n};\n\n/**\n * Executes the query\n *\n * #### Example:\n *\n *     const promise = query.exec();\n *     const promise = query.exec('update');\n *\n * @param {String|Function} [operation]\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.exec = async function exec(op) {\n  if (typeof op === 'function' || (arguments.length >= 2 && typeof arguments[1] === 'function')) {\n    throw new MongooseError('Query.prototype.exec() no longer accepts a callback');\n  }\n\n  if (typeof op === 'string') {\n    this.op = op;\n  }\n\n  if (this.op == null) {\n    throw new MongooseError('Query must have `op` before executing');\n  }\n  if (this.model == null) {\n    throw new MongooseError('Query must have an associated model before executing');\n  }\n  this._validateOp();\n\n  if (!this.op) {\n    return;\n  }\n\n  if (this.options && this.options.sort) {\n    const keys = Object.keys(this.options.sort);\n    if (keys.includes('')) {\n      throw new Error('Invalid field \"\" passed to sort()');\n    }\n  }\n\n  let thunk = '_' + this.op;\n  if (this.op === 'distinct') {\n    thunk = '__distinct';\n  }\n\n  if (this._executionStack != null) {\n    let str = this.toString();\n    if (str.length > 60) {\n      str = str.slice(0, 60) + '...';\n    }\n    const err = new MongooseError('Query was already executed: ' + str);\n    err.originalStack = this._executionStack.stack;\n    throw err;\n  } else {\n    this._executionStack = new Error();\n  }\n\n  let skipWrappedFunction = null;\n  try {\n    await _executePreExecHooks(this);\n  } catch (err) {\n    if (err instanceof Kareem.skipWrappedFunction) {\n      skipWrappedFunction = err;\n    } else {\n      throw err;\n    }\n  }\n\n  let res;\n\n  let error = null;\n  try {\n    await _executePreHooks(this);\n    res = skipWrappedFunction ? skipWrappedFunction.args[0] : await this[thunk]();\n\n    for (const fn of this._transforms) {\n      res = fn(res);\n    }\n  } catch (err) {\n    if (err instanceof Kareem.skipWrappedFunction) {\n      res = err.args[0];\n    } else {\n      error = err;\n    }\n  }\n\n  res = await _executePostHooks(this, res, error);\n\n  await _executePostExecHooks(this);\n\n  return res;\n};\n\n/*!\n * ignore\n */\n\nfunction _executePostExecHooks(query) {\n  return new Promise((resolve, reject) => {\n    query._hooks.execPost('exec', query, [], {}, (error) => {\n      if (error) {\n        return reject(error);\n      }\n\n      resolve();\n    });\n  });\n}\n\n/*!\n * ignore\n */\n\nfunction _executePostHooks(query, res, error, op) {\n  if (query._queryMiddleware == null) {\n    if (error != null) {\n      throw error;\n    }\n    return res;\n  }\n\n  return new Promise((resolve, reject) => {\n    const opts = error ? { error } : {};\n\n    query._queryMiddleware.execPost(op || query.op, query, [res], opts, (error, res) => {\n      if (error) {\n        return reject(error);\n      }\n\n      resolve(res);\n    });\n  });\n}\n\n/*!\n * ignore\n */\n\nfunction _executePreExecHooks(query) {\n  return new Promise((resolve, reject) => {\n    query._hooks.execPre('exec', query, [], (error) => {\n      if (error != null) {\n        return reject(error);\n      }\n      resolve();\n    });\n  });\n}\n\n/*!\n * ignore\n */\n\nfunction _executePreHooks(query, op) {\n  if (query._queryMiddleware == null) {\n    return;\n  }\n\n  return new Promise((resolve, reject) => {\n    query._queryMiddleware.execPre(op || query.op, query, [], (error) => {\n      if (error != null) {\n        return reject(error);\n      }\n      resolve();\n    });\n  });\n}\n\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n *\n * More about [`then()` in JavaScript](https://masteringjs.io/tutorials/fundamentals/then).\n *\n * @param {Function} [resolve]\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.then = function(resolve, reject) {\n  return this.exec().then(resolve, reject);\n};\n\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n * Like `.then()`, but only takes a rejection handler.\n *\n * More about [Promise `catch()` in JavaScript](https://masteringjs.io/tutorials/fundamentals/catch).\n *\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.catch = function(reject) {\n  return this.exec().then(null, reject);\n};\n\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with `.finally()` chained.\n *\n * More about [Promise `finally()` in JavaScript](https://thecodebarbarian.com/using-promise-finally-in-node-js.html).\n *\n * @param {Function} [onFinally]\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.finally = function(onFinally) {\n  return this.exec().finally(onFinally);\n};\n\n/**\n * Returns a string representation of this query.\n *\n * More about [`toString()` in JavaScript](https://masteringjs.io/tutorials/fundamentals/tostring).\n *\n * #### Example:\n *     const q = Model.find();\n *     console.log(q); // Prints \"Query { find }\"\n *\n * @return {String}\n * @api public\n * @method [Symbol.toStringTag]\n * @memberOf Query\n */\n\nQuery.prototype[Symbol.toStringTag] = function toString() {\n  return `Query { ${this.op} }`;\n};\n\n/**\n * Add pre [middleware](https://mongoosejs.com/docs/middleware.html) to this query instance. Doesn't affect\n * other queries.\n *\n * #### Example:\n *\n *     const q1 = Question.find({ answer: 42 });\n *     q1.pre(function middleware() {\n *       console.log(this.getFilter());\n *     });\n *     await q1.exec(); // Prints \"{ answer: 42 }\"\n *\n *     // Doesn't print anything, because `middleware()` is only\n *     // registered on `q1`.\n *     await Question.find({ answer: 42 });\n *\n * @param {Function} fn\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.pre = function(fn) {\n  this._hooks.pre('exec', fn);\n  return this;\n};\n\n/**\n * Add post [middleware](https://mongoosejs.com/docs/middleware.html) to this query instance. Doesn't affect\n * other queries.\n *\n * #### Example:\n *\n *     const q1 = Question.find({ answer: 42 });\n *     q1.post(function middleware() {\n *       console.log(this.getFilter());\n *     });\n *     await q1.exec(); // Prints \"{ answer: 42 }\"\n *\n *     // Doesn't print anything, because `middleware()` is only\n *     // registered on `q1`.\n *     await Question.find({ answer: 42 });\n *\n * @param {Function} fn\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.post = function(fn) {\n  this._hooks.post('exec', fn);\n  return this;\n};\n\n/**\n * Casts obj for an update command.\n *\n * @param {Object} obj\n * @return {Object} obj after casting its values\n * @method _castUpdate\n * @memberOf Query\n * @instance\n * @api private\n */\n\nQuery.prototype._castUpdate = function _castUpdate(obj) {\n  let schema = this.schema;\n\n  const discriminatorKey = schema.options.discriminatorKey;\n  const baseSchema = schema._baseSchema ? schema._baseSchema : schema;\n  if (this._mongooseOptions.overwriteDiscriminatorKey &&\n      obj[discriminatorKey] != null &&\n      baseSchema.discriminators) {\n    const _schema = Object.values(baseSchema.discriminators).find(\n      discriminator => discriminator.discriminatorMapping.value === obj[discriminatorKey]\n    );\n    if (_schema != null) {\n      schema = _schema;\n    }\n  }\n\n  let upsert;\n  if ('upsert' in this.options) {\n    upsert = this.options.upsert;\n  }\n\n  const filter = this._conditions;\n  if (schema != null &&\n      utils.hasUserDefinedProperty(filter, schema.options.discriminatorKey) &&\n      typeof filter[schema.options.discriminatorKey] !== 'object' &&\n      schema.discriminators != null) {\n    const discriminatorValue = filter[schema.options.discriminatorKey];\n    const byValue = getDiscriminatorByValue(this.model.discriminators, discriminatorValue);\n    schema = schema.discriminators[discriminatorValue] ||\n      (byValue && byValue.schema) ||\n      schema;\n  }\n\n  return castUpdate(schema, obj, {\n    strict: this._mongooseOptions.strict,\n    upsert: upsert,\n    arrayFilters: this.options.arrayFilters,\n    overwriteDiscriminatorKey: this._mongooseOptions.overwriteDiscriminatorKey\n  }, this, this._conditions);\n};\n\n/**\n * Specifies paths which should be populated with other documents.\n *\n * #### Example:\n *\n *     let book = await Book.findOne().populate('authors');\n *     book.title; // 'Node.js in Action'\n *     book.authors[0].name; // 'TJ Holowaychuk'\n *     book.authors[1].name; // 'Nathan Rajlich'\n *\n *     let books = await Book.find().populate({\n *       path: 'authors',\n *       // `match` and `sort` apply to the Author model,\n *       // not the Book model. These options do not affect\n *       // which documents are in `books`, just the order and\n *       // contents of each book document's `authors`.\n *       match: { name: new RegExp('.*h.*', 'i') },\n *       sort: { name: -1 }\n *     });\n *     books[0].title; // 'Node.js in Action'\n *     // Each book's `authors` are sorted by name, descending.\n *     books[0].authors[0].name; // 'TJ Holowaychuk'\n *     books[0].authors[1].name; // 'Marc Harter'\n *\n *     books[1].title; // 'Professional AngularJS'\n *     // Empty array, no authors' name has the letter 'h'\n *     books[1].authors; // []\n *\n * Paths are populated after the query executes and a response is received. A\n * separate query is then executed for each path specified for population. After\n * a response for each query has also been returned, the results are passed to\n * the callback.\n *\n * @param {Object|String|String[]} path either the path(s) to populate or an object specifying all parameters\n * @param {Object|String} [select] Field selection for the population query\n * @param {Model} [model] The model you wish to use for population. If not specified, populate will look up the model by the name in the Schema's `ref` field.\n * @param {Object} [match] Conditions for the population query\n * @param {Object} [options] Options for the population query (sort, etc)\n * @param {String} [options.path=null] The path to populate.\n * @param {boolean} [options.retainNullValues=false] by default, Mongoose removes null and undefined values from populated arrays. Use this option to make `populate()` retain `null` and `undefined` array entries.\n * @param {boolean} [options.getters=false] if true, Mongoose will call any getters defined on the `localField`. By default, Mongoose gets the raw value of `localField`. For example, you would need to set this option to `true` if you wanted to [add a `lowercase` getter to your `localField`](https://mongoosejs.com/docs/schematypes.html#schematype-options).\n * @param {boolean} [options.clone=false] When you do `BlogPost.find().populate('author')`, blog posts with the same author will share 1 copy of an `author` doc. Enable this option to make Mongoose clone populated docs before assigning them.\n * @param {Object|Function} [options.match=null] Add an additional filter to the populate query. Can be a filter object containing [MongoDB query syntax](https://www.mongodb.com/docs/manual/tutorial/query-documents/), or a function that returns a filter object.\n * @param {Function} [options.transform=null] Function that Mongoose will call on every populated document that allows you to transform the populated document.\n * @param {Object} [options.options=null] Additional options like `limit` and `lean`.\n * @see population https://mongoosejs.com/docs/populate.html\n * @see Query#select https://mongoosejs.com/docs/api/query.html#Query.prototype.select()\n * @see Model.populate https://mongoosejs.com/docs/api/model.html#Model.populate()\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.populate = function() {\n  // Bail when given no truthy arguments\n  if (!Array.from(arguments).some(Boolean)) {\n    return this;\n  }\n\n  const res = utils.populate.apply(null, arguments);\n\n  // Propagate readConcern and readPreference and lean from parent query,\n  // unless one already specified\n  if (this.options != null) {\n    const readConcern = this.options.readConcern;\n    const readPref = this.options.readPreference;\n\n    for (const populateOptions of res) {\n      if (readConcern != null && (populateOptions && populateOptions.options && populateOptions.options.readConcern) == null) {\n        populateOptions.options = populateOptions.options || {};\n        populateOptions.options.readConcern = readConcern;\n      }\n      if (readPref != null && (populateOptions && populateOptions.options && populateOptions.options.readPreference) == null) {\n        populateOptions.options = populateOptions.options || {};\n        populateOptions.options.readPreference = readPref;\n      }\n    }\n  }\n\n  const opts = this._mongooseOptions;\n\n  if (opts.lean != null) {\n    const lean = opts.lean;\n    for (const populateOptions of res) {\n      if ((populateOptions && populateOptions.options && populateOptions.options.lean) == null) {\n        populateOptions.options = populateOptions.options || {};\n        populateOptions.options.lean = lean;\n      }\n    }\n  }\n\n  if (!utils.isObject(opts.populate)) {\n    opts.populate = {};\n  }\n\n  const pop = opts.populate;\n\n  for (const populateOptions of res) {\n    const path = populateOptions.path;\n    if (pop[path] && pop[path].populate && populateOptions.populate) {\n      populateOptions.populate = pop[path].populate.concat(populateOptions.populate);\n    }\n\n    pop[populateOptions.path] = populateOptions;\n  }\n  return this;\n};\n\n/**\n * Gets a list of paths to be populated by this query\n *\n * #### Example:\n *\n *      bookSchema.pre('findOne', function() {\n *        let keys = this.getPopulatedPaths(); // ['author']\n *      });\n *      ...\n *      Book.findOne({}).populate('author');\n *\n * #### Example:\n *\n *      // Deep populate\n *      const q = L1.find().populate({\n *        path: 'level2',\n *        populate: { path: 'level3' }\n *      });\n *      q.getPopulatedPaths(); // ['level2', 'level2.level3']\n *\n * @return {Array} an array of strings representing populated paths\n * @api public\n */\n\nQuery.prototype.getPopulatedPaths = function getPopulatedPaths() {\n  const obj = this._mongooseOptions.populate || {};\n  const ret = Object.keys(obj);\n  for (const path of Object.keys(obj)) {\n    const pop = obj[path];\n    if (!Array.isArray(pop.populate)) {\n      continue;\n    }\n    _getPopulatedPaths(ret, pop.populate, path + '.');\n  }\n  return ret;\n};\n\n/*!\n * ignore\n */\n\nfunction _getPopulatedPaths(list, arr, prefix) {\n  for (const pop of arr) {\n    list.push(prefix + pop.path);\n    if (!Array.isArray(pop.populate)) {\n      continue;\n    }\n    _getPopulatedPaths(list, pop.populate, prefix + pop.path + '.');\n  }\n}\n\n/**\n * Casts this query to the schema of `model`\n *\n * #### Note:\n *\n * If `obj` is present, it is cast instead of this query.\n *\n * @param {Model} [model] the model to cast to. If not set, defaults to `this.model`\n * @param {Object} [obj]\n * @return {Object}\n * @api public\n */\n\nQuery.prototype.cast = function(model, obj) {\n  obj || (obj = this._conditions);\n  model = model || this.model;\n  const discriminatorKey = model.schema.options.discriminatorKey;\n  if (obj != null &&\n      obj.hasOwnProperty(discriminatorKey)) {\n    model = getDiscriminatorByValue(model.discriminators, obj[discriminatorKey]) || model;\n  }\n\n  const opts = { upsert: this.options && this.options.upsert };\n  if (this.options) {\n    if ('strict' in this.options) {\n      opts.strict = this.options.strict;\n    }\n    if ('strictQuery' in this.options) {\n      opts.strictQuery = this.options.strictQuery;\n    }\n  }\n\n  try {\n    return cast(model.schema, obj, opts, this);\n  } catch (err) {\n    // CastError, assign model\n    if (typeof err.setModel === 'function') {\n      err.setModel(model);\n    }\n    throw err;\n  }\n};\n\n/**\n * Casts selected field arguments for field selection with mongo 2.2\n *\n *     query.select({ ids: { $elemMatch: { $in: [hexString] }})\n *\n * @param {Object} fields\n * @see https://github.com/Automattic/mongoose/issues/1091\n * @see https://www.mongodb.com/docs/manual/reference/projection/elemMatch/\n * @api private\n */\n\nQuery.prototype._castFields = function _castFields(fields) {\n  let selected,\n      elemMatchKeys,\n      keys,\n      key,\n      out;\n\n  if (fields) {\n    keys = Object.keys(fields);\n    elemMatchKeys = [];\n\n    // collect $elemMatch args\n    for (let i = 0; i < keys.length; ++i) {\n      key = keys[i];\n      if (fields[key].$elemMatch) {\n        selected || (selected = {});\n        selected[key] = fields[key];\n        elemMatchKeys.push(key);\n      }\n    }\n  }\n\n  if (selected) {\n    // they passed $elemMatch, cast em\n    try {\n      out = this.cast(this.model, selected);\n    } catch (err) {\n      return err;\n    }\n\n    // apply the casted field args\n    for (let i = 0; i < elemMatchKeys.length; ++i) {\n      key = elemMatchKeys[i];\n      fields[key] = out[key];\n    }\n  }\n\n  return fields;\n};\n\n/**\n * Applies schematype selected options to this query.\n * @api private\n */\n\nQuery.prototype._applyPaths = function applyPaths() {\n  if (!this.model) {\n    return;\n  }\n  this._fields = this._fields || {};\n  helpers.applyPaths(this._fields, this.model.schema);\n\n  let _selectPopulatedPaths = true;\n\n  if ('selectPopulatedPaths' in this.model.base.options) {\n    _selectPopulatedPaths = this.model.base.options.selectPopulatedPaths;\n  }\n  if ('selectPopulatedPaths' in this.model.schema.options) {\n    _selectPopulatedPaths = this.model.schema.options.selectPopulatedPaths;\n  }\n\n  if (_selectPopulatedPaths) {\n    selectPopulatedFields(this._fields, this._userProvidedFields, this._mongooseOptions.populate);\n  }\n};\n\n/**\n * Returns a wrapper around a [mongodb driver cursor](https://mongodb.github.io/node-mongodb-native/4.9/classes/FindCursor.html).\n * A QueryCursor exposes a Streams3 interface, as well as a `.next()` function.\n *\n * The `.cursor()` function triggers pre find hooks, but **not** post find hooks.\n *\n * #### Example:\n *\n *     // There are 2 ways to use a cursor. First, as a stream:\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       on('data', function(doc) { console.log(doc); }).\n *       on('end', function() { console.log('Done!'); });\n *\n *     // Or you can use `.next()` to manually get the next doc in the stream.\n *     // `.next()` returns a promise, so you can use promises or callbacks.\n *     const cursor = Thing.find({ name: /^hello/ }).cursor();\n *     cursor.next(function(error, doc) {\n *       console.log(doc);\n *     });\n *\n *     // Because `.next()` returns a promise, you can use co\n *     // to easily iterate through all documents without loading them\n *     // all into memory.\n *     const cursor = Thing.find({ name: /^hello/ }).cursor();\n *     for (let doc = await cursor.next(); doc != null; doc = await cursor.next()) {\n *       console.log(doc);\n *     }\n *\n * #### Valid options\n *\n *   - `transform`: optional function which accepts a mongoose document. The return value of the function will be emitted on `data` and returned by `.next()`.\n *\n * @return {QueryCursor}\n * @param {Object} [options]\n * @see QueryCursor https://mongoosejs.com/docs/api/querycursor.html\n * @api public\n */\n\nQuery.prototype.cursor = function cursor(opts) {\n  if (opts) {\n    this.setOptions(opts);\n  }\n\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    return (new QueryCursor(this))._markError(err);\n  }\n\n  return new QueryCursor(this);\n};\n\n// the rest of these are basically to support older Mongoose syntax with mquery\n\n/**\n * Sets the tailable option (for use with capped collections).\n *\n * #### Example:\n *\n *     query.tailable(); // true\n *     query.tailable(true);\n *     query.tailable(false);\n *\n *     // Set both `tailable` and `awaitData` options\n *     query.tailable({ awaitData: true });\n *\n * #### Note:\n *\n * Cannot be used with `distinct()`\n *\n * @param {Boolean} bool defaults to true\n * @param {Object} [opts] options to set\n * @param {Boolean} [opts.awaitData] false by default. Set to true to keep the cursor open even if there's no data.\n * @param {Number} [opts.maxAwaitTimeMS] the maximum amount of time for the server to wait on new documents to satisfy a tailable cursor query. Requires `tailable` and `awaitData` to be true\n * @see tailable https://www.mongodb.com/docs/manual/tutorial/create-tailable-cursor/\n * @api public\n */\n\nQuery.prototype.tailable = function(val, opts) {\n  // we need to support the tailable({ awaitData : true }) as well as the\n  // tailable(true, {awaitData :true}) syntax that mquery does not support\n  if (val != null && typeof val.constructor === 'function' && val.constructor.name === 'Object') {\n    opts = val;\n    val = true;\n  }\n\n  if (val === undefined) {\n    val = true;\n  }\n\n  if (opts && typeof opts === 'object') {\n    for (const key of Object.keys(opts)) {\n      if (key === 'awaitData' || key === 'awaitdata') { // backwards compat, see gh-10875\n        // For backwards compatibility\n        this.options['awaitData'] = !!opts[key];\n      } else {\n        this.options[key] = opts[key];\n      }\n    }\n  }\n\n  this.options.tailable = arguments.length ? !!val : true;\n\n  return this;\n};\n\n/**\n * Declares an intersects query for `geometry()`.\n *\n * #### Example:\n *\n *     query.where('path').intersects().geometry({\n *       type: 'LineString',\n *       coordinates: [[180.0, 11.0], [180, 9.0]]\n *     });\n *\n *     query.where('path').intersects({\n *       type: 'LineString',\n *       coordinates: [[180.0, 11.0], [180, 9.0]]\n *     });\n *\n * #### Note:\n *\n * **MUST** be used after `where()`.\n *\n * #### Note:\n *\n * In Mongoose 3.7, `intersects` changed from a getter to a function. If you need the old syntax, use [this](https://github.com/ebensing/mongoose-within).\n *\n * @method intersects\n * @memberOf Query\n * @instance\n * @param {Object} [arg]\n * @return {Query} this\n * @see $geometry https://www.mongodb.com/docs/manual/reference/operator/geometry/\n * @see geoIntersects https://www.mongodb.com/docs/manual/reference/operator/geoIntersects/\n * @api public\n */\n\n/**\n * Specifies a `$geometry` condition\n *\n * #### Example:\n *\n *     const polyA = [[[ 10, 20 ], [ 10, 40 ], [ 30, 40 ], [ 30, 20 ]]]\n *     query.where('loc').within().geometry({ type: 'Polygon', coordinates: polyA })\n *\n *     // or\n *     const polyB = [[ 0, 0 ], [ 1, 1 ]]\n *     query.where('loc').within().geometry({ type: 'LineString', coordinates: polyB })\n *\n *     // or\n *     const polyC = [ 0, 0 ]\n *     query.where('loc').within().geometry({ type: 'Point', coordinates: polyC })\n *\n *     // or\n *     query.where('loc').intersects().geometry({ type: 'Point', coordinates: polyC })\n *\n * The argument is assigned to the most recent path passed to `where()`.\n *\n * #### Note:\n *\n * `geometry()` **must** come after either `intersects()` or `within()`.\n *\n * The `object` argument must contain `type` and `coordinates` properties.\n * - type {String}\n * - coordinates {Array}\n *\n * @method geometry\n * @memberOf Query\n * @instance\n * @param {Object} object Must contain a `type` property which is a String and a `coordinates` property which is an Array. See the examples.\n * @return {Query} this\n * @see $geometry https://www.mongodb.com/docs/manual/reference/operator/geometry/\n * @see Geospatial Support Enhancements https://www.mongodb.com/docs/manual/release-notes/2.4/#geospatial-support-enhancements\n * @see MongoDB Geospatial Indexing https://www.mongodb.com/docs/manual/core/geospatial-indexes/\n * @api public\n */\n\n/**\n * Specifies a `$near` or `$nearSphere` condition\n *\n * These operators return documents sorted by distance.\n *\n * #### Example:\n *\n *     query.where('loc').near({ center: [10, 10] });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5 });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5, spherical: true });\n *     query.near('loc', { center: [10, 10], maxDistance: 5 });\n *\n * @method near\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see $near https://www.mongodb.com/docs/manual/reference/operator/near/\n * @see $nearSphere https://www.mongodb.com/docs/manual/reference/operator/nearSphere/\n * @see $maxDistance https://www.mongodb.com/docs/manual/reference/operator/maxDistance/\n * @see MongoDB Geospatial Indexing https://www.mongodb.com/docs/manual/core/geospatial-indexes/\n * @api public\n */\n\n/**\n * Overwriting mquery is needed to support a couple different near() forms found in older\n * versions of mongoose\n * near([1,1])\n * near(1,1)\n * near(field, [1,2])\n * near(field, 1, 2)\n * In addition to all of the normal forms supported by mquery\n *\n * @method near\n * @memberOf Query\n * @instance\n * @api private\n */\n\nQuery.prototype.near = function() {\n  const params = [];\n  const sphere = this._mongooseOptions.nearSphere;\n\n  // TODO refactor\n\n  if (arguments.length === 1) {\n    if (Array.isArray(arguments[0])) {\n      params.push({ center: arguments[0], spherical: sphere });\n    } else if (typeof arguments[0] === 'string') {\n      // just passing a path\n      params.push(arguments[0]);\n    } else if (utils.isObject(arguments[0])) {\n      if (typeof arguments[0].spherical !== 'boolean') {\n        arguments[0].spherical = sphere;\n      }\n      params.push(arguments[0]);\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else if (arguments.length === 2) {\n    if (typeof arguments[0] === 'number' && typeof arguments[1] === 'number') {\n      params.push({ center: [arguments[0], arguments[1]], spherical: sphere });\n    } else if (typeof arguments[0] === 'string' && Array.isArray(arguments[1])) {\n      params.push(arguments[0]);\n      params.push({ center: arguments[1], spherical: sphere });\n    } else if (typeof arguments[0] === 'string' && utils.isObject(arguments[1])) {\n      params.push(arguments[0]);\n      if (typeof arguments[1].spherical !== 'boolean') {\n        arguments[1].spherical = sphere;\n      }\n      params.push(arguments[1]);\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else if (arguments.length === 3) {\n    if (typeof arguments[0] === 'string' && typeof arguments[1] === 'number'\n        && typeof arguments[2] === 'number') {\n      params.push(arguments[0]);\n      params.push({ center: [arguments[1], arguments[2]], spherical: sphere });\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else {\n    throw new TypeError('invalid argument');\n  }\n\n  return Query.base.near.apply(this, params);\n};\n\n/**\n * _DEPRECATED_ Specifies a `$nearSphere` condition\n *\n * #### Example:\n *\n *     query.where('loc').nearSphere({ center: [10, 10], maxDistance: 5 });\n *\n * **Deprecated.** Use `query.near()` instead with the `spherical` option set to `true`.\n *\n * #### Example:\n *\n *     query.where('loc').near({ center: [10, 10], spherical: true });\n *\n * @deprecated\n * @see near() https://mongoosejs.com/docs/api/query.html#Query.prototype.near()\n * @see $near https://www.mongodb.com/docs/manual/reference/operator/near/\n * @see $nearSphere https://www.mongodb.com/docs/manual/reference/operator/nearSphere/\n * @see $maxDistance https://www.mongodb.com/docs/manual/reference/operator/maxDistance/\n */\n\nQuery.prototype.nearSphere = function() {\n  this._mongooseOptions.nearSphere = true;\n  this.near.apply(this, arguments);\n  return this;\n};\n\n/**\n * Returns an asyncIterator for use with [`for/await/of` loops](https://thecodebarbarian.com/getting-started-with-async-iterators-in-node-js)\n * This function *only* works for `find()` queries.\n * You do not need to call this function explicitly, the JavaScript runtime\n * will call it for you.\n *\n * #### Example:\n *\n *     for await (const doc of Model.aggregate([{ $sort: { name: 1 } }])) {\n *       console.log(doc.name);\n *     }\n *\n * Node.js 10.x supports async iterators natively without any flags. You can\n * enable async iterators in Node.js 8.x using the [`--harmony_async_iteration` flag](https://github.com/tc39/proposal-async-iteration/issues/117#issuecomment-346695187).\n *\n * **Note:** This function is not if `Symbol.asyncIterator` is undefined. If\n * `Symbol.asyncIterator` is undefined, that means your Node.js version does not\n * support async iterators.\n *\n * @method [Symbol.asyncIterator]\n * @memberOf Query\n * @instance\n * @api public\n */\n\nif (Symbol.asyncIterator != null) {\n  Query.prototype[Symbol.asyncIterator] = function() {\n    return this.cursor().transformNull()._transformForAsyncIterator();\n  };\n}\n\n/**\n * Specifies a `$polygon` condition\n *\n * #### Example:\n *\n *     query.where('loc').within().polygon([10, 20], [13, 25], [7, 15]);\n *     query.polygon('loc', [10, 20], [13, 25], [7, 15]);\n *\n * @method polygon\n * @memberOf Query\n * @instance\n * @param {String|Array} [path]\n * @param {...Array|Object} [coordinatePairs]\n * @return {Query} this\n * @see $polygon https://www.mongodb.com/docs/manual/reference/operator/polygon/\n * @see MongoDB Geospatial Indexing https://www.mongodb.com/docs/manual/core/geospatial-indexes/\n * @api public\n */\n\n/**\n * Specifies a `$box` condition\n *\n * #### Example:\n *\n *     const lowerLeft = [40.73083, -73.99756]\n *     const upperRight= [40.741404,  -73.988135]\n *\n *     query.where('loc').within().box(lowerLeft, upperRight)\n *     query.box({ ll : lowerLeft, ur : upperRight })\n *\n * @method box\n * @memberOf Query\n * @instance\n * @see $box https://www.mongodb.com/docs/manual/reference/operator/box/\n * @see within() Query#within https://mongoosejs.com/docs/api/query.html#Query.prototype.within()\n * @see MongoDB Geospatial Indexing https://www.mongodb.com/docs/manual/core/geospatial-indexes/\n * @param {Object|Array<Number>} val1 Lower Left Coordinates OR a object of lower-left(ll) and upper-right(ur) Coordinates\n * @param {Array<Number>} [val2] Upper Right Coordinates\n * @return {Query} this\n * @api public\n */\n\n/**\n * this is needed to support the mongoose syntax of:\n * box(field, { ll : [x,y], ur : [x2,y2] })\n * box({ ll : [x,y], ur : [x2,y2] })\n *\n * @method box\n * @memberOf Query\n * @instance\n * @api private\n */\n\nQuery.prototype.box = function(ll, ur) {\n  if (!Array.isArray(ll) && utils.isObject(ll)) {\n    ur = ll.ur;\n    ll = ll.ll;\n  }\n  return Query.base.box.call(this, ll, ur);\n};\n\n/**\n * Specifies a `$center` or `$centerSphere` condition.\n *\n * #### Example:\n *\n *     const area = { center: [50, 50], radius: 10, unique: true }\n *     query.where('loc').within().circle(area)\n *     // alternatively\n *     query.circle('loc', area);\n *\n *     // spherical calculations\n *     const area = { center: [50, 50], radius: 10, unique: true, spherical: true }\n *     query.where('loc').within().circle(area)\n *     // alternatively\n *     query.circle('loc', area);\n *\n * @method circle\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Object} area\n * @return {Query} this\n * @see $center https://www.mongodb.com/docs/manual/reference/operator/center/\n * @see $centerSphere https://www.mongodb.com/docs/manual/reference/operator/centerSphere/\n * @see $geoWithin https://www.mongodb.com/docs/manual/reference/operator/geoWithin/\n * @see MongoDB Geospatial Indexing https://www.mongodb.com/docs/manual/core/geospatial-indexes/\n * @api public\n */\n\n/**\n * _DEPRECATED_ Alias for [circle](https://mongoosejs.com/docs/api/query.html#Query.prototype.circle())\n *\n * **Deprecated.** Use [circle](https://mongoosejs.com/docs/api/query.html#Query.prototype.circle()) instead.\n *\n * @deprecated\n * @method center\n * @memberOf Query\n * @instance\n * @api public\n */\n\nQuery.prototype.center = Query.base.circle;\n\n/**\n * _DEPRECATED_ Specifies a `$centerSphere` condition\n *\n * **Deprecated.** Use [circle](https://mongoosejs.com/docs/api/query.html#Query.prototype.circle()) instead.\n *\n * #### Example:\n *\n *     const area = { center: [50, 50], radius: 10 };\n *     query.where('loc').within().centerSphere(area);\n *\n * @deprecated\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see MongoDB Geospatial Indexing https://www.mongodb.com/docs/manual/core/geospatial-indexes/\n * @see $centerSphere https://www.mongodb.com/docs/manual/reference/operator/centerSphere/\n * @api public\n */\n\nQuery.prototype.centerSphere = function() {\n  if (arguments[0] != null && typeof arguments[0].constructor === 'function' && arguments[0].constructor.name === 'Object') {\n    arguments[0].spherical = true;\n  }\n\n  if (arguments[1] != null && typeof arguments[1].constructor === 'function' && arguments[1].constructor.name === 'Object') {\n    arguments[1].spherical = true;\n  }\n\n  Query.base.circle.apply(this, arguments);\n};\n\n/**\n * Determines if field selection has been made.\n *\n * @method selected\n * @memberOf Query\n * @instance\n * @return {Boolean}\n * @api public\n */\n\n/**\n * Determines if inclusive field selection has been made.\n *\n *     query.selectedInclusively(); // false\n *     query.select('name');\n *     query.selectedInclusively(); // true\n *\n * @method selectedInclusively\n * @memberOf Query\n * @instance\n * @return {Boolean}\n * @api public\n */\n\nQuery.prototype.selectedInclusively = function selectedInclusively() {\n  return isInclusive(this._fields);\n};\n\n/**\n * Determines if exclusive field selection has been made.\n *\n *     query.selectedExclusively(); // false\n *     query.select('-name');\n *     query.selectedExclusively(); // true\n *     query.selectedInclusively(); // false\n *\n * @method selectedExclusively\n * @memberOf Query\n * @instance\n * @return {Boolean}\n * @api public\n */\n\nQuery.prototype.selectedExclusively = function selectedExclusively() {\n  return isExclusive(this._fields);\n};\n\n/**\n * The model this query is associated with.\n *\n * #### Example:\n *\n *     const q = MyModel.find();\n *     q.model === MyModel; // true\n *\n * @api public\n * @property model\n * @memberOf Query\n * @instance\n */\n\nQuery.prototype.model;\n\n/*!\n * Export\n */\n\nmodule.exports = Query;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/query.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/queryHelpers.js":
/*!***************************************************!*\
  !*** ./node_modules/mongoose/lib/queryHelpers.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies\n */\n\nconst checkEmbeddedDiscriminatorKeyProjection =\n  __webpack_require__(/*! ./helpers/discriminator/checkEmbeddedDiscriminatorKeyProjection */ \"(ssr)/./node_modules/mongoose/lib/helpers/discriminator/checkEmbeddedDiscriminatorKeyProjection.js\");\nconst get = __webpack_require__(/*! ./helpers/get */ \"(ssr)/./node_modules/mongoose/lib/helpers/get.js\");\nconst getDiscriminatorByValue =\n  __webpack_require__(/*! ./helpers/discriminator/getDiscriminatorByValue */ \"(ssr)/./node_modules/mongoose/lib/helpers/discriminator/getDiscriminatorByValue.js\");\nconst isDefiningProjection = __webpack_require__(/*! ./helpers/projection/isDefiningProjection */ \"(ssr)/./node_modules/mongoose/lib/helpers/projection/isDefiningProjection.js\");\nconst clone = __webpack_require__(/*! ./helpers/clone */ \"(ssr)/./node_modules/mongoose/lib/helpers/clone.js\");\nconst isPathSelectedInclusive = __webpack_require__(/*! ./helpers/projection/isPathSelectedInclusive */ \"(ssr)/./node_modules/mongoose/lib/helpers/projection/isPathSelectedInclusive.js\");\n\n/**\n * Prepare a set of path options for query population.\n *\n * @param {Query} query\n * @param {Object} options\n * @return {Array}\n */\n\nexports.preparePopulationOptions = function preparePopulationOptions(query, options) {\n  const _populate = query.options.populate;\n  const pop = Object.keys(_populate).reduce((vals, key) => vals.concat([_populate[key]]), []);\n\n  // lean options should trickle through all queries\n  if (options.lean != null) {\n    pop\n      .filter(p => (p && p.options && p.options.lean) == null)\n      .forEach(makeLean(options.lean));\n  }\n\n  pop.forEach(opts => {\n    opts._localModel = query.model;\n  });\n\n  return pop;\n};\n\n/**\n * Prepare a set of path options for query population. This is the MongooseQuery\n * version\n *\n * @param {Query} query\n * @param {Object} options\n * @return {Array}\n */\n\nexports.preparePopulationOptionsMQ = function preparePopulationOptionsMQ(query, options) {\n  const _populate = query._mongooseOptions.populate;\n  const pop = Object.keys(_populate).reduce((vals, key) => vals.concat([_populate[key]]), []);\n\n  // lean options should trickle through all queries\n  if (options.lean != null) {\n    pop\n      .filter(p => (p && p.options && p.options.lean) == null)\n      .forEach(makeLean(options.lean));\n  }\n\n  const session = query && query.options && query.options.session || null;\n  if (session != null) {\n    pop.forEach(path => {\n      if (path.options == null) {\n        path.options = { session: session };\n        return;\n      }\n      if (!('session' in path.options)) {\n        path.options.session = session;\n      }\n    });\n  }\n\n  const projection = query._fieldsForExec();\n  pop.forEach(p => {\n    p._queryProjection = projection;\n  });\n  pop.forEach(opts => {\n    opts._localModel = query.model;\n  });\n\n  return pop;\n};\n\n/**\n * If the document is a mapped discriminator type, it returns a model instance for that type, otherwise,\n * it returns an instance of the given model.\n *\n * @param {Model}  model\n * @param {Object} doc\n * @param {Object} fields\n *\n * @return {Document}\n */\nexports.createModel = function createModel(model, doc, fields, userProvidedFields, options) {\n  model.hooks.execPreSync('createModel', doc);\n  const discriminatorMapping = model.schema ?\n    model.schema.discriminatorMapping :\n    null;\n\n  const key = discriminatorMapping && discriminatorMapping.isRoot ?\n    discriminatorMapping.key :\n    null;\n\n  const value = doc[key];\n  if (key && value && model.discriminators) {\n    const discriminator = model.discriminators[value] || getDiscriminatorByValue(model.discriminators, value);\n    if (discriminator) {\n      const _fields = clone(userProvidedFields);\n      exports.applyPaths(_fields, discriminator.schema);\n      return new discriminator(undefined, _fields, true);\n    }\n  }\n\n  const _opts = {\n    skipId: true,\n    isNew: false,\n    willInit: true\n  };\n  if (options != null && 'defaults' in options) {\n    _opts.defaults = options.defaults;\n  }\n  return new model(undefined, fields, _opts);\n};\n\n/*!\n * ignore\n */\n\nexports.createModelAndInit = function createModelAndInit(model, doc, fields, userProvidedFields, options, populatedIds, callback) {\n  const initOpts = populatedIds ?\n    { populated: populatedIds } :\n    undefined;\n\n  const casted = exports.createModel(model, doc, fields, userProvidedFields, options);\n  try {\n    casted.$init(doc, initOpts, callback);\n  } catch (error) {\n    callback(error, casted);\n  }\n};\n\n/*!\n * ignore\n */\n\nexports.applyPaths = function applyPaths(fields, schema) {\n  // determine if query is selecting or excluding fields\n  let exclude;\n  let keys;\n  const minusPathsToSkip = new Set();\n\n  if (fields) {\n    keys = Object.keys(fields);\n\n    // Collapse minus paths\n    const minusPaths = [];\n    for (let i = 0; i < keys.length; ++i) {\n      const key = keys[i];\n      if (keys[i][0] !== '-') {\n        continue;\n      }\n\n      delete fields[key];\n      if (key === '-_id') {\n        fields['_id'] = 0;\n      } else {\n        minusPaths.push(key.slice(1));\n      }\n    }\n\n    keys = Object.keys(fields);\n    for (let keyIndex = 0; keyIndex < keys.length; ++keyIndex) {\n      if (keys[keyIndex][0] === '+') {\n        continue;\n      }\n      const field = fields[keys[keyIndex]];\n      // Skip `$meta` and `$slice`\n      if (!isDefiningProjection(field)) {\n        continue;\n      }\n      if (keys[keyIndex] === '_id' && keys.length > 1) {\n        continue;\n      }\n      if (keys[keyIndex] === schema.options.discriminatorKey && keys.length > 1 && field != null && !field) {\n        continue;\n      }\n      exclude = !field;\n      break;\n    }\n\n    // Potentially add back minus paths based on schema-level path config\n    // and whether the projection is inclusive\n    for (const path of minusPaths) {\n      const type = schema.path(path);\n      // If the path isn't selected by default or the projection is not\n      // inclusive, minus path is treated as equivalent to `key: 0`.\n      // But we also allow using `-name` to remove `name` from an inclusive\n      // projection if `name` has schema-level `select: true`.\n      if ((!type || !type.selected) || exclude !== false) {\n        fields[path] = 0;\n        exclude = true;\n      } else if (type && type.selected && exclude === false) {\n        // Make a note of minus paths that are overwriting paths that are\n        // included by default.\n        minusPathsToSkip.add(path);\n      }\n    }\n  }\n\n  // if selecting, apply default schematype select:true fields\n  // if excluding, apply schematype select:false fields\n  const selected = [];\n  const excluded = [];\n  const stack = [];\n\n  analyzeSchema(schema);\n  switch (exclude) {\n    case true:\n      for (const fieldName of excluded) {\n        fields[fieldName] = 0;\n      }\n      break;\n    case false:\n      if (schema &&\n          schema.paths['_id'] &&\n          schema.paths['_id'].options &&\n          schema.paths['_id'].options.select === false) {\n        fields._id = 0;\n      }\n\n      for (const fieldName of selected) {\n        if (minusPathsToSkip.has(fieldName)) {\n          continue;\n        }\n        if (isPathSelectedInclusive(fields, fieldName)) {\n          continue;\n        }\n        fields[fieldName] = fields[fieldName] || 1;\n      }\n      break;\n    case undefined:\n      if (fields == null) {\n        break;\n      }\n      // Any leftover plus paths must in the schema, so delete them (gh-7017)\n      for (const key of Object.keys(fields || {})) {\n        if (key.startsWith('+')) {\n          delete fields[key];\n        }\n      }\n\n      // user didn't specify fields, implies returning all fields.\n      // only need to apply excluded fields and delete any plus paths\n      for (const fieldName of excluded) {\n        if (fields[fieldName] != null) {\n          // Skip applying default projections to fields with non-defining\n          // projections, like `$slice`\n          continue;\n        }\n        fields[fieldName] = 0;\n      }\n      break;\n  }\n\n  function analyzeSchema(schema, prefix) {\n    prefix || (prefix = '');\n\n    // avoid recursion\n    if (stack.indexOf(schema) !== -1) {\n      return [];\n    }\n    stack.push(schema);\n\n    const addedPaths = [];\n    schema.eachPath(function(path, type) {\n      if (prefix) path = prefix + '.' + path;\n      if (type.$isSchemaMap || path.endsWith('.$*')) {\n        const plusPath = '+' + path;\n        const hasPlusPath = fields && plusPath in fields;\n        if (type.options && type.options.select === false && !hasPlusPath) {\n          excluded.push(path);\n        }\n        return;\n      }\n      let addedPath = analyzePath(path, type);\n      // arrays\n      if (addedPath == null && !Array.isArray(type) && type.$isMongooseArray && !type.$isMongooseDocumentArray) {\n        addedPath = analyzePath(path, type.caster);\n      }\n      if (addedPath != null) {\n        addedPaths.push(addedPath);\n      }\n\n      // nested schemas\n      if (type.schema) {\n        const _addedPaths = analyzeSchema(type.schema, path);\n\n        // Special case: if discriminator key is the only field that would\n        // be projected in, remove it.\n        if (exclude === false) {\n          checkEmbeddedDiscriminatorKeyProjection(fields, path, type.schema,\n            selected, _addedPaths);\n        }\n      }\n    });\n    stack.pop();\n    return addedPaths;\n  }\n\n  function analyzePath(path, type) {\n    if (fields == null) {\n      return;\n    }\n\n    // If schema-level selected not set, nothing to do\n    if (typeof type.selected !== 'boolean') {\n      return;\n    }\n\n    // User overwriting default exclusion\n    if (type.selected === false && fields[path]) {\n      return;\n    }\n\n    // If set to 0, we're explicitly excluding the discriminator key. Can't do this for all fields,\n    // because we have tests that assert that using `-path` to exclude schema-level `select: true`\n    // fields counts as an exclusive projection. See gh-11546\n    if (!exclude && type.selected && path === schema.options.discriminatorKey && fields[path] != null && !fields[path]) {\n      delete fields[path];\n      return;\n    }\n\n    if (exclude === false && type.selected && fields[path] != null && !fields[path]) {\n      delete fields[path];\n      return;\n    }\n\n    const plusPath = '+' + path;\n    const hasPlusPath = fields && plusPath in fields;\n    if (hasPlusPath) {\n      // forced inclusion\n      delete fields[plusPath];\n\n      // if there are other fields being included, add this one\n      // if no other included fields, leave this out (implied inclusion)\n      if (exclude === false && keys.length > 1 && !~keys.indexOf(path)) {\n        fields[path] = 1;\n      }\n\n      return;\n    }\n\n    // check for parent exclusions\n    const pieces = path.split('.');\n    let cur = '';\n    for (let i = 0; i < pieces.length; ++i) {\n      cur += cur.length ? '.' + pieces[i] : pieces[i];\n      if (excluded.indexOf(cur) !== -1) {\n        return;\n      }\n    }\n\n    // Special case: if user has included a parent path of a discriminator key,\n    // don't explicitly project in the discriminator key because that will\n    // project out everything else under the parent path\n    if (!exclude && (type && type.options && type.options.$skipDiscriminatorCheck || false)) {\n      let cur = '';\n      for (let i = 0; i < pieces.length; ++i) {\n        cur += (cur.length === 0 ? '' : '.') + pieces[i];\n        const projection = get(fields, cur, false) || get(fields, cur + '.$', false);\n        if (projection && typeof projection !== 'object') {\n          return;\n        }\n      }\n    }\n\n    (type.selected ? selected : excluded).push(path);\n    return path;\n  }\n};\n\n/**\n * Set each path query option to lean\n *\n * @param {Object} option\n */\n\nfunction makeLean(val) {\n  return function(option) {\n    option.options || (option.options = {});\n\n    if (val != null && Array.isArray(val.virtuals)) {\n      val = Object.assign({}, val);\n      val.virtuals = val.virtuals.\n        filter(path => typeof path === 'string' && path.startsWith(option.path + '.')).\n        map(path => path.slice(option.path.length + 1));\n    }\n\n    option.options.lean = val;\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/queryHelpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/schema.js":
/*!*********************************************!*\
  !*** ./node_modules/mongoose/lib/schema.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst Kareem = __webpack_require__(/*! kareem */ \"(ssr)/./node_modules/kareem/index.js\");\nconst MongooseError = __webpack_require__(/*! ./error/mongooseError */ \"(ssr)/./node_modules/mongoose/lib/error/mongooseError.js\");\nconst SchemaType = __webpack_require__(/*! ./schemaType */ \"(ssr)/./node_modules/mongoose/lib/schemaType.js\");\nconst SchemaTypeOptions = __webpack_require__(/*! ./options/schemaTypeOptions */ \"(ssr)/./node_modules/mongoose/lib/options/schemaTypeOptions.js\");\nconst VirtualOptions = __webpack_require__(/*! ./options/virtualOptions */ \"(ssr)/./node_modules/mongoose/lib/options/virtualOptions.js\");\nconst VirtualType = __webpack_require__(/*! ./virtualType */ \"(ssr)/./node_modules/mongoose/lib/virtualType.js\");\nconst addAutoId = __webpack_require__(/*! ./helpers/schema/addAutoId */ \"(ssr)/./node_modules/mongoose/lib/helpers/schema/addAutoId.js\");\nconst clone = __webpack_require__(/*! ./helpers/clone */ \"(ssr)/./node_modules/mongoose/lib/helpers/clone.js\");\nconst get = __webpack_require__(/*! ./helpers/get */ \"(ssr)/./node_modules/mongoose/lib/helpers/get.js\");\nconst getConstructorName = __webpack_require__(/*! ./helpers/getConstructorName */ \"(ssr)/./node_modules/mongoose/lib/helpers/getConstructorName.js\");\nconst getIndexes = __webpack_require__(/*! ./helpers/schema/getIndexes */ \"(ssr)/./node_modules/mongoose/lib/helpers/schema/getIndexes.js\");\nconst handleReadPreferenceAliases = __webpack_require__(/*! ./helpers/query/handleReadPreferenceAliases */ \"(ssr)/./node_modules/mongoose/lib/helpers/query/handleReadPreferenceAliases.js\");\nconst idGetter = __webpack_require__(/*! ./helpers/schema/idGetter */ \"(ssr)/./node_modules/mongoose/lib/helpers/schema/idGetter.js\");\nconst merge = __webpack_require__(/*! ./helpers/schema/merge */ \"(ssr)/./node_modules/mongoose/lib/helpers/schema/merge.js\");\nconst mpath = __webpack_require__(/*! mpath */ \"(ssr)/./node_modules/mpath/index.js\");\nconst setPopulatedVirtualValue = __webpack_require__(/*! ./helpers/populate/setPopulatedVirtualValue */ \"(ssr)/./node_modules/mongoose/lib/helpers/populate/setPopulatedVirtualValue.js\");\nconst setupTimestamps = __webpack_require__(/*! ./helpers/timestamps/setupTimestamps */ \"(ssr)/./node_modules/mongoose/lib/helpers/timestamps/setupTimestamps.js\");\nconst utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\nconst validateRef = __webpack_require__(/*! ./helpers/populate/validateRef */ \"(ssr)/./node_modules/mongoose/lib/helpers/populate/validateRef.js\");\nconst util = __webpack_require__(/*! util */ \"util\");\n\nconst hasNumericSubpathRegex = /\\.\\d+(\\.|$)/;\n\nlet MongooseTypes;\n\nconst queryHooks = (__webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongoose/lib/constants.js\").queryMiddlewareFunctions);\nconst documentHooks = (__webpack_require__(/*! ./helpers/model/applyHooks */ \"(ssr)/./node_modules/mongoose/lib/helpers/model/applyHooks.js\").middlewareFunctions);\nconst hookNames = queryHooks.concat(documentHooks).\n  reduce((s, hook) => s.add(hook), new Set());\n\nconst isPOJO = utils.isPOJO;\n\nlet id = 0;\n\nconst numberRE = /^\\d+$/;\n\n/**\n * Schema constructor.\n *\n * #### Example:\n *\n *     const child = new Schema({ name: String });\n *     const schema = new Schema({ name: String, age: Number, children: [child] });\n *     const Tree = mongoose.model('Tree', schema);\n *\n *     // setting schema options\n *     new Schema({ name: String }, { id: false, autoIndex: false })\n *\n * #### Options:\n *\n * - [autoIndex](https://mongoosejs.com/docs/guide.html#autoIndex): bool - defaults to null (which means use the connection's autoIndex option)\n * - [autoCreate](https://mongoosejs.com/docs/guide.html#autoCreate): bool - defaults to null (which means use the connection's autoCreate option)\n * - [bufferCommands](https://mongoosejs.com/docs/guide.html#bufferCommands): bool - defaults to true\n * - [bufferTimeoutMS](https://mongoosejs.com/docs/guide.html#bufferTimeoutMS): number - defaults to 10000 (10 seconds). If `bufferCommands` is enabled, the amount of time Mongoose will wait for connectivity to be restablished before erroring out.\n * - [capped](https://mongoosejs.com/docs/guide.html#capped): bool | number | object - defaults to false\n * - [collection](https://mongoosejs.com/docs/guide.html#collection): string - no default\n * - [discriminatorKey](https://mongoosejs.com/docs/guide.html#discriminatorKey): string - defaults to `__t`\n * - [id](https://mongoosejs.com/docs/guide.html#id): bool - defaults to true\n * - [_id](https://mongoosejs.com/docs/guide.html#_id): bool - defaults to true\n * - [minimize](https://mongoosejs.com/docs/guide.html#minimize): bool - controls [document#toObject](https://mongoosejs.com/docs/api/document.html#Document.prototype.toObject()) behavior when called manually - defaults to true\n * - [read](https://mongoosejs.com/docs/guide.html#read): string\n * - [writeConcern](https://mongoosejs.com/docs/guide.html#writeConcern): object - defaults to null, use to override [the MongoDB server's default write concern settings](https://www.mongodb.com/docs/manual/reference/write-concern/)\n * - [shardKey](https://mongoosejs.com/docs/guide.html#shardKey): object - defaults to `null`\n * - [strict](https://mongoosejs.com/docs/guide.html#strict): bool - defaults to true\n * - [strictQuery](https://mongoosejs.com/docs/guide.html#strictQuery): bool - defaults to false\n * - [toJSON](https://mongoosejs.com/docs/guide.html#toJSON) - object - no default\n * - [toObject](https://mongoosejs.com/docs/guide.html#toObject) - object - no default\n * - [typeKey](https://mongoosejs.com/docs/guide.html#typeKey) - string - defaults to 'type'\n * - [validateBeforeSave](https://mongoosejs.com/docs/guide.html#validateBeforeSave) - bool - defaults to `true`\n * - [validateModifiedOnly](https://mongoosejs.com/docs/api/document.html#Document.prototype.validate()) - bool - defaults to `false`\n * - [versionKey](https://mongoosejs.com/docs/guide.html#versionKey): string or object - defaults to \"__v\"\n * - [optimisticConcurrency](https://mongoosejs.com/docs/guide.html#optimisticConcurrency): bool - defaults to false. Set to true to enable [optimistic concurrency](https://thecodebarbarian.com/whats-new-in-mongoose-5-10-optimistic-concurrency.html).\n * - [collation](https://mongoosejs.com/docs/guide.html#collation): object - defaults to null (which means use no collation)\n * - [timeseries](https://mongoosejs.com/docs/guide.html#timeseries): object - defaults to null (which means this schema's collection won't be a timeseries collection)\n * - [selectPopulatedPaths](https://mongoosejs.com/docs/guide.html#selectPopulatedPaths): boolean - defaults to `true`\n * - [skipVersioning](https://mongoosejs.com/docs/guide.html#skipVersioning): object - paths to exclude from versioning\n * - [timestamps](https://mongoosejs.com/docs/guide.html#timestamps): object or boolean - defaults to `false`. If true, Mongoose adds `createdAt` and `updatedAt` properties to your schema and manages those properties for you.\n * - [pluginTags](https://mongoosejs.com/docs/guide.html#pluginTags): array of strings - defaults to `undefined`. If set and plugin called with `tags` option, will only apply that plugin to schemas with a matching tag.\n * - [virtuals](https://mongoosejs.com/docs/tutorials/virtuals.html#virtuals-via-schema-options): object - virtuals to define, alias for [`.virtual`](https://mongoosejs.com/docs/api/schema.html#Schema.prototype.virtual())\n * - [collectionOptions]: object with options passed to [`createCollection()`](https://www.mongodb.com/docs/manual/reference/method/db.createCollection/) when calling `Model.createCollection()` or `autoCreate` set to true.\n *\n * #### Options for Nested Schemas:\n *\n * - `excludeIndexes`: bool - defaults to `false`. If `true`, skip building indexes on this schema's paths.\n *\n * #### Note:\n *\n * _When nesting schemas, (`children` in the example above), always declare the child schema first before passing it into its parent._\n *\n * @param {Object|Schema|Array} [definition] Can be one of: object describing schema paths, or schema to copy, or array of objects and schemas\n * @param {Object} [options]\n * @inherits NodeJS EventEmitter https://nodejs.org/api/events.html#class-eventemitter\n * @event `init`: Emitted after the schema is compiled into a `Model`.\n * @api public\n */\n\nfunction Schema(obj, options) {\n  if (!(this instanceof Schema)) {\n    return new Schema(obj, options);\n  }\n\n  this.obj = obj;\n  this.paths = {};\n  this.aliases = {};\n  this.subpaths = {};\n  this.virtuals = {};\n  this.singleNestedPaths = {};\n  this.nested = {};\n  this.inherits = {};\n  this.callQueue = [];\n  this._indexes = [];\n  this._searchIndexes = [];\n  this.methods = (options && options.methods) || {};\n  this.methodOptions = {};\n  this.statics = (options && options.statics) || {};\n  this.tree = {};\n  this.query = (options && options.query) || {};\n  this.childSchemas = [];\n  this.plugins = [];\n  // For internal debugging. Do not use this to try to save a schema in MDB.\n  this.$id = ++id;\n  this.mapPaths = [];\n\n  this.s = {\n    hooks: new Kareem()\n  };\n  this.options = this.defaultOptions(options);\n\n  // build paths\n  if (Array.isArray(obj)) {\n    for (const definition of obj) {\n      this.add(definition);\n    }\n  } else if (obj) {\n    this.add(obj);\n  }\n\n  // build virtual paths\n  if (options && options.virtuals) {\n    const virtuals = options.virtuals;\n    const pathNames = Object.keys(virtuals);\n    for (const pathName of pathNames) {\n      const pathOptions = virtuals[pathName].options ? virtuals[pathName].options : undefined;\n      const virtual = this.virtual(pathName, pathOptions);\n\n      if (virtuals[pathName].get) {\n        virtual.get(virtuals[pathName].get);\n      }\n\n      if (virtuals[pathName].set) {\n        virtual.set(virtuals[pathName].set);\n      }\n    }\n  }\n\n  // check if _id's value is a subdocument (gh-2276)\n  const _idSubDoc = obj && obj._id && utils.isObject(obj._id);\n\n  // ensure the documents get an auto _id unless disabled\n  const auto_id = !this.paths['_id'] &&\n      (this.options._id) && !_idSubDoc;\n\n  if (auto_id) {\n    addAutoId(this);\n  }\n\n  this.setupTimestamp(this.options.timestamps);\n}\n\n/**\n * Create virtual properties with alias field\n * @api private\n */\nfunction aliasFields(schema, paths) {\n  for (const path of Object.keys(paths)) {\n    let alias = null;\n    if (paths[path] != null) {\n      alias = paths[path];\n    } else {\n      const options = get(schema.paths[path], 'options');\n      if (options == null) {\n        continue;\n      }\n\n      alias = options.alias;\n    }\n\n    if (!alias) {\n      continue;\n    }\n\n    const prop = schema.paths[path].path;\n    if (Array.isArray(alias)) {\n      for (const a of alias) {\n        if (typeof a !== 'string') {\n          throw new Error('Invalid value for alias option on ' + prop + ', got ' + a);\n        }\n\n        schema.aliases[a] = prop;\n\n        schema.\n          virtual(a).\n          get((function(p) {\n            return function() {\n              if (typeof this.get === 'function') {\n                return this.get(p);\n              }\n              return this[p];\n            };\n          })(prop)).\n          set((function(p) {\n            return function(v) {\n              return this.$set(p, v);\n            };\n          })(prop));\n      }\n\n      continue;\n    }\n\n    if (typeof alias !== 'string') {\n      throw new Error('Invalid value for alias option on ' + prop + ', got ' + alias);\n    }\n\n    schema.aliases[alias] = prop;\n\n    schema.\n      virtual(alias).\n      get((function(p) {\n        return function() {\n          if (typeof this.get === 'function') {\n            return this.get(p);\n          }\n          return this[p];\n        };\n      })(prop)).\n      set((function(p) {\n        return function(v) {\n          return this.$set(p, v);\n        };\n      })(prop));\n  }\n}\n\n/*!\n * Inherit from EventEmitter.\n */\nSchema.prototype = Object.create(EventEmitter.prototype);\nSchema.prototype.constructor = Schema;\nSchema.prototype.instanceOfSchema = true;\n\n/*!\n * ignore\n */\n\nObject.defineProperty(Schema.prototype, '$schemaType', {\n  configurable: false,\n  enumerable: false,\n  writable: true\n});\n\n/**\n * Array of child schemas (from document arrays and single nested subdocs)\n * and their corresponding compiled models. Each element of the array is\n * an object with 2 properties: `schema` and `model`.\n *\n * This property is typically only useful for plugin authors and advanced users.\n * You do not need to interact with this property at all to use mongoose.\n *\n * @api public\n * @property childSchemas\n * @memberOf Schema\n * @instance\n */\n\nObject.defineProperty(Schema.prototype, 'childSchemas', {\n  configurable: false,\n  enumerable: true,\n  writable: true\n});\n\n/**\n * Object containing all virtuals defined on this schema.\n * The objects' keys are the virtual paths and values are instances of `VirtualType`.\n *\n * This property is typically only useful for plugin authors and advanced users.\n * You do not need to interact with this property at all to use mongoose.\n *\n * #### Example:\n *\n *     const schema = new Schema({});\n *     schema.virtual('answer').get(() => 42);\n *\n *     console.log(schema.virtuals); // { answer: VirtualType { path: 'answer', ... } }\n *     console.log(schema.virtuals['answer'].getters[0].call()); // 42\n *\n * @api public\n * @property virtuals\n * @memberOf Schema\n * @instance\n */\n\nObject.defineProperty(Schema.prototype, 'virtuals', {\n  configurable: false,\n  enumerable: true,\n  writable: true\n});\n\n/**\n * The original object passed to the schema constructor\n *\n * #### Example:\n *\n *     const schema = new Schema({ a: String }).add({ b: String });\n *     schema.obj; // { a: String }\n *\n * @api public\n * @property obj\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.obj;\n\n/**\n * The paths defined on this schema. The keys are the top-level paths\n * in this schema, and the values are instances of the SchemaType class.\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: String }, { _id: false });\n *     schema.paths; // { name: SchemaString { ... } }\n *\n *     schema.add({ age: Number });\n *     schema.paths; // { name: SchemaString { ... }, age: SchemaNumber { ... } }\n *\n * @api public\n * @property paths\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.paths;\n\n/**\n * Schema as a tree\n *\n * #### Example:\n *\n *     {\n *         '_id'     : ObjectId\n *       , 'nested'  : {\n *             'key' : String\n *         }\n *     }\n *\n * @api private\n * @property tree\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.tree;\n\n/**\n * Returns a deep copy of the schema\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: String });\n *     const clone = schema.clone();\n *     clone === schema; // false\n *     clone.path('name'); // SchemaString { ... }\n *\n * @return {Schema} the cloned schema\n * @api public\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.clone = function() {\n  const s = this._clone();\n\n  // Bubble up `init` for backwards compat\n  s.on('init', v => this.emit('init', v));\n\n  return s;\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._clone = function _clone(Constructor) {\n  Constructor = Constructor || (this.base == null ? Schema : this.base.Schema);\n\n  const s = new Constructor({}, this._userProvidedOptions);\n  s.base = this.base;\n  s.obj = this.obj;\n  s.options = clone(this.options);\n  s.callQueue = this.callQueue.map(function(f) { return f; });\n  s.methods = clone(this.methods);\n  s.methodOptions = clone(this.methodOptions);\n  s.statics = clone(this.statics);\n  s.query = clone(this.query);\n  s.plugins = Array.prototype.slice.call(this.plugins);\n  s._indexes = clone(this._indexes);\n  s._searchIndexes = clone(this._searchIndexes);\n  s.s.hooks = this.s.hooks.clone();\n\n  s.tree = clone(this.tree);\n  s.paths = Object.fromEntries(\n    Object.entries(this.paths).map(([key, value]) => ([key, value.clone()]))\n  );\n  s.nested = clone(this.nested);\n  s.subpaths = clone(this.subpaths);\n  for (const schemaType of Object.values(s.paths)) {\n    if (schemaType.$isSingleNested) {\n      const path = schemaType.path;\n      for (const key of Object.keys(schemaType.schema.paths)) {\n        s.singleNestedPaths[path + '.' + key] = schemaType.schema.paths[key];\n      }\n      for (const key of Object.keys(schemaType.schema.singleNestedPaths)) {\n        s.singleNestedPaths[path + '.' + key] =\n          schemaType.schema.singleNestedPaths[key];\n      }\n      for (const key of Object.keys(schemaType.schema.subpaths)) {\n        s.singleNestedPaths[path + '.' + key] =\n          schemaType.schema.subpaths[key];\n      }\n      for (const key of Object.keys(schemaType.schema.nested)) {\n        s.singleNestedPaths[path + '.' + key] = 'nested';\n      }\n    }\n  }\n  s.childSchemas = gatherChildSchemas(s);\n\n  s.virtuals = clone(this.virtuals);\n  s.$globalPluginsApplied = this.$globalPluginsApplied;\n  s.$isRootDiscriminator = this.$isRootDiscriminator;\n  s.$implicitlyCreated = this.$implicitlyCreated;\n  s.$id = ++id;\n  s.$originalSchemaId = this.$id;\n  s.mapPaths = [].concat(this.mapPaths);\n\n  if (this.discriminatorMapping != null) {\n    s.discriminatorMapping = Object.assign({}, this.discriminatorMapping);\n  }\n  if (this.discriminators != null) {\n    s.discriminators = Object.assign({}, this.discriminators);\n  }\n  if (this._applyDiscriminators != null) {\n    s._applyDiscriminators = new Map(this._applyDiscriminators);\n  }\n\n  s.aliases = Object.assign({}, this.aliases);\n\n  return s;\n};\n\n/**\n * Returns a new schema that has the picked `paths` from this schema.\n *\n * This method is analagous to [Lodash's `pick()` function](https://lodash.com/docs/4.17.15#pick) for Mongoose schemas.\n *\n * #### Example:\n *\n *     const schema = Schema({ name: String, age: Number });\n *     // Creates a new schema with the same `name` path as `schema`,\n *     // but no `age` path.\n *     const newSchema = schema.pick(['name']);\n *\n *     newSchema.path('name'); // SchemaString { ... }\n *     newSchema.path('age'); // undefined\n *\n * @param {String[]} paths List of Paths to pick for the new Schema\n * @param {Object} [options] Options to pass to the new Schema Constructor (same as `new Schema(.., Options)`). Defaults to `this.options` if not set.\n * @return {Schema}\n * @api public\n */\n\nSchema.prototype.pick = function(paths, options) {\n  const newSchema = new Schema({}, options || this.options);\n  if (!Array.isArray(paths)) {\n    throw new MongooseError('Schema#pick() only accepts an array argument, ' +\n      'got \"' + typeof paths + '\"');\n  }\n\n  for (const path of paths) {\n    if (this.nested[path]) {\n      newSchema.add({ [path]: get(this.tree, path) });\n    } else {\n      const schematype = this.path(path);\n      if (schematype == null) {\n        throw new MongooseError('Path `' + path + '` is not in the schema');\n      }\n      newSchema.add({ [path]: schematype });\n    }\n  }\n\n  return newSchema;\n};\n\n/**\n * Returns a new schema that has the `paths` from the original schema, minus the omitted ones.\n *\n * This method is analagous to [Lodash's `omit()` function](https://lodash.com/docs/#omit) for Mongoose schemas.\n *\n * #### Example:\n *\n *     const schema = Schema({ name: String, age: Number });\n *     // Creates a new schema omitting the `age` path\n *     const newSchema = schema.omit(['age']);\n *\n *     newSchema.path('name'); // SchemaString { ... }\n *     newSchema.path('age'); // undefined\n *\n * @param {String[]} paths List of Paths to omit for the new Schema\n * @param {Object} [options] Options to pass to the new Schema Constructor (same as `new Schema(.., Options)`). Defaults to `this.options` if not set.\n * @return {Schema}\n * @api public\n */\n\nSchema.prototype.omit = function(paths, options) {\n  const newSchema = new Schema(this, options || this.options);\n  if (!Array.isArray(paths)) {\n    throw new MongooseError(\n      'Schema#omit() only accepts an array argument, ' +\n        'got \"' +\n        typeof paths +\n        '\"'\n    );\n  }\n\n  newSchema.remove(paths);\n\n  for (const nested in newSchema.singleNestedPaths) {\n    if (paths.includes(nested)) {\n      delete newSchema.singleNestedPaths[nested];\n    }\n  }\n\n  return newSchema;\n};\n\n/**\n * Returns default options for this schema, merged with `options`.\n *\n * @param {Object} [options] Options to overwrite the default options\n * @return {Object} The merged options of `options` and the default options\n * @api private\n */\n\nSchema.prototype.defaultOptions = function(options) {\n  this._userProvidedOptions = options == null ? {} : clone(options);\n  const baseOptions = this.base && this.base.options || {};\n  const strict = 'strict' in baseOptions ? baseOptions.strict : true;\n  const strictQuery = 'strictQuery' in baseOptions ? baseOptions.strictQuery : false;\n  const id = 'id' in baseOptions ? baseOptions.id : true;\n  options = {\n    strict,\n    strictQuery,\n    bufferCommands: true,\n    capped: false, // { size, max, autoIndexId }\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    // the following are only applied at construction time\n    _id: true,\n    id: id,\n    typeKey: 'type',\n    ...options\n  };\n\n  if (options.versionKey && typeof options.versionKey !== 'string') {\n    throw new MongooseError('`versionKey` must be falsy or string, got `' + (typeof options.versionKey) + '`');\n  }\n\n  if (typeof options.read === 'string') {\n    options.read = handleReadPreferenceAliases(options.read);\n  } else if (Array.isArray(options.read) && typeof options.read[0] === 'string') {\n    options.read = {\n      mode: handleReadPreferenceAliases(options.read[0]),\n      tags: options.read[1]\n    };\n  }\n\n  if (options.optimisticConcurrency && !options.versionKey) {\n    throw new MongooseError('Must set `versionKey` if using `optimisticConcurrency`');\n  }\n\n  return options;\n};\n\n/**\n * Inherit a Schema by applying a discriminator on an existing Schema.\n *\n *\n * #### Example:\n *\n *     const eventSchema = new mongoose.Schema({ timestamp: Date }, { discriminatorKey: 'kind' });\n *\n *     const clickedEventSchema = new mongoose.Schema({ element: String }, { discriminatorKey: 'kind' });\n *     const ClickedModel = eventSchema.discriminator('clicked', clickedEventSchema);\n *\n *     const Event = mongoose.model('Event', eventSchema);\n *\n *     Event.discriminators['clicked']; // Model { clicked }\n *\n *     const doc = await Event.create({ kind: 'clicked', element: '#hero' });\n *     doc.element; // '#hero'\n *     doc instanceof ClickedModel; // true\n *\n * @param {String} name the name of the discriminator\n * @param {Schema} schema the discriminated Schema\n * @return {Schema} the Schema instance\n * @api public\n */\nSchema.prototype.discriminator = function(name, schema) {\n  this._applyDiscriminators = this._applyDiscriminators || new Map();\n  this._applyDiscriminators.set(name, schema);\n\n  return this;\n};\n\n/**\n * Adds key path / schema type pairs to this schema.\n *\n * #### Example:\n *\n *     const ToySchema = new Schema();\n *     ToySchema.add({ name: 'string', color: 'string', price: 'number' });\n *\n *     const TurboManSchema = new Schema();\n *     // You can also `add()` another schema and copy over all paths, virtuals,\n *     // getters, setters, indexes, methods, and statics.\n *     TurboManSchema.add(ToySchema).add({ year: Number });\n *\n * @param {Object|Schema} obj plain object with paths to add, or another schema\n * @param {String} [prefix] path to prefix the newly added paths with\n * @return {Schema} the Schema instance\n * @api public\n */\n\nSchema.prototype.add = function add(obj, prefix) {\n  if (obj instanceof Schema || (obj != null && obj.instanceOfSchema)) {\n    merge(this, obj);\n\n    return this;\n  }\n\n  // Special case: setting top-level `_id` to false should convert to disabling\n  // the `_id` option. This behavior never worked before 5.4.11 but numerous\n  // codebases use it (see gh-7516, gh-7512).\n  if (obj._id === false && prefix == null) {\n    this.options._id = false;\n  }\n\n  prefix = prefix || '';\n  // avoid prototype pollution\n  if (prefix === '__proto__.' || prefix === 'constructor.' || prefix === 'prototype.') {\n    return this;\n  }\n\n  const keys = Object.keys(obj);\n  const typeKey = this.options.typeKey;\n  for (const key of keys) {\n    if (utils.specialProperties.has(key)) {\n      continue;\n    }\n\n    const fullPath = prefix + key;\n    const val = obj[key];\n\n    if (val == null) {\n      throw new TypeError('Invalid value for schema path `' + fullPath +\n        '`, got value \"' + val + '\"');\n    }\n    // Retain `_id: false` but don't set it as a path, re: gh-8274.\n    if (key === '_id' && val === false) {\n      continue;\n    }\n    // Deprecate setting schema paths to primitive types (gh-7558)\n    let isMongooseTypeString = false;\n    if (typeof val === 'string') {\n      // Handle the case in which the type is specified as a string (eg. 'date', 'oid', ...)\n      const MongooseTypes = this.base != null ? this.base.Schema.Types : Schema.Types;\n      const upperVal = val.charAt(0).toUpperCase() + val.substring(1);\n      isMongooseTypeString = MongooseTypes[upperVal] != null;\n    }\n    if (\n      key !== '_id' &&\n      ((typeof val !== 'object' && typeof val !== 'function' && !isMongooseTypeString) ||\n      val == null)\n    ) {\n      throw new TypeError(`Invalid schema configuration: \\`${val}\\` is not ` +\n        `a valid type at path \\`${key}\\`. See ` +\n        'https://bit.ly/mongoose-schematypes for a list of valid schema types.');\n    }\n    if (val instanceof VirtualType || (val.constructor && val.constructor.name || null) === 'VirtualType') {\n      this.virtual(val);\n      continue;\n    }\n\n    if (Array.isArray(val) && val.length === 1 && val[0] == null) {\n      throw new TypeError('Invalid value for schema Array path `' + fullPath +\n        '`, got value \"' + val[0] + '\"');\n    }\n\n    if (!(isPOJO(val) || val instanceof SchemaTypeOptions)) {\n      // Special-case: Non-options definitely a path so leaf at this node\n      // Examples: Schema instances, SchemaType instances\n      if (prefix) {\n        this.nested[prefix.substring(0, prefix.length - 1)] = true;\n      }\n      this.path(prefix + key, val);\n      if (val[0] != null && !(val[0].instanceOfSchema) && utils.isPOJO(val[0].discriminators)) {\n        const schemaType = this.path(prefix + key);\n        for (const key in val[0].discriminators) {\n          schemaType.discriminator(key, val[0].discriminators[key]);\n        }\n      }\n    } else if (Object.keys(val).length < 1) {\n      // Special-case: {} always interpreted as Mixed path so leaf at this node\n      if (prefix) {\n        this.nested[prefix.substring(0, prefix.length - 1)] = true;\n      }\n      this.path(fullPath, val); // mixed type\n    } else if (!val[typeKey] || (typeKey === 'type' && isPOJO(val.type) && val.type.type)) {\n      // Special-case: POJO with no bona-fide type key - interpret as tree of deep paths so recurse\n      // nested object `{ last: { name: String } }`. Avoid functions with `.type` re: #10807 because\n      // NestJS sometimes adds `Date.type`.\n      this.nested[fullPath] = true;\n      this.add(val, fullPath + '.');\n    } else {\n      // There IS a bona-fide type key that may also be a POJO\n      const _typeDef = val[typeKey];\n      if (isPOJO(_typeDef) && Object.keys(_typeDef).length > 0) {\n        // If a POJO is the value of a type key, make it a subdocument\n        if (prefix) {\n          this.nested[prefix.substring(0, prefix.length - 1)] = true;\n        }\n\n        const childSchemaOptions = {};\n        if (this._userProvidedOptions.typeKey) {\n          childSchemaOptions.typeKey = this._userProvidedOptions.typeKey;\n        }\n        // propagate 'strict' option to child schema\n        if (this._userProvidedOptions.strict != null) {\n          childSchemaOptions.strict = this._userProvidedOptions.strict;\n        }\n        if (this._userProvidedOptions.toObject != null) {\n          childSchemaOptions.toObject = utils.omit(this._userProvidedOptions.toObject, ['transform']);\n        }\n        if (this._userProvidedOptions.toJSON != null) {\n          childSchemaOptions.toJSON = utils.omit(this._userProvidedOptions.toJSON, ['transform']);\n        }\n\n        const _schema = new Schema(_typeDef, childSchemaOptions);\n        _schema.$implicitlyCreated = true;\n        const schemaWrappedPath = Object.assign({}, val, { [typeKey]: _schema });\n        this.path(prefix + key, schemaWrappedPath);\n      } else {\n        // Either the type is non-POJO or we interpret it as Mixed anyway\n        if (prefix) {\n          this.nested[prefix.substring(0, prefix.length - 1)] = true;\n        }\n        this.path(prefix + key, val);\n        if (val != null && !(val.instanceOfSchema) && utils.isPOJO(val.discriminators)) {\n          const schemaType = this.path(prefix + key);\n          for (const key in val.discriminators) {\n            schemaType.discriminator(key, val.discriminators[key]);\n          }\n        }\n      }\n    }\n  }\n\n  const aliasObj = Object.fromEntries(\n    Object.entries(obj).map(([key]) => ([prefix + key, null]))\n  );\n  aliasFields(this, aliasObj);\n  return this;\n};\n\n/**\n * Add an alias for `path`. This means getting or setting the `alias`\n * is equivalent to getting or setting the `path`.\n *\n * #### Example:\n *\n *     const toySchema = new Schema({ n: String });\n *\n *     // Make 'name' an alias for 'n'\n *     toySchema.alias('n', 'name');\n *\n *     const Toy = mongoose.model('Toy', toySchema);\n *     const turboMan = new Toy({ n: 'Turbo Man' });\n *\n *     turboMan.name; // 'Turbo Man'\n *     turboMan.n; // 'Turbo Man'\n *\n *     turboMan.name = 'Turbo Man Action Figure';\n *     turboMan.n; // 'Turbo Man Action Figure'\n *\n *     await turboMan.save(); // Saves { _id: ..., n: 'Turbo Man Action Figure' }\n *\n *\n * @param {String} path real path to alias\n * @param {String|String[]} alias the path(s) to use as an alias for `path`\n * @return {Schema} the Schema instance\n * @api public\n */\n\nSchema.prototype.alias = function alias(path, alias) {\n  aliasFields(this, { [path]: alias });\n  return this;\n};\n\n/**\n * Remove an index by name or index specification.\n *\n * removeIndex only removes indexes from your schema object. Does **not** affect the indexes\n * in MongoDB.\n *\n * #### Example:\n *\n *     const ToySchema = new Schema({ name: String, color: String, price: Number });\n *\n *     // Add a new index on { name, color }\n *     ToySchema.index({ name: 1, color: 1 });\n *\n *     // Remove index on { name, color }\n *     // Keep in mind that order matters! `removeIndex({ color: 1, name: 1 })` won't remove the index\n *     ToySchema.removeIndex({ name: 1, color: 1 });\n *\n *     // Add an index with a custom name\n *     ToySchema.index({ color: 1 }, { name: 'my custom index name' });\n *     // Remove index by name\n *     ToySchema.removeIndex('my custom index name');\n *\n * @param {Object|string} index name or index specification\n * @return {Schema} the Schema instance\n * @api public\n */\n\nSchema.prototype.removeIndex = function removeIndex(index) {\n  if (arguments.length > 1) {\n    throw new Error('removeIndex() takes only 1 argument');\n  }\n\n  if (typeof index !== 'object' && typeof index !== 'string') {\n    throw new Error('removeIndex() may only take either an object or a string as an argument');\n  }\n\n  if (typeof index === 'object') {\n    for (let i = this._indexes.length - 1; i >= 0; --i) {\n      if (util.isDeepStrictEqual(this._indexes[i][0], index)) {\n        this._indexes.splice(i, 1);\n      }\n    }\n  } else {\n    for (let i = this._indexes.length - 1; i >= 0; --i) {\n      if (this._indexes[i][1] != null && this._indexes[i][1].name === index) {\n        this._indexes.splice(i, 1);\n      }\n    }\n  }\n\n  return this;\n};\n\n/**\n * Remove all indexes from this schema.\n *\n * clearIndexes only removes indexes from your schema object. Does **not** affect the indexes\n * in MongoDB.\n *\n * #### Example:\n *\n *     const ToySchema = new Schema({ name: String, color: String, price: Number });\n *     ToySchema.index({ name: 1 });\n *     ToySchema.index({ color: 1 });\n *\n *     // Remove all indexes on this schema\n *     ToySchema.clearIndexes();\n *\n *     ToySchema.indexes(); // []\n *\n * @return {Schema} the Schema instance\n * @api public\n */\n\nSchema.prototype.clearIndexes = function clearIndexes() {\n  this._indexes.length = 0;\n\n  return this;\n};\n\n/**\n * Add an [Atlas search index](https://www.mongodb.com/docs/atlas/atlas-search/create-index/) that Mongoose will create using `Model.createSearchIndex()`.\n * This function only works when connected to MongoDB Atlas.\n *\n * #### Example:\n *\n *     const ToySchema = new Schema({ name: String, color: String, price: Number });\n *     ToySchema.searchIndex({ name: 'test', definition: { mappings: { dynamic: true } } });\n *\n * @param {Object} description index options, including `name` and `definition`\n * @param {String} description.name\n * @param {Object} description.definition\n * @return {Schema} the Schema instance\n * @api public\n */\n\nSchema.prototype.searchIndex = function searchIndex(description) {\n  this._searchIndexes.push(description);\n\n  return this;\n};\n\n/**\n * Reserved document keys.\n *\n * Keys in this object are names that are warned in schema declarations\n * because they have the potential to break Mongoose/ Mongoose plugins functionality. If you create a schema\n * using `new Schema()` with one of these property names, Mongoose will log a warning.\n *\n * - _posts\n * - _pres\n * - collection\n  * - emit\n * - errors\n * - get\n * - init\n * - isModified\n * - isNew\n * - listeners\n * - modelName\n * - on\n * - once\n * - populated\n * - prototype\n * - remove\n * - removeListener\n * - save\n * - schema\n * - toObject\n * - validate\n *\n * _NOTE:_ Use of these terms as method names is permitted, but play at your own risk, as they may be existing mongoose document methods you are stomping on.\n *\n *      const schema = new Schema(..);\n *      schema.methods.init = function () {} // potentially breaking\n *\n * @property reserved\n * @memberOf Schema\n * @static\n */\n\nSchema.reserved = Object.create(null);\nSchema.prototype.reserved = Schema.reserved;\n\nconst reserved = Schema.reserved;\n// Core object\nreserved['prototype'] =\n// EventEmitter\nreserved.emit =\nreserved.listeners =\nreserved.removeListener =\n\n// document properties and functions\nreserved.collection =\nreserved.errors =\nreserved.get =\nreserved.init =\nreserved.isModified =\nreserved.isNew =\nreserved.populated =\nreserved.remove =\nreserved.save =\nreserved.toObject =\nreserved.validate = 1;\nreserved.collection = 1;\n\n/**\n * Gets/sets schema paths.\n *\n * Sets a path (if arity 2)\n * Gets a path (if arity 1)\n *\n * #### Example:\n *\n *     schema.path('name') // returns a SchemaType\n *     schema.path('name', Number) // changes the schemaType of `name` to Number\n *\n * @param {String} path The name of the Path to get / set\n * @param {Object} [obj] The Type to set the path to, if provided the path will be SET, otherwise the path will be GET\n * @api public\n */\n\nSchema.prototype.path = function(path, obj) {\n  if (obj === undefined) {\n    // Convert to '.$' to check subpaths re: gh-6405\n    const cleanPath = _pathToPositionalSyntax(path);\n    let schematype = _getPath(this, path, cleanPath);\n    if (schematype != null) {\n      return schematype;\n    }\n\n    // Look for maps\n    const mapPath = getMapPath(this, path);\n    if (mapPath != null) {\n      return mapPath;\n    }\n\n    // Look if a parent of this path is mixed\n    schematype = this.hasMixedParent(cleanPath);\n    if (schematype != null) {\n      return schematype;\n    }\n\n    // subpaths?\n    return hasNumericSubpathRegex.test(path)\n      ? getPositionalPath(this, path, cleanPath)\n      : undefined;\n  }\n\n  // some path names conflict with document methods\n  const firstPieceOfPath = path.split('.')[0];\n  if (reserved[firstPieceOfPath] && !this.options.suppressReservedKeysWarning) {\n    const errorMessage = `\\`${firstPieceOfPath}\\` is a reserved schema pathname and may break some functionality. ` +\n      'You are allowed to use it, but use at your own risk. ' +\n      'To disable this warning pass `suppressReservedKeysWarning` as a schema option.';\n\n    utils.warn(errorMessage);\n  }\n\n  if (typeof obj === 'object' && utils.hasUserDefinedProperty(obj, 'ref')) {\n    validateRef(obj.ref, path);\n  }\n\n  // update the tree\n  const subpaths = path.split(/\\./);\n  const last = subpaths.pop();\n  let branch = this.tree;\n  let fullPath = '';\n\n  for (const sub of subpaths) {\n    if (utils.specialProperties.has(sub)) {\n      throw new Error('Cannot set special property `' + sub + '` on a schema');\n    }\n    fullPath = fullPath += (fullPath.length > 0 ? '.' : '') + sub;\n    if (!branch[sub]) {\n      this.nested[fullPath] = true;\n      branch[sub] = {};\n    }\n    if (typeof branch[sub] !== 'object') {\n      const msg = 'Cannot set nested path `' + path + '`. '\n          + 'Parent path `'\n          + fullPath\n          + '` already set to type ' + branch[sub].name\n          + '.';\n      throw new Error(msg);\n    }\n    branch = branch[sub];\n  }\n\n  branch[last] = clone(obj);\n\n  this.paths[path] = this.interpretAsType(path, obj, this.options);\n  const schemaType = this.paths[path];\n\n  if (schemaType.$isSchemaMap) {\n    // Maps can have arbitrary keys, so `$*` is internal shorthand for \"any key\"\n    // The '$' is to imply this path should never be stored in MongoDB so we\n    // can easily build a regexp out of this path, and '*' to imply \"any key.\"\n    const mapPath = path + '.$*';\n\n    this.paths[mapPath] = schemaType.$__schemaType;\n    this.mapPaths.push(this.paths[mapPath]);\n  }\n\n  if (schemaType.$isSingleNested) {\n    for (const key of Object.keys(schemaType.schema.paths)) {\n      this.singleNestedPaths[path + '.' + key] = schemaType.schema.paths[key];\n    }\n    for (const key of Object.keys(schemaType.schema.singleNestedPaths)) {\n      this.singleNestedPaths[path + '.' + key] =\n        schemaType.schema.singleNestedPaths[key];\n    }\n    for (const key of Object.keys(schemaType.schema.subpaths)) {\n      this.singleNestedPaths[path + '.' + key] =\n        schemaType.schema.subpaths[key];\n    }\n    for (const key of Object.keys(schemaType.schema.nested)) {\n      this.singleNestedPaths[path + '.' + key] = 'nested';\n    }\n\n    Object.defineProperty(schemaType.schema, 'base', {\n      configurable: true,\n      enumerable: false,\n      writable: false,\n      value: this.base\n    });\n\n    schemaType.caster.base = this.base;\n    this.childSchemas.push({\n      schema: schemaType.schema,\n      model: schemaType.caster\n    });\n  } else if (schemaType.$isMongooseDocumentArray) {\n    Object.defineProperty(schemaType.schema, 'base', {\n      configurable: true,\n      enumerable: false,\n      writable: false,\n      value: this.base\n    });\n\n    schemaType.casterConstructor.base = this.base;\n    this.childSchemas.push({\n      schema: schemaType.schema,\n      model: schemaType.casterConstructor\n    });\n  }\n\n  if (schemaType.$isMongooseArray && schemaType.caster instanceof SchemaType) {\n    let arrayPath = path;\n    let _schemaType = schemaType;\n\n    const toAdd = [];\n    while (_schemaType.$isMongooseArray) {\n      arrayPath = arrayPath + '.$';\n\n      // Skip arrays of document arrays\n      if (_schemaType.$isMongooseDocumentArray) {\n        _schemaType.$embeddedSchemaType._arrayPath = arrayPath;\n        _schemaType.$embeddedSchemaType._arrayParentPath = path;\n        _schemaType = _schemaType.$embeddedSchemaType;\n      } else {\n        _schemaType.caster._arrayPath = arrayPath;\n        _schemaType.caster._arrayParentPath = path;\n        _schemaType = _schemaType.caster;\n      }\n\n      this.subpaths[arrayPath] = _schemaType;\n    }\n\n    for (const _schemaType of toAdd) {\n      this.subpaths[_schemaType.path] = _schemaType;\n    }\n  }\n\n  if (schemaType.$isMongooseDocumentArray) {\n    for (const key of Object.keys(schemaType.schema.paths)) {\n      const _schemaType = schemaType.schema.paths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n      if (typeof _schemaType === 'object' && _schemaType != null && _schemaType.$parentSchemaDocArray == null) {\n        _schemaType.$parentSchemaDocArray = schemaType;\n      }\n    }\n    for (const key of Object.keys(schemaType.schema.subpaths)) {\n      const _schemaType = schemaType.schema.subpaths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n      if (typeof _schemaType === 'object' && _schemaType != null && _schemaType.$parentSchemaDocArray == null) {\n        _schemaType.$parentSchemaDocArray = schemaType;\n      }\n    }\n    for (const key of Object.keys(schemaType.schema.singleNestedPaths)) {\n      const _schemaType = schemaType.schema.singleNestedPaths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n      if (typeof _schemaType === 'object' && _schemaType != null && _schemaType.$parentSchemaDocArray == null) {\n        _schemaType.$parentSchemaDocArray = schemaType;\n      }\n    }\n  }\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction gatherChildSchemas(schema) {\n  const childSchemas = [];\n\n  for (const path of Object.keys(schema.paths)) {\n    const schematype = schema.paths[path];\n    if (schematype.$isMongooseDocumentArray || schematype.$isSingleNested) {\n      childSchemas.push({ schema: schematype.schema, model: schematype.caster });\n    }\n  }\n\n  return childSchemas;\n}\n\n/*!\n * ignore\n */\n\nfunction _getPath(schema, path, cleanPath) {\n  if (schema.paths.hasOwnProperty(path)) {\n    return schema.paths[path];\n  }\n  if (schema.subpaths.hasOwnProperty(cleanPath)) {\n    return schema.subpaths[cleanPath];\n  }\n  if (schema.singleNestedPaths.hasOwnProperty(cleanPath) && typeof schema.singleNestedPaths[cleanPath] === 'object') {\n    return schema.singleNestedPaths[cleanPath];\n  }\n\n  return null;\n}\n\n/*!\n * ignore\n */\n\nfunction _pathToPositionalSyntax(path) {\n  if (!/\\.\\d+/.test(path)) {\n    return path;\n  }\n  return path.replace(/\\.\\d+\\./g, '.$.').replace(/\\.\\d+$/, '.$');\n}\n\n/*!\n * ignore\n */\n\nfunction getMapPath(schema, path) {\n  if (schema.mapPaths.length === 0) {\n    return null;\n  }\n  for (const val of schema.mapPaths) {\n    const _path = val.path;\n    const re = new RegExp('^' + _path.replace(/\\.\\$\\*/g, '\\\\.[^.]+') + '$');\n    if (re.test(path)) {\n      return schema.paths[_path];\n    }\n  }\n\n  return null;\n}\n\n/**\n * The Mongoose instance this schema is associated with\n *\n * @property base\n * @api private\n */\n\nObject.defineProperty(Schema.prototype, 'base', {\n  configurable: true,\n  enumerable: false,\n  writable: true,\n  value: null\n});\n\n/**\n * Converts type arguments into Mongoose Types.\n *\n * @param {String} path\n * @param {Object} obj constructor\n * @param {Object} options\n * @api private\n */\n\nSchema.prototype.interpretAsType = function(path, obj, options) {\n  if (obj instanceof SchemaType) {\n    if (obj.path === path) {\n      return obj;\n    }\n    const clone = obj.clone();\n    clone.path = path;\n    return clone;\n  }\n\n  // If this schema has an associated Mongoose object, use the Mongoose object's\n  // copy of SchemaTypes re: gh-7158 gh-6933\n  const MongooseTypes = this.base != null ? this.base.Schema.Types : Schema.Types;\n  const Types = this.base != null ? this.base.Types : __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/mongoose/lib/types/index.js\");\n\n  if (!utils.isPOJO(obj) && !(obj instanceof SchemaTypeOptions)) {\n    const constructorName = utils.getFunctionName(obj.constructor);\n    if (constructorName !== 'Object') {\n      const oldObj = obj;\n      obj = {};\n      obj[options.typeKey] = oldObj;\n    }\n  }\n\n  // Get the type making sure to allow keys named \"type\"\n  // and default to mixed if not specified.\n  // { type: { type: String, default: 'freshcut' } }\n  let type = obj[options.typeKey] && (obj[options.typeKey] instanceof Function || options.typeKey !== 'type' || !obj.type.type)\n    ? obj[options.typeKey]\n    : {};\n  let name;\n\n  if (utils.isPOJO(type) || type === 'mixed') {\n    return new MongooseTypes.Mixed(path, obj);\n  }\n\n  if (Array.isArray(type) || type === Array || type === 'array' || type === MongooseTypes.Array) {\n    // if it was specified through { type } look for `cast`\n    let cast = (type === Array || type === 'array')\n      ? obj.cast || obj.of\n      : type[0];\n\n    // new Schema({ path: [new Schema({ ... })] })\n    if (cast && cast.instanceOfSchema) {\n      if (!(cast instanceof Schema)) {\n        if (this.options._isMerging) {\n          cast = new Schema(cast);\n        } else {\n          throw new TypeError('Schema for array path `' + path +\n            '` is from a different copy of the Mongoose module. ' +\n            'Please make sure you\\'re using the same version ' +\n            'of Mongoose everywhere with `npm list mongoose`. If you are still ' +\n            'getting this error, please add `new Schema()` around the path: ' +\n            `${path}: new Schema(...)`);\n        }\n      }\n      return new MongooseTypes.DocumentArray(path, cast, obj);\n    }\n    if (cast &&\n        cast[options.typeKey] &&\n        cast[options.typeKey].instanceOfSchema) {\n      if (!(cast[options.typeKey] instanceof Schema)) {\n        if (this.options._isMerging) {\n          cast[options.typeKey] = new Schema(cast[options.typeKey]);\n        } else {\n          throw new TypeError('Schema for array path `' + path +\n            '` is from a different copy of the Mongoose module. ' +\n            'Please make sure you\\'re using the same version ' +\n            'of Mongoose everywhere with `npm list mongoose`. If you are still ' +\n            'getting this error, please add `new Schema()` around the path: ' +\n            `${path}: new Schema(...)`);\n        }\n      }\n      return new MongooseTypes.DocumentArray(path, cast[options.typeKey], obj, cast);\n    }\n\n    if (Array.isArray(cast)) {\n      return new MongooseTypes.Array(path, this.interpretAsType(path, cast, options), obj);\n    }\n\n    // Handle both `new Schema({ arr: [{ subpath: String }] })` and `new Schema({ arr: [{ type: { subpath: string } }] })`\n    const castFromTypeKey = (cast != null && cast[options.typeKey] && (options.typeKey !== 'type' || !cast.type.type)) ?\n      cast[options.typeKey] :\n      cast;\n    if (typeof cast === 'string') {\n      cast = MongooseTypes[cast.charAt(0).toUpperCase() + cast.substring(1)];\n    } else if (utils.isPOJO(castFromTypeKey)) {\n      if (Object.keys(castFromTypeKey).length) {\n        // The `minimize` and `typeKey` options propagate to child schemas\n        // declared inline, like `{ arr: [{ val: { $type: String } }] }`.\n        // See gh-3560\n        const childSchemaOptions = { minimize: options.minimize };\n        if (options.typeKey) {\n          childSchemaOptions.typeKey = options.typeKey;\n        }\n        // propagate 'strict' option to child schema\n        if (options.hasOwnProperty('strict')) {\n          childSchemaOptions.strict = options.strict;\n        }\n        if (options.hasOwnProperty('strictQuery')) {\n          childSchemaOptions.strictQuery = options.strictQuery;\n        }\n        if (options.hasOwnProperty('toObject')) {\n          childSchemaOptions.toObject = utils.omit(options.toObject, ['transform']);\n        }\n        if (options.hasOwnProperty('toJSON')) {\n          childSchemaOptions.toJSON = utils.omit(options.toJSON, ['transform']);\n        }\n\n        if (this._userProvidedOptions.hasOwnProperty('_id')) {\n          childSchemaOptions._id = this._userProvidedOptions._id;\n        } else if (Schema.Types.DocumentArray.defaultOptions._id != null) {\n          childSchemaOptions._id = Schema.Types.DocumentArray.defaultOptions._id;\n        }\n\n        const childSchema = new Schema(castFromTypeKey, childSchemaOptions);\n        childSchema.$implicitlyCreated = true;\n        return new MongooseTypes.DocumentArray(path, childSchema, obj);\n      } else {\n        // Special case: empty object becomes mixed\n        return new MongooseTypes.Array(path, MongooseTypes.Mixed, obj);\n      }\n    }\n\n    if (cast) {\n      type = cast[options.typeKey] && (options.typeKey !== 'type' || !cast.type.type)\n        ? cast[options.typeKey]\n        : cast;\n\n      if (Array.isArray(type)) {\n        return new MongooseTypes.Array(path, this.interpretAsType(path, type, options), obj);\n      }\n\n      name = typeof type === 'string'\n        ? type\n        : type.schemaName || utils.getFunctionName(type);\n\n      // For Jest 26+, see #10296\n      if (name === 'ClockDate') {\n        name = 'Date';\n      }\n\n      if (name === void 0) {\n        throw new TypeError('Invalid schema configuration: ' +\n          `Could not determine the embedded type for array \\`${path}\\`. ` +\n          'See https://mongoosejs.com/docs/guide.html#definition for more info on supported schema syntaxes.');\n      }\n      if (!MongooseTypes.hasOwnProperty(name)) {\n        throw new TypeError('Invalid schema configuration: ' +\n          `\\`${name}\\` is not a valid type within the array \\`${path}\\`.` +\n          'See https://bit.ly/mongoose-schematypes for a list of valid schema types.');\n      }\n    }\n\n    return new MongooseTypes.Array(path, cast || MongooseTypes.Mixed, obj, options);\n  }\n\n  if (type && type.instanceOfSchema) {\n    return new MongooseTypes.Subdocument(type, path, obj);\n  }\n\n  if (Buffer.isBuffer(type)) {\n    name = 'Buffer';\n  } else if (typeof type === 'function' || typeof type === 'object') {\n    name = type.schemaName || utils.getFunctionName(type);\n  } else if (type === Types.ObjectId) {\n    name = 'ObjectId';\n  } else if (type === Types.Decimal128) {\n    name = 'Decimal128';\n  } else {\n    name = type == null ? '' + type : type.toString();\n  }\n\n  if (name) {\n    name = name.charAt(0).toUpperCase() + name.substring(1);\n  }\n  // Special case re: gh-7049 because the bson `ObjectID` class' capitalization\n  // doesn't line up with Mongoose's.\n  if (name === 'ObjectID') {\n    name = 'ObjectId';\n  }\n  // For Jest 26+, see #10296\n  if (name === 'ClockDate') {\n    name = 'Date';\n  }\n\n  if (name === void 0) {\n    throw new TypeError(`Invalid schema configuration: \\`${path}\\` schematype definition is ` +\n      'invalid. See ' +\n      'https://mongoosejs.com/docs/guide.html#definition for more info on supported schema syntaxes.');\n  }\n  if (MongooseTypes[name] == null) {\n    throw new TypeError(`Invalid schema configuration: \\`${name}\\` is not ` +\n      `a valid type at path \\`${path}\\`. See ` +\n      'https://bit.ly/mongoose-schematypes for a list of valid schema types.');\n  }\n\n  const schemaType = new MongooseTypes[name](path, obj);\n\n  if (schemaType.$isSchemaMap) {\n    createMapNestedSchemaType(this, schemaType, path, obj, options);\n  }\n\n  return schemaType;\n};\n\n/*!\n * ignore\n */\n\nfunction createMapNestedSchemaType(schema, schemaType, path, obj, options) {\n  const mapPath = path + '.$*';\n  let _mapType = { type: {} };\n  if (utils.hasUserDefinedProperty(obj, 'of')) {\n    const isInlineSchema = utils.isPOJO(obj.of) &&\n      Object.keys(obj.of).length > 0 &&\n      !utils.hasUserDefinedProperty(obj.of, schema.options.typeKey);\n    if (isInlineSchema) {\n      _mapType = { [schema.options.typeKey]: new Schema(obj.of) };\n    } else if (utils.isPOJO(obj.of)) {\n      _mapType = Object.assign({}, obj.of);\n    } else {\n      _mapType = { [schema.options.typeKey]: obj.of };\n    }\n\n    if (_mapType[schema.options.typeKey] && _mapType[schema.options.typeKey].instanceOfSchema) {\n      const subdocumentSchema = _mapType[schema.options.typeKey];\n      subdocumentSchema.eachPath((subpath, type) => {\n        if (type.options.select === true || type.options.select === false) {\n          throw new MongooseError('Cannot use schema-level projections (`select: true` or `select: false`) within maps at path \"' + path + '.' + subpath + '\"');\n        }\n      });\n    }\n\n    if (utils.hasUserDefinedProperty(obj, 'ref')) {\n      _mapType.ref = obj.ref;\n    }\n  }\n  schemaType.$__schemaType = schema.interpretAsType(mapPath, _mapType, options);\n}\n\n/**\n * Iterates the schemas paths similar to Array#forEach.\n *\n * The callback is passed the pathname and the schemaType instance.\n *\n * #### Example:\n *\n *     const userSchema = new Schema({ name: String, registeredAt: Date });\n *     userSchema.eachPath((pathname, schematype) => {\n *       // Prints twice:\n *       // name SchemaString { ... }\n *       // registeredAt SchemaDate { ... }\n *       console.log(pathname, schematype);\n *     });\n *\n * @param {Function} fn callback function\n * @return {Schema} this\n * @api public\n */\n\nSchema.prototype.eachPath = function(fn) {\n  const keys = Object.keys(this.paths);\n  const len = keys.length;\n\n  for (let i = 0; i < len; ++i) {\n    fn(keys[i], this.paths[keys[i]]);\n  }\n\n  return this;\n};\n\n/**\n * Returns an Array of path strings that are required by this schema.\n *\n * #### Example:\n *\n *     const s = new Schema({\n *       name: { type: String, required: true },\n *       age: { type: String, required: true },\n *       notes: String\n *     });\n *     s.requiredPaths(); // [ 'age', 'name' ]\n *\n * @api public\n * @param {Boolean} invalidate Refresh the cache\n * @return {Array}\n */\n\nSchema.prototype.requiredPaths = function requiredPaths(invalidate) {\n  if (this._requiredpaths && !invalidate) {\n    return this._requiredpaths;\n  }\n\n  const paths = Object.keys(this.paths);\n  let i = paths.length;\n  const ret = [];\n\n  while (i--) {\n    const path = paths[i];\n    if (this.paths[path].isRequired) {\n      ret.push(path);\n    }\n  }\n  this._requiredpaths = ret;\n  return this._requiredpaths;\n};\n\n/**\n * Returns indexes from fields and schema-level indexes (cached).\n *\n * @api private\n * @return {Array}\n */\n\nSchema.prototype.indexedPaths = function indexedPaths() {\n  if (this._indexedpaths) {\n    return this._indexedpaths;\n  }\n  this._indexedpaths = this.indexes();\n  return this._indexedpaths;\n};\n\n/**\n * Returns the pathType of `path` for this schema.\n *\n * Given a path, returns whether it is a real, virtual, nested, or ad-hoc/undefined path.\n *\n * #### Example:\n *\n *     const s = new Schema({ name: String, nested: { foo: String } });\n *     s.virtual('foo').get(() => 42);\n *     s.pathType('name'); // \"real\"\n *     s.pathType('nested'); // \"nested\"\n *     s.pathType('foo'); // \"virtual\"\n *     s.pathType('fail'); // \"adhocOrUndefined\"\n *\n * @param {String} path\n * @return {String}\n * @api public\n */\n\nSchema.prototype.pathType = function(path) {\n  if (this.paths.hasOwnProperty(path)) {\n    return 'real';\n  }\n  if (this.virtuals.hasOwnProperty(path)) {\n    return 'virtual';\n  }\n  if (this.nested.hasOwnProperty(path)) {\n    return 'nested';\n  }\n\n  // Convert to '.$' to check subpaths re: gh-6405\n  const cleanPath = _pathToPositionalSyntax(path);\n\n  if (this.subpaths.hasOwnProperty(cleanPath) || this.subpaths.hasOwnProperty(path)) {\n    return 'real';\n  }\n\n  const singleNestedPath = this.singleNestedPaths.hasOwnProperty(cleanPath) || this.singleNestedPaths.hasOwnProperty(path);\n  if (singleNestedPath) {\n    return singleNestedPath === 'nested' ? 'nested' : 'real';\n  }\n\n  // Look for maps\n  const mapPath = getMapPath(this, path);\n  if (mapPath != null) {\n    return 'real';\n  }\n\n  if (/\\.\\d+\\.|\\.\\d+$/.test(path)) {\n    return getPositionalPathType(this, path, cleanPath);\n  }\n  return 'adhocOrUndefined';\n};\n\n/**\n * Returns true iff this path is a child of a mixed schema.\n *\n * @param {String} path\n * @return {Boolean}\n * @api private\n */\n\nSchema.prototype.hasMixedParent = function(path) {\n  const subpaths = path.split(/\\./g);\n  path = '';\n  for (let i = 0; i < subpaths.length; ++i) {\n    path = i > 0 ? path + '.' + subpaths[i] : subpaths[i];\n    if (this.paths.hasOwnProperty(path) &&\n        this.paths[path] instanceof MongooseTypes.Mixed) {\n      return this.paths[path];\n    }\n  }\n\n  return null;\n};\n\n/**\n * Setup updatedAt and createdAt timestamps to documents if enabled\n *\n * @param {Boolean|Object} timestamps timestamps options\n * @api private\n */\nSchema.prototype.setupTimestamp = function(timestamps) {\n  return setupTimestamps(this, timestamps);\n};\n\n/**\n * ignore. Deprecated re: #6405\n * @param {Any} self\n * @param {String} path\n * @api private\n */\n\nfunction getPositionalPathType(self, path, cleanPath) {\n  const subpaths = path.split(/\\.(\\d+)\\.|\\.(\\d+)$/).filter(Boolean);\n  if (subpaths.length < 2) {\n    return self.paths.hasOwnProperty(subpaths[0]) ?\n      self.paths[subpaths[0]] :\n      'adhocOrUndefined';\n  }\n\n  let val = self.path(subpaths[0]);\n  let isNested = false;\n  if (!val) {\n    return 'adhocOrUndefined';\n  }\n\n  const last = subpaths.length - 1;\n\n  for (let i = 1; i < subpaths.length; ++i) {\n    isNested = false;\n    const subpath = subpaths[i];\n\n    if (i === last && val && !/\\D/.test(subpath)) {\n      if (val.$isMongooseDocumentArray) {\n        val = val.$embeddedSchemaType;\n      } else if (val instanceof MongooseTypes.Array) {\n        // StringSchema, NumberSchema, etc\n        val = val.caster;\n      } else {\n        val = undefined;\n      }\n      break;\n    }\n\n    // ignore if its just a position segment: path.0.subpath\n    if (!/\\D/.test(subpath)) {\n      // Nested array\n      if (val instanceof MongooseTypes.Array && i !== last) {\n        val = val.caster;\n      }\n      continue;\n    }\n\n    if (!(val && val.schema)) {\n      val = undefined;\n      break;\n    }\n\n    const type = val.schema.pathType(subpath);\n    isNested = (type === 'nested');\n    val = val.schema.path(subpath);\n  }\n\n  self.subpaths[cleanPath] = val;\n  if (val) {\n    return 'real';\n  }\n  if (isNested) {\n    return 'nested';\n  }\n  return 'adhocOrUndefined';\n}\n\n\n/*!\n * ignore\n */\n\nfunction getPositionalPath(self, path, cleanPath) {\n  getPositionalPathType(self, path, cleanPath);\n  return self.subpaths[cleanPath];\n}\n\n/**\n * Adds a method call to the queue.\n *\n * #### Example:\n *\n *     schema.methods.print = function() { console.log(this); };\n *     schema.queue('print', []); // Print the doc every one is instantiated\n *\n *     const Model = mongoose.model('Test', schema);\n *     new Model({ name: 'test' }); // Prints '{\"_id\": ..., \"name\": \"test\" }'\n *\n * @param {String} name name of the document method to call later\n * @param {Array} args arguments to pass to the method\n * @api public\n */\n\nSchema.prototype.queue = function(name, args) {\n  this.callQueue.push([name, args]);\n  return this;\n};\n\n/**\n * Defines a pre hook for the model.\n *\n * #### Example:\n *\n *     const toySchema = new Schema({ name: String, created: Date });\n *\n *     toySchema.pre('save', function(next) {\n *       if (!this.created) this.created = new Date;\n *       next();\n *     });\n *\n *     toySchema.pre('validate', function(next) {\n *       if (this.name !== 'Woody') this.name = 'Woody';\n *       next();\n *     });\n *\n *     // Equivalent to calling `pre()` on `find`, `findOne`, `findOneAndUpdate`.\n *     toySchema.pre(/^find/, function(next) {\n *       console.log(this.getFilter());\n *     });\n *\n *     // Equivalent to calling `pre()` on `updateOne`, `findOneAndUpdate`.\n *     toySchema.pre(['updateOne', 'findOneAndUpdate'], function(next) {\n *       console.log(this.getFilter());\n *     });\n *\n *     toySchema.pre('deleteOne', function() {\n *       // Runs when you call `Toy.deleteOne()`\n *     });\n *\n *     toySchema.pre('deleteOne', { document: true }, function() {\n *       // Runs when you call `doc.deleteOne()`\n *     });\n *\n * @param {String|RegExp|String[]} methodName The method name or regular expression to match method name\n * @param {Object} [options]\n * @param {Boolean} [options.document] If `name` is a hook for both document and query middleware, set to `true` to run on document middleware. For example, set `options.document` to `true` to apply this hook to `Document#deleteOne()` rather than `Query#deleteOne()`.\n * @param {Boolean} [options.query] If `name` is a hook for both document and query middleware, set to `true` to run on query middleware.\n * @param {Function} callback\n * @api public\n */\n\nSchema.prototype.pre = function(name) {\n  if (name instanceof RegExp) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const fn of hookNames) {\n      if (name.test(fn)) {\n        this.pre.apply(this, [fn].concat(remainingArgs));\n      }\n    }\n    return this;\n  }\n  if (Array.isArray(name)) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const el of name) {\n      this.pre.apply(this, [el].concat(remainingArgs));\n    }\n    return this;\n  }\n  this.s.hooks.pre.apply(this.s.hooks, arguments);\n  return this;\n};\n\n/**\n * Defines a post hook for the document\n *\n *     const schema = new Schema(..);\n *     schema.post('save', function (doc) {\n *       console.log('this fired after a document was saved');\n *     });\n *\n *     schema.post('find', function(docs) {\n *       console.log('this fired after you ran a find query');\n *     });\n *\n *     schema.post(/Many$/, function(res) {\n *       console.log('this fired after you ran `updateMany()` or `deleteMany()`');\n *     });\n *\n *     const Model = mongoose.model('Model', schema);\n *\n *     const m = new Model(..);\n *     m.save(function(err) {\n *       console.log('this fires after the `post` hook');\n *     });\n *\n *     m.find(function(err, docs) {\n *       console.log('this fires after the post find hook');\n *     });\n *\n * @param {String|RegExp|String[]} methodName The method name or regular expression to match method name\n * @param {Object} [options]\n * @param {Boolean} [options.document] If `name` is a hook for both document and query middleware, set to `true` to run on document middleware.\n * @param {Boolean} [options.query] If `name` is a hook for both document and query middleware, set to `true` to run on query middleware.\n * @param {Function} fn callback\n * @see middleware https://mongoosejs.com/docs/middleware.html\n * @see kareem https://npmjs.org/package/kareem\n * @api public\n */\n\nSchema.prototype.post = function(name) {\n  if (name instanceof RegExp) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const fn of hookNames) {\n      if (name.test(fn)) {\n        this.post.apply(this, [fn].concat(remainingArgs));\n      }\n    }\n    return this;\n  }\n  if (Array.isArray(name)) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const el of name) {\n      this.post.apply(this, [el].concat(remainingArgs));\n    }\n    return this;\n  }\n  this.s.hooks.post.apply(this.s.hooks, arguments);\n  return this;\n};\n\n/**\n * Registers a plugin for this schema.\n *\n * #### Example:\n *\n *     const s = new Schema({ name: String });\n *     s.plugin(schema => console.log(schema.path('name').path));\n *     mongoose.model('Test', s); // Prints 'name'\n *\n * Or with Options:\n *\n *     const s = new Schema({ name: String });\n *     s.plugin((schema, opts) => console.log(opts.text, schema.path('name').path), { text: \"Schema Path Name:\" });\n *     mongoose.model('Test', s); // Prints 'Schema Path Name: name'\n *\n * @param {Function} plugin The Plugin's callback\n * @param {Object} [opts] Options to pass to the plugin\n * @param {Boolean} [opts.deduplicate=false] If true, ignore duplicate plugins (same `fn` argument using `===`)\n * @see plugins https://mongoosejs.com/docs/plugins.html\n * @api public\n */\n\nSchema.prototype.plugin = function(fn, opts) {\n  if (typeof fn !== 'function') {\n    throw new Error('First param to `schema.plugin()` must be a function, ' +\n      'got \"' + (typeof fn) + '\"');\n  }\n\n  if (opts && opts.deduplicate) {\n    for (const plugin of this.plugins) {\n      if (plugin.fn === fn) {\n        return this;\n      }\n    }\n  }\n  this.plugins.push({ fn: fn, opts: opts });\n\n  fn(this, opts);\n  return this;\n};\n\n/**\n * Adds an instance method to documents constructed from Models compiled from this schema.\n *\n * #### Example:\n *\n *     const schema = kittySchema = new Schema(..);\n *\n *     schema.method('meow', function () {\n *       console.log('meeeeeoooooooooooow');\n *     })\n *\n *     const Kitty = mongoose.model('Kitty', schema);\n *\n *     const fizz = new Kitty;\n *     fizz.meow(); // meeeeeooooooooooooow\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as methods.\n *\n *     schema.method({\n *         purr: function () {}\n *       , scratch: function () {}\n *     });\n *\n *     // later\n *     const fizz = new Kitty;\n *     fizz.purr();\n *     fizz.scratch();\n *\n * NOTE: `Schema.method()` adds instance methods to the `Schema.methods` object. You can also add instance methods directly to the `Schema.methods` object as seen in the [guide](https://mongoosejs.com/docs/guide.html#methods)\n *\n * @param {String|Object} name The Method Name for a single function, or a Object of \"string-function\" pairs.\n * @param {Function} [fn] The Function in a single-function definition.\n * @api public\n */\n\nSchema.prototype.method = function(name, fn, options) {\n  if (typeof name !== 'string') {\n    for (const i in name) {\n      this.methods[i] = name[i];\n      this.methodOptions[i] = clone(options);\n    }\n  } else {\n    this.methods[name] = fn;\n    this.methodOptions[name] = clone(options);\n  }\n  return this;\n};\n\n/**\n * Adds static \"class\" methods to Models compiled from this schema.\n *\n * #### Example:\n *\n *     const schema = new Schema(..);\n *     // Equivalent to `schema.statics.findByName = function(name) {}`;\n *     schema.static('findByName', function(name) {\n *       return this.find({ name: name });\n *     });\n *\n *     const Drink = mongoose.model('Drink', schema);\n *     await Drink.findByName('LaCroix');\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as methods.\n *\n *     schema.static({\n *         findByName: function () {..}\n *       , findByCost: function () {..}\n *     });\n *\n *     const Drink = mongoose.model('Drink', schema);\n *     await Drink.findByName('LaCroix');\n *     await Drink.findByCost(3);\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as statics.\n *\n * @param {String|Object} name The Method Name for a single function, or a Object of \"string-function\" pairs.\n * @param {Function} [fn] The Function in a single-function definition.\n * @api public\n * @see Statics https://mongoosejs.com/docs/guide.html#statics\n */\n\nSchema.prototype.static = function(name, fn) {\n  if (typeof name !== 'string') {\n    for (const i in name) {\n      this.statics[i] = name[i];\n    }\n  } else {\n    this.statics[name] = fn;\n  }\n  return this;\n};\n\n/**\n * Defines an index (most likely compound) for this schema.\n *\n * #### Example:\n *\n *     schema.index({ first: 1, last: -1 })\n *\n * @param {Object} fields The Fields to index, with the order, available values: `1 | -1 | '2d' | '2dsphere' | 'geoHaystack' | 'hashed' | 'text'`\n * @param {Object} [options] Options to pass to [MongoDB driver's `createIndex()` function](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#createIndex)\n * @param {String | number} [options.expires=null] Mongoose-specific syntactic sugar, uses [ms](https://www.npmjs.com/package/ms) to convert `expires` option into seconds for the `expireAfterSeconds` in the above link.\n * @param {String} [options.language_override=null] Tells mongodb to use the specified field instead of `language` for parsing text indexes.\n * @api public\n */\n\nSchema.prototype.index = function(fields, options) {\n  fields || (fields = {});\n  options || (options = {});\n\n  if (options.expires) {\n    utils.expires(options);\n  }\n  for (const key in fields) {\n    if (this.aliases[key]) {\n      fields = utils.renameObjKey(fields, key, this.aliases[key]);\n    }\n  }\n  for (const field of Object.keys(fields)) {\n    if (fields[field] === 'ascending' || fields[field] === 'asc') {\n      fields[field] = 1;\n    } else if (fields[field] === 'descending' || fields[field] === 'desc') {\n      fields[field] = -1;\n    }\n  }\n\n  this._indexes.push([fields, options]);\n  return this;\n};\n\n/**\n * Sets a schema option.\n *\n * #### Example:\n *\n *     schema.set('strict'); // 'true' by default\n *     schema.set('strict', false); // Sets 'strict' to false\n *     schema.set('strict'); // 'false'\n *\n * @param {String} key The name of the option to set the value to\n * @param {Object} [value] The value to set the option to, if not passed, the option will be reset to default\n * @param {Array<string>} [tags] tags to add to read preference if key === 'read'\n * @see Schema https://mongoosejs.com/docs/api/schema.html#Schema()\n * @api public\n */\n\nSchema.prototype.set = function(key, value, tags) {\n  if (arguments.length === 1) {\n    return this.options[key];\n  }\n\n  switch (key) {\n    case 'read':\n      if (typeof value === 'string') {\n        this.options[key] = { mode: handleReadPreferenceAliases(value), tags };\n      } else if (Array.isArray(value) && typeof value[0] === 'string') {\n        this.options[key] = {\n          mode: handleReadPreferenceAliases(value[0]),\n          tags: value[1]\n        };\n      } else {\n        this.options[key] = value;\n      }\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n    case 'timestamps':\n      this.setupTimestamp(value);\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n    case '_id':\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n\n      if (value && !this.paths['_id']) {\n        addAutoId(this);\n      } else if (!value && this.paths['_id'] != null && this.paths['_id'].auto) {\n        this.remove('_id');\n      }\n      break;\n    default:\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n  }\n\n  // Propagate `strict` and `strictQuery` changes down to implicitly created schemas\n  if (key === 'strict') {\n    _propagateOptionsToImplicitlyCreatedSchemas(this, { strict: value });\n  }\n  if (key === 'strictQuery') {\n    _propagateOptionsToImplicitlyCreatedSchemas(this, { strictQuery: value });\n  }\n  if (key === 'toObject') {\n    value = { ...value };\n    // Avoid propagating transform to implicitly created schemas re: gh-3279\n    delete value.transform;\n    _propagateOptionsToImplicitlyCreatedSchemas(this, { toObject: value });\n  }\n  if (key === 'toJSON') {\n    value = { ...value };\n    // Avoid propagating transform to implicitly created schemas re: gh-3279\n    delete value.transform;\n    _propagateOptionsToImplicitlyCreatedSchemas(this, { toJSON: value });\n  }\n\n  return this;\n};\n\n/*!\n * Recursively set options on implicitly created schemas\n */\n\nfunction _propagateOptionsToImplicitlyCreatedSchemas(baseSchema, options) {\n  for (const { schema } of baseSchema.childSchemas) {\n    if (!schema.$implicitlyCreated) {\n      continue;\n    }\n    Object.assign(schema.options, options);\n    _propagateOptionsToImplicitlyCreatedSchemas(schema, options);\n  }\n}\n\n/**\n * Gets a schema option.\n *\n * #### Example:\n *\n *     schema.get('strict'); // true\n *     schema.set('strict', false);\n *     schema.get('strict'); // false\n *\n * @param {String} key The name of the Option to get the current value for\n * @api public\n * @return {Any} the option's value\n */\n\nSchema.prototype.get = function(key) {\n  return this.options[key];\n};\n\nconst indexTypes = '2d 2dsphere hashed text'.split(' ');\n\n/**\n * The allowed index types\n *\n * @property {String[]} indexTypes\n * @memberOf Schema\n * @static\n * @api public\n */\n\nObject.defineProperty(Schema, 'indexTypes', {\n  get: function() {\n    return indexTypes;\n  },\n  set: function() {\n    throw new Error('Cannot overwrite Schema.indexTypes');\n  }\n});\n\n/**\n * Returns a list of indexes that this schema declares, via `schema.index()` or by `index: true` in a path's options.\n * Indexes are expressed as an array `[spec, options]`.\n *\n * #### Example:\n *\n *     const userSchema = new Schema({\n *       email: { type: String, required: true, unique: true },\n *       registeredAt: { type: Date, index: true }\n *     });\n *\n *     // [ [ { email: 1 }, { unique: true, background: true } ],\n *     //   [ { registeredAt: 1 }, { background: true } ] ]\n *     userSchema.indexes();\n *\n * [Plugins](https://mongoosejs.com/docs/plugins.html) can use the return value of this function to modify a schema's indexes.\n * For example, the below plugin makes every index unique by default.\n *\n *     function myPlugin(schema) {\n *       for (const index of schema.indexes()) {\n *         if (index[1].unique === undefined) {\n *           index[1].unique = true;\n *         }\n *       }\n *     }\n *\n * @api public\n * @return {Array} list of indexes defined in the schema\n */\n\nSchema.prototype.indexes = function() {\n  return getIndexes(this);\n};\n\n/**\n * Creates a virtual type with the given name.\n *\n * @param {String} name The name of the Virtual\n * @param {Object} [options]\n * @param {String|Model} [options.ref] model name or model instance. Marks this as a [populate virtual](https://mongoosejs.com/docs/populate.html#populate-virtuals).\n * @param {String|Function} [options.localField] Required for populate virtuals. See [populate virtual docs](https://mongoosejs.com/docs/populate.html#populate-virtuals) for more information.\n * @param {String|Function} [options.foreignField] Required for populate virtuals. See [populate virtual docs](https://mongoosejs.com/docs/populate.html#populate-virtuals) for more information.\n * @param {Boolean|Function} [options.justOne=false] Only works with populate virtuals. If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), will be a single doc or `null`. Otherwise, the populate virtual will be an array.\n * @param {Boolean} [options.count=false] Only works with populate virtuals. If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), this populate virtual will contain the number of documents rather than the documents themselves when you `populate()`.\n * @param {Function|null} [options.get=null] Adds a [getter](https://mongoosejs.com/docs/tutorials/getters-setters.html) to this virtual to transform the populated doc.\n * @param {Object|Function} [options.match=null] Apply a default [`match` option to populate](https://mongoosejs.com/docs/populate.html#match), adding an additional filter to the populate query.\n * @return {VirtualType}\n */\n\nSchema.prototype.virtual = function(name, options) {\n  if (name instanceof VirtualType || getConstructorName(name) === 'VirtualType') {\n    return this.virtual(name.path, name.options);\n  }\n  options = new VirtualOptions(options);\n\n  if (utils.hasUserDefinedProperty(options, ['ref', 'refPath'])) {\n    if (options.localField == null) {\n      throw new Error('Reference virtuals require `localField` option');\n    }\n\n    if (options.foreignField == null) {\n      throw new Error('Reference virtuals require `foreignField` option');\n    }\n\n    this.pre('init', function virtualPreInit(obj) {\n      if (mpath.has(name, obj)) {\n        const _v = mpath.get(name, obj);\n        if (!this.$$populatedVirtuals) {\n          this.$$populatedVirtuals = {};\n        }\n\n        if (options.justOne || options.count) {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\n            _v[0] :\n            _v;\n        } else {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\n            _v :\n            _v == null ? [] : [_v];\n        }\n\n        mpath.unset(name, obj);\n      }\n    });\n\n    const virtual = this.virtual(name);\n    virtual.options = options;\n\n    virtual.\n      set(function(v) {\n        if (!this.$$populatedVirtuals) {\n          this.$$populatedVirtuals = {};\n        }\n\n        return setPopulatedVirtualValue(\n          this.$$populatedVirtuals,\n          name,\n          v,\n          options\n        );\n      });\n\n    if (typeof options.get === 'function') {\n      virtual.get(options.get);\n    }\n\n    // Workaround for gh-8198: if virtual is under document array, make a fake\n    // virtual. See gh-8210, gh-13189\n    const parts = name.split('.');\n    let cur = parts[0];\n    for (let i = 0; i < parts.length - 1; ++i) {\n      if (this.paths[cur] == null) {\n        continue;\n      }\n\n      if (this.paths[cur].$isMongooseDocumentArray || this.paths[cur].$isSingleNested) {\n        const remnant = parts.slice(i + 1).join('.');\n        this.paths[cur].schema.virtual(remnant, options);\n        break;\n      }\n\n      cur += '.' + parts[i + 1];\n    }\n\n    return virtual;\n  }\n\n  const virtuals = this.virtuals;\n  const parts = name.split('.');\n\n  if (this.pathType(name) === 'real') {\n    throw new Error('Virtual path \"' + name + '\"' +\n      ' conflicts with a real path in the schema');\n  }\n\n  virtuals[name] = parts.reduce(function(mem, part, i) {\n    mem[part] || (mem[part] = (i === parts.length - 1)\n      ? new VirtualType(options, name)\n      : {});\n    return mem[part];\n  }, this.tree);\n\n  return virtuals[name];\n};\n\n/**\n * Returns the virtual type with the given `name`.\n *\n * @param {String} name The name of the Virtual to get\n * @return {VirtualType|null}\n */\n\nSchema.prototype.virtualpath = function(name) {\n  return this.virtuals.hasOwnProperty(name) ? this.virtuals[name] : null;\n};\n\n/**\n * Removes the given `path` (or [`paths`]).\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: String, age: Number });\n *     schema.remove('name');\n *     schema.path('name'); // Undefined\n *     schema.path('age'); // SchemaNumber { ... }\n *\n * Or as a Array:\n *\n *     schema.remove(['name', 'age']);\n *     schema.path('name'); // Undefined\n *     schema.path('age'); // Undefined\n *\n * @param {String|Array} path The Path(s) to remove\n * @return {Schema} the Schema instance\n * @api public\n */\nSchema.prototype.remove = function(path) {\n  if (typeof path === 'string') {\n    path = [path];\n  }\n  if (Array.isArray(path)) {\n    path.forEach(function(name) {\n      if (this.path(name) == null && !this.nested[name]) {\n        return;\n      }\n      if (this.nested[name]) {\n        const allKeys = Object.keys(this.paths).\n          concat(Object.keys(this.nested));\n        for (const path of allKeys) {\n          if (path.startsWith(name + '.')) {\n            delete this.paths[path];\n            delete this.nested[path];\n            _deletePath(this, path);\n          }\n        }\n\n        delete this.nested[name];\n        _deletePath(this, name);\n        return;\n      }\n\n      delete this.paths[name];\n      _deletePath(this, name);\n    }, this);\n  }\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _deletePath(schema, name) {\n  const pieces = name.split('.');\n  const last = pieces.pop();\n\n  let branch = schema.tree;\n\n  for (const piece of pieces) {\n    branch = branch[piece];\n  }\n\n  delete branch[last];\n}\n\n/**\n * Removes the given virtual or virtuals from the schema.\n *\n * @param {String|Array} path The virutal path(s) to remove.\n * @returns {Schema} the Schema instance, or a mongoose error if the virtual does not exist.\n * @api public\n */\n\nSchema.prototype.removeVirtual = function(path) {\n  if (typeof path === 'string') {\n    path = [path];\n  }\n  if (Array.isArray(path)) {\n    for (const virtual of path) {\n      if (this.virtuals[virtual] == null) {\n        throw new MongooseError(`Attempting to remove virtual \"${virtual}\" that does not exist.`);\n      }\n    }\n\n    for (const virtual of path) {\n      delete this.paths[virtual];\n      delete this.virtuals[virtual];\n      if (virtual.indexOf('.') !== -1) {\n        mpath.unset(virtual, this.tree);\n      } else {\n        delete this.tree[virtual];\n      }\n    }\n  }\n  return this;\n};\n\n/**\n * Loads an ES6 class into a schema. Maps [setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) + [getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get), [static methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static),\n * and [instance methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Class_body_and_method_definitions)\n * to schema [virtuals](https://mongoosejs.com/docs/guide.html#virtuals),\n * [statics](https://mongoosejs.com/docs/guide.html#statics), and\n * [methods](https://mongoosejs.com/docs/guide.html#methods).\n *\n * #### Example:\n *\n * ```javascript\n * const md5 = require('md5');\n * const userSchema = new Schema({ email: String });\n * class UserClass {\n *   // `gravatarImage` becomes a virtual\n *   get gravatarImage() {\n *     const hash = md5(this.email.toLowerCase());\n *     return `https://www.gravatar.com/avatar/${hash}`;\n *   }\n *\n *   // `getProfileUrl()` becomes a document method\n *   getProfileUrl() {\n *     return `https://mysite.com/${this.email}`;\n *   }\n *\n *   // `findByEmail()` becomes a static\n *   static findByEmail(email) {\n *     return this.findOne({ email });\n *   }\n * }\n *\n * // `schema` will now have a `gravatarImage` virtual, a `getProfileUrl()` method,\n * // and a `findByEmail()` static\n * userSchema.loadClass(UserClass);\n * ```\n *\n * @param {Function} model The Class to load\n * @param {Boolean} [virtualsOnly] if truthy, only pulls virtuals from the class, not methods or statics\n */\nSchema.prototype.loadClass = function(model, virtualsOnly) {\n  // Stop copying when hit certain base classes\n  if (model === Object.prototype ||\n      model === Function.prototype ||\n      model.prototype.hasOwnProperty('$isMongooseModelPrototype') ||\n      model.prototype.hasOwnProperty('$isMongooseDocumentPrototype')) {\n    return this;\n  }\n\n  this.loadClass(Object.getPrototypeOf(model), virtualsOnly);\n\n  // Add static methods\n  if (!virtualsOnly) {\n    Object.getOwnPropertyNames(model).forEach(function(name) {\n      if (name.match(/^(length|name|prototype|constructor|__proto__)$/)) {\n        return;\n      }\n      const prop = Object.getOwnPropertyDescriptor(model, name);\n      if (prop.hasOwnProperty('value')) {\n        this.static(name, prop.value);\n      }\n    }, this);\n  }\n\n  // Add methods and virtuals\n  Object.getOwnPropertyNames(model.prototype).forEach(function(name) {\n    if (name.match(/^(constructor)$/)) {\n      return;\n    }\n    const method = Object.getOwnPropertyDescriptor(model.prototype, name);\n    if (!virtualsOnly) {\n      if (typeof method.value === 'function') {\n        this.method(name, method.value);\n      }\n    }\n    if (typeof method.get === 'function') {\n      if (this.virtuals[name]) {\n        this.virtuals[name].getters = [];\n      }\n      this.virtual(name).get(method.get);\n    }\n    if (typeof method.set === 'function') {\n      if (this.virtuals[name]) {\n        this.virtuals[name].setters = [];\n      }\n      this.virtual(name).set(method.set);\n    }\n  }, this);\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._getSchema = function(path) {\n  const _this = this;\n  const pathschema = _this.path(path);\n  const resultPath = [];\n\n  if (pathschema) {\n    pathschema.$fullPath = path;\n    return pathschema;\n  }\n\n  function search(parts, schema) {\n    let p = parts.length + 1;\n    let foundschema;\n    let trypath;\n\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n      if (foundschema) {\n        resultPath.push(trypath);\n\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            foundschema.caster.$fullPath = resultPath.join('.');\n            return foundschema.caster;\n          }\n\n          // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n          if (p !== parts.length) {\n            if (foundschema.schema) {\n              let ret;\n              if (parts[p] === '$' || isArrayFilter(parts[p])) {\n                if (p + 1 === parts.length) {\n                  // comments.$\n                  return foundschema.$embeddedSchemaType;\n                }\n                // comments.$.comments.$.title\n                ret = search(parts.slice(p + 1), foundschema.schema);\n                if (ret) {\n                  ret.$parentSchemaDocArray = ret.$parentSchemaDocArray ||\n                    (foundschema.schema.$isSingleNested ? null : foundschema);\n                }\n                return ret;\n              }\n              // this is the last path of the selector\n              ret = search(parts.slice(p), foundschema.schema);\n              if (ret) {\n                ret.$parentSchemaDocArray = ret.$parentSchemaDocArray ||\n                  (foundschema.schema.$isSingleNested ? null : foundschema);\n              }\n              return ret;\n            }\n          }\n        } else if (foundschema.$isSchemaMap) {\n          if (p >= parts.length) {\n            return foundschema;\n          }\n          // Any path in the map will be an instance of the map's embedded schematype\n          if (p + 1 >= parts.length) {\n            return foundschema.$__schemaType;\n          }\n\n          if (foundschema.$__schemaType instanceof MongooseTypes.Mixed) {\n            return foundschema.$__schemaType;\n          }\n          if (foundschema.$__schemaType.schema != null) {\n            // Map of docs\n            const ret = search(parts.slice(p + 1), foundschema.$__schemaType.schema);\n            return ret;\n          }\n        }\n\n        foundschema.$fullPath = resultPath.join('.');\n\n        return foundschema;\n      }\n    }\n  }\n\n  // look for arrays\n  const parts = path.split('.');\n  for (let i = 0; i < parts.length; ++i) {\n    if (parts[i] === '$' || isArrayFilter(parts[i])) {\n      // Re: gh-5628, because `schema.path()` doesn't take $ into account.\n      parts[i] = '0';\n    }\n    if (numberRE.test(parts[i])) {\n      parts[i] = '$';\n    }\n  }\n  return search(parts, _this);\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._getPathType = function(path) {\n  const _this = this;\n  const pathschema = _this.path(path);\n\n  if (pathschema) {\n    return 'real';\n  }\n\n  function search(parts, schema) {\n    let p = parts.length + 1,\n        foundschema,\n        trypath;\n\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n      if (foundschema) {\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            return { schema: foundschema, pathType: 'mixed' };\n          }\n\n          // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n          if (p !== parts.length && foundschema.schema) {\n            if (parts[p] === '$' || isArrayFilter(parts[p])) {\n              if (p === parts.length - 1) {\n                return { schema: foundschema, pathType: 'nested' };\n              }\n              // comments.$.comments.$.title\n              return search(parts.slice(p + 1), foundschema.schema);\n            }\n            // this is the last path of the selector\n            return search(parts.slice(p), foundschema.schema);\n          }\n          return {\n            schema: foundschema,\n            pathType: foundschema.$isSingleNested ? 'nested' : 'array'\n          };\n        }\n        return { schema: foundschema, pathType: 'real' };\n      } else if (p === parts.length && schema.nested[trypath]) {\n        return { schema: schema, pathType: 'nested' };\n      }\n    }\n    return { schema: foundschema || schema, pathType: 'undefined' };\n  }\n\n  // look for arrays\n  return search(path.split('.'), _this);\n};\n\n/*!\n * ignore\n */\n\nfunction isArrayFilter(piece) {\n  return piece.startsWith('$[') && piece.endsWith(']');\n}\n\n/**\n * Called by `compile()` _right before_ compiling. Good for making any changes to\n * the schema that should respect options set by plugins, like `id`\n * @method _preCompile\n * @memberOf Schema\n * @instance\n * @api private\n */\n\nSchema.prototype._preCompile = function _preCompile() {\n  idGetter(this);\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = Schema;\n\n// require down here because of reference issues\n\n/**\n * The various built-in Mongoose Schema Types.\n *\n * #### Example:\n *\n *     const mongoose = require('mongoose');\n *     const ObjectId = mongoose.Schema.Types.ObjectId;\n *\n * #### Types:\n *\n * - [String](https://mongoosejs.com/docs/schematypes.html#strings)\n * - [Number](https://mongoosejs.com/docs/schematypes.html#numbers)\n * - [Boolean](https://mongoosejs.com/docs/schematypes.html#booleans) | Bool\n * - [Array](https://mongoosejs.com/docs/schematypes.html#arrays)\n * - [Buffer](https://mongoosejs.com/docs/schematypes.html#buffers)\n * - [Date](https://mongoosejs.com/docs/schematypes.html#dates)\n * - [ObjectId](https://mongoosejs.com/docs/schematypes.html#objectids) | Oid\n * - [Mixed](https://mongoosejs.com/docs/schematypes.html#mixed)\n * - [UUID](https://mongoosejs.com/docs/schematypes.html#uuid)\n * - [BigInt](https://mongoosejs.com/docs/schematypes.html#bigint)\n *\n * Using this exposed access to the `Mixed` SchemaType, we can use them in our schema.\n *\n *     const Mixed = mongoose.Schema.Types.Mixed;\n *     new mongoose.Schema({ _user: Mixed })\n *\n * @api public\n */\n\nSchema.Types = MongooseTypes = __webpack_require__(/*! ./schema/index */ \"(ssr)/./node_modules/mongoose/lib/schema/index.js\");\n\n/*!\n * ignore\n */\n\nexports.ObjectId = MongooseTypes.ObjectId;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/schema.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/schema/array.js":
/*!***************************************************!*\
  !*** ./node_modules/mongoose/lib/schema/array.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\nconst $exists = __webpack_require__(/*! ./operators/exists */ \"(ssr)/./node_modules/mongoose/lib/schema/operators/exists.js\");\nconst $type = __webpack_require__(/*! ./operators/type */ \"(ssr)/./node_modules/mongoose/lib/schema/operators/type.js\");\nconst MongooseError = __webpack_require__(/*! ../error/mongooseError */ \"(ssr)/./node_modules/mongoose/lib/error/mongooseError.js\");\nconst SchemaArrayOptions = __webpack_require__(/*! ../options/schemaArrayOptions */ \"(ssr)/./node_modules/mongoose/lib/options/schemaArrayOptions.js\");\nconst SchemaType = __webpack_require__(/*! ../schemaType */ \"(ssr)/./node_modules/mongoose/lib/schemaType.js\");\nconst CastError = SchemaType.CastError;\nconst Mixed = __webpack_require__(/*! ./mixed */ \"(ssr)/./node_modules/mongoose/lib/schema/mixed.js\");\nconst arrayDepth = __webpack_require__(/*! ../helpers/arrayDepth */ \"(ssr)/./node_modules/mongoose/lib/helpers/arrayDepth.js\");\nconst cast = __webpack_require__(/*! ../cast */ \"(ssr)/./node_modules/mongoose/lib/cast.js\");\nconst clone = __webpack_require__(/*! ../helpers/clone */ \"(ssr)/./node_modules/mongoose/lib/helpers/clone.js\");\nconst isOperator = __webpack_require__(/*! ../helpers/query/isOperator */ \"(ssr)/./node_modules/mongoose/lib/helpers/query/isOperator.js\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\nconst castToNumber = (__webpack_require__(/*! ./operators/helpers */ \"(ssr)/./node_modules/mongoose/lib/schema/operators/helpers.js\").castToNumber);\nconst geospatial = __webpack_require__(/*! ./operators/geospatial */ \"(ssr)/./node_modules/mongoose/lib/schema/operators/geospatial.js\");\nconst getDiscriminatorByValue = __webpack_require__(/*! ../helpers/discriminator/getDiscriminatorByValue */ \"(ssr)/./node_modules/mongoose/lib/helpers/discriminator/getDiscriminatorByValue.js\");\n\nlet MongooseArray;\nlet EmbeddedDoc;\n\nconst isNestedArraySymbol = Symbol('mongoose#isNestedArray');\nconst emptyOpts = Object.freeze({});\n\n/**\n * Array SchemaType constructor\n *\n * @param {String} key\n * @param {SchemaType} cast\n * @param {Object} options\n * @param {Object} schemaOptions\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaArray(key, cast, options, schemaOptions) {\n  // lazy load\n  EmbeddedDoc || (EmbeddedDoc = (__webpack_require__(/*! ../types */ \"(ssr)/./node_modules/mongoose/lib/types/index.js\").Embedded));\n\n  let typeKey = 'type';\n  if (schemaOptions && schemaOptions.typeKey) {\n    typeKey = schemaOptions.typeKey;\n  }\n  this.schemaOptions = schemaOptions;\n\n  if (cast) {\n    let castOptions = {};\n\n    if (utils.isPOJO(cast)) {\n      if (cast[typeKey]) {\n        // support { type: Woot }\n        castOptions = clone(cast); // do not alter user arguments\n        delete castOptions[typeKey];\n        cast = cast[typeKey];\n      } else {\n        cast = Mixed;\n      }\n    }\n\n    if (options != null && options.ref != null && castOptions.ref == null) {\n      castOptions.ref = options.ref;\n    }\n\n    if (cast === Object) {\n      cast = Mixed;\n    }\n\n    // support { type: 'String' }\n    const name = typeof cast === 'string'\n      ? cast\n      : utils.getFunctionName(cast);\n\n    const Types = __webpack_require__(/*! ./index.js */ \"(ssr)/./node_modules/mongoose/lib/schema/index.js\");\n    const caster = Types.hasOwnProperty(name) ? Types[name] : cast;\n\n    this.casterConstructor = caster;\n\n    if (this.casterConstructor instanceof SchemaArray) {\n      this.casterConstructor[isNestedArraySymbol] = true;\n    }\n\n    if (typeof caster === 'function' &&\n        !caster.$isArraySubdocument &&\n        !caster.$isSchemaMap) {\n      const path = this.caster instanceof EmbeddedDoc ? null : key;\n      this.caster = new caster(path, castOptions);\n    } else {\n      this.caster = caster;\n      if (!(this.caster instanceof EmbeddedDoc)) {\n        this.caster.path = key;\n      }\n    }\n\n    this.$embeddedSchemaType = this.caster;\n  }\n\n  this.$isMongooseArray = true;\n\n  SchemaType.call(this, key, options, 'Array');\n\n  let defaultArr;\n  let fn;\n\n  if (this.defaultValue != null) {\n    defaultArr = this.defaultValue;\n    fn = typeof defaultArr === 'function';\n  }\n\n  if (!('defaultValue' in this) || this.defaultValue !== void 0) {\n    const defaultFn = function() {\n      // Leave it up to `cast()` to convert the array\n      return fn\n        ? defaultArr.call(this)\n        : defaultArr != null\n          ? [].concat(defaultArr)\n          : [];\n    };\n    defaultFn.$runBeforeSetters = !fn;\n    this.default(defaultFn);\n  }\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaArray.schemaName = 'Array';\n\n\n/**\n * Options for all arrays.\n *\n * - `castNonArrays`: `true` by default. If `false`, Mongoose will throw a CastError when a value isn't an array. If `true`, Mongoose will wrap the provided value in an array before casting.\n *\n * @static\n * @api public\n */\n\nSchemaArray.options = { castNonArrays: true };\n\n/*!\n * ignore\n */\n\nSchemaArray.defaultOptions = {};\n\n/**\n * Sets a default option for all Array instances.\n *\n * #### Example:\n *\n *     // Make all Array instances have `required` of true by default.\n *     mongoose.Schema.Array.set('required', true);\n *\n *     const User = mongoose.model('User', new Schema({ test: Array }));\n *     new User({ }).validateSync().errors.test.message; // Path `test` is required.\n *\n * @param {String} option The option you'd like to set the value for\n * @param {Any} value value for option\n * @return {undefined}\n * @function set\n * @api public\n */\nSchemaArray.set = SchemaType.set;\n\nSchemaArray.setters = [];\n\n/**\n * Attaches a getter for all Array instances\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaArray.get = SchemaType.get;\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaArray.prototype = Object.create(SchemaType.prototype);\nSchemaArray.prototype.constructor = SchemaArray;\nSchemaArray.prototype.OptionsConstructor = SchemaArrayOptions;\n\n/*!\n * ignore\n */\n\nSchemaArray._checkRequired = SchemaType.prototype.checkRequired;\n\n/**\n * Override the function the required validator uses to check whether an array\n * passes the `required` check.\n *\n * #### Example:\n *\n *     // Require non-empty array to pass `required` check\n *     mongoose.Schema.Types.Array.checkRequired(v => Array.isArray(v) && v.length);\n *\n *     const M = mongoose.model({ arr: { type: Array, required: true } });\n *     new M({ arr: [] }).validateSync(); // `null`, validation fails!\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @api public\n */\n\nSchemaArray.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies the `required` validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaArray.prototype.checkRequired = function checkRequired(value, doc) {\n  if (typeof value === 'object' && SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired === 'function' ?\n    this.constructor.checkRequired() :\n    SchemaArray.checkRequired();\n\n  return _checkRequired(value);\n};\n\n/**\n * Adds an enum validator if this is an array of strings or numbers. Equivalent to\n * `SchemaString.prototype.enum()` or `SchemaNumber.prototype.enum()`\n *\n * @param {...String|Object} [args] enumeration values\n * @return {SchemaArray} this\n */\n\nSchemaArray.prototype.enum = function() {\n  let arr = this;\n  while (true) {\n    const instance = arr &&\n    arr.caster &&\n    arr.caster.instance;\n    if (instance === 'Array') {\n      arr = arr.caster;\n      continue;\n    }\n    if (instance !== 'String' && instance !== 'Number') {\n      throw new Error('`enum` can only be set on an array of strings or numbers ' +\n        ', not ' + instance);\n    }\n    break;\n  }\n\n  let enumArray = arguments;\n  if (!Array.isArray(arguments) && utils.isObject(arguments)) {\n    enumArray = utils.object.vals(enumArray);\n  }\n\n  arr.caster.enum.apply(arr.caster, enumArray);\n  return this;\n};\n\n/**\n * Overrides the getters application for the population special-case\n *\n * @param {Object} value\n * @param {Object} scope\n * @api private\n */\n\nSchemaArray.prototype.applyGetters = function(value, scope) {\n  if (scope != null && scope.$__ != null && scope.$populated(this.path)) {\n    // means the object id was populated\n    return value;\n  }\n\n  const ret = SchemaType.prototype.applyGetters.call(this, value, scope);\n  return ret;\n};\n\nSchemaArray.prototype._applySetters = function(value, scope, init, priorVal) {\n  if (this.casterConstructor.$isMongooseArray &&\n      SchemaArray.options.castNonArrays &&\n      !this[isNestedArraySymbol]) {\n    // Check nesting levels and wrap in array if necessary\n    let depth = 0;\n    let arr = this;\n    while (arr != null &&\n      arr.$isMongooseArray &&\n      !arr.$isMongooseDocumentArray) {\n      ++depth;\n      arr = arr.casterConstructor;\n    }\n\n    // No need to wrap empty arrays\n    if (value != null && value.length !== 0) {\n      const valueDepth = arrayDepth(value);\n      if (valueDepth.min === valueDepth.max && valueDepth.max < depth && valueDepth.containsNonArrayItem) {\n        for (let i = valueDepth.max; i < depth; ++i) {\n          value = [value];\n        }\n      }\n    }\n  }\n\n  return SchemaType.prototype._applySetters.call(this, value, scope, init, priorVal);\n};\n\n/**\n * Casts values for set().\n *\n * @param {Object} value\n * @param {Document} doc document that triggers the casting\n * @param {Boolean} init whether this is an initialization cast\n * @api private\n */\n\nSchemaArray.prototype.cast = function(value, doc, init, prev, options) {\n  // lazy load\n  MongooseArray || (MongooseArray = (__webpack_require__(/*! ../types */ \"(ssr)/./node_modules/mongoose/lib/types/index.js\").Array));\n\n  let i;\n  let l;\n\n  if (Array.isArray(value)) {\n    const len = value.length;\n    if (!len && doc) {\n      const indexes = doc.schema.indexedPaths();\n\n      const arrayPath = this.path;\n      for (i = 0, l = indexes.length; i < l; ++i) {\n        const pathIndex = indexes[i][0][arrayPath];\n        if (pathIndex === '2dsphere' || pathIndex === '2d') {\n          return;\n        }\n      }\n\n      // Special case: if this index is on the parent of what looks like\n      // GeoJSON, skip setting the default to empty array re: #1668, #3233\n      const arrayGeojsonPath = this.path.endsWith('.coordinates') ?\n        this.path.substring(0, this.path.lastIndexOf('.')) : null;\n      if (arrayGeojsonPath != null) {\n        for (i = 0, l = indexes.length; i < l; ++i) {\n          const pathIndex = indexes[i][0][arrayGeojsonPath];\n          if (pathIndex === '2dsphere') {\n            return;\n          }\n        }\n      }\n    }\n\n    options = options || emptyOpts;\n\n    let rawValue = utils.isMongooseArray(value) ? value.__array : value;\n    let path = options.path || this.path;\n    if (options.arrayPathIndex != null) {\n      path += '.' + options.arrayPathIndex;\n    }\n    value = MongooseArray(rawValue, path, doc, this);\n    rawValue = value.__array;\n\n    if (init && doc != null && doc.$__ != null && doc.$populated(this.path)) {\n      return value;\n    }\n\n    const caster = this.caster;\n    const isMongooseArray = caster.$isMongooseArray;\n    if (caster && this.casterConstructor !== Mixed) {\n      try {\n        const len = rawValue.length;\n        for (i = 0; i < len; i++) {\n          const opts = {};\n          // Perf: creating `arrayPath` is expensive for large arrays.\n          // We only need `arrayPath` if this is a nested array, so\n          // skip if possible.\n          if (isMongooseArray) {\n            if (options.arrayPath != null) {\n              opts.arrayPathIndex = i;\n            } else if (caster._arrayParentPath != null) {\n              opts.arrayPathIndex = i;\n            }\n          }\n          rawValue[i] = caster.applySetters(rawValue[i], doc, init, void 0, opts);\n        }\n      } catch (e) {\n        // rethrow\n        throw new CastError('[' + e.kind + ']', util.inspect(value), this.path + '.' + i, e, this);\n      }\n    }\n\n    return value;\n  }\n\n  const castNonArraysOption = this.options.castNonArrays != null ? this.options.castNonArrays : SchemaArray.options.castNonArrays;\n  if (init || castNonArraysOption) {\n    // gh-2442: if we're loading this from the db and its not an array, mark\n    // the whole array as modified.\n    if (!!doc && !!init) {\n      doc.markModified(this.path);\n    }\n    return this.cast([value], doc, init);\n  }\n\n  throw new CastError('Array', util.inspect(value), this.path, null, this);\n};\n\n/*!\n * ignore\n */\n\nSchemaArray.prototype._castForPopulate = function _castForPopulate(value, doc) {\n  // lazy load\n  MongooseArray || (MongooseArray = (__webpack_require__(/*! ../types */ \"(ssr)/./node_modules/mongoose/lib/types/index.js\").Array));\n\n  if (Array.isArray(value)) {\n    let i;\n    const rawValue = value.__array ? value.__array : value;\n    const len = rawValue.length;\n\n    const caster = this.caster;\n    if (caster && this.casterConstructor !== Mixed) {\n      try {\n        for (i = 0; i < len; i++) {\n          const opts = {};\n          // Perf: creating `arrayPath` is expensive for large arrays.\n          // We only need `arrayPath` if this is a nested array, so\n          // skip if possible.\n          if (caster.$isMongooseArray && caster._arrayParentPath != null) {\n            opts.arrayPathIndex = i;\n          }\n\n          rawValue[i] = caster.cast(rawValue[i], doc, false, void 0, opts);\n        }\n      } catch (e) {\n        // rethrow\n        throw new CastError('[' + e.kind + ']', util.inspect(value), this.path + '.' + i, e, this);\n      }\n    }\n\n    return value;\n  }\n\n  throw new CastError('Array', util.inspect(value), this.path, null, this);\n};\n\nSchemaArray.prototype.$toObject = SchemaArray.prototype.toObject;\n\n/*!\n * ignore\n */\n\nSchemaArray.prototype.discriminator = function(...args) {\n  let arr = this;\n  while (arr.$isMongooseArray && !arr.$isMongooseDocumentArray) {\n    arr = arr.casterConstructor;\n    if (arr == null || typeof arr === 'function') {\n      throw new MongooseError('You can only add an embedded discriminator on ' +\n        'a document array, ' + this.path + ' is a plain array');\n    }\n  }\n  return arr.discriminator(...args);\n};\n\n/*!\n * ignore\n */\n\nSchemaArray.prototype.clone = function() {\n  const options = Object.assign({}, this.options);\n  const schematype = new this.constructor(this.path, this.caster, options, this.schemaOptions);\n  schematype.validators = this.validators.slice();\n  if (this.requiredValidator !== undefined) {\n    schematype.requiredValidator = this.requiredValidator;\n  }\n  return schematype;\n};\n\nSchemaArray.prototype._castForQuery = function(val, context) {\n  let Constructor = this.casterConstructor;\n\n  if (val &&\n      Constructor.discriminators &&\n      Constructor.schema &&\n      Constructor.schema.options &&\n      Constructor.schema.options.discriminatorKey) {\n    if (typeof val[Constructor.schema.options.discriminatorKey] === 'string' &&\n        Constructor.discriminators[val[Constructor.schema.options.discriminatorKey]]) {\n      Constructor = Constructor.discriminators[val[Constructor.schema.options.discriminatorKey]];\n    } else {\n      const constructorByValue = getDiscriminatorByValue(Constructor.discriminators, val[Constructor.schema.options.discriminatorKey]);\n      if (constructorByValue) {\n        Constructor = constructorByValue;\n      }\n    }\n  }\n\n  const proto = this.casterConstructor.prototype;\n  const protoCastForQuery = proto && proto.castForQuery;\n  const protoCast = proto && proto.cast;\n  const constructorCastForQuery = Constructor.castForQuery;\n  const caster = this.caster;\n\n  if (Array.isArray(val)) {\n    this.setters.reverse().forEach(setter => {\n      val = setter.call(this, val, this);\n    });\n    val = val.map(function(v) {\n      if (utils.isObject(v) && v.$elemMatch) {\n        return v;\n      }\n      if (protoCastForQuery) {\n        v = protoCastForQuery.call(caster, null, v, context);\n        return v;\n      } else if (protoCast) {\n        v = protoCast.call(caster, v);\n        return v;\n      } else if (constructorCastForQuery) {\n        v = constructorCastForQuery.call(caster, null, v, context);\n        return v;\n      }\n      if (v != null) {\n        v = new Constructor(v);\n        return v;\n      }\n      return v;\n    });\n  } else if (protoCastForQuery) {\n    val = protoCastForQuery.call(caster, null, val, context);\n  } else if (protoCast) {\n    val = protoCast.call(caster, val);\n  } else if (constructorCastForQuery) {\n    val = constructorCastForQuery.call(caster, null, val, context);\n  } else if (val != null) {\n    val = new Constructor(val);\n  }\n\n  return val;\n};\n\n/**\n * Casts values for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaArray.prototype.castForQuery = function($conditional, val, context) {\n  let handler;\n\n  if ($conditional != null) {\n    handler = this.$conditionalHandlers[$conditional];\n\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with Array.');\n    }\n\n    return handler.call(this, val, context);\n  } else {\n    return this._castForQuery(val, context);\n  }\n};\n\nfunction cast$all(val, context) {\n  if (!Array.isArray(val)) {\n    val = [val];\n  }\n\n  val = val.map((v) => {\n    if (!utils.isObject(v)) {\n      return v;\n    }\n    if (v.$elemMatch != null) {\n      return { $elemMatch: cast(this.casterConstructor.schema, v.$elemMatch, null, this && this.$$context) };\n    }\n\n    const o = {};\n    o[this.path] = v;\n    return cast(this.casterConstructor.schema, o, null, this && this.$$context)[this.path];\n  }, this);\n\n  return this.castForQuery(null, val, context);\n}\n\nfunction cast$elemMatch(val, context) {\n  const keys = Object.keys(val);\n  const numKeys = keys.length;\n  for (let i = 0; i < numKeys; ++i) {\n    const key = keys[i];\n    const value = val[key];\n    if (isOperator(key) && value != null) {\n      val[key] = this.castForQuery(key, value, context);\n    }\n  }\n\n  // Is this an embedded discriminator and is the discriminator key set?\n  // If so, use the discriminator schema. See gh-7449\n  const discriminatorKey = this &&\n    this.casterConstructor &&\n    this.casterConstructor.schema &&\n    this.casterConstructor.schema.options &&\n    this.casterConstructor.schema.options.discriminatorKey;\n  const discriminators = this &&\n  this.casterConstructor &&\n  this.casterConstructor.schema &&\n  this.casterConstructor.schema.discriminators || {};\n  if (discriminatorKey != null &&\n      val[discriminatorKey] != null &&\n      discriminators[val[discriminatorKey]] != null) {\n    return cast(discriminators[val[discriminatorKey]], val, null, this && this.$$context);\n  }\n  const schema = this.casterConstructor.schema ?? context.schema;\n  return cast(schema, val, null, this && this.$$context);\n}\n\nconst handle = SchemaArray.prototype.$conditionalHandlers = {};\n\nhandle.$all = cast$all;\nhandle.$options = String;\nhandle.$elemMatch = cast$elemMatch;\nhandle.$geoIntersects = geospatial.cast$geoIntersects;\nhandle.$or = createLogicalQueryOperatorHandler('$or');\nhandle.$and = createLogicalQueryOperatorHandler('$and');\nhandle.$nor = createLogicalQueryOperatorHandler('$nor');\n\nfunction createLogicalQueryOperatorHandler(op) {\n  return function logicalQueryOperatorHandler(val, context) {\n    if (!Array.isArray(val)) {\n      throw new TypeError('conditional ' + op + ' requires an array');\n    }\n\n    const ret = [];\n    for (const obj of val) {\n      ret.push(cast(this.casterConstructor.schema ?? context.schema, obj, null, this && this.$$context));\n    }\n\n    return ret;\n  };\n}\n\nhandle.$near =\nhandle.$nearSphere = geospatial.cast$near;\n\nhandle.$within =\nhandle.$geoWithin = geospatial.cast$within;\n\nhandle.$size =\nhandle.$minDistance =\nhandle.$maxDistance = castToNumber;\n\nhandle.$exists = $exists;\nhandle.$type = $type;\n\nhandle.$eq =\nhandle.$gt =\nhandle.$gte =\nhandle.$lt =\nhandle.$lte =\nhandle.$not =\nhandle.$regex =\nhandle.$ne = SchemaArray.prototype._castForQuery;\n\n// `$in` is special because you can also include an empty array in the query\n// like `$in: [1, []]`, see gh-5913\nhandle.$nin = SchemaType.prototype.$conditionalHandlers.$nin;\nhandle.$in = SchemaType.prototype.$conditionalHandlers.$in;\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/schema/array.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/schema/bigint.js":
/*!****************************************************!*\
  !*** ./node_modules/mongoose/lib/schema/bigint.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\nconst CastError = __webpack_require__(/*! ../error/cast */ \"(ssr)/./node_modules/mongoose/lib/error/cast.js\");\nconst SchemaType = __webpack_require__(/*! ../schemaType */ \"(ssr)/./node_modules/mongoose/lib/schemaType.js\");\nconst castBigInt = __webpack_require__(/*! ../cast/bigint */ \"(ssr)/./node_modules/mongoose/lib/cast/bigint.js\");\n\n/**\n * BigInt SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaBigInt(path, options) {\n  SchemaType.call(this, path, options, 'BigInt');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaBigInt.schemaName = 'BigInt';\n\nSchemaBigInt.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaBigInt.prototype = Object.create(SchemaType.prototype);\nSchemaBigInt.prototype.constructor = SchemaBigInt;\n\n/*!\n * ignore\n */\n\nSchemaBigInt._cast = castBigInt;\n\n/**\n * Sets a default option for all BigInt instances.\n *\n * #### Example:\n *\n *     // Make all bigints required by default\n *     mongoose.Schema.BigInt.set('required', true);\n *\n * @param {String} option The option you'd like to set the value for\n * @param {Any} value value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaBigInt.set = SchemaType.set;\n\nSchemaBigInt.setters = [];\n\n/**\n * Attaches a getter for all BigInt instances\n *\n * #### Example:\n *\n *     // Convert bigints to numbers\n *     mongoose.Schema.BigInt.get(v => v == null ? v : Number(v));\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaBigInt.get = SchemaType.get;\n\n/**\n * Get/set the function used to cast arbitrary values to booleans.\n *\n * #### Example:\n *\n *     // Make Mongoose cast empty string '' to false.\n *     const original = mongoose.Schema.BigInt.cast();\n *     mongoose.Schema.BigInt.cast(v => {\n *       if (v === '') {\n *         return false;\n *       }\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Schema.BigInt.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaBigInt.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nSchemaBigInt._checkRequired = v => v != null;\n\n/**\n * Override the function the required validator uses to check whether a value\n * passes the `required` check.\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaBigInt.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @return {Boolean}\n * @api public\n */\n\nSchemaBigInt.prototype.checkRequired = function(value) {\n  return this.constructor._checkRequired(value);\n};\n\n/**\n * Casts to bigint\n *\n * @param {Object} value\n * @param {Object} model this value is optional\n * @api private\n */\n\nSchemaBigInt.prototype.cast = function(value) {\n  let castBigInt;\n  if (typeof this._castFunction === 'function') {\n    castBigInt = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castBigInt = this.constructor.cast();\n  } else {\n    castBigInt = SchemaBigInt.cast();\n  }\n\n  try {\n    return castBigInt(value);\n  } catch (error) {\n    throw new CastError('BigInt', value, this.path, error, this);\n  }\n};\n\n/*!\n * ignore\n */\n\nSchemaBigInt.$conditionalHandlers = {\n  ...SchemaType.prototype.$conditionalHandlers,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val, context) {\n  return this.castForQuery(null, val, context);\n}\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} val\n * @api private\n */\n\nSchemaBigInt.prototype.castForQuery = function($conditional, val, context) {\n  let handler;\n  if ($conditional != null) {\n    handler = SchemaBigInt.$conditionalHandlers[$conditional];\n\n    if (handler) {\n      return handler.call(this, val);\n    }\n\n    return this.applySetters(null, val, context);\n  }\n\n  try {\n    return this.applySetters(val, context);\n  } catch (err) {\n    if (err instanceof CastError && err.path === this.path && this.$fullPath != null) {\n      err.path = this.$fullPath;\n    }\n    throw err;\n  }\n};\n\n/**\n *\n * @api private\n */\n\nSchemaBigInt.prototype._castNullish = function _castNullish(v) {\n  if (typeof v === 'undefined') {\n    return v;\n  }\n  const castBigInt = typeof this.constructor.cast === 'function' ?\n    this.constructor.cast() :\n    SchemaBigInt.cast();\n  if (castBigInt == null) {\n    return v;\n  }\n  return v;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaBigInt;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/schema/bigint.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/schema/boolean.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongoose/lib/schema/boolean.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\nconst CastError = __webpack_require__(/*! ../error/cast */ \"(ssr)/./node_modules/mongoose/lib/error/cast.js\");\nconst SchemaType = __webpack_require__(/*! ../schemaType */ \"(ssr)/./node_modules/mongoose/lib/schemaType.js\");\nconst castBoolean = __webpack_require__(/*! ../cast/boolean */ \"(ssr)/./node_modules/mongoose/lib/cast/boolean.js\");\n\n/**\n * Boolean SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaBoolean(path, options) {\n  SchemaType.call(this, path, options, 'Boolean');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaBoolean.schemaName = 'Boolean';\n\nSchemaBoolean.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaBoolean.prototype = Object.create(SchemaType.prototype);\nSchemaBoolean.prototype.constructor = SchemaBoolean;\n\n/*!\n * ignore\n */\n\nSchemaBoolean._cast = castBoolean;\n\n/**\n * Sets a default option for all Boolean instances.\n *\n * #### Example:\n *\n *     // Make all booleans have `default` of false.\n *     mongoose.Schema.Boolean.set('default', false);\n *\n *     const Order = mongoose.model('Order', new Schema({ isPaid: Boolean }));\n *     new Order({ }).isPaid; // false\n *\n * @param {String} option The option you'd like to set the value for\n * @param {Any} value value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaBoolean.set = SchemaType.set;\n\nSchemaBoolean.setters = [];\n\n/**\n * Attaches a getter for all Boolean instances\n *\n * #### Example:\n *\n *     mongoose.Schema.Boolean.get(v => v === true ? 'yes' : 'no');\n *\n *     const Order = mongoose.model('Order', new Schema({ isPaid: Boolean }));\n *     new Order({ isPaid: false }).isPaid; // 'no'\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaBoolean.get = SchemaType.get;\n\n/**\n * Get/set the function used to cast arbitrary values to booleans.\n *\n * #### Example:\n *\n *     // Make Mongoose cast empty string '' to false.\n *     const original = mongoose.Schema.Boolean.cast();\n *     mongoose.Schema.Boolean.cast(v => {\n *       if (v === '') {\n *         return false;\n *       }\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Schema.Boolean.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaBoolean.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nSchemaBoolean._defaultCaster = v => {\n  if (v != null && typeof v !== 'boolean') {\n    throw new Error();\n  }\n  return v;\n};\n\n/*!\n * ignore\n */\n\nSchemaBoolean._checkRequired = v => v === true || v === false;\n\n/**\n * Override the function the required validator uses to check whether a boolean\n * passes the `required` check.\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaBoolean.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator. For a boolean\n * to satisfy a required validator, it must be strictly equal to true or to\n * false.\n *\n * @param {Any} value\n * @return {Boolean}\n * @api public\n */\n\nSchemaBoolean.prototype.checkRequired = function(value) {\n  return this.constructor._checkRequired(value);\n};\n\n/**\n * Configure which values get casted to `true`.\n *\n * #### Example:\n *\n *     const M = mongoose.model('Test', new Schema({ b: Boolean }));\n *     new M({ b: 'affirmative' }).b; // undefined\n *     mongoose.Schema.Boolean.convertToTrue.add('affirmative');\n *     new M({ b: 'affirmative' }).b; // true\n *\n * @property convertToTrue\n * @static\n * @memberOf SchemaBoolean\n * @type {Set}\n * @api public\n */\n\nObject.defineProperty(SchemaBoolean, 'convertToTrue', {\n  get: () => castBoolean.convertToTrue,\n  set: v => { castBoolean.convertToTrue = v; }\n});\n\n/**\n * Configure which values get casted to `false`.\n *\n * #### Example:\n *\n *     const M = mongoose.model('Test', new Schema({ b: Boolean }));\n *     new M({ b: 'nay' }).b; // undefined\n *     mongoose.Schema.Types.Boolean.convertToFalse.add('nay');\n *     new M({ b: 'nay' }).b; // false\n *\n * @property convertToFalse\n * @static\n * @memberOf SchemaBoolean\n * @type {Set}\n * @api public\n */\n\nObject.defineProperty(SchemaBoolean, 'convertToFalse', {\n  get: () => castBoolean.convertToFalse,\n  set: v => { castBoolean.convertToFalse = v; }\n});\n\n/**\n * Casts to boolean\n *\n * @param {Object} value\n * @param {Object} model this value is optional\n * @api private\n */\n\nSchemaBoolean.prototype.cast = function(value) {\n  let castBoolean;\n  if (typeof this._castFunction === 'function') {\n    castBoolean = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castBoolean = this.constructor.cast();\n  } else {\n    castBoolean = SchemaBoolean.cast();\n  }\n\n  try {\n    return castBoolean(value);\n  } catch (error) {\n    throw new CastError('Boolean', value, this.path, error, this);\n  }\n};\n\nSchemaBoolean.$conditionalHandlers = { ...SchemaType.prototype.$conditionalHandlers };\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} val\n * @api private\n */\n\nSchemaBoolean.prototype.castForQuery = function($conditional, val, context) {\n  let handler;\n  if ($conditional != null) {\n    handler = SchemaBoolean.$conditionalHandlers[$conditional];\n\n    if (handler) {\n      return handler.call(this, val);\n    }\n\n    return this.applySetters(null, val, context);\n  }\n\n  try {\n    return this.applySetters(val, context);\n  } catch (err) {\n    if (err instanceof CastError && err.path === this.path && this.$fullPath != null) {\n      err.path = this.$fullPath;\n    }\n    throw err;\n  }\n};\n\n/**\n *\n * @api private\n */\n\nSchemaBoolean.prototype._castNullish = function _castNullish(v) {\n  if (typeof v === 'undefined') {\n    return v;\n  }\n  const castBoolean = typeof this.constructor.cast === 'function' ?\n    this.constructor.cast() :\n    SchemaBoolean.cast();\n  if (castBoolean == null) {\n    return v;\n  }\n  if (castBoolean.convertToFalse instanceof Set && castBoolean.convertToFalse.has(v)) {\n    return false;\n  }\n  if (castBoolean.convertToTrue instanceof Set && castBoolean.convertToTrue.has(v)) {\n    return true;\n  }\n  return v;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaBoolean;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3NjaGVtYS9ib29sZWFuLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0IsbUJBQU8sQ0FBQyxzRUFBZTtBQUN6QyxtQkFBbUIsbUJBQU8sQ0FBQyxzRUFBZTtBQUMxQyxvQkFBb0IsbUJBQU8sQ0FBQywwRUFBaUI7O0FBRTdDO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBELGlCQUFpQjtBQUMzRSxvQkFBb0IsVUFBVTtBQUM5QjtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLEtBQUs7QUFDaEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBELGlCQUFpQjtBQUMzRSxtQkFBbUIsZUFBZSxVQUFVO0FBQzVDO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCxZQUFZO0FBQ2pFLGVBQWUsa0JBQWtCLEtBQUs7QUFDdEM7QUFDQSxlQUFlLGtCQUFrQixLQUFLO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWM7QUFDZCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsWUFBWTtBQUNqRSxlQUFlLFVBQVUsS0FBSztBQUM5QjtBQUNBLGVBQWUsVUFBVSxLQUFLO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWM7QUFDZCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLHVDQUF1Qzs7QUFFdkM7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsS0FBSztBQUNoQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9zY2hlbWEvYm9vbGVhbi5qcz85YmUwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyohXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbmNvbnN0IENhc3RFcnJvciA9IHJlcXVpcmUoJy4uL2Vycm9yL2Nhc3QnKTtcbmNvbnN0IFNjaGVtYVR5cGUgPSByZXF1aXJlKCcuLi9zY2hlbWFUeXBlJyk7XG5jb25zdCBjYXN0Qm9vbGVhbiA9IHJlcXVpcmUoJy4uL2Nhc3QvYm9vbGVhbicpO1xuXG4vKipcbiAqIEJvb2xlYW4gU2NoZW1hVHlwZSBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBpbmhlcml0cyBTY2hlbWFUeXBlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFNjaGVtYUJvb2xlYW4ocGF0aCwgb3B0aW9ucykge1xuICBTY2hlbWFUeXBlLmNhbGwodGhpcywgcGF0aCwgb3B0aW9ucywgJ0Jvb2xlYW4nKTtcbn1cblxuLyoqXG4gKiBUaGlzIHNjaGVtYSB0eXBlJ3MgbmFtZSwgdG8gZGVmZW5kIGFnYWluc3QgbWluaWZpZXJzIHRoYXQgbWFuZ2xlXG4gKiBmdW5jdGlvbiBuYW1lcy5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5TY2hlbWFCb29sZWFuLnNjaGVtYU5hbWUgPSAnQm9vbGVhbic7XG5cblNjaGVtYUJvb2xlYW4uZGVmYXVsdE9wdGlvbnMgPSB7fTtcblxuLyohXG4gKiBJbmhlcml0cyBmcm9tIFNjaGVtYVR5cGUuXG4gKi9cblNjaGVtYUJvb2xlYW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTY2hlbWFUeXBlLnByb3RvdHlwZSk7XG5TY2hlbWFCb29sZWFuLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNjaGVtYUJvb2xlYW47XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxuU2NoZW1hQm9vbGVhbi5fY2FzdCA9IGNhc3RCb29sZWFuO1xuXG4vKipcbiAqIFNldHMgYSBkZWZhdWx0IG9wdGlvbiBmb3IgYWxsIEJvb2xlYW4gaW5zdGFuY2VzLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgLy8gTWFrZSBhbGwgYm9vbGVhbnMgaGF2ZSBgZGVmYXVsdGAgb2YgZmFsc2UuXG4gKiAgICAgbW9uZ29vc2UuU2NoZW1hLkJvb2xlYW4uc2V0KCdkZWZhdWx0JywgZmFsc2UpO1xuICpcbiAqICAgICBjb25zdCBPcmRlciA9IG1vbmdvb3NlLm1vZGVsKCdPcmRlcicsIG5ldyBTY2hlbWEoeyBpc1BhaWQ6IEJvb2xlYW4gfSkpO1xuICogICAgIG5ldyBPcmRlcih7IH0pLmlzUGFpZDsgLy8gZmFsc2VcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0aW9uIFRoZSBvcHRpb24geW91J2QgbGlrZSB0byBzZXQgdGhlIHZhbHVlIGZvclxuICogQHBhcmFtIHtBbnl9IHZhbHVlIHZhbHVlIGZvciBvcHRpb25cbiAqIEByZXR1cm4ge3VuZGVmaW5lZH1cbiAqIEBmdW5jdGlvbiBzZXRcbiAqIEBzdGF0aWNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU2NoZW1hQm9vbGVhbi5zZXQgPSBTY2hlbWFUeXBlLnNldDtcblxuU2NoZW1hQm9vbGVhbi5zZXR0ZXJzID0gW107XG5cbi8qKlxuICogQXR0YWNoZXMgYSBnZXR0ZXIgZm9yIGFsbCBCb29sZWFuIGluc3RhbmNlc1xuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgbW9uZ29vc2UuU2NoZW1hLkJvb2xlYW4uZ2V0KHYgPT4gdiA9PT0gdHJ1ZSA/ICd5ZXMnIDogJ25vJyk7XG4gKlxuICogICAgIGNvbnN0IE9yZGVyID0gbW9uZ29vc2UubW9kZWwoJ09yZGVyJywgbmV3IFNjaGVtYSh7IGlzUGFpZDogQm9vbGVhbiB9KSk7XG4gKiAgICAgbmV3IE9yZGVyKHsgaXNQYWlkOiBmYWxzZSB9KS5pc1BhaWQ7IC8vICdubydcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBnZXR0ZXJcbiAqIEByZXR1cm4ge3RoaXN9XG4gKiBAZnVuY3Rpb24gZ2V0XG4gKiBAc3RhdGljXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNjaGVtYUJvb2xlYW4uZ2V0ID0gU2NoZW1hVHlwZS5nZXQ7XG5cbi8qKlxuICogR2V0L3NldCB0aGUgZnVuY3Rpb24gdXNlZCB0byBjYXN0IGFyYml0cmFyeSB2YWx1ZXMgdG8gYm9vbGVhbnMuXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICAvLyBNYWtlIE1vbmdvb3NlIGNhc3QgZW1wdHkgc3RyaW5nICcnIHRvIGZhbHNlLlxuICogICAgIGNvbnN0IG9yaWdpbmFsID0gbW9uZ29vc2UuU2NoZW1hLkJvb2xlYW4uY2FzdCgpO1xuICogICAgIG1vbmdvb3NlLlNjaGVtYS5Cb29sZWFuLmNhc3QodiA9PiB7XG4gKiAgICAgICBpZiAodiA9PT0gJycpIHtcbiAqICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICogICAgICAgfVxuICogICAgICAgcmV0dXJuIG9yaWdpbmFsKHYpO1xuICogICAgIH0pO1xuICpcbiAqICAgICAvLyBPciBkaXNhYmxlIGNhc3RpbmcgZW50aXJlbHlcbiAqICAgICBtb25nb29zZS5TY2hlbWEuQm9vbGVhbi5jYXN0KGZhbHNlKTtcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYXN0ZXJcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICogQGZ1bmN0aW9uIGdldFxuICogQHN0YXRpY1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5TY2hlbWFCb29sZWFuLmNhc3QgPSBmdW5jdGlvbiBjYXN0KGNhc3Rlcikge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0aGlzLl9jYXN0O1xuICB9XG4gIGlmIChjYXN0ZXIgPT09IGZhbHNlKSB7XG4gICAgY2FzdGVyID0gdGhpcy5fZGVmYXVsdENhc3RlcjtcbiAgfVxuICB0aGlzLl9jYXN0ID0gY2FzdGVyO1xuXG4gIHJldHVybiB0aGlzLl9jYXN0O1xufTtcblxuLyohXG4gKiBpZ25vcmVcbiAqL1xuXG5TY2hlbWFCb29sZWFuLl9kZWZhdWx0Q2FzdGVyID0gdiA9PiB7XG4gIGlmICh2ICE9IG51bGwgJiYgdHlwZW9mIHYgIT09ICdib29sZWFuJykge1xuICAgIHRocm93IG5ldyBFcnJvcigpO1xuICB9XG4gIHJldHVybiB2O1xufTtcblxuLyohXG4gKiBpZ25vcmVcbiAqL1xuXG5TY2hlbWFCb29sZWFuLl9jaGVja1JlcXVpcmVkID0gdiA9PiB2ID09PSB0cnVlIHx8IHYgPT09IGZhbHNlO1xuXG4vKipcbiAqIE92ZXJyaWRlIHRoZSBmdW5jdGlvbiB0aGUgcmVxdWlyZWQgdmFsaWRhdG9yIHVzZXMgdG8gY2hlY2sgd2hldGhlciBhIGJvb2xlYW5cbiAqIHBhc3NlcyB0aGUgYHJlcXVpcmVkYCBjaGVjay5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAZnVuY3Rpb24gY2hlY2tSZXF1aXJlZFxuICogQHN0YXRpY1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5TY2hlbWFCb29sZWFuLmNoZWNrUmVxdWlyZWQgPSBTY2hlbWFUeXBlLmNoZWNrUmVxdWlyZWQ7XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIHZhbHVlIHNhdGlzZmllcyBhIHJlcXVpcmVkIHZhbGlkYXRvci4gRm9yIGEgYm9vbGVhblxuICogdG8gc2F0aXNmeSBhIHJlcXVpcmVkIHZhbGlkYXRvciwgaXQgbXVzdCBiZSBzdHJpY3RseSBlcXVhbCB0byB0cnVlIG9yIHRvXG4gKiBmYWxzZS5cbiAqXG4gKiBAcGFyYW0ge0FueX0gdmFsdWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNjaGVtYUJvb2xlYW4ucHJvdG90eXBlLmNoZWNrUmVxdWlyZWQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5fY2hlY2tSZXF1aXJlZCh2YWx1ZSk7XG59O1xuXG4vKipcbiAqIENvbmZpZ3VyZSB3aGljaCB2YWx1ZXMgZ2V0IGNhc3RlZCB0byBgdHJ1ZWAuXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBjb25zdCBNID0gbW9uZ29vc2UubW9kZWwoJ1Rlc3QnLCBuZXcgU2NoZW1hKHsgYjogQm9vbGVhbiB9KSk7XG4gKiAgICAgbmV3IE0oeyBiOiAnYWZmaXJtYXRpdmUnIH0pLmI7IC8vIHVuZGVmaW5lZFxuICogICAgIG1vbmdvb3NlLlNjaGVtYS5Cb29sZWFuLmNvbnZlcnRUb1RydWUuYWRkKCdhZmZpcm1hdGl2ZScpO1xuICogICAgIG5ldyBNKHsgYjogJ2FmZmlybWF0aXZlJyB9KS5iOyAvLyB0cnVlXG4gKlxuICogQHByb3BlcnR5IGNvbnZlcnRUb1RydWVcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBTY2hlbWFCb29sZWFuXG4gKiBAdHlwZSB7U2V0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoU2NoZW1hQm9vbGVhbiwgJ2NvbnZlcnRUb1RydWUnLCB7XG4gIGdldDogKCkgPT4gY2FzdEJvb2xlYW4uY29udmVydFRvVHJ1ZSxcbiAgc2V0OiB2ID0+IHsgY2FzdEJvb2xlYW4uY29udmVydFRvVHJ1ZSA9IHY7IH1cbn0pO1xuXG4vKipcbiAqIENvbmZpZ3VyZSB3aGljaCB2YWx1ZXMgZ2V0IGNhc3RlZCB0byBgZmFsc2VgLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3QgTSA9IG1vbmdvb3NlLm1vZGVsKCdUZXN0JywgbmV3IFNjaGVtYSh7IGI6IEJvb2xlYW4gfSkpO1xuICogICAgIG5ldyBNKHsgYjogJ25heScgfSkuYjsgLy8gdW5kZWZpbmVkXG4gKiAgICAgbW9uZ29vc2UuU2NoZW1hLlR5cGVzLkJvb2xlYW4uY29udmVydFRvRmFsc2UuYWRkKCduYXknKTtcbiAqICAgICBuZXcgTSh7IGI6ICduYXknIH0pLmI7IC8vIGZhbHNlXG4gKlxuICogQHByb3BlcnR5IGNvbnZlcnRUb0ZhbHNlXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgU2NoZW1hQm9vbGVhblxuICogQHR5cGUge1NldH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFNjaGVtYUJvb2xlYW4sICdjb252ZXJ0VG9GYWxzZScsIHtcbiAgZ2V0OiAoKSA9PiBjYXN0Qm9vbGVhbi5jb252ZXJ0VG9GYWxzZSxcbiAgc2V0OiB2ID0+IHsgY2FzdEJvb2xlYW4uY29udmVydFRvRmFsc2UgPSB2OyB9XG59KTtcblxuLyoqXG4gKiBDYXN0cyB0byBib29sZWFuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbHVlXG4gKiBAcGFyYW0ge09iamVjdH0gbW9kZWwgdGhpcyB2YWx1ZSBpcyBvcHRpb25hbFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU2NoZW1hQm9vbGVhbi5wcm90b3R5cGUuY2FzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIGxldCBjYXN0Qm9vbGVhbjtcbiAgaWYgKHR5cGVvZiB0aGlzLl9jYXN0RnVuY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYXN0Qm9vbGVhbiA9IHRoaXMuX2Nhc3RGdW5jdGlvbjtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5jb25zdHJ1Y3Rvci5jYXN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FzdEJvb2xlYW4gPSB0aGlzLmNvbnN0cnVjdG9yLmNhc3QoKTtcbiAgfSBlbHNlIHtcbiAgICBjYXN0Qm9vbGVhbiA9IFNjaGVtYUJvb2xlYW4uY2FzdCgpO1xuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gY2FzdEJvb2xlYW4odmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHRocm93IG5ldyBDYXN0RXJyb3IoJ0Jvb2xlYW4nLCB2YWx1ZSwgdGhpcy5wYXRoLCBlcnJvciwgdGhpcyk7XG4gIH1cbn07XG5cblNjaGVtYUJvb2xlYW4uJGNvbmRpdGlvbmFsSGFuZGxlcnMgPSB7IC4uLlNjaGVtYVR5cGUucHJvdG90eXBlLiRjb25kaXRpb25hbEhhbmRsZXJzIH07XG5cbi8qKlxuICogQ2FzdHMgY29udGVudHMgZm9yIHF1ZXJpZXMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9ICRjb25kaXRpb25hbFxuICogQHBhcmFtIHthbnl9IHZhbFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU2NoZW1hQm9vbGVhbi5wcm90b3R5cGUuY2FzdEZvclF1ZXJ5ID0gZnVuY3Rpb24oJGNvbmRpdGlvbmFsLCB2YWwsIGNvbnRleHQpIHtcbiAgbGV0IGhhbmRsZXI7XG4gIGlmICgkY29uZGl0aW9uYWwgIT0gbnVsbCkge1xuICAgIGhhbmRsZXIgPSBTY2hlbWFCb29sZWFuLiRjb25kaXRpb25hbEhhbmRsZXJzWyRjb25kaXRpb25hbF07XG5cbiAgICBpZiAoaGFuZGxlcikge1xuICAgICAgcmV0dXJuIGhhbmRsZXIuY2FsbCh0aGlzLCB2YWwpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmFwcGx5U2V0dGVycyhudWxsLCB2YWwsIGNvbnRleHQpO1xuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gdGhpcy5hcHBseVNldHRlcnModmFsLCBjb250ZXh0KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKGVyciBpbnN0YW5jZW9mIENhc3RFcnJvciAmJiBlcnIucGF0aCA9PT0gdGhpcy5wYXRoICYmIHRoaXMuJGZ1bGxQYXRoICE9IG51bGwpIHtcbiAgICAgIGVyci5wYXRoID0gdGhpcy4kZnVsbFBhdGg7XG4gICAgfVxuICAgIHRocm93IGVycjtcbiAgfVxufTtcblxuLyoqXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU2NoZW1hQm9vbGVhbi5wcm90b3R5cGUuX2Nhc3ROdWxsaXNoID0gZnVuY3Rpb24gX2Nhc3ROdWxsaXNoKHYpIHtcbiAgaWYgKHR5cGVvZiB2ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiB2O1xuICB9XG4gIGNvbnN0IGNhc3RCb29sZWFuID0gdHlwZW9mIHRoaXMuY29uc3RydWN0b3IuY2FzdCA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgdGhpcy5jb25zdHJ1Y3Rvci5jYXN0KCkgOlxuICAgIFNjaGVtYUJvb2xlYW4uY2FzdCgpO1xuICBpZiAoY2FzdEJvb2xlYW4gPT0gbnVsbCkge1xuICAgIHJldHVybiB2O1xuICB9XG4gIGlmIChjYXN0Qm9vbGVhbi5jb252ZXJ0VG9GYWxzZSBpbnN0YW5jZW9mIFNldCAmJiBjYXN0Qm9vbGVhbi5jb252ZXJ0VG9GYWxzZS5oYXModikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGNhc3RCb29sZWFuLmNvbnZlcnRUb1RydWUgaW5zdGFuY2VvZiBTZXQgJiYgY2FzdEJvb2xlYW4uY29udmVydFRvVHJ1ZS5oYXModikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gdjtcbn07XG5cbi8qIVxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBTY2hlbWFCb29sZWFuO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/schema/boolean.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/schema/buffer.js":
/*!****************************************************!*\
  !*** ./node_modules/mongoose/lib/schema/buffer.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseBuffer = __webpack_require__(/*! ../types/buffer */ \"(ssr)/./node_modules/mongoose/lib/types/buffer.js\");\nconst SchemaBufferOptions = __webpack_require__(/*! ../options/schemaBufferOptions */ \"(ssr)/./node_modules/mongoose/lib/options/schemaBufferOptions.js\");\nconst SchemaType = __webpack_require__(/*! ../schemaType */ \"(ssr)/./node_modules/mongoose/lib/schemaType.js\");\nconst handleBitwiseOperator = __webpack_require__(/*! ./operators/bitwise */ \"(ssr)/./node_modules/mongoose/lib/schema/operators/bitwise.js\");\nconst utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\n\nconst Binary = MongooseBuffer.Binary;\nconst CastError = SchemaType.CastError;\n\n/**\n * Buffer SchemaType constructor\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaBuffer(key, options) {\n  SchemaType.call(this, key, options, 'Buffer');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaBuffer.schemaName = 'Buffer';\n\nSchemaBuffer.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaBuffer.prototype = Object.create(SchemaType.prototype);\nSchemaBuffer.prototype.constructor = SchemaBuffer;\nSchemaBuffer.prototype.OptionsConstructor = SchemaBufferOptions;\n\n/*!\n * ignore\n */\n\nSchemaBuffer._checkRequired = v => !!(v && v.length);\n\n/**\n * Sets a default option for all Buffer instances.\n *\n * #### Example:\n *\n *     // Make all buffers have `required` of true by default.\n *     mongoose.Schema.Buffer.set('required', true);\n *\n *     const User = mongoose.model('User', new Schema({ test: Buffer }));\n *     new User({ }).validateSync().errors.test.message; // Path `test` is required.\n *\n * @param {String} option The option you'd like to set the value for\n * @param {Any} value value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaBuffer.set = SchemaType.set;\n\nSchemaBuffer.setters = [];\n\n/**\n * Attaches a getter for all Buffer instances\n *\n * #### Example:\n *\n *     // Always convert to string when getting an ObjectId\n *     mongoose.Schema.Types.Buffer.get(v => v.toString('hex'));\n *\n *     const Model = mongoose.model('Test', new Schema({ buf: Buffer } }));\n *     typeof (new Model({ buf: Buffer.fromString('hello') }).buf); // 'string'\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaBuffer.get = SchemaType.get;\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * #### Example:\n *\n *     // Allow empty strings to pass `required` check\n *     mongoose.Schema.Types.String.checkRequired(v => v != null);\n *\n *     const M = mongoose.model({ buf: { type: Buffer, required: true } });\n *     new M({ buf: Buffer.from('') }).validateSync(); // validation passes!\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaBuffer.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator. To satisfy a\n * required validator, a buffer must not be null or undefined and have\n * non-zero length.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaBuffer.prototype.checkRequired = function(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n  return this.constructor._checkRequired(value);\n};\n\n/**\n * Casts contents\n *\n * @param {Object} value\n * @param {Document} doc document that triggers the casting\n * @param {Boolean} init\n * @api private\n */\n\nSchemaBuffer.prototype.cast = function(value, doc, init) {\n  let ret;\n  if (SchemaType._isRef(this, value, doc, init)) {\n    if (value && value.isMongooseBuffer) {\n      return value;\n    }\n\n    if (Buffer.isBuffer(value)) {\n      if (!value || !value.isMongooseBuffer) {\n        value = new MongooseBuffer(value, [this.path, doc]);\n        if (this.options.subtype != null) {\n          value._subtype = this.options.subtype;\n        }\n      }\n      return value;\n    }\n\n    if (value instanceof Binary) {\n      ret = new MongooseBuffer(value.value(true), [this.path, doc]);\n      if (typeof value.sub_type !== 'number') {\n        throw new CastError('Buffer', value, this.path, null, this);\n      }\n      ret._subtype = value.sub_type;\n      return ret;\n    }\n\n    if (value == null || utils.isNonBuiltinObject(value)) {\n      return this._castRef(value, doc, init);\n    }\n  }\n\n  // documents\n  if (value && value._id) {\n    value = value._id;\n  }\n\n  if (value && value.isMongooseBuffer) {\n    return value;\n  }\n\n  if (Buffer.isBuffer(value)) {\n    if (!value || !value.isMongooseBuffer) {\n      value = new MongooseBuffer(value, [this.path, doc]);\n      if (this.options.subtype != null) {\n        value._subtype = this.options.subtype;\n      }\n    }\n    return value;\n  }\n\n  if (value instanceof Binary) {\n    ret = new MongooseBuffer(value.value(true), [this.path, doc]);\n    if (typeof value.sub_type !== 'number') {\n      throw new CastError('Buffer', value, this.path, null, this);\n    }\n    ret._subtype = value.sub_type;\n    return ret;\n  }\n\n  if (value === null) {\n    return value;\n  }\n\n\n  const type = typeof value;\n  if (\n    type === 'string' || type === 'number' || Array.isArray(value) ||\n    (type === 'object' && value.type === 'Buffer' && Array.isArray(value.data)) // gh-6863\n  ) {\n    if (type === 'number') {\n      value = [value];\n    }\n    ret = new MongooseBuffer(value, [this.path, doc]);\n    if (this.options.subtype != null) {\n      ret._subtype = this.options.subtype;\n    }\n    return ret;\n  }\n\n  throw new CastError('Buffer', value, this.path, null, this);\n};\n\n/**\n * Sets the default [subtype](https://studio3t.com/whats-new/best-practices-uuid-mongodb/)\n * for this buffer. You can find a [list of allowed subtypes here](https://api.mongodb.com/python/current/api/bson/binary.html).\n *\n * #### Example:\n *\n *     const s = new Schema({ uuid: { type: Buffer, subtype: 4 });\n *     const M = db.model('M', s);\n *     const m = new M({ uuid: 'test string' });\n *     m.uuid._subtype; // 4\n *\n * @param {Number} subtype the default subtype\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaBuffer.prototype.subtype = function(subtype) {\n  this.options.subtype = subtype;\n  return this;\n};\n\n/*!\n * ignore\n */\nfunction handleSingle(val, context) {\n  return this.castForQuery(null, val, context);\n}\n\nSchemaBuffer.prototype.$conditionalHandlers = {\n  ...SchemaType.prototype.$conditionalHandlers,\n  $bitsAllClear: handleBitwiseOperator,\n  $bitsAnyClear: handleBitwiseOperator,\n  $bitsAllSet: handleBitwiseOperator,\n  $bitsAnySet: handleBitwiseOperator,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle\n};\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaBuffer.prototype.castForQuery = function($conditional, val, context) {\n  let handler;\n  if ($conditional != null) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with Buffer.');\n    }\n    return handler.call(this, val);\n  }\n\n  let casted;\n  try {\n    casted = this.applySetters(val, context);\n  } catch (err) {\n    if (err instanceof CastError && err.path === this.path && this.$fullPath != null) {\n      err.path = this.$fullPath;\n    }\n    throw err;\n  }\n  return casted ? casted.toObject({ transform: false, virtuals: false }) : casted;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaBuffer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/schema/buffer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/schema/date.js":
/*!**************************************************!*\
  !*** ./node_modules/mongoose/lib/schema/date.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Module requirements.\n */\n\n\n\nconst MongooseError = __webpack_require__(/*! ../error/index */ \"(ssr)/./node_modules/mongoose/lib/error/index.js\");\nconst SchemaDateOptions = __webpack_require__(/*! ../options/schemaDateOptions */ \"(ssr)/./node_modules/mongoose/lib/options/schemaDateOptions.js\");\nconst SchemaType = __webpack_require__(/*! ../schemaType */ \"(ssr)/./node_modules/mongoose/lib/schemaType.js\");\nconst castDate = __webpack_require__(/*! ../cast/date */ \"(ssr)/./node_modules/mongoose/lib/cast/date.js\");\nconst getConstructorName = __webpack_require__(/*! ../helpers/getConstructorName */ \"(ssr)/./node_modules/mongoose/lib/helpers/getConstructorName.js\");\nconst utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\n\nconst CastError = SchemaType.CastError;\n\n/**\n * Date SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaDate(key, options) {\n  SchemaType.call(this, key, options, 'Date');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaDate.schemaName = 'Date';\n\nSchemaDate.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaDate.prototype = Object.create(SchemaType.prototype);\nSchemaDate.prototype.constructor = SchemaDate;\nSchemaDate.prototype.OptionsConstructor = SchemaDateOptions;\n\n/*!\n * ignore\n */\n\nSchemaDate._cast = castDate;\n\n/**\n * Sets a default option for all Date instances.\n *\n * #### Example:\n *\n *     // Make all dates have `required` of true by default.\n *     mongoose.Schema.Date.set('required', true);\n *\n *     const User = mongoose.model('User', new Schema({ test: Date }));\n *     new User({ }).validateSync().errors.test.message; // Path `test` is required.\n *\n * @param {String} option The option you'd like to set the value for\n * @param {Any} value value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaDate.set = SchemaType.set;\n\nSchemaDate.setters = [];\n\n/**\n * Attaches a getter for all Date instances\n *\n * #### Example:\n *\n *     // Always convert Dates to string\n *     mongoose.Date.get(v => v.toString());\n *\n *     const Model = mongoose.model('Test', new Schema({ date: { type: Date, default: () => new Date() } }));\n *     typeof (new Model({}).date); // 'string'\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaDate.get = SchemaType.get;\n\n/**\n * Get/set the function used to cast arbitrary values to dates.\n *\n * #### Example:\n *\n *     // Mongoose converts empty string '' into `null` for date types. You\n *     // can create a custom caster to disable it.\n *     const original = mongoose.Schema.Types.Date.cast();\n *     mongoose.Schema.Types.Date.cast(v => {\n *       assert.ok(v !== '');\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Schema.Types.Date.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaDate.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nSchemaDate._defaultCaster = v => {\n  if (v != null && !(v instanceof Date)) {\n    throw new Error();\n  }\n  return v;\n};\n\n/**\n * Declares a TTL index (rounded to the nearest second) for _Date_ types only.\n *\n * This sets the `expireAfterSeconds` index option available in MongoDB >= 2.1.2.\n * This index type is only compatible with Date types.\n *\n * #### Example:\n *\n *     // expire in 24 hours\n *     new Schema({ createdAt: { type: Date, expires: 60*60*24 }});\n *\n * `expires` utilizes the `ms` module from [guille](https://github.com/guille/) allowing us to use a friendlier syntax:\n *\n * #### Example:\n *\n *     // expire in 24 hours\n *     new Schema({ createdAt: { type: Date, expires: '24h' }});\n *\n *     // expire in 1.5 hours\n *     new Schema({ createdAt: { type: Date, expires: '1.5h' }});\n *\n *     // expire in 7 days\n *     const schema = new Schema({ createdAt: Date });\n *     schema.path('createdAt').expires('7d');\n *\n * @param {Number|String} when\n * @added 3.0.0\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaDate.prototype.expires = function(when) {\n  if (getConstructorName(this._index) !== 'Object') {\n    this._index = {};\n  }\n\n  this._index.expires = when;\n  utils.expires(this._index);\n  return this;\n};\n\n/*!\n * ignore\n */\n\nSchemaDate._checkRequired = v => v instanceof Date;\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * #### Example:\n *\n *     // Allow empty strings to pass `required` check\n *     mongoose.Schema.Types.String.checkRequired(v => v != null);\n *\n *     const M = mongoose.model({ str: { type: String, required: true } });\n *     new M({ str: '' }).validateSync(); // `null`, validation passes!\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaDate.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator. To satisfy\n * a required validator, the given value must be an instance of `Date`.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaDate.prototype.checkRequired = function(value, doc) {\n  if (typeof value === 'object' && SchemaType._isRef(this, value, doc, true)) {\n    return value != null;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired === 'function' ?\n    this.constructor.checkRequired() :\n    SchemaDate.checkRequired();\n  return _checkRequired(value);\n};\n\n/**\n * Sets a minimum date validator.\n *\n * #### Example:\n *\n *     const s = new Schema({ d: { type: Date, min: Date('1970-01-01') })\n *     const M = db.model('M', s)\n *     const m = new M({ d: Date('1969-12-31') })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.d = Date('2014-12-08');\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MIN} token which will be replaced with the invalid value\n *     const min = [Date('1970-01-01'), 'The value of path `{PATH}` ({VALUE}) is beneath the limit ({MIN}).'];\n *     const schema = new Schema({ d: { type: Date, min: min })\n *     const M = mongoose.model('M', schema);\n *     const s= new M({ d: Date('1969-12-31') });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `d` (1969-12-31) is before the limit (1970-01-01).\n *     })\n *\n * @param {Date} value minimum date\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages https://mongoosejs.com/docs/api/error.html#Error.messages\n * @api public\n */\n\nSchemaDate.prototype.min = function(value, message) {\n  if (this.minValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.minValidator;\n    }, this);\n  }\n\n  if (value) {\n    let msg = message || MongooseError.messages.Date.min;\n    if (typeof msg === 'string') {\n      msg = msg.replace(/{MIN}/, (value === Date.now ? 'Date.now()' : value.toString()));\n    }\n    const _this = this;\n    this.validators.push({\n      validator: this.minValidator = function(val) {\n        let _value = value;\n        if (typeof value === 'function' && value !== Date.now) {\n          _value = _value.call(this);\n        }\n        const min = (_value === Date.now ? _value() : _this.cast(_value));\n        return val === null || val.valueOf() >= min.valueOf();\n      },\n      message: msg,\n      type: 'min',\n      min: value\n    });\n  }\n\n  return this;\n};\n\n/**\n * Sets a maximum date validator.\n *\n * #### Example:\n *\n *     const s = new Schema({ d: { type: Date, max: Date('2014-01-01') })\n *     const M = db.model('M', s)\n *     const m = new M({ d: Date('2014-12-08') })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.d = Date('2013-12-31');\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAX} token which will be replaced with the invalid value\n *     const max = [Date('2014-01-01'), 'The value of path `{PATH}` ({VALUE}) exceeds the limit ({MAX}).'];\n *     const schema = new Schema({ d: { type: Date, max: max })\n *     const M = mongoose.model('M', schema);\n *     const s= new M({ d: Date('2014-12-08') });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `d` (2014-12-08) exceeds the limit (2014-01-01).\n *     })\n *\n * @param {Date} maximum date\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages https://mongoosejs.com/docs/api/error.html#Error.messages\n * @api public\n */\n\nSchemaDate.prototype.max = function(value, message) {\n  if (this.maxValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.maxValidator;\n    }, this);\n  }\n\n  if (value) {\n    let msg = message || MongooseError.messages.Date.max;\n    if (typeof msg === 'string') {\n      msg = msg.replace(/{MAX}/, (value === Date.now ? 'Date.now()' : value.toString()));\n    }\n    const _this = this;\n    this.validators.push({\n      validator: this.maxValidator = function(val) {\n        let _value = value;\n        if (typeof _value === 'function' && _value !== Date.now) {\n          _value = _value.call(this);\n        }\n        const max = (_value === Date.now ? _value() : _this.cast(_value));\n        return val === null || val.valueOf() <= max.valueOf();\n      },\n      message: msg,\n      type: 'max',\n      max: value\n    });\n  }\n\n  return this;\n};\n\n/**\n * Casts to date\n *\n * @param {Object} value to cast\n * @api private\n */\n\nSchemaDate.prototype.cast = function(value) {\n  let castDate;\n  if (typeof this._castFunction === 'function') {\n    castDate = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castDate = this.constructor.cast();\n  } else {\n    castDate = SchemaDate.cast();\n  }\n\n  try {\n    return castDate(value);\n  } catch (error) {\n    throw new CastError('date', value, this.path, error, this);\n  }\n};\n\n/**\n * Date Query casting.\n *\n * @param {Any} val\n * @api private\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\nSchemaDate.prototype.$conditionalHandlers = {\n  ...SchemaType.prototype.$conditionalHandlers,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle\n};\n\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaDate.prototype.castForQuery = function($conditional, val, context) {\n  if ($conditional == null) {\n    try {\n      return this.applySetters(val, context);\n    } catch (err) {\n      if (err instanceof CastError && err.path === this.path && this.$fullPath != null) {\n        err.path = this.$fullPath;\n      }\n      throw err;\n    }\n  }\n\n  const handler = this.$conditionalHandlers[$conditional];\n\n  if (!handler) {\n    throw new Error('Can\\'t use ' + $conditional + ' with Date.');\n  }\n\n  return handler.call(this, val);\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaDate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/schema/date.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/schema/decimal128.js":
/*!********************************************************!*\
  !*** ./node_modules/mongoose/lib/schema/decimal128.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Module dependencies.\n */\n\n\n\nconst SchemaType = __webpack_require__(/*! ../schemaType */ \"(ssr)/./node_modules/mongoose/lib/schemaType.js\");\nconst CastError = SchemaType.CastError;\nconst castDecimal128 = __webpack_require__(/*! ../cast/decimal128 */ \"(ssr)/./node_modules/mongoose/lib/cast/decimal128.js\");\nconst isBsonType = __webpack_require__(/*! ../helpers/isBsonType */ \"(ssr)/./node_modules/mongoose/lib/helpers/isBsonType.js\");\n\n/**\n * Decimal128 SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaDecimal128(key, options) {\n  SchemaType.call(this, key, options, 'Decimal128');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaDecimal128.schemaName = 'Decimal128';\n\nSchemaDecimal128.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaDecimal128.prototype = Object.create(SchemaType.prototype);\nSchemaDecimal128.prototype.constructor = SchemaDecimal128;\n\n/*!\n * ignore\n */\n\nSchemaDecimal128._cast = castDecimal128;\n\n/**\n * Sets a default option for all Decimal128 instances.\n *\n * #### Example:\n *\n *     // Make all decimal 128s have `required` of true by default.\n *     mongoose.Schema.Decimal128.set('required', true);\n *\n *     const User = mongoose.model('User', new Schema({ test: mongoose.Decimal128 }));\n *     new User({ }).validateSync().errors.test.message; // Path `test` is required.\n *\n * @param {String} option The option you'd like to set the value for\n * @param {Any} value value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaDecimal128.set = SchemaType.set;\n\nSchemaDecimal128.setters = [];\n\n/**\n * Attaches a getter for all Decimal128 instances\n *\n * #### Example:\n *\n *     // Automatically convert Decimal128s to Numbers\n *     mongoose.Schema.Decimal128.get(v => v == null ? v : Number(v));\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaDecimal128.get = SchemaType.get;\n\n/**\n * Get/set the function used to cast arbitrary values to decimals.\n *\n * #### Example:\n *\n *     // Make Mongoose only refuse to cast numbers as decimal128\n *     const original = mongoose.Schema.Types.Decimal128.cast();\n *     mongoose.Decimal128.cast(v => {\n *       assert.ok(typeof v !== 'number');\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Decimal128.cast(false);\n *\n * @param {Function} [caster]\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaDecimal128.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nSchemaDecimal128._defaultCaster = v => {\n  if (v != null && !isBsonType(v, 'Decimal128')) {\n    throw new Error();\n  }\n  return v;\n};\n\n/*!\n * ignore\n */\n\nSchemaDecimal128._checkRequired = v => isBsonType(v, 'Decimal128');\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaDecimal128.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaDecimal128.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired === 'function' ?\n    this.constructor.checkRequired() :\n    SchemaDecimal128.checkRequired();\n\n  return _checkRequired(value);\n};\n\n/**\n * Casts to Decimal128\n *\n * @param {Object} value\n * @param {Object} doc\n * @param {Boolean} init whether this is an initialization cast\n * @api private\n */\n\nSchemaDecimal128.prototype.cast = function(value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    if (isBsonType(value, 'Decimal128')) {\n      return value;\n    }\n\n    return this._castRef(value, doc, init);\n  }\n\n  let castDecimal128;\n  if (typeof this._castFunction === 'function') {\n    castDecimal128 = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castDecimal128 = this.constructor.cast();\n  } else {\n    castDecimal128 = SchemaDecimal128.cast();\n  }\n\n  try {\n    return castDecimal128(value);\n  } catch (error) {\n    throw new CastError('Decimal128', value, this.path, error, this);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\nSchemaDecimal128.prototype.$conditionalHandlers = {\n  ...SchemaType.prototype.$conditionalHandlers,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaDecimal128;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/schema/decimal128.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/schema/documentArray.js":
/*!***********************************************************!*\
  !*** ./node_modules/mongoose/lib/schema/documentArray.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\nconst CastError = __webpack_require__(/*! ../error/cast */ \"(ssr)/./node_modules/mongoose/lib/error/cast.js\");\nconst DocumentArrayElement = __webpack_require__(/*! ./documentArrayElement */ \"(ssr)/./node_modules/mongoose/lib/schema/documentArrayElement.js\");\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst SchemaArray = __webpack_require__(/*! ./array */ \"(ssr)/./node_modules/mongoose/lib/schema/array.js\");\nconst SchemaDocumentArrayOptions =\n  __webpack_require__(/*! ../options/schemaDocumentArrayOptions */ \"(ssr)/./node_modules/mongoose/lib/options/schemaDocumentArrayOptions.js\");\nconst SchemaType = __webpack_require__(/*! ../schemaType */ \"(ssr)/./node_modules/mongoose/lib/schemaType.js\");\nconst discriminator = __webpack_require__(/*! ../helpers/model/discriminator */ \"(ssr)/./node_modules/mongoose/lib/helpers/model/discriminator.js\");\nconst handleIdOption = __webpack_require__(/*! ../helpers/schema/handleIdOption */ \"(ssr)/./node_modules/mongoose/lib/helpers/schema/handleIdOption.js\");\nconst handleSpreadDoc = __webpack_require__(/*! ../helpers/document/handleSpreadDoc */ \"(ssr)/./node_modules/mongoose/lib/helpers/document/handleSpreadDoc.js\");\nconst utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\nconst getConstructor = __webpack_require__(/*! ../helpers/discriminator/getConstructor */ \"(ssr)/./node_modules/mongoose/lib/helpers/discriminator/getConstructor.js\");\nconst InvalidSchemaOptionError = __webpack_require__(/*! ../error/invalidSchemaOption */ \"(ssr)/./node_modules/mongoose/lib/error/invalidSchemaOption.js\");\n\nconst arrayAtomicsSymbol = (__webpack_require__(/*! ../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").arrayAtomicsSymbol);\nconst arrayPathSymbol = (__webpack_require__(/*! ../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").arrayPathSymbol);\nconst documentArrayParent = (__webpack_require__(/*! ../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").documentArrayParent);\n\nlet MongooseDocumentArray;\nlet Subdocument;\n\n/**\n * SubdocsArray SchemaType constructor\n *\n * @param {String} key\n * @param {Schema} schema\n * @param {Object} options\n * @param {Object} schemaOptions\n * @inherits SchemaArray\n * @api public\n */\n\nfunction SchemaDocumentArray(key, schema, options, schemaOptions) {\n  if (schema.options && schema.options.timeseries) {\n    throw new InvalidSchemaOptionError(key, 'timeseries');\n  }\n  const schemaTypeIdOption = SchemaDocumentArray.defaultOptions &&\n    SchemaDocumentArray.defaultOptions._id;\n  if (schemaTypeIdOption != null) {\n    schemaOptions = schemaOptions || {};\n    schemaOptions._id = schemaTypeIdOption;\n  }\n\n  if (schemaOptions != null && schemaOptions._id != null) {\n    schema = handleIdOption(schema, schemaOptions);\n  } else if (options != null && options._id != null) {\n    schema = handleIdOption(schema, options);\n  }\n\n  const EmbeddedDocument = _createConstructor(schema, options);\n  EmbeddedDocument.prototype.$basePath = key;\n\n  SchemaArray.call(this, key, EmbeddedDocument, options);\n\n  this.schema = schema;\n  this.schemaOptions = schemaOptions || {};\n  this.$isMongooseDocumentArray = true;\n  this.Constructor = EmbeddedDocument;\n\n  EmbeddedDocument.base = schema.base;\n\n  const fn = this.defaultValue;\n\n  if (!('defaultValue' in this) || fn !== void 0) {\n    this.default(function() {\n      let arr = fn.call(this);\n      if (arr != null && !Array.isArray(arr)) {\n        arr = [arr];\n      }\n      // Leave it up to `cast()` to convert this to a documentarray\n      return arr;\n    });\n  }\n\n  const $parentSchemaType = this;\n  this.$embeddedSchemaType = new DocumentArrayElement(key + '.$', {\n    required: this &&\n      this.schemaOptions &&\n      this.schemaOptions.required || false,\n    $parentSchemaType\n  });\n\n  this.$embeddedSchemaType.caster = this.Constructor;\n  this.$embeddedSchemaType.schema = this.schema;\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaDocumentArray.schemaName = 'DocumentArray';\n\n/**\n * Options for all document arrays.\n *\n * - `castNonArrays`: `true` by default. If `false`, Mongoose will throw a CastError when a value isn't an array. If `true`, Mongoose will wrap the provided value in an array before casting.\n *\n * @api public\n */\n\nSchemaDocumentArray.options = { castNonArrays: true };\n\n/*!\n * Inherits from SchemaArray.\n */\nSchemaDocumentArray.prototype = Object.create(SchemaArray.prototype);\nSchemaDocumentArray.prototype.constructor = SchemaDocumentArray;\nSchemaDocumentArray.prototype.OptionsConstructor = SchemaDocumentArrayOptions;\n\n/*!\n * ignore\n */\n\nfunction _createConstructor(schema, options, baseClass) {\n  Subdocument || (Subdocument = __webpack_require__(/*! ../types/arraySubdocument */ \"(ssr)/./node_modules/mongoose/lib/types/arraySubdocument.js\"));\n\n  // compile an embedded document for this schema\n  function EmbeddedDocument() {\n    Subdocument.apply(this, arguments);\n    if (this.__parentArray == null || this.__parentArray.getArrayParent() == null) {\n      return;\n    }\n    this.$session(this.__parentArray.getArrayParent().$session());\n  }\n\n  schema._preCompile();\n\n  const proto = baseClass != null ? baseClass.prototype : Subdocument.prototype;\n  EmbeddedDocument.prototype = Object.create(proto);\n  EmbeddedDocument.prototype.$__setSchema(schema);\n  EmbeddedDocument.schema = schema;\n  EmbeddedDocument.prototype.constructor = EmbeddedDocument;\n  EmbeddedDocument.$isArraySubdocument = true;\n  EmbeddedDocument.events = new EventEmitter();\n  EmbeddedDocument.base = schema.base;\n\n  // apply methods\n  for (const i in schema.methods) {\n    EmbeddedDocument.prototype[i] = schema.methods[i];\n  }\n\n  // apply statics\n  for (const i in schema.statics) {\n    EmbeddedDocument[i] = schema.statics[i];\n  }\n\n  for (const i in EventEmitter.prototype) {\n    EmbeddedDocument[i] = EventEmitter.prototype[i];\n  }\n\n  EmbeddedDocument.options = options;\n\n  return EmbeddedDocument;\n}\n\n/**\n * Adds a discriminator to this document array.\n *\n * #### Example:\n *\n *     const shapeSchema = Schema({ name: String }, { discriminatorKey: 'kind' });\n *     const schema = Schema({ shapes: [shapeSchema] });\n *\n *     const docArrayPath = parentSchema.path('shapes');\n *     docArrayPath.discriminator('Circle', Schema({ radius: Number }));\n *\n * @param {String} name\n * @param {Schema} schema fields to add to the schema for instances of this sub-class\n * @param {Object|string} [options] If string, same as `options.value`.\n * @param {String} [options.value] the string stored in the `discriminatorKey` property. If not specified, Mongoose uses the `name` parameter.\n * @param {Boolean} [options.clone=true] By default, `discriminator()` clones the given `schema`. Set to `false` to skip cloning.\n * @see discriminators https://mongoosejs.com/docs/discriminators.html\n * @return {Function} the constructor Mongoose will use for creating instances of this discriminator model\n * @api public\n */\n\nSchemaDocumentArray.prototype.discriminator = function(name, schema, options) {\n  if (typeof name === 'function') {\n    name = utils.getFunctionName(name);\n  }\n\n  options = options || {};\n  const tiedValue = utils.isPOJO(options) ? options.value : options;\n  const clone = typeof options.clone === 'boolean' ? options.clone : true;\n\n  if (schema.instanceOfSchema && clone) {\n    schema = schema.clone();\n  }\n\n  schema = discriminator(this.casterConstructor, name, schema, tiedValue);\n\n  const EmbeddedDocument = _createConstructor(schema, null, this.casterConstructor);\n  EmbeddedDocument.baseCasterConstructor = this.casterConstructor;\n\n  try {\n    Object.defineProperty(EmbeddedDocument, 'name', {\n      value: name\n    });\n  } catch (error) {\n    // Ignore error, only happens on old versions of node\n  }\n\n  this.casterConstructor.discriminators[name] = EmbeddedDocument;\n\n  return this.casterConstructor.discriminators[name];\n};\n\n/**\n * Performs local validations first, then validations on each embedded doc\n *\n * @api private\n */\n\nSchemaDocumentArray.prototype.doValidate = function(array, fn, scope, options) {\n  // lazy load\n  MongooseDocumentArray || (MongooseDocumentArray = __webpack_require__(/*! ../types/documentArray */ \"(ssr)/./node_modules/mongoose/lib/types/documentArray/index.js\"));\n\n  const _this = this;\n  try {\n    SchemaType.prototype.doValidate.call(this, array, cb, scope);\n  } catch (err) {\n    return fn(err);\n  }\n\n  function cb(err) {\n    if (err) {\n      return fn(err);\n    }\n\n    let count = array && array.length;\n    let error;\n\n    if (!count) {\n      return fn();\n    }\n    if (options && options.updateValidator) {\n      return fn();\n    }\n    if (!utils.isMongooseDocumentArray(array)) {\n      array = new MongooseDocumentArray(array, _this.path, scope);\n    }\n\n    // handle sparse arrays, do not use array.forEach which does not\n    // iterate over sparse elements yet reports array.length including\n    // them :(\n\n    function callback(err) {\n      if (err != null) {\n        error = err;\n      }\n      --count || fn(error);\n    }\n\n    for (let i = 0, len = count; i < len; ++i) {\n      // sidestep sparse entries\n      let doc = array[i];\n      if (doc == null) {\n        --count || fn(error);\n        continue;\n      }\n\n      // If you set the array index directly, the doc might not yet be\n      // a full fledged mongoose subdoc, so make it into one.\n      if (!(doc instanceof Subdocument)) {\n        const Constructor = getConstructor(_this.casterConstructor, array[i]);\n        doc = array[i] = new Constructor(doc, array, undefined, undefined, i);\n      }\n\n      if (options != null && options.validateModifiedOnly && !doc.$isModified()) {\n        --count || fn(error);\n        continue;\n      }\n\n      doc.$__validate(callback);\n    }\n  }\n};\n\n/**\n * Performs local validations first, then validations on each embedded doc.\n *\n * #### Note:\n *\n * This method ignores the asynchronous validators.\n *\n * @return {MongooseError|undefined}\n * @api private\n */\n\nSchemaDocumentArray.prototype.doValidateSync = function(array, scope, options) {\n  const schemaTypeError = SchemaType.prototype.doValidateSync.call(this, array, scope);\n  if (schemaTypeError != null) {\n    return schemaTypeError;\n  }\n\n  const count = array && array.length;\n  let resultError = null;\n\n  if (!count) {\n    return;\n  }\n\n  // handle sparse arrays, do not use array.forEach which does not\n  // iterate over sparse elements yet reports array.length including\n  // them :(\n\n  for (let i = 0, len = count; i < len; ++i) {\n    // sidestep sparse entries\n    let doc = array[i];\n    if (!doc) {\n      continue;\n    }\n\n    // If you set the array index directly, the doc might not yet be\n    // a full fledged mongoose subdoc, so make it into one.\n    if (!(doc instanceof Subdocument)) {\n      const Constructor = getConstructor(this.casterConstructor, array[i]);\n      doc = array[i] = new Constructor(doc, array, undefined, undefined, i);\n    }\n\n    if (options != null && options.validateModifiedOnly && !doc.$isModified()) {\n      continue;\n    }\n\n    const subdocValidateError = doc.validateSync();\n\n    if (subdocValidateError && resultError == null) {\n      resultError = subdocValidateError;\n    }\n  }\n\n  return resultError;\n};\n\n/*!\n * ignore\n */\n\nSchemaDocumentArray.prototype.getDefault = function(scope, init, options) {\n  let ret = typeof this.defaultValue === 'function'\n    ? this.defaultValue.call(scope)\n    : this.defaultValue;\n\n  if (ret == null) {\n    return ret;\n  }\n\n  if (options && options.skipCast) {\n    return ret;\n  }\n\n  // lazy load\n  MongooseDocumentArray || (MongooseDocumentArray = __webpack_require__(/*! ../types/documentArray */ \"(ssr)/./node_modules/mongoose/lib/types/documentArray/index.js\"));\n\n  if (!Array.isArray(ret)) {\n    ret = [ret];\n  }\n\n  ret = new MongooseDocumentArray(ret, this.path, scope);\n\n  for (let i = 0; i < ret.length; ++i) {\n    const Constructor = getConstructor(this.casterConstructor, ret[i]);\n    const _subdoc = new Constructor({}, ret, undefined,\n      undefined, i);\n    _subdoc.$init(ret[i]);\n    _subdoc.isNew = true;\n\n    // Make sure all paths in the subdoc are set to `default` instead\n    // of `init` since we used `init`.\n    Object.assign(_subdoc.$__.activePaths.default, _subdoc.$__.activePaths.init);\n    _subdoc.$__.activePaths.init = {};\n\n    ret[i] = _subdoc;\n  }\n\n  return ret;\n};\n\nconst _toObjectOptions = Object.freeze({ transform: false, virtuals: false });\nconst initDocumentOptions = Object.freeze({ skipId: false, willInit: true });\n\n/**\n * Casts contents\n *\n * @param {Object} value\n * @param {Document} document that triggers the casting\n * @api private\n */\n\nSchemaDocumentArray.prototype.cast = function(value, doc, init, prev, options) {\n  // lazy load\n  MongooseDocumentArray || (MongooseDocumentArray = __webpack_require__(/*! ../types/documentArray */ \"(ssr)/./node_modules/mongoose/lib/types/documentArray/index.js\"));\n\n  // Skip casting if `value` is the same as the previous value, no need to cast. See gh-9266\n  if (value != null && value[arrayPathSymbol] != null && value === prev) {\n    return value;\n  }\n\n  let selected;\n  let subdoc;\n\n  options = options || {};\n\n  const path = options.path || this.path;\n\n  if (!Array.isArray(value)) {\n    if (!init && !SchemaDocumentArray.options.castNonArrays) {\n      throw new CastError('DocumentArray', value, this.path, null, this);\n    }\n    // gh-2442 mark whole array as modified if we're initializing a doc from\n    // the db and the path isn't an array in the document\n    if (!!doc && init) {\n      doc.markModified(path);\n    }\n    return this.cast([value], doc, init, prev, options);\n  }\n\n  // We need to create a new array, otherwise change tracking will\n  // update the old doc (gh-4449)\n  if (!options.skipDocumentArrayCast || utils.isMongooseDocumentArray(value)) {\n    value = new MongooseDocumentArray(value, path, doc);\n  }\n\n  if (prev != null) {\n    value[arrayAtomicsSymbol] = prev[arrayAtomicsSymbol] || {};\n  }\n\n  if (options.arrayPathIndex != null) {\n    value[arrayPathSymbol] = path + '.' + options.arrayPathIndex;\n  }\n\n  const rawArray = utils.isMongooseDocumentArray(value) ? value.__array : value;\n  const len = rawArray.length;\n\n  for (let i = 0; i < len; ++i) {\n    if (!rawArray[i]) {\n      continue;\n    }\n\n    const Constructor = getConstructor(this.casterConstructor, rawArray[i]);\n\n    // Check if the document has a different schema (re gh-3701)\n    if (rawArray[i].$__ != null && !(rawArray[i] instanceof Constructor)) {\n      const spreadDoc = handleSpreadDoc(rawArray[i], true);\n      if (rawArray[i] !== spreadDoc) {\n        rawArray[i] = spreadDoc;\n      } else {\n        rawArray[i] = rawArray[i].toObject({\n          transform: false,\n          // Special case: if different model, but same schema, apply virtuals\n          // re: gh-7898\n          virtuals: rawArray[i].schema === Constructor.schema\n        });\n      }\n    }\n\n    if (rawArray[i] instanceof Subdocument) {\n      if (rawArray[i][documentArrayParent] !== doc) {\n        if (init) {\n          const subdoc = new Constructor(null, value, initDocumentOptions, selected, i);\n          rawArray[i] = subdoc.$init(rawArray[i]);\n        } else {\n          const subdoc = new Constructor(rawArray[i], value, undefined, undefined, i);\n          rawArray[i] = subdoc;\n        }\n      }\n      // Might not have the correct index yet, so ensure it does.\n      if (rawArray[i].__index == null) {\n        rawArray[i].$setIndex(i);\n      }\n    } else if (rawArray[i] != null) {\n      if (init) {\n        if (doc) {\n          selected || (selected = scopePaths(this, doc.$__.selected, init));\n        } else {\n          selected = true;\n        }\n\n        subdoc = new Constructor(null, value, initDocumentOptions, selected, i);\n        rawArray[i] = subdoc.$init(rawArray[i]);\n      } else {\n        if (prev && typeof prev.id === 'function') {\n          subdoc = prev.id(rawArray[i]._id);\n        }\n\n        if (prev && subdoc && utils.deepEqual(subdoc.toObject(_toObjectOptions), rawArray[i])) {\n          // handle resetting doc with existing id and same data\n          subdoc.set(rawArray[i]);\n          // if set() is hooked it will have no return value\n          // see gh-746\n          rawArray[i] = subdoc;\n        } else {\n          try {\n            subdoc = new Constructor(rawArray[i], value, undefined,\n              undefined, i);\n            // if set() is hooked it will have no return value\n            // see gh-746\n            rawArray[i] = subdoc;\n          } catch (error) {\n            throw new CastError('embedded', rawArray[i],\n              value[arrayPathSymbol], error, this);\n          }\n        }\n      }\n    }\n  }\n\n  return value;\n};\n\n/*!\n * ignore\n */\n\nSchemaDocumentArray.prototype.clone = function() {\n  const options = Object.assign({}, this.options);\n  const schematype = new this.constructor(this.path, this.schema, options, this.schemaOptions);\n  schematype.validators = this.validators.slice();\n  if (this.requiredValidator !== undefined) {\n    schematype.requiredValidator = this.requiredValidator;\n  }\n  schematype.Constructor.discriminators = Object.assign({},\n    this.Constructor.discriminators);\n  return schematype;\n};\n\n/*!\n * ignore\n */\n\nSchemaDocumentArray.prototype.applyGetters = function(value, scope) {\n  return SchemaType.prototype.applyGetters.call(this, value, scope);\n};\n\n/**\n * Scopes paths selected in a query to this array.\n * Necessary for proper default application of subdocument values.\n *\n * @param {DocumentArrayPath} array the array to scope `fields` paths\n * @param {Object|undefined} fields the root fields selected in the query\n * @param {Boolean|undefined} init if we are being created part of a query result\n * @api private\n */\n\nfunction scopePaths(array, fields, init) {\n  if (!(init && fields)) {\n    return undefined;\n  }\n\n  const path = array.path + '.';\n  const keys = Object.keys(fields);\n  let i = keys.length;\n  const selected = {};\n  let hasKeys;\n  let key;\n  let sub;\n\n  while (i--) {\n    key = keys[i];\n    if (key.startsWith(path)) {\n      sub = key.substring(path.length);\n      if (sub === '$') {\n        continue;\n      }\n      if (sub.startsWith('$.')) {\n        sub = sub.substring(2);\n      }\n      hasKeys || (hasKeys = true);\n      selected[sub] = fields[key];\n    }\n  }\n\n  return hasKeys && selected || undefined;\n}\n\n/*!\n * ignore\n */\n\nSchemaDocumentArray.defaultOptions = {};\n\n/**\n * Sets a default option for all DocumentArray instances.\n *\n * #### Example:\n *\n *     // Make all numbers have option `min` equal to 0.\n *     mongoose.Schema.DocumentArray.set('_id', false);\n *\n * @param {String} option The name of the option you'd like to set (e.g. trim, lowercase, etc...)\n * @param {Any} value The value of the option you'd like to set.\n * @return {void}\n * @function set\n * @static\n * @api public\n */\n\nSchemaDocumentArray.set = SchemaType.set;\n\nSchemaDocumentArray.setters = [];\n\n/**\n * Attaches a getter for all DocumentArrayPath instances\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaDocumentArray.get = SchemaType.get;\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaDocumentArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/schema/documentArray.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/schema/documentArrayElement.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongoose/lib/schema/documentArrayElement.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseError = __webpack_require__(/*! ../error/mongooseError */ \"(ssr)/./node_modules/mongoose/lib/error/mongooseError.js\");\nconst SchemaType = __webpack_require__(/*! ../schemaType */ \"(ssr)/./node_modules/mongoose/lib/schemaType.js\");\nconst SchemaSubdocument = __webpack_require__(/*! ./subdocument */ \"(ssr)/./node_modules/mongoose/lib/schema/subdocument.js\");\nconst getConstructor = __webpack_require__(/*! ../helpers/discriminator/getConstructor */ \"(ssr)/./node_modules/mongoose/lib/helpers/discriminator/getConstructor.js\");\n\n/**\n * DocumentArrayElement SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaDocumentArrayElement(path, options) {\n  this.$parentSchemaType = options && options.$parentSchemaType;\n  if (!this.$parentSchemaType) {\n    throw new MongooseError('Cannot create DocumentArrayElement schematype without a parent');\n  }\n  delete options.$parentSchemaType;\n\n  SchemaType.call(this, path, options, 'DocumentArrayElement');\n\n  this.$isMongooseDocumentArrayElement = true;\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaDocumentArrayElement.schemaName = 'DocumentArrayElement';\n\nSchemaDocumentArrayElement.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaDocumentArrayElement.prototype = Object.create(SchemaType.prototype);\nSchemaDocumentArrayElement.prototype.constructor = SchemaDocumentArrayElement;\n\n/**\n * Casts `val` for DocumentArrayElement.\n *\n * @param {Object} value to cast\n * @api private\n */\n\nSchemaDocumentArrayElement.prototype.cast = function(...args) {\n  return this.$parentSchemaType.cast(...args)[0];\n};\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $cond\n * @param {any} [val]\n * @api private\n */\n\nSchemaDocumentArrayElement.prototype.doValidate = function(value, fn, scope, options) {\n  const Constructor = getConstructor(this.caster, value);\n\n  if (value && !(value instanceof Constructor)) {\n    value = new Constructor(value, scope, null, null, options && options.index != null ? options.index : null);\n  }\n\n  return SchemaSubdocument.prototype.doValidate.call(this, value, fn, scope, options);\n};\n\n/**\n * Clone the current SchemaType\n *\n * @return {DocumentArrayElement} The cloned instance\n * @api private\n */\n\nSchemaDocumentArrayElement.prototype.clone = function() {\n  this.options.$parentSchemaType = this.$parentSchemaType;\n  const ret = SchemaType.prototype.clone.apply(this, arguments);\n  delete this.options.$parentSchemaType;\n\n  ret.caster = this.caster;\n  ret.schema = this.schema;\n\n  return ret;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaDocumentArrayElement;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3NjaGVtYS9kb2N1bWVudEFycmF5RWxlbWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWIsc0JBQXNCLG1CQUFPLENBQUMsd0ZBQXdCO0FBQ3RELG1CQUFtQixtQkFBTyxDQUFDLHNFQUFlO0FBQzFDLDBCQUEwQixtQkFBTyxDQUFDLDhFQUFlO0FBQ2pELHVCQUF1QixtQkFBTyxDQUFDLDBIQUF5Qzs7QUFFeEU7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsS0FBSztBQUNoQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWSxzQkFBc0I7QUFDbEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvc2NoZW1hL2RvY3VtZW50QXJyYXlFbGVtZW50LmpzPzhiMmIiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgTW9uZ29vc2VFcnJvciA9IHJlcXVpcmUoJy4uL2Vycm9yL21vbmdvb3NlRXJyb3InKTtcbmNvbnN0IFNjaGVtYVR5cGUgPSByZXF1aXJlKCcuLi9zY2hlbWFUeXBlJyk7XG5jb25zdCBTY2hlbWFTdWJkb2N1bWVudCA9IHJlcXVpcmUoJy4vc3ViZG9jdW1lbnQnKTtcbmNvbnN0IGdldENvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaGVscGVycy9kaXNjcmltaW5hdG9yL2dldENvbnN0cnVjdG9yJyk7XG5cbi8qKlxuICogRG9jdW1lbnRBcnJheUVsZW1lbnQgU2NoZW1hVHlwZSBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBpbmhlcml0cyBTY2hlbWFUeXBlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFNjaGVtYURvY3VtZW50QXJyYXlFbGVtZW50KHBhdGgsIG9wdGlvbnMpIHtcbiAgdGhpcy4kcGFyZW50U2NoZW1hVHlwZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy4kcGFyZW50U2NoZW1hVHlwZTtcbiAgaWYgKCF0aGlzLiRwYXJlbnRTY2hlbWFUeXBlKSB7XG4gICAgdGhyb3cgbmV3IE1vbmdvb3NlRXJyb3IoJ0Nhbm5vdCBjcmVhdGUgRG9jdW1lbnRBcnJheUVsZW1lbnQgc2NoZW1hdHlwZSB3aXRob3V0IGEgcGFyZW50Jyk7XG4gIH1cbiAgZGVsZXRlIG9wdGlvbnMuJHBhcmVudFNjaGVtYVR5cGU7XG5cbiAgU2NoZW1hVHlwZS5jYWxsKHRoaXMsIHBhdGgsIG9wdGlvbnMsICdEb2N1bWVudEFycmF5RWxlbWVudCcpO1xuXG4gIHRoaXMuJGlzTW9uZ29vc2VEb2N1bWVudEFycmF5RWxlbWVudCA9IHRydWU7XG59XG5cbi8qKlxuICogVGhpcyBzY2hlbWEgdHlwZSdzIG5hbWUsIHRvIGRlZmVuZCBhZ2FpbnN0IG1pbmlmaWVycyB0aGF0IG1hbmdsZVxuICogZnVuY3Rpb24gbmFtZXMuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuU2NoZW1hRG9jdW1lbnRBcnJheUVsZW1lbnQuc2NoZW1hTmFtZSA9ICdEb2N1bWVudEFycmF5RWxlbWVudCc7XG5cblNjaGVtYURvY3VtZW50QXJyYXlFbGVtZW50LmRlZmF1bHRPcHRpb25zID0ge307XG5cbi8qIVxuICogSW5oZXJpdHMgZnJvbSBTY2hlbWFUeXBlLlxuICovXG5TY2hlbWFEb2N1bWVudEFycmF5RWxlbWVudC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFNjaGVtYVR5cGUucHJvdG90eXBlKTtcblNjaGVtYURvY3VtZW50QXJyYXlFbGVtZW50LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNjaGVtYURvY3VtZW50QXJyYXlFbGVtZW50O1xuXG4vKipcbiAqIENhc3RzIGB2YWxgIGZvciBEb2N1bWVudEFycmF5RWxlbWVudC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsdWUgdG8gY2FzdFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU2NoZW1hRG9jdW1lbnRBcnJheUVsZW1lbnQucHJvdG90eXBlLmNhc3QgPSBmdW5jdGlvbiguLi5hcmdzKSB7XG4gIHJldHVybiB0aGlzLiRwYXJlbnRTY2hlbWFUeXBlLmNhc3QoLi4uYXJncylbMF07XG59O1xuXG4vKipcbiAqIENhc3RzIGNvbnRlbnRzIGZvciBxdWVyaWVzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSAkY29uZFxuICogQHBhcmFtIHthbnl9IFt2YWxdXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5TY2hlbWFEb2N1bWVudEFycmF5RWxlbWVudC5wcm90b3R5cGUuZG9WYWxpZGF0ZSA9IGZ1bmN0aW9uKHZhbHVlLCBmbiwgc2NvcGUsIG9wdGlvbnMpIHtcbiAgY29uc3QgQ29uc3RydWN0b3IgPSBnZXRDb25zdHJ1Y3Rvcih0aGlzLmNhc3RlciwgdmFsdWUpO1xuXG4gIGlmICh2YWx1ZSAmJiAhKHZhbHVlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdmFsdWUgPSBuZXcgQ29uc3RydWN0b3IodmFsdWUsIHNjb3BlLCBudWxsLCBudWxsLCBvcHRpb25zICYmIG9wdGlvbnMuaW5kZXggIT0gbnVsbCA/IG9wdGlvbnMuaW5kZXggOiBudWxsKTtcbiAgfVxuXG4gIHJldHVybiBTY2hlbWFTdWJkb2N1bWVudC5wcm90b3R5cGUuZG9WYWxpZGF0ZS5jYWxsKHRoaXMsIHZhbHVlLCBmbiwgc2NvcGUsIG9wdGlvbnMpO1xufTtcblxuLyoqXG4gKiBDbG9uZSB0aGUgY3VycmVudCBTY2hlbWFUeXBlXG4gKlxuICogQHJldHVybiB7RG9jdW1lbnRBcnJheUVsZW1lbnR9IFRoZSBjbG9uZWQgaW5zdGFuY2VcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNjaGVtYURvY3VtZW50QXJyYXlFbGVtZW50LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLm9wdGlvbnMuJHBhcmVudFNjaGVtYVR5cGUgPSB0aGlzLiRwYXJlbnRTY2hlbWFUeXBlO1xuICBjb25zdCByZXQgPSBTY2hlbWFUeXBlLnByb3RvdHlwZS5jbG9uZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICBkZWxldGUgdGhpcy5vcHRpb25zLiRwYXJlbnRTY2hlbWFUeXBlO1xuXG4gIHJldC5jYXN0ZXIgPSB0aGlzLmNhc3RlcjtcbiAgcmV0LnNjaGVtYSA9IHRoaXMuc2NoZW1hO1xuXG4gIHJldHVybiByZXQ7XG59O1xuXG4vKiFcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gU2NoZW1hRG9jdW1lbnRBcnJheUVsZW1lbnQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/schema/documentArrayElement.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/schema/index.js":
/*!***************************************************!*\
  !*** ./node_modules/mongoose/lib/schema/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Module exports.\n */\n\n\n\nexports.Array = __webpack_require__(/*! ./array */ \"(ssr)/./node_modules/mongoose/lib/schema/array.js\");\nexports.BigInt = __webpack_require__(/*! ./bigint */ \"(ssr)/./node_modules/mongoose/lib/schema/bigint.js\");\nexports.Boolean = __webpack_require__(/*! ./boolean */ \"(ssr)/./node_modules/mongoose/lib/schema/boolean.js\");\nexports.Buffer = __webpack_require__(/*! ./buffer */ \"(ssr)/./node_modules/mongoose/lib/schema/buffer.js\");\nexports.Date = __webpack_require__(/*! ./date */ \"(ssr)/./node_modules/mongoose/lib/schema/date.js\");\nexports.Decimal128 = exports.Decimal = __webpack_require__(/*! ./decimal128 */ \"(ssr)/./node_modules/mongoose/lib/schema/decimal128.js\");\nexports.DocumentArray = __webpack_require__(/*! ./documentArray */ \"(ssr)/./node_modules/mongoose/lib/schema/documentArray.js\");\nexports.Map = __webpack_require__(/*! ./map */ \"(ssr)/./node_modules/mongoose/lib/schema/map.js\");\nexports.Mixed = __webpack_require__(/*! ./mixed */ \"(ssr)/./node_modules/mongoose/lib/schema/mixed.js\");\nexports.Number = __webpack_require__(/*! ./number */ \"(ssr)/./node_modules/mongoose/lib/schema/number.js\");\nexports.ObjectId = __webpack_require__(/*! ./objectId */ \"(ssr)/./node_modules/mongoose/lib/schema/objectId.js\");\nexports.String = __webpack_require__(/*! ./string */ \"(ssr)/./node_modules/mongoose/lib/schema/string.js\");\nexports.Subdocument = __webpack_require__(/*! ./subdocument */ \"(ssr)/./node_modules/mongoose/lib/schema/subdocument.js\");\nexports.UUID = __webpack_require__(/*! ./uuid */ \"(ssr)/./node_modules/mongoose/lib/schema/uuid.js\");\n\n// alias\n\nexports.Oid = exports.ObjectId;\nexports.Object = exports.Mixed;\nexports.Bool = exports.Boolean;\nexports.ObjectID = exports.ObjectId;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3NjaGVtYS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQ0E7QUFDQTtBQUNBOztBQUVhOztBQUViLHVHQUFrQztBQUNsQywwR0FBb0M7QUFDcEMsNkdBQXNDO0FBQ3RDLDBHQUFvQztBQUNwQyxvR0FBZ0M7QUFDaEMsa0JBQWtCLEdBQUcsbUhBQXlDO0FBQzlELCtIQUFrRDtBQUNsRCxpR0FBOEI7QUFDOUIsdUdBQWtDO0FBQ2xDLDBHQUFvQztBQUNwQyxnSEFBd0M7QUFDeEMsMEdBQW9DO0FBQ3BDLHlIQUE4QztBQUM5QyxvR0FBZ0M7O0FBRWhDOztBQUVBLFdBQVc7QUFDWCxjQUFjO0FBQ2QsWUFBWTtBQUNaLGdCQUFnQiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3NjaGVtYS9pbmRleC5qcz8xMzhmIl0sInNvdXJjZXNDb250ZW50IjpbIlxuLyohXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuQXJyYXkgPSByZXF1aXJlKCcuL2FycmF5Jyk7XG5leHBvcnRzLkJpZ0ludCA9IHJlcXVpcmUoJy4vYmlnaW50Jyk7XG5leHBvcnRzLkJvb2xlYW4gPSByZXF1aXJlKCcuL2Jvb2xlYW4nKTtcbmV4cG9ydHMuQnVmZmVyID0gcmVxdWlyZSgnLi9idWZmZXInKTtcbmV4cG9ydHMuRGF0ZSA9IHJlcXVpcmUoJy4vZGF0ZScpO1xuZXhwb3J0cy5EZWNpbWFsMTI4ID0gZXhwb3J0cy5EZWNpbWFsID0gcmVxdWlyZSgnLi9kZWNpbWFsMTI4Jyk7XG5leHBvcnRzLkRvY3VtZW50QXJyYXkgPSByZXF1aXJlKCcuL2RvY3VtZW50QXJyYXknKTtcbmV4cG9ydHMuTWFwID0gcmVxdWlyZSgnLi9tYXAnKTtcbmV4cG9ydHMuTWl4ZWQgPSByZXF1aXJlKCcuL21peGVkJyk7XG5leHBvcnRzLk51bWJlciA9IHJlcXVpcmUoJy4vbnVtYmVyJyk7XG5leHBvcnRzLk9iamVjdElkID0gcmVxdWlyZSgnLi9vYmplY3RJZCcpO1xuZXhwb3J0cy5TdHJpbmcgPSByZXF1aXJlKCcuL3N0cmluZycpO1xuZXhwb3J0cy5TdWJkb2N1bWVudCA9IHJlcXVpcmUoJy4vc3ViZG9jdW1lbnQnKTtcbmV4cG9ydHMuVVVJRCA9IHJlcXVpcmUoJy4vdXVpZCcpO1xuXG4vLyBhbGlhc1xuXG5leHBvcnRzLk9pZCA9IGV4cG9ydHMuT2JqZWN0SWQ7XG5leHBvcnRzLk9iamVjdCA9IGV4cG9ydHMuTWl4ZWQ7XG5leHBvcnRzLkJvb2wgPSBleHBvcnRzLkJvb2xlYW47XG5leHBvcnRzLk9iamVjdElEID0gZXhwb3J0cy5PYmplY3RJZDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/schema/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/schema/map.js":
/*!*************************************************!*\
  !*** ./node_modules/mongoose/lib/schema/map.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * ignore\n */\n\nconst MongooseMap = __webpack_require__(/*! ../types/map */ \"(ssr)/./node_modules/mongoose/lib/types/map.js\");\nconst SchemaMapOptions = __webpack_require__(/*! ../options/schemaMapOptions */ \"(ssr)/./node_modules/mongoose/lib/options/schemaMapOptions.js\");\nconst SchemaType = __webpack_require__(/*! ../schemaType */ \"(ssr)/./node_modules/mongoose/lib/schemaType.js\");\n/*!\n * ignore\n */\n\nclass SchemaMap extends SchemaType {\n  constructor(key, options) {\n    super(key, options, 'Map');\n    this.$isSchemaMap = true;\n  }\n\n  set(option, value) {\n    return SchemaType.set(option, value);\n  }\n\n  cast(val, doc, init) {\n    if (val instanceof MongooseMap) {\n      return val;\n    }\n\n    const path = this.path;\n\n    if (init) {\n      const map = new MongooseMap({}, path, doc, this.$__schemaType);\n\n      if (val instanceof global.Map) {\n        for (const key of val.keys()) {\n          let _val = val.get(key);\n          if (_val == null) {\n            _val = map.$__schemaType._castNullish(_val);\n          } else {\n            _val = map.$__schemaType.cast(_val, doc, true, null, { path: path + '.' + key });\n          }\n          map.$init(key, _val);\n        }\n      } else {\n        for (const key of Object.keys(val)) {\n          let _val = val[key];\n          if (_val == null) {\n            _val = map.$__schemaType._castNullish(_val);\n          } else {\n            _val = map.$__schemaType.cast(_val, doc, true, null, { path: path + '.' + key });\n          }\n          map.$init(key, _val);\n        }\n      }\n\n      return map;\n    }\n\n    return new MongooseMap(val, path, doc, this.$__schemaType);\n  }\n\n  clone() {\n    const schematype = super.clone();\n\n    if (this.$__schemaType != null) {\n      schematype.$__schemaType = this.$__schemaType.clone();\n    }\n    return schematype;\n  }\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaMap.schemaName = 'Map';\n\nSchemaMap.prototype.OptionsConstructor = SchemaMapOptions;\n\nSchemaMap.defaultOptions = {};\n\nmodule.exports = SchemaMap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3NjaGVtYS9tYXAuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixtQkFBTyxDQUFDLG9FQUFjO0FBQzFDLHlCQUF5QixtQkFBTyxDQUFDLGtHQUE2QjtBQUM5RCxtQkFBbUIsbUJBQU8sQ0FBQyxzRUFBZTtBQUMxQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxvQ0FBb0M7O0FBRXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1osbUVBQW1FLHdCQUF3QjtBQUMzRjtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1osbUVBQW1FLHdCQUF3QjtBQUMzRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9zY2hlbWEvbWFwLmpzP2VjMmIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKiFcbiAqIGlnbm9yZVxuICovXG5cbmNvbnN0IE1vbmdvb3NlTWFwID0gcmVxdWlyZSgnLi4vdHlwZXMvbWFwJyk7XG5jb25zdCBTY2hlbWFNYXBPcHRpb25zID0gcmVxdWlyZSgnLi4vb3B0aW9ucy9zY2hlbWFNYXBPcHRpb25zJyk7XG5jb25zdCBTY2hlbWFUeXBlID0gcmVxdWlyZSgnLi4vc2NoZW1hVHlwZScpO1xuLyohXG4gKiBpZ25vcmVcbiAqL1xuXG5jbGFzcyBTY2hlbWFNYXAgZXh0ZW5kcyBTY2hlbWFUeXBlIHtcbiAgY29uc3RydWN0b3Ioa2V5LCBvcHRpb25zKSB7XG4gICAgc3VwZXIoa2V5LCBvcHRpb25zLCAnTWFwJyk7XG4gICAgdGhpcy4kaXNTY2hlbWFNYXAgPSB0cnVlO1xuICB9XG5cbiAgc2V0KG9wdGlvbiwgdmFsdWUpIHtcbiAgICByZXR1cm4gU2NoZW1hVHlwZS5zZXQob3B0aW9uLCB2YWx1ZSk7XG4gIH1cblxuICBjYXN0KHZhbCwgZG9jLCBpbml0KSB7XG4gICAgaWYgKHZhbCBpbnN0YW5jZW9mIE1vbmdvb3NlTWFwKSB7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cblxuICAgIGNvbnN0IHBhdGggPSB0aGlzLnBhdGg7XG5cbiAgICBpZiAoaW5pdCkge1xuICAgICAgY29uc3QgbWFwID0gbmV3IE1vbmdvb3NlTWFwKHt9LCBwYXRoLCBkb2MsIHRoaXMuJF9fc2NoZW1hVHlwZSk7XG5cbiAgICAgIGlmICh2YWwgaW5zdGFuY2VvZiBnbG9iYWwuTWFwKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHZhbC5rZXlzKCkpIHtcbiAgICAgICAgICBsZXQgX3ZhbCA9IHZhbC5nZXQoa2V5KTtcbiAgICAgICAgICBpZiAoX3ZhbCA9PSBudWxsKSB7XG4gICAgICAgICAgICBfdmFsID0gbWFwLiRfX3NjaGVtYVR5cGUuX2Nhc3ROdWxsaXNoKF92YWwpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdmFsID0gbWFwLiRfX3NjaGVtYVR5cGUuY2FzdChfdmFsLCBkb2MsIHRydWUsIG51bGwsIHsgcGF0aDogcGF0aCArICcuJyArIGtleSB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbWFwLiRpbml0KGtleSwgX3ZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHZhbCkpIHtcbiAgICAgICAgICBsZXQgX3ZhbCA9IHZhbFtrZXldO1xuICAgICAgICAgIGlmIChfdmFsID09IG51bGwpIHtcbiAgICAgICAgICAgIF92YWwgPSBtYXAuJF9fc2NoZW1hVHlwZS5fY2FzdE51bGxpc2goX3ZhbCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF92YWwgPSBtYXAuJF9fc2NoZW1hVHlwZS5jYXN0KF92YWwsIGRvYywgdHJ1ZSwgbnVsbCwgeyBwYXRoOiBwYXRoICsgJy4nICsga2V5IH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtYXAuJGluaXQoa2V5LCBfdmFsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWFwO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgTW9uZ29vc2VNYXAodmFsLCBwYXRoLCBkb2MsIHRoaXMuJF9fc2NoZW1hVHlwZSk7XG4gIH1cblxuICBjbG9uZSgpIHtcbiAgICBjb25zdCBzY2hlbWF0eXBlID0gc3VwZXIuY2xvbmUoKTtcblxuICAgIGlmICh0aGlzLiRfX3NjaGVtYVR5cGUgIT0gbnVsbCkge1xuICAgICAgc2NoZW1hdHlwZS4kX19zY2hlbWFUeXBlID0gdGhpcy4kX19zY2hlbWFUeXBlLmNsb25lKCk7XG4gICAgfVxuICAgIHJldHVybiBzY2hlbWF0eXBlO1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBzY2hlbWEgdHlwZSdzIG5hbWUsIHRvIGRlZmVuZCBhZ2FpbnN0IG1pbmlmaWVycyB0aGF0IG1hbmdsZVxuICogZnVuY3Rpb24gbmFtZXMuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuU2NoZW1hTWFwLnNjaGVtYU5hbWUgPSAnTWFwJztcblxuU2NoZW1hTWFwLnByb3RvdHlwZS5PcHRpb25zQ29uc3RydWN0b3IgPSBTY2hlbWFNYXBPcHRpb25zO1xuXG5TY2hlbWFNYXAuZGVmYXVsdE9wdGlvbnMgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBTY2hlbWFNYXA7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/schema/map.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/schema/mixed.js":
/*!***************************************************!*\
  !*** ./node_modules/mongoose/lib/schema/mixed.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Module dependencies.\n */\n\n\n\nconst SchemaType = __webpack_require__(/*! ../schemaType */ \"(ssr)/./node_modules/mongoose/lib/schemaType.js\");\nconst symbols = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/mongoose/lib/schema/symbols.js\");\nconst isObject = __webpack_require__(/*! ../helpers/isObject */ \"(ssr)/./node_modules/mongoose/lib/helpers/isObject.js\");\nconst utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\n\n/**\n * Mixed SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaMixed(path, options) {\n  if (options && options.default) {\n    const def = options.default;\n    if (Array.isArray(def) && def.length === 0) {\n      // make sure empty array defaults are handled\n      options.default = Array;\n    } else if (!options.shared && isObject(def) && Object.keys(def).length === 0) {\n      // prevent odd \"shared\" objects between documents\n      options.default = function() {\n        return {};\n      };\n    }\n  }\n\n  SchemaType.call(this, path, options, 'Mixed');\n\n  this[symbols.schemaMixedSymbol] = true;\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaMixed.schemaName = 'Mixed';\n\nSchemaMixed.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaMixed.prototype = Object.create(SchemaType.prototype);\nSchemaMixed.prototype.constructor = SchemaMixed;\n\n/**\n * Attaches a getter for all Mixed paths.\n *\n * #### Example:\n *\n *     // Hide the 'hidden' path\n *     mongoose.Schema.Mixed.get(v => Object.assign({}, v, { hidden: null }));\n *\n *     const Model = mongoose.model('Test', new Schema({ test: {} }));\n *     new Model({ test: { hidden: 'Secret!' } }).test.hidden; // null\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaMixed.get = SchemaType.get;\n\n/**\n * Sets a default option for all Mixed instances.\n *\n * #### Example:\n *\n *     // Make all mixed instances have `required` of true by default.\n *     mongoose.Schema.Mixed.set('required', true);\n *\n *     const User = mongoose.model('User', new Schema({ test: mongoose.Mixed }));\n *     new User({ }).validateSync().errors.test.message; // Path `test` is required.\n *\n * @param {String} option The option you'd like to set the value for\n * @param {Any} value value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaMixed.set = SchemaType.set;\n\nSchemaMixed.setters = [];\n\n/**\n * Casts `val` for Mixed.\n *\n * _this is a no-op_\n *\n * @param {Object} value to cast\n * @api private\n */\n\nSchemaMixed.prototype.cast = function(val) {\n  if (val instanceof Error) {\n    return utils.errorToPOJO(val);\n  }\n  return val;\n};\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $cond\n * @param {any} [val]\n * @api private\n */\n\nSchemaMixed.prototype.castForQuery = function($cond, val) {\n  return val;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaMixed;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3NjaGVtYS9taXhlZC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWIsbUJBQW1CLG1CQUFPLENBQUMsc0VBQWU7QUFDMUMsZ0JBQWdCLG1CQUFPLENBQUMsc0VBQVc7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsa0ZBQXFCO0FBQzlDLGNBQWMsbUJBQU8sQ0FBQyw0REFBVTs7QUFFaEM7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELE9BQU8sY0FBYztBQUMzRTtBQUNBLHlEQUF5RCxVQUFVO0FBQ25FLG1CQUFtQixRQUFRLHFCQUFxQixlQUFlO0FBQy9EO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELHNCQUFzQjtBQUM5RSxtQkFBbUIsc0NBQXNDO0FBQ3pEO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsS0FBSztBQUNoQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxLQUFLO0FBQ2hCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3NjaGVtYS9taXhlZC5qcz9jYTgwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IFNjaGVtYVR5cGUgPSByZXF1aXJlKCcuLi9zY2hlbWFUeXBlJyk7XG5jb25zdCBzeW1ib2xzID0gcmVxdWlyZSgnLi9zeW1ib2xzJyk7XG5jb25zdCBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNPYmplY3QnKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBNaXhlZCBTY2hlbWFUeXBlIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQGluaGVyaXRzIFNjaGVtYVR5cGVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gU2NoZW1hTWl4ZWQocGF0aCwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmRlZmF1bHQpIHtcbiAgICBjb25zdCBkZWYgPSBvcHRpb25zLmRlZmF1bHQ7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGVmKSAmJiBkZWYubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyBtYWtlIHN1cmUgZW1wdHkgYXJyYXkgZGVmYXVsdHMgYXJlIGhhbmRsZWRcbiAgICAgIG9wdGlvbnMuZGVmYXVsdCA9IEFycmF5O1xuICAgIH0gZWxzZSBpZiAoIW9wdGlvbnMuc2hhcmVkICYmIGlzT2JqZWN0KGRlZikgJiYgT2JqZWN0LmtleXMoZGVmKS5sZW5ndGggPT09IDApIHtcbiAgICAgIC8vIHByZXZlbnQgb2RkIFwic2hhcmVkXCIgb2JqZWN0cyBiZXR3ZWVuIGRvY3VtZW50c1xuICAgICAgb3B0aW9ucy5kZWZhdWx0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgU2NoZW1hVHlwZS5jYWxsKHRoaXMsIHBhdGgsIG9wdGlvbnMsICdNaXhlZCcpO1xuXG4gIHRoaXNbc3ltYm9scy5zY2hlbWFNaXhlZFN5bWJvbF0gPSB0cnVlO1xufVxuXG4vKipcbiAqIFRoaXMgc2NoZW1hIHR5cGUncyBuYW1lLCB0byBkZWZlbmQgYWdhaW5zdCBtaW5pZmllcnMgdGhhdCBtYW5nbGVcbiAqIGZ1bmN0aW9uIG5hbWVzLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblNjaGVtYU1peGVkLnNjaGVtYU5hbWUgPSAnTWl4ZWQnO1xuXG5TY2hlbWFNaXhlZC5kZWZhdWx0T3B0aW9ucyA9IHt9O1xuXG4vKiFcbiAqIEluaGVyaXRzIGZyb20gU2NoZW1hVHlwZS5cbiAqL1xuU2NoZW1hTWl4ZWQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTY2hlbWFUeXBlLnByb3RvdHlwZSk7XG5TY2hlbWFNaXhlZC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTY2hlbWFNaXhlZDtcblxuLyoqXG4gKiBBdHRhY2hlcyBhIGdldHRlciBmb3IgYWxsIE1peGVkIHBhdGhzLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgLy8gSGlkZSB0aGUgJ2hpZGRlbicgcGF0aFxuICogICAgIG1vbmdvb3NlLlNjaGVtYS5NaXhlZC5nZXQodiA9PiBPYmplY3QuYXNzaWduKHt9LCB2LCB7IGhpZGRlbjogbnVsbCB9KSk7XG4gKlxuICogICAgIGNvbnN0IE1vZGVsID0gbW9uZ29vc2UubW9kZWwoJ1Rlc3QnLCBuZXcgU2NoZW1hKHsgdGVzdDoge30gfSkpO1xuICogICAgIG5ldyBNb2RlbCh7IHRlc3Q6IHsgaGlkZGVuOiAnU2VjcmV0IScgfSB9KS50ZXN0LmhpZGRlbjsgLy8gbnVsbFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGdldHRlclxuICogQHJldHVybiB7dGhpc31cbiAqIEBmdW5jdGlvbiBnZXRcbiAqIEBzdGF0aWNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU2NoZW1hTWl4ZWQuZ2V0ID0gU2NoZW1hVHlwZS5nZXQ7XG5cbi8qKlxuICogU2V0cyBhIGRlZmF1bHQgb3B0aW9uIGZvciBhbGwgTWl4ZWQgaW5zdGFuY2VzLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgLy8gTWFrZSBhbGwgbWl4ZWQgaW5zdGFuY2VzIGhhdmUgYHJlcXVpcmVkYCBvZiB0cnVlIGJ5IGRlZmF1bHQuXG4gKiAgICAgbW9uZ29vc2UuU2NoZW1hLk1peGVkLnNldCgncmVxdWlyZWQnLCB0cnVlKTtcbiAqXG4gKiAgICAgY29uc3QgVXNlciA9IG1vbmdvb3NlLm1vZGVsKCdVc2VyJywgbmV3IFNjaGVtYSh7IHRlc3Q6IG1vbmdvb3NlLk1peGVkIH0pKTtcbiAqICAgICBuZXcgVXNlcih7IH0pLnZhbGlkYXRlU3luYygpLmVycm9ycy50ZXN0Lm1lc3NhZ2U7IC8vIFBhdGggYHRlc3RgIGlzIHJlcXVpcmVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb24gVGhlIG9wdGlvbiB5b3UnZCBsaWtlIHRvIHNldCB0aGUgdmFsdWUgZm9yXG4gKiBAcGFyYW0ge0FueX0gdmFsdWUgdmFsdWUgZm9yIG9wdGlvblxuICogQHJldHVybiB7dW5kZWZpbmVkfVxuICogQGZ1bmN0aW9uIHNldFxuICogQHN0YXRpY1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5TY2hlbWFNaXhlZC5zZXQgPSBTY2hlbWFUeXBlLnNldDtcblxuU2NoZW1hTWl4ZWQuc2V0dGVycyA9IFtdO1xuXG4vKipcbiAqIENhc3RzIGB2YWxgIGZvciBNaXhlZC5cbiAqXG4gKiBfdGhpcyBpcyBhIG5vLW9wX1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZSB0byBjYXN0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5TY2hlbWFNaXhlZC5wcm90b3R5cGUuY2FzdCA9IGZ1bmN0aW9uKHZhbCkge1xuICBpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gdXRpbHMuZXJyb3JUb1BPSk8odmFsKTtcbiAgfVxuICByZXR1cm4gdmFsO1xufTtcblxuLyoqXG4gKiBDYXN0cyBjb250ZW50cyBmb3IgcXVlcmllcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gJGNvbmRcbiAqIEBwYXJhbSB7YW55fSBbdmFsXVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU2NoZW1hTWl4ZWQucHJvdG90eXBlLmNhc3RGb3JRdWVyeSA9IGZ1bmN0aW9uKCRjb25kLCB2YWwpIHtcbiAgcmV0dXJuIHZhbDtcbn07XG5cbi8qIVxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBTY2hlbWFNaXhlZDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/schema/mixed.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/schema/number.js":
/*!****************************************************!*\
  !*** ./node_modules/mongoose/lib/schema/number.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module requirements.\n */\n\nconst MongooseError = __webpack_require__(/*! ../error/index */ \"(ssr)/./node_modules/mongoose/lib/error/index.js\");\nconst SchemaNumberOptions = __webpack_require__(/*! ../options/schemaNumberOptions */ \"(ssr)/./node_modules/mongoose/lib/options/schemaNumberOptions.js\");\nconst SchemaType = __webpack_require__(/*! ../schemaType */ \"(ssr)/./node_modules/mongoose/lib/schemaType.js\");\nconst castNumber = __webpack_require__(/*! ../cast/number */ \"(ssr)/./node_modules/mongoose/lib/cast/number.js\");\nconst handleBitwiseOperator = __webpack_require__(/*! ./operators/bitwise */ \"(ssr)/./node_modules/mongoose/lib/schema/operators/bitwise.js\");\nconst utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\n\nconst CastError = SchemaType.CastError;\n\n/**\n * Number SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaNumber(key, options) {\n  SchemaType.call(this, key, options, 'Number');\n}\n\n/**\n * Attaches a getter for all Number instances.\n *\n * #### Example:\n *\n *     // Make all numbers round down\n *     mongoose.Number.get(function(v) { return Math.floor(v); });\n *\n *     const Model = mongoose.model('Test', new Schema({ test: Number }));\n *     new Model({ test: 3.14 }).test; // 3\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaNumber.get = SchemaType.get;\n\n/**\n * Sets a default option for all Number instances.\n *\n * #### Example:\n *\n *     // Make all numbers have option `min` equal to 0.\n *     mongoose.Schema.Number.set('min', 0);\n *\n *     const Order = mongoose.model('Order', new Schema({ amount: Number }));\n *     new Order({ amount: -10 }).validateSync().errors.amount.message; // Path `amount` must be larger than 0.\n *\n * @param {String} option The option you'd like to set the value for\n * @param {Any} value value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaNumber.set = SchemaType.set;\n\nSchemaNumber.setters = [];\n\n/*!\n * ignore\n */\n\nSchemaNumber._cast = castNumber;\n\n/**\n * Get/set the function used to cast arbitrary values to numbers.\n *\n * #### Example:\n *\n *     // Make Mongoose cast empty strings '' to 0 for paths declared as numbers\n *     const original = mongoose.Number.cast();\n *     mongoose.Number.cast(v => {\n *       if (v === '') { return 0; }\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Number.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaNumber.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nSchemaNumber._defaultCaster = v => {\n  if (typeof v !== 'number') {\n    throw new Error();\n  }\n  return v;\n};\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaNumber.schemaName = 'Number';\n\nSchemaNumber.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaNumber.prototype = Object.create(SchemaType.prototype);\nSchemaNumber.prototype.constructor = SchemaNumber;\nSchemaNumber.prototype.OptionsConstructor = SchemaNumberOptions;\n\n/*!\n * ignore\n */\n\nSchemaNumber._checkRequired = v => typeof v === 'number' || v instanceof Number;\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaNumber.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaNumber.prototype.checkRequired = function checkRequired(value, doc) {\n  if (typeof value === 'object' && SchemaType._isRef(this, value, doc, true)) {\n    return value != null;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired === 'function' ?\n    this.constructor.checkRequired() :\n    SchemaNumber.checkRequired();\n\n  return _checkRequired(value);\n};\n\n/**\n * Sets a minimum number validator.\n *\n * #### Example:\n *\n *     const s = new Schema({ n: { type: Number, min: 10 })\n *     const M = db.model('M', s)\n *     const m = new M({ n: 9 })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.n = 10;\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MIN} token which will be replaced with the invalid value\n *     const min = [10, 'The value of path `{PATH}` ({VALUE}) is beneath the limit ({MIN}).'];\n *     const schema = new Schema({ n: { type: Number, min: min })\n *     const M = mongoose.model('Measurement', schema);\n *     const s= new M({ n: 4 });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `n` (4) is beneath the limit (10).\n *     })\n *\n * @param {Number} value minimum number\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages https://mongoosejs.com/docs/api/error.html#Error.messages\n * @api public\n */\n\nSchemaNumber.prototype.min = function(value, message) {\n  if (this.minValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.minValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.Number.min;\n    msg = msg.replace(/{MIN}/, value);\n    this.validators.push({\n      validator: this.minValidator = function(v) {\n        return v == null || v >= value;\n      },\n      message: msg,\n      type: 'min',\n      min: value\n    });\n  }\n\n  return this;\n};\n\n/**\n * Sets a maximum number validator.\n *\n * #### Example:\n *\n *     const s = new Schema({ n: { type: Number, max: 10 })\n *     const M = db.model('M', s)\n *     const m = new M({ n: 11 })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.n = 10;\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAX} token which will be replaced with the invalid value\n *     const max = [10, 'The value of path `{PATH}` ({VALUE}) exceeds the limit ({MAX}).'];\n *     const schema = new Schema({ n: { type: Number, max: max })\n *     const M = mongoose.model('Measurement', schema);\n *     const s= new M({ n: 4 });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `n` (4) exceeds the limit (10).\n *     })\n *\n * @param {Number} maximum number\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages https://mongoosejs.com/docs/api/error.html#Error.messages\n * @api public\n */\n\nSchemaNumber.prototype.max = function(value, message) {\n  if (this.maxValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.maxValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.Number.max;\n    msg = msg.replace(/{MAX}/, value);\n    this.validators.push({\n      validator: this.maxValidator = function(v) {\n        return v == null || v <= value;\n      },\n      message: msg,\n      type: 'max',\n      max: value\n    });\n  }\n\n  return this;\n};\n\n/**\n * Sets a enum validator\n *\n * #### Example:\n *\n *     const s = new Schema({ n: { type: Number, enum: [1, 2, 3] });\n *     const M = db.model('M', s);\n *\n *     const m = new M({ n: 4 });\n *     await m.save(); // throws validation error\n *\n *     m.n = 3;\n *     await m.save(); // succeeds\n *\n * @param {Array} values allowed values\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages https://mongoosejs.com/docs/api/error.html#Error.messages\n * @api public\n */\n\nSchemaNumber.prototype.enum = function(values, message) {\n  if (this.enumValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.enumValidator;\n    }, this);\n  }\n\n\n  if (!Array.isArray(values)) {\n    const isObjectSyntax = utils.isPOJO(values) && values.values != null;\n    if (isObjectSyntax) {\n      message = values.message;\n      values = values.values;\n    } else if (typeof values === 'number') {\n      values = Array.prototype.slice.call(arguments);\n      message = null;\n    }\n\n    if (utils.isPOJO(values)) {\n      values = Object.values(values);\n    }\n    message = message || MongooseError.messages.Number.enum;\n  }\n\n  message = message == null ? MongooseError.messages.Number.enum : message;\n\n  this.enumValidator = v => v == null || values.indexOf(v) !== -1;\n  this.validators.push({\n    validator: this.enumValidator,\n    message: message,\n    type: 'enum',\n    enumValues: values\n  });\n\n  return this;\n};\n\n/**\n * Casts to number\n *\n * @param {Object} value value to cast\n * @param {Document} doc document that triggers the casting\n * @param {Boolean} init\n * @api private\n */\n\nSchemaNumber.prototype.cast = function(value, doc, init) {\n  if (typeof value !== 'number' && SchemaType._isRef(this, value, doc, init)) {\n    if (value == null || utils.isNonBuiltinObject(value)) {\n      return this._castRef(value, doc, init);\n    }\n  }\n\n  const val = value && typeof value._id !== 'undefined' ?\n    value._id : // documents\n    value;\n\n  let castNumber;\n  if (typeof this._castFunction === 'function') {\n    castNumber = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castNumber = this.constructor.cast();\n  } else {\n    castNumber = SchemaNumber.cast();\n  }\n\n  try {\n    return castNumber(val);\n  } catch (err) {\n    throw new CastError('Number', val, this.path, err, this);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\nfunction handleArray(val) {\n  const _this = this;\n  if (!Array.isArray(val)) {\n    return [this.cast(val)];\n  }\n  return val.map(function(m) {\n    return _this.cast(m);\n  });\n}\n\nSchemaNumber.prototype.$conditionalHandlers = {\n  ...SchemaType.prototype.$conditionalHandlers,\n  $bitsAllClear: handleBitwiseOperator,\n  $bitsAnyClear: handleBitwiseOperator,\n  $bitsAllSet: handleBitwiseOperator,\n  $bitsAnySet: handleBitwiseOperator,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle,\n  $mod: handleArray\n};\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaNumber.prototype.castForQuery = function($conditional, val, context) {\n  let handler;\n  if ($conditional != null) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new CastError('number', val, this.path, null, this);\n    }\n    return handler.call(this, val, context);\n  }\n\n  try {\n    val = this.applySetters(val, context);\n  } catch (err) {\n    if (err instanceof CastError && err.path === this.path && this.$fullPath != null) {\n      err.path = this.$fullPath;\n    }\n    throw err;\n  }\n\n  return val;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaNumber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/schema/number.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/schema/objectId.js":
/*!******************************************************!*\
  !*** ./node_modules/mongoose/lib/schema/objectId.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Module dependencies.\n */\n\n\n\nconst SchemaObjectIdOptions = __webpack_require__(/*! ../options/schemaObjectIdOptions */ \"(ssr)/./node_modules/mongoose/lib/options/schemaObjectIdOptions.js\");\nconst SchemaType = __webpack_require__(/*! ../schemaType */ \"(ssr)/./node_modules/mongoose/lib/schemaType.js\");\nconst castObjectId = __webpack_require__(/*! ../cast/objectid */ \"(ssr)/./node_modules/mongoose/lib/cast/objectid.js\");\nconst getConstructorName = __webpack_require__(/*! ../helpers/getConstructorName */ \"(ssr)/./node_modules/mongoose/lib/helpers/getConstructorName.js\");\nconst oid = __webpack_require__(/*! ../types/objectid */ \"(ssr)/./node_modules/mongoose/lib/types/objectid.js\");\nconst isBsonType = __webpack_require__(/*! ../helpers/isBsonType */ \"(ssr)/./node_modules/mongoose/lib/helpers/isBsonType.js\");\nconst utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\n\nconst CastError = SchemaType.CastError;\nlet Document;\n\n/**\n * ObjectId SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaObjectId(key, options) {\n  const isKeyHexStr = typeof key === 'string' && key.length === 24 && /^[a-f0-9]+$/i.test(key);\n  const suppressWarning = options && options.suppressWarning;\n  if ((isKeyHexStr || typeof key === 'undefined') && !suppressWarning) {\n    utils.warn('mongoose: To create a new ObjectId please try ' +\n      '`Mongoose.Types.ObjectId` instead of using ' +\n      '`Mongoose.Schema.ObjectId`. Set the `suppressWarning` option if ' +\n      'you\\'re trying to create a hex char path in your schema.');\n  }\n  SchemaType.call(this, key, options, 'ObjectId');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaObjectId.schemaName = 'ObjectId';\n\nSchemaObjectId.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaObjectId.prototype = Object.create(SchemaType.prototype);\nSchemaObjectId.prototype.constructor = SchemaObjectId;\nSchemaObjectId.prototype.OptionsConstructor = SchemaObjectIdOptions;\n\n/**\n * Attaches a getter for all ObjectId instances\n *\n * #### Example:\n *\n *     // Always convert to string when getting an ObjectId\n *     mongoose.ObjectId.get(v => v.toString());\n *\n *     const Model = mongoose.model('Test', new Schema({}));\n *     typeof (new Model({})._id); // 'string'\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaObjectId.get = SchemaType.get;\n\n/**\n * Sets a default option for all ObjectId instances.\n *\n * #### Example:\n *\n *     // Make all object ids have option `required` equal to true.\n *     mongoose.Schema.ObjectId.set('required', true);\n *\n *     const Order = mongoose.model('Order', new Schema({ userId: ObjectId }));\n *     new Order({ }).validateSync().errors.userId.message; // Path `userId` is required.\n *\n * @param {String} option The option you'd like to set the value for\n * @param {Any} value value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaObjectId.set = SchemaType.set;\n\nSchemaObjectId.setters = [];\n\n/**\n * Adds an auto-generated ObjectId default if turnOn is true.\n * @param {Boolean} turnOn auto generated ObjectId defaults\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaObjectId.prototype.auto = function(turnOn) {\n  if (turnOn) {\n    this.default(defaultId);\n    this.set(resetId);\n  }\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nSchemaObjectId._checkRequired = v => isBsonType(v, 'ObjectId');\n\n/*!\n * ignore\n */\n\nSchemaObjectId._cast = castObjectId;\n\n/**\n * Get/set the function used to cast arbitrary values to objectids.\n *\n * #### Example:\n *\n *     // Make Mongoose only try to cast length 24 strings. By default, any 12\n *     // char string is a valid ObjectId.\n *     const original = mongoose.ObjectId.cast();\n *     mongoose.ObjectId.cast(v => {\n *       assert.ok(typeof v !== 'string' || v.length === 24);\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.ObjectId.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaObjectId.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nSchemaObjectId._defaultCaster = v => {\n  if (!(isBsonType(v, 'ObjectId'))) {\n    throw new Error(v + ' is not an instance of ObjectId');\n  }\n  return v;\n};\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * #### Example:\n *\n *     // Allow empty strings to pass `required` check\n *     mongoose.Schema.Types.String.checkRequired(v => v != null);\n *\n *     const M = mongoose.model({ str: { type: String, required: true } });\n *     new M({ str: '' }).validateSync(); // `null`, validation passes!\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaObjectId.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaObjectId.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired === 'function' ?\n    this.constructor.checkRequired() :\n    SchemaObjectId.checkRequired();\n\n  return _checkRequired(value);\n};\n\n/**\n * Casts to ObjectId\n *\n * @param {Object} value\n * @param {Object} doc\n * @param {Boolean} init whether this is an initialization cast\n * @api private\n */\n\nSchemaObjectId.prototype.cast = function(value, doc, init) {\n  if (!(isBsonType(value, 'ObjectId')) && SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n    if ((getConstructorName(value) || '').toLowerCase() === 'objectid') {\n      return new oid(value.toHexString());\n    }\n\n    if (value == null || utils.isNonBuiltinObject(value)) {\n      return this._castRef(value, doc, init);\n    }\n  }\n\n  let castObjectId;\n  if (typeof this._castFunction === 'function') {\n    castObjectId = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castObjectId = this.constructor.cast();\n  } else {\n    castObjectId = SchemaObjectId.cast();\n  }\n\n  try {\n    return castObjectId(value);\n  } catch (error) {\n    throw new CastError('ObjectId', value, this.path, error, this);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\nSchemaObjectId.prototype.$conditionalHandlers = {\n  ...SchemaType.prototype.$conditionalHandlers,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle\n};\n\n/*!\n * ignore\n */\n\nfunction defaultId() {\n  return new oid();\n}\n\ndefaultId.$runBeforeSetters = true;\n\nfunction resetId(v) {\n  Document || (Document = __webpack_require__(/*! ../document */ \"(ssr)/./node_modules/mongoose/lib/document.js\"));\n\n  if (this instanceof Document) {\n    if (v === void 0) {\n      const _v = new oid();\n      return _v;\n    }\n  }\n\n  return v;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaObjectId;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/schema/objectId.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/schema/operators/bitwise.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongoose/lib/schema/operators/bitwise.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Module requirements.\n */\n\n\n\nconst CastError = __webpack_require__(/*! ../../error/cast */ \"(ssr)/./node_modules/mongoose/lib/error/cast.js\");\n\n/*!\n * ignore\n */\n\nfunction handleBitwiseOperator(val) {\n  const _this = this;\n  if (Array.isArray(val)) {\n    return val.map(function(v) {\n      return _castNumber(_this.path, v);\n    });\n  } else if (Buffer.isBuffer(val)) {\n    return val;\n  }\n  // Assume trying to cast to number\n  return _castNumber(_this.path, val);\n}\n\n/*!\n * ignore\n */\n\nfunction _castNumber(path, num) {\n  const v = Number(num);\n  if (isNaN(v)) {\n    throw new CastError('number', num, path);\n  }\n  return v;\n}\n\nmodule.exports = handleBitwiseOperator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3NjaGVtYS9vcGVyYXRvcnMvYml0d2lzZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWIsa0JBQWtCLG1CQUFPLENBQUMseUVBQWtCOztBQUU1QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9zY2hlbWEvb3BlcmF0b3JzL2JpdHdpc2UuanM/MDUzOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIE1vZHVsZSByZXF1aXJlbWVudHMuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBDYXN0RXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9jYXN0Jyk7XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxuZnVuY3Rpb24gaGFuZGxlQml0d2lzZU9wZXJhdG9yKHZhbCkge1xuICBjb25zdCBfdGhpcyA9IHRoaXM7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICByZXR1cm4gdmFsLm1hcChmdW5jdGlvbih2KSB7XG4gICAgICByZXR1cm4gX2Nhc3ROdW1iZXIoX3RoaXMucGF0aCwgdik7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICByZXR1cm4gdmFsO1xuICB9XG4gIC8vIEFzc3VtZSB0cnlpbmcgdG8gY2FzdCB0byBudW1iZXJcbiAgcmV0dXJuIF9jYXN0TnVtYmVyKF90aGlzLnBhdGgsIHZhbCk7XG59XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxuZnVuY3Rpb24gX2Nhc3ROdW1iZXIocGF0aCwgbnVtKSB7XG4gIGNvbnN0IHYgPSBOdW1iZXIobnVtKTtcbiAgaWYgKGlzTmFOKHYpKSB7XG4gICAgdGhyb3cgbmV3IENhc3RFcnJvcignbnVtYmVyJywgbnVtLCBwYXRoKTtcbiAgfVxuICByZXR1cm4gdjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYW5kbGVCaXR3aXNlT3BlcmF0b3I7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/schema/operators/bitwise.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/schema/operators/exists.js":
/*!**************************************************************!*\
  !*** ./node_modules/mongoose/lib/schema/operators/exists.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst castBoolean = __webpack_require__(/*! ../../cast/boolean */ \"(ssr)/./node_modules/mongoose/lib/cast/boolean.js\");\n\n/*!\n * ignore\n */\n\nmodule.exports = function(val) {\n  const path = this != null ? this.path : null;\n  return castBoolean(val, path);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3NjaGVtYS9vcGVyYXRvcnMvZXhpc3RzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLG9CQUFvQixtQkFBTyxDQUFDLDZFQUFvQjs7QUFFaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvc2NoZW1hL29wZXJhdG9ycy9leGlzdHMuanM/OTBhZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNhc3RCb29sZWFuID0gcmVxdWlyZSgnLi4vLi4vY2FzdC9ib29sZWFuJyk7XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwpIHtcbiAgY29uc3QgcGF0aCA9IHRoaXMgIT0gbnVsbCA/IHRoaXMucGF0aCA6IG51bGw7XG4gIHJldHVybiBjYXN0Qm9vbGVhbih2YWwsIHBhdGgpO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/schema/operators/exists.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/schema/operators/geospatial.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongoose/lib/schema/operators/geospatial.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Module requirements.\n */\n\n\n\nconst castArraysOfNumbers = (__webpack_require__(/*! ./helpers */ \"(ssr)/./node_modules/mongoose/lib/schema/operators/helpers.js\").castArraysOfNumbers);\nconst castToNumber = (__webpack_require__(/*! ./helpers */ \"(ssr)/./node_modules/mongoose/lib/schema/operators/helpers.js\").castToNumber);\n\n/*!\n * ignore\n */\n\nexports.cast$geoIntersects = cast$geoIntersects;\nexports.cast$near = cast$near;\nexports.cast$within = cast$within;\n\nfunction cast$near(val) {\n  const SchemaArray = __webpack_require__(/*! ../array */ \"(ssr)/./node_modules/mongoose/lib/schema/array.js\");\n\n  if (Array.isArray(val)) {\n    castArraysOfNumbers(val, this);\n    return val;\n  }\n\n  _castMinMaxDistance(this, val);\n\n  if (val && val.$geometry) {\n    return cast$geometry(val, this);\n  }\n\n  if (!Array.isArray(val)) {\n    throw new TypeError('$near must be either an array or an object ' +\n      'with a $geometry property');\n  }\n\n  return SchemaArray.prototype.castForQuery.call(this, null, val);\n}\n\nfunction cast$geometry(val, self) {\n  switch (val.$geometry.type) {\n    case 'Polygon':\n    case 'LineString':\n    case 'Point':\n      castArraysOfNumbers(val.$geometry.coordinates, self);\n      break;\n    default:\n      // ignore unknowns\n      break;\n  }\n\n  _castMinMaxDistance(self, val);\n\n  return val;\n}\n\nfunction cast$within(val) {\n  _castMinMaxDistance(this, val);\n\n  if (val.$box || val.$polygon) {\n    const type = val.$box ? '$box' : '$polygon';\n    val[type].forEach(arr => {\n      if (!Array.isArray(arr)) {\n        const msg = 'Invalid $within $box argument. '\n            + 'Expected an array, received ' + arr;\n        throw new TypeError(msg);\n      }\n      arr.forEach((v, i) => {\n        arr[i] = castToNumber.call(this, v);\n      });\n    });\n  } else if (val.$center || val.$centerSphere) {\n    const type = val.$center ? '$center' : '$centerSphere';\n    val[type].forEach((item, i) => {\n      if (Array.isArray(item)) {\n        item.forEach((v, j) => {\n          item[j] = castToNumber.call(this, v);\n        });\n      } else {\n        val[type][i] = castToNumber.call(this, item);\n      }\n    });\n  } else if (val.$geometry) {\n    cast$geometry(val, this);\n  }\n\n  return val;\n}\n\nfunction cast$geoIntersects(val) {\n  const geo = val.$geometry;\n  if (!geo) {\n    return;\n  }\n\n  cast$geometry(val, this);\n  return val;\n}\n\nfunction _castMinMaxDistance(self, val) {\n  if (val.$maxDistance) {\n    val.$maxDistance = castToNumber.call(self, val.$maxDistance);\n  }\n  if (val.$minDistance) {\n    val.$minDistance = castToNumber.call(self, val.$minDistance);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3NjaGVtYS9vcGVyYXRvcnMvZ2Vvc3BhdGlhbC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWIsNEJBQTRCLDJIQUF3QztBQUNwRSxxQkFBcUIsb0hBQWlDOztBQUV0RDtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCLGlCQUFpQjtBQUNqQixtQkFBbUI7O0FBRW5CO0FBQ0Esc0JBQXNCLG1CQUFPLENBQUMsbUVBQVU7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9zY2hlbWEvb3BlcmF0b3JzL2dlb3NwYXRpYWwuanM/OWRhZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIE1vZHVsZSByZXF1aXJlbWVudHMuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjYXN0QXJyYXlzT2ZOdW1iZXJzID0gcmVxdWlyZSgnLi9oZWxwZXJzJykuY2FzdEFycmF5c09mTnVtYmVycztcbmNvbnN0IGNhc3RUb051bWJlciA9IHJlcXVpcmUoJy4vaGVscGVycycpLmNhc3RUb051bWJlcjtcblxuLyohXG4gKiBpZ25vcmVcbiAqL1xuXG5leHBvcnRzLmNhc3QkZ2VvSW50ZXJzZWN0cyA9IGNhc3QkZ2VvSW50ZXJzZWN0cztcbmV4cG9ydHMuY2FzdCRuZWFyID0gY2FzdCRuZWFyO1xuZXhwb3J0cy5jYXN0JHdpdGhpbiA9IGNhc3Qkd2l0aGluO1xuXG5mdW5jdGlvbiBjYXN0JG5lYXIodmFsKSB7XG4gIGNvbnN0IFNjaGVtYUFycmF5ID0gcmVxdWlyZSgnLi4vYXJyYXknKTtcblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgY2FzdEFycmF5c09mTnVtYmVycyh2YWwsIHRoaXMpO1xuICAgIHJldHVybiB2YWw7XG4gIH1cblxuICBfY2FzdE1pbk1heERpc3RhbmNlKHRoaXMsIHZhbCk7XG5cbiAgaWYgKHZhbCAmJiB2YWwuJGdlb21ldHJ5KSB7XG4gICAgcmV0dXJuIGNhc3QkZ2VvbWV0cnkodmFsLCB0aGlzKTtcbiAgfVxuXG4gIGlmICghQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignJG5lYXIgbXVzdCBiZSBlaXRoZXIgYW4gYXJyYXkgb3IgYW4gb2JqZWN0ICcgK1xuICAgICAgJ3dpdGggYSAkZ2VvbWV0cnkgcHJvcGVydHknKTtcbiAgfVxuXG4gIHJldHVybiBTY2hlbWFBcnJheS5wcm90b3R5cGUuY2FzdEZvclF1ZXJ5LmNhbGwodGhpcywgbnVsbCwgdmFsKTtcbn1cblxuZnVuY3Rpb24gY2FzdCRnZW9tZXRyeSh2YWwsIHNlbGYpIHtcbiAgc3dpdGNoICh2YWwuJGdlb21ldHJ5LnR5cGUpIHtcbiAgICBjYXNlICdQb2x5Z29uJzpcbiAgICBjYXNlICdMaW5lU3RyaW5nJzpcbiAgICBjYXNlICdQb2ludCc6XG4gICAgICBjYXN0QXJyYXlzT2ZOdW1iZXJzKHZhbC4kZ2VvbWV0cnkuY29vcmRpbmF0ZXMsIHNlbGYpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIGlnbm9yZSB1bmtub3duc1xuICAgICAgYnJlYWs7XG4gIH1cblxuICBfY2FzdE1pbk1heERpc3RhbmNlKHNlbGYsIHZhbCk7XG5cbiAgcmV0dXJuIHZhbDtcbn1cblxuZnVuY3Rpb24gY2FzdCR3aXRoaW4odmFsKSB7XG4gIF9jYXN0TWluTWF4RGlzdGFuY2UodGhpcywgdmFsKTtcblxuICBpZiAodmFsLiRib3ggfHwgdmFsLiRwb2x5Z29uKSB7XG4gICAgY29uc3QgdHlwZSA9IHZhbC4kYm94ID8gJyRib3gnIDogJyRwb2x5Z29uJztcbiAgICB2YWxbdHlwZV0uZm9yRWFjaChhcnIgPT4ge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICAgICAgY29uc3QgbXNnID0gJ0ludmFsaWQgJHdpdGhpbiAkYm94IGFyZ3VtZW50LiAnXG4gICAgICAgICAgICArICdFeHBlY3RlZCBhbiBhcnJheSwgcmVjZWl2ZWQgJyArIGFycjtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihtc2cpO1xuICAgICAgfVxuICAgICAgYXJyLmZvckVhY2goKHYsIGkpID0+IHtcbiAgICAgICAgYXJyW2ldID0gY2FzdFRvTnVtYmVyLmNhbGwodGhpcywgdik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICh2YWwuJGNlbnRlciB8fCB2YWwuJGNlbnRlclNwaGVyZSkge1xuICAgIGNvbnN0IHR5cGUgPSB2YWwuJGNlbnRlciA/ICckY2VudGVyJyA6ICckY2VudGVyU3BoZXJlJztcbiAgICB2YWxbdHlwZV0uZm9yRWFjaCgoaXRlbSwgaSkgPT4ge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbSkpIHtcbiAgICAgICAgaXRlbS5mb3JFYWNoKCh2LCBqKSA9PiB7XG4gICAgICAgICAgaXRlbVtqXSA9IGNhc3RUb051bWJlci5jYWxsKHRoaXMsIHYpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbFt0eXBlXVtpXSA9IGNhc3RUb051bWJlci5jYWxsKHRoaXMsIGl0ZW0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2UgaWYgKHZhbC4kZ2VvbWV0cnkpIHtcbiAgICBjYXN0JGdlb21ldHJ5KHZhbCwgdGhpcyk7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBjYXN0JGdlb0ludGVyc2VjdHModmFsKSB7XG4gIGNvbnN0IGdlbyA9IHZhbC4kZ2VvbWV0cnk7XG4gIGlmICghZ2VvKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY2FzdCRnZW9tZXRyeSh2YWwsIHRoaXMpO1xuICByZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBfY2FzdE1pbk1heERpc3RhbmNlKHNlbGYsIHZhbCkge1xuICBpZiAodmFsLiRtYXhEaXN0YW5jZSkge1xuICAgIHZhbC4kbWF4RGlzdGFuY2UgPSBjYXN0VG9OdW1iZXIuY2FsbChzZWxmLCB2YWwuJG1heERpc3RhbmNlKTtcbiAgfVxuICBpZiAodmFsLiRtaW5EaXN0YW5jZSkge1xuICAgIHZhbC4kbWluRGlzdGFuY2UgPSBjYXN0VG9OdW1iZXIuY2FsbChzZWxmLCB2YWwuJG1pbkRpc3RhbmNlKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/schema/operators/geospatial.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/schema/operators/helpers.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongoose/lib/schema/operators/helpers.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module requirements.\n */\n\nconst SchemaNumber = __webpack_require__(/*! ../number */ \"(ssr)/./node_modules/mongoose/lib/schema/number.js\");\n\n/*!\n * ignore\n */\n\nexports.castToNumber = castToNumber;\nexports.castArraysOfNumbers = castArraysOfNumbers;\n\n/*!\n * ignore\n */\n\nfunction castToNumber(val) {\n  return SchemaNumber.cast()(val);\n}\n\nfunction castArraysOfNumbers(arr, self) {\n  arr.forEach(function(v, i) {\n    if (Array.isArray(v)) {\n      castArraysOfNumbers(v, self);\n    } else {\n      arr[i] = castToNumber.call(self, v);\n    }\n  });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3NjaGVtYS9vcGVyYXRvcnMvaGVscGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCLG1CQUFPLENBQUMscUVBQVc7O0FBRXhDO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0I7QUFDcEIsMkJBQTJCOztBQUUzQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxHQUFHO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9zY2hlbWEvb3BlcmF0b3JzL2hlbHBlcnMuanM/ZTNkMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qIVxuICogTW9kdWxlIHJlcXVpcmVtZW50cy5cbiAqL1xuXG5jb25zdCBTY2hlbWFOdW1iZXIgPSByZXF1aXJlKCcuLi9udW1iZXInKTtcblxuLyohXG4gKiBpZ25vcmVcbiAqL1xuXG5leHBvcnRzLmNhc3RUb051bWJlciA9IGNhc3RUb051bWJlcjtcbmV4cG9ydHMuY2FzdEFycmF5c09mTnVtYmVycyA9IGNhc3RBcnJheXNPZk51bWJlcnM7XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxuZnVuY3Rpb24gY2FzdFRvTnVtYmVyKHZhbCkge1xuICByZXR1cm4gU2NoZW1hTnVtYmVyLmNhc3QoKSh2YWwpO1xufVxuXG5mdW5jdGlvbiBjYXN0QXJyYXlzT2ZOdW1iZXJzKGFyciwgc2VsZikge1xuICBhcnIuZm9yRWFjaChmdW5jdGlvbih2LCBpKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodikpIHtcbiAgICAgIGNhc3RBcnJheXNPZk51bWJlcnModiwgc2VsZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFycltpXSA9IGNhc3RUb051bWJlci5jYWxsKHNlbGYsIHYpO1xuICAgIH1cbiAgfSk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/schema/operators/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/schema/operators/text.js":
/*!************************************************************!*\
  !*** ./node_modules/mongoose/lib/schema/operators/text.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst CastError = __webpack_require__(/*! ../../error/cast */ \"(ssr)/./node_modules/mongoose/lib/error/cast.js\");\nconst castBoolean = __webpack_require__(/*! ../../cast/boolean */ \"(ssr)/./node_modules/mongoose/lib/cast/boolean.js\");\nconst castString = __webpack_require__(/*! ../../cast/string */ \"(ssr)/./node_modules/mongoose/lib/cast/string.js\");\n\n/**\n * Casts val to an object suitable for `$text`. Throws an error if the object\n * can't be casted.\n *\n * @param {Any} val value to cast\n * @param {String} [path] path to associate with any errors that occured\n * @return {Object} casted object\n * @see https://www.mongodb.com/docs/manual/reference/operator/query/text/\n * @api private\n */\n\nmodule.exports = function(val, path) {\n  if (val == null || typeof val !== 'object') {\n    throw new CastError('$text', val, path);\n  }\n\n  if (val.$search != null) {\n    val.$search = castString(val.$search, path + '.$search');\n  }\n  if (val.$language != null) {\n    val.$language = castString(val.$language, path + '.$language');\n  }\n  if (val.$caseSensitive != null) {\n    val.$caseSensitive = castBoolean(val.$caseSensitive,\n      path + '.$castSensitive');\n  }\n  if (val.$diacriticSensitive != null) {\n    val.$diacriticSensitive = castBoolean(val.$diacriticSensitive,\n      path + '.$diacriticSensitive');\n  }\n\n  return val;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3NjaGVtYS9vcGVyYXRvcnMvdGV4dC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixrQkFBa0IsbUJBQU8sQ0FBQyx5RUFBa0I7QUFDNUMsb0JBQW9CLG1CQUFPLENBQUMsNkVBQW9CO0FBQ2hELG1CQUFtQixtQkFBTyxDQUFDLDJFQUFtQjs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxRQUFRO0FBQ25CLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvc2NoZW1hL29wZXJhdG9ycy90ZXh0LmpzPzVhNGEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBDYXN0RXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9jYXN0Jyk7XG5jb25zdCBjYXN0Qm9vbGVhbiA9IHJlcXVpcmUoJy4uLy4uL2Nhc3QvYm9vbGVhbicpO1xuY29uc3QgY2FzdFN0cmluZyA9IHJlcXVpcmUoJy4uLy4uL2Nhc3Qvc3RyaW5nJyk7XG5cbi8qKlxuICogQ2FzdHMgdmFsIHRvIGFuIG9iamVjdCBzdWl0YWJsZSBmb3IgYCR0ZXh0YC4gVGhyb3dzIGFuIGVycm9yIGlmIHRoZSBvYmplY3RcbiAqIGNhbid0IGJlIGNhc3RlZC5cbiAqXG4gKiBAcGFyYW0ge0FueX0gdmFsIHZhbHVlIHRvIGNhc3RcbiAqIEBwYXJhbSB7U3RyaW5nfSBbcGF0aF0gcGF0aCB0byBhc3NvY2lhdGUgd2l0aCBhbnkgZXJyb3JzIHRoYXQgb2NjdXJlZFxuICogQHJldHVybiB7T2JqZWN0fSBjYXN0ZWQgb2JqZWN0XG4gKiBAc2VlIGh0dHBzOi8vd3d3Lm1vbmdvZGIuY29tL2RvY3MvbWFudWFsL3JlZmVyZW5jZS9vcGVyYXRvci9xdWVyeS90ZXh0L1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwsIHBhdGgpIHtcbiAgaWYgKHZhbCA9PSBudWxsIHx8IHR5cGVvZiB2YWwgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IENhc3RFcnJvcignJHRleHQnLCB2YWwsIHBhdGgpO1xuICB9XG5cbiAgaWYgKHZhbC4kc2VhcmNoICE9IG51bGwpIHtcbiAgICB2YWwuJHNlYXJjaCA9IGNhc3RTdHJpbmcodmFsLiRzZWFyY2gsIHBhdGggKyAnLiRzZWFyY2gnKTtcbiAgfVxuICBpZiAodmFsLiRsYW5ndWFnZSAhPSBudWxsKSB7XG4gICAgdmFsLiRsYW5ndWFnZSA9IGNhc3RTdHJpbmcodmFsLiRsYW5ndWFnZSwgcGF0aCArICcuJGxhbmd1YWdlJyk7XG4gIH1cbiAgaWYgKHZhbC4kY2FzZVNlbnNpdGl2ZSAhPSBudWxsKSB7XG4gICAgdmFsLiRjYXNlU2Vuc2l0aXZlID0gY2FzdEJvb2xlYW4odmFsLiRjYXNlU2Vuc2l0aXZlLFxuICAgICAgcGF0aCArICcuJGNhc3RTZW5zaXRpdmUnKTtcbiAgfVxuICBpZiAodmFsLiRkaWFjcml0aWNTZW5zaXRpdmUgIT0gbnVsbCkge1xuICAgIHZhbC4kZGlhY3JpdGljU2Vuc2l0aXZlID0gY2FzdEJvb2xlYW4odmFsLiRkaWFjcml0aWNTZW5zaXRpdmUsXG4gICAgICBwYXRoICsgJy4kZGlhY3JpdGljU2Vuc2l0aXZlJyk7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/schema/operators/text.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/schema/operators/type.js":
/*!************************************************************!*\
  !*** ./node_modules/mongoose/lib/schema/operators/type.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/*!\n * ignore\n */\n\nmodule.exports = function(val) {\n  if (Array.isArray(val)) {\n    if (!val.every(v => typeof v === 'number' || typeof v === 'string')) {\n      throw new Error('$type array values must be strings or numbers');\n    }\n    return val;\n  }\n\n  if (typeof val !== 'number' && typeof val !== 'string') {\n    throw new Error('$type parameter must be number, string, or array of numbers and strings');\n  }\n\n  return val;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3NjaGVtYS9vcGVyYXRvcnMvdHlwZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi9zY2hlbWEvb3BlcmF0b3JzL3R5cGUuanM/MDNhMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgIGlmICghdmFsLmV2ZXJ5KHYgPT4gdHlwZW9mIHYgPT09ICdudW1iZXInIHx8IHR5cGVvZiB2ID09PSAnc3RyaW5nJykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignJHR5cGUgYXJyYXkgdmFsdWVzIG11c3QgYmUgc3RyaW5ncyBvciBudW1iZXJzJyk7XG4gICAgfVxuICAgIHJldHVybiB2YWw7XG4gIH1cblxuICBpZiAodHlwZW9mIHZhbCAhPT0gJ251bWJlcicgJiYgdHlwZW9mIHZhbCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJyR0eXBlIHBhcmFtZXRlciBtdXN0IGJlIG51bWJlciwgc3RyaW5nLCBvciBhcnJheSBvZiBudW1iZXJzIGFuZCBzdHJpbmdzJyk7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/schema/operators/type.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/schema/string.js":
/*!****************************************************!*\
  !*** ./node_modules/mongoose/lib/schema/string.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\nconst SchemaType = __webpack_require__(/*! ../schemaType */ \"(ssr)/./node_modules/mongoose/lib/schemaType.js\");\nconst MongooseError = __webpack_require__(/*! ../error/index */ \"(ssr)/./node_modules/mongoose/lib/error/index.js\");\nconst SchemaStringOptions = __webpack_require__(/*! ../options/schemaStringOptions */ \"(ssr)/./node_modules/mongoose/lib/options/schemaStringOptions.js\");\nconst castString = __webpack_require__(/*! ../cast/string */ \"(ssr)/./node_modules/mongoose/lib/cast/string.js\");\nconst utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\nconst isBsonType = __webpack_require__(/*! ../helpers/isBsonType */ \"(ssr)/./node_modules/mongoose/lib/helpers/isBsonType.js\");\n\nconst CastError = SchemaType.CastError;\n\n/**\n * String SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaString(key, options) {\n  this.enumValues = [];\n  this.regExp = null;\n  SchemaType.call(this, key, options, 'String');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaString.schemaName = 'String';\n\nSchemaString.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaString.prototype = Object.create(SchemaType.prototype);\nSchemaString.prototype.constructor = SchemaString;\nObject.defineProperty(SchemaString.prototype, 'OptionsConstructor', {\n  configurable: false,\n  enumerable: false,\n  writable: false,\n  value: SchemaStringOptions\n});\n\n/*!\n * ignore\n */\n\nSchemaString._cast = castString;\n\n/**\n * Get/set the function used to cast arbitrary values to strings.\n *\n * #### Example:\n *\n *     // Throw an error if you pass in an object. Normally, Mongoose allows\n *     // objects with custom `toString()` functions.\n *     const original = mongoose.Schema.Types.String.cast();\n *     mongoose.Schema.Types.String.cast(v => {\n *       assert.ok(v == null || typeof v !== 'object');\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Schema.Types.String.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaString.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nSchemaString._defaultCaster = v => {\n  if (v != null && typeof v !== 'string') {\n    throw new Error();\n  }\n  return v;\n};\n\n/**\n * Attaches a getter for all String instances.\n *\n * #### Example:\n *\n *     // Make all numbers round down\n *     mongoose.Schema.String.get(v => v.toLowerCase());\n *\n *     const Model = mongoose.model('Test', new Schema({ test: String }));\n *     new Model({ test: 'FOO' }).test; // 'foo'\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaString.get = SchemaType.get;\n\n/**\n * Sets a default option for all String instances.\n *\n * #### Example:\n *\n *     // Make all strings have option `trim` equal to true.\n *     mongoose.Schema.String.set('trim', true);\n *\n *     const User = mongoose.model('User', new Schema({ name: String }));\n *     new User({ name: '   John Doe   ' }).name; // 'John Doe'\n *\n * @param {String} option The option you'd like to set the value for\n * @param {Any} value value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaString.set = SchemaType.set;\n\nSchemaString.setters = [];\n\n/*!\n * ignore\n */\n\nSchemaString._checkRequired = v => (v instanceof String || typeof v === 'string') && v.length;\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * #### Example:\n *\n *     // Allow empty strings to pass `required` check\n *     mongoose.Schema.Types.String.checkRequired(v => v != null);\n *\n *     const M = mongoose.model({ str: { type: String, required: true } });\n *     new M({ str: '' }).validateSync(); // `null`, validation passes!\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaString.checkRequired = SchemaType.checkRequired;\n\n/**\n * Adds an enum validator\n *\n * #### Example:\n *\n *     const states = ['opening', 'open', 'closing', 'closed']\n *     const s = new Schema({ state: { type: String, enum: states }})\n *     const M = db.model('M', s)\n *     const m = new M({ state: 'invalid' })\n *     m.save(function (err) {\n *       console.error(String(err)) // ValidationError: `invalid` is not a valid enum value for path `state`.\n *       m.state = 'open'\n *       m.save(callback) // success\n *     })\n *\n *     // or with custom error messages\n *     const enum = {\n *       values: ['opening', 'open', 'closing', 'closed'],\n *       message: 'enum validator failed for path `{PATH}` with value `{VALUE}`'\n *     }\n *     const s = new Schema({ state: { type: String, enum: enum })\n *     const M = db.model('M', s)\n *     const m = new M({ state: 'invalid' })\n *     m.save(function (err) {\n *       console.error(String(err)) // ValidationError: enum validator failed for path `state` with value `invalid`\n *       m.state = 'open'\n *       m.save(callback) // success\n *     })\n *\n * @param {...String|Object} [args] enumeration values\n * @return {SchemaType} this\n * @see Customized Error Messages https://mongoosejs.com/docs/api/error.html#Error.messages\n * @see Enums in JavaScript https://masteringjs.io/tutorials/fundamentals/enum\n * @api public\n */\n\nSchemaString.prototype.enum = function() {\n  if (this.enumValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.enumValidator;\n    }, this);\n    this.enumValidator = false;\n  }\n\n  if (arguments[0] === void 0 || arguments[0] === false) {\n    return this;\n  }\n\n  let values;\n  let errorMessage;\n\n  if (utils.isObject(arguments[0])) {\n    if (Array.isArray(arguments[0].values)) {\n      values = arguments[0].values;\n      errorMessage = arguments[0].message;\n    } else {\n      values = utils.object.vals(arguments[0]);\n      errorMessage = MongooseError.messages.String.enum;\n    }\n  } else {\n    values = arguments;\n    errorMessage = MongooseError.messages.String.enum;\n  }\n\n  for (const value of values) {\n    if (value !== undefined) {\n      this.enumValues.push(this.cast(value));\n    }\n  }\n\n  const vals = this.enumValues;\n  this.enumValidator = function(v) {\n    return null == v || ~vals.indexOf(v);\n  };\n  this.validators.push({\n    validator: this.enumValidator,\n    message: errorMessage,\n    type: 'enum',\n    enumValues: vals\n  });\n\n  return this;\n};\n\n/**\n * Adds a lowercase [setter](https://mongoosejs.com/docs/api/schematype.html#SchemaType.prototype.set()).\n *\n * #### Example:\n *\n *     const s = new Schema({ email: { type: String, lowercase: true }})\n *     const M = db.model('M', s);\n *     const m = new M({ email: 'SomeEmail@example.COM' });\n *     console.log(m.email) // someemail@example.com\n *     M.find({ email: 'SomeEmail@example.com' }); // Queries by 'someemail@example.com'\n *\n * Note that `lowercase` does **not** affect regular expression queries:\n *\n * #### Example:\n *\n *     // Still queries for documents whose `email` matches the regular\n *     // expression /SomeEmail/. Mongoose does **not** convert the RegExp\n *     // to lowercase.\n *     M.find({ email: /SomeEmail/ });\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.lowercase = function(shouldApply) {\n  if (arguments.length > 0 && !shouldApply) {\n    return this;\n  }\n  return this.set(v => {\n    if (typeof v !== 'string') {\n      v = this.cast(v);\n    }\n    if (v) {\n      return v.toLowerCase();\n    }\n    return v;\n  });\n};\n\n/**\n * Adds an uppercase [setter](https://mongoosejs.com/docs/api/schematype.html#SchemaType.prototype.set()).\n *\n * #### Example:\n *\n *     const s = new Schema({ caps: { type: String, uppercase: true }})\n *     const M = db.model('M', s);\n *     const m = new M({ caps: 'an example' });\n *     console.log(m.caps) // AN EXAMPLE\n *     M.find({ caps: 'an example' }) // Matches documents where caps = 'AN EXAMPLE'\n *\n * Note that `uppercase` does **not** affect regular expression queries:\n *\n * #### Example:\n *\n *     // Mongoose does **not** convert the RegExp to uppercase.\n *     M.find({ email: /an example/ });\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.uppercase = function(shouldApply) {\n  if (arguments.length > 0 && !shouldApply) {\n    return this;\n  }\n  return this.set(v => {\n    if (typeof v !== 'string') {\n      v = this.cast(v);\n    }\n    if (v) {\n      return v.toUpperCase();\n    }\n    return v;\n  });\n};\n\n/**\n * Adds a trim [setter](https://mongoosejs.com/docs/api/schematype.html#SchemaType.prototype.set()).\n *\n * The string value will be [trimmed](https://masteringjs.io/tutorials/fundamentals/trim-string) when set.\n *\n * #### Example:\n *\n *     const s = new Schema({ name: { type: String, trim: true }});\n *     const M = db.model('M', s);\n *     const string = ' some name ';\n *     console.log(string.length); // 11\n *     const m = new M({ name: string });\n *     console.log(m.name.length); // 9\n *\n *     // Equivalent to `findOne({ name: string.trim() })`\n *     M.findOne({ name: string });\n *\n * Note that `trim` does **not** affect regular expression queries:\n *\n * #### Example:\n *\n *     // Mongoose does **not** trim whitespace from the RegExp.\n *     M.find({ name: / some name / });\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.trim = function(shouldTrim) {\n  if (arguments.length > 0 && !shouldTrim) {\n    return this;\n  }\n  return this.set(v => {\n    if (typeof v !== 'string') {\n      v = this.cast(v);\n    }\n    if (v) {\n      return v.trim();\n    }\n    return v;\n  });\n};\n\n/**\n * Sets a minimum length validator.\n *\n * #### Example:\n *\n *     const schema = new Schema({ postalCode: { type: String, minlength: 5 })\n *     const Address = db.model('Address', schema)\n *     const address = new Address({ postalCode: '9512' })\n *     address.save(function (err) {\n *       console.error(err) // validator error\n *       address.postalCode = '95125';\n *       address.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MINLENGTH} token which will be replaced with the minimum allowed length\n *     const minlength = [5, 'The value of path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).'];\n *     const schema = new Schema({ postalCode: { type: String, minlength: minlength })\n *     const Address = mongoose.model('Address', schema);\n *     const address = new Address({ postalCode: '9512' });\n *     address.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512`) is shorter than the minimum length (5).\n *     })\n *\n * @param {Number} value minimum string length\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages https://mongoosejs.com/docs/api/error.html#Error.messages\n * @api public\n */\n\nSchemaString.prototype.minlength = function(value, message) {\n  if (this.minlengthValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.minlengthValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.String.minlength;\n    msg = msg.replace(/{MINLENGTH}/, value);\n    this.validators.push({\n      validator: this.minlengthValidator = function(v) {\n        return v === null || v.length >= value;\n      },\n      message: msg,\n      type: 'minlength',\n      minlength: value\n    });\n  }\n\n  return this;\n};\n\nSchemaString.prototype.minLength = SchemaString.prototype.minlength;\n\n/**\n * Sets a maximum length validator.\n *\n * #### Example:\n *\n *     const schema = new Schema({ postalCode: { type: String, maxlength: 9 })\n *     const Address = db.model('Address', schema)\n *     const address = new Address({ postalCode: '9512512345' })\n *     address.save(function (err) {\n *       console.error(err) // validator error\n *       address.postalCode = '95125';\n *       address.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAXLENGTH} token which will be replaced with the maximum allowed length\n *     const maxlength = [9, 'The value of path `{PATH}` (`{VALUE}`) exceeds the maximum allowed length ({MAXLENGTH}).'];\n *     const schema = new Schema({ postalCode: { type: String, maxlength: maxlength })\n *     const Address = mongoose.model('Address', schema);\n *     const address = new Address({ postalCode: '9512512345' });\n *     address.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512512345`) exceeds the maximum allowed length (9).\n *     })\n *\n * @param {Number} value maximum string length\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages https://mongoosejs.com/docs/api/error.html#Error.messages\n * @api public\n */\n\nSchemaString.prototype.maxlength = function(value, message) {\n  if (this.maxlengthValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.maxlengthValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.String.maxlength;\n    msg = msg.replace(/{MAXLENGTH}/, value);\n    this.validators.push({\n      validator: this.maxlengthValidator = function(v) {\n        return v === null || v.length <= value;\n      },\n      message: msg,\n      type: 'maxlength',\n      maxlength: value\n    });\n  }\n\n  return this;\n};\n\nSchemaString.prototype.maxLength = SchemaString.prototype.maxlength;\n\n/**\n * Sets a regexp validator.\n *\n * Any value that does not pass `regExp`.test(val) will fail validation.\n *\n * #### Example:\n *\n *     const s = new Schema({ name: { type: String, match: /^a/ }})\n *     const M = db.model('M', s)\n *     const m = new M({ name: 'I am invalid' })\n *     m.validate(function (err) {\n *       console.error(String(err)) // \"ValidationError: Path `name` is invalid (I am invalid).\"\n *       m.name = 'apples'\n *       m.validate(function (err) {\n *         assert.ok(err) // success\n *       })\n *     })\n *\n *     // using a custom error message\n *     const match = [ /\\.html$/, \"That file doesn't end in .html ({VALUE})\" ];\n *     const s = new Schema({ file: { type: String, match: match }})\n *     const M = db.model('M', s);\n *     const m = new M({ file: 'invalid' });\n *     m.validate(function (err) {\n *       console.log(String(err)) // \"ValidationError: That file doesn't end in .html (invalid)\"\n *     })\n *\n * Empty strings, `undefined`, and `null` values always pass the match validator. If you require these values, enable the `required` validator also.\n *\n *     const s = new Schema({ name: { type: String, match: /^a/, required: true }})\n *\n * @param {RegExp} regExp regular expression to test against\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages https://mongoosejs.com/docs/api/error.html#Error.messages\n * @api public\n */\n\nSchemaString.prototype.match = function match(regExp, message) {\n  // yes, we allow multiple match validators\n\n  const msg = message || MongooseError.messages.String.match;\n\n  const matchValidator = function(v) {\n    if (!regExp) {\n      return false;\n    }\n\n    // In case RegExp happens to have `/g` flag set, we need to reset the\n    // `lastIndex`, otherwise `match` will intermittently fail.\n    regExp.lastIndex = 0;\n\n    const ret = ((v != null && v !== '')\n      ? regExp.test(v)\n      : true);\n    return ret;\n  };\n\n  this.validators.push({\n    validator: matchValidator,\n    message: msg,\n    type: 'regexp',\n    regexp: regExp\n  });\n  return this;\n};\n\n/**\n * Check if the given value satisfies the `required` validator. The value is\n * considered valid if it is a string (that is, not `null` or `undefined`) and\n * has positive length. The `required` validator **will** fail for empty\n * strings.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaString.prototype.checkRequired = function checkRequired(value, doc) {\n  if (typeof value === 'object' && SchemaType._isRef(this, value, doc, true)) {\n    return value != null;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired === 'function' ?\n    this.constructor.checkRequired() :\n    SchemaString.checkRequired();\n\n  return _checkRequired(value);\n};\n\n/**\n * Casts to String\n *\n * @api private\n */\n\nSchemaString.prototype.cast = function(value, doc, init) {\n  if (typeof value !== 'string' && SchemaType._isRef(this, value, doc, init)) {\n    return this._castRef(value, doc, init);\n  }\n\n  let castString;\n  if (typeof this._castFunction === 'function') {\n    castString = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castString = this.constructor.cast();\n  } else {\n    castString = SchemaString.cast();\n  }\n\n  try {\n    return castString(value);\n  } catch (error) {\n    throw new CastError('string', value, this.path, null, this);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val, context) {\n  return this.castForQuery(null, val, context);\n}\n\n/*!\n * ignore\n */\n\nfunction handleArray(val, context) {\n  const _this = this;\n  if (!Array.isArray(val)) {\n    return [this.castForQuery(null, val, context)];\n  }\n  return val.map(function(m) {\n    return _this.castForQuery(null, m, context);\n  });\n}\n\n/*!\n * ignore\n */\n\nfunction handleSingleNoSetters(val) {\n  if (val == null) {\n    return this._castNullish(val);\n  }\n\n  return this.cast(val, this);\n}\n\nconst $conditionalHandlers = {\n  ...SchemaType.prototype.$conditionalHandlers,\n  $all: handleArray,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle,\n  $options: handleSingleNoSetters,\n  $regex: function handle$regex(val) {\n    if (Object.prototype.toString.call(val) === '[object RegExp]') {\n      return val;\n    }\n\n    return handleSingleNoSetters.call(this, val);\n  },\n  $not: handleSingle\n};\n\nObject.defineProperty(SchemaString.prototype, '$conditionalHandlers', {\n  configurable: false,\n  enumerable: false,\n  writable: false,\n  value: Object.freeze($conditionalHandlers)\n});\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [val]\n * @api private\n */\n\nSchemaString.prototype.castForQuery = function($conditional, val, context) {\n  let handler;\n  if ($conditional != null) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with String.');\n    }\n    return handler.call(this, val, context);\n  }\n\n  if (Object.prototype.toString.call(val) === '[object RegExp]' || isBsonType(val, 'BSONRegExp')) {\n    return val;\n  }\n\n  try {\n    return this.applySetters(val, context);\n  } catch (err) {\n    if (err instanceof CastError && err.path === this.path && this.$fullPath != null) {\n      err.path = this.$fullPath;\n    }\n    throw err;\n  }\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/schema/string.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/schema/subdocument.js":
/*!*********************************************************!*\
  !*** ./node_modules/mongoose/lib/schema/subdocument.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\nconst CastError = __webpack_require__(/*! ../error/cast */ \"(ssr)/./node_modules/mongoose/lib/error/cast.js\");\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst ObjectExpectedError = __webpack_require__(/*! ../error/objectExpected */ \"(ssr)/./node_modules/mongoose/lib/error/objectExpected.js\");\nconst SchemaSubdocumentOptions = __webpack_require__(/*! ../options/schemaSubdocumentOptions */ \"(ssr)/./node_modules/mongoose/lib/options/schemaSubdocumentOptions.js\");\nconst SchemaType = __webpack_require__(/*! ../schemaType */ \"(ssr)/./node_modules/mongoose/lib/schemaType.js\");\nconst applyDefaults = __webpack_require__(/*! ../helpers/document/applyDefaults */ \"(ssr)/./node_modules/mongoose/lib/helpers/document/applyDefaults.js\");\nconst $exists = __webpack_require__(/*! ./operators/exists */ \"(ssr)/./node_modules/mongoose/lib/schema/operators/exists.js\");\nconst castToNumber = (__webpack_require__(/*! ./operators/helpers */ \"(ssr)/./node_modules/mongoose/lib/schema/operators/helpers.js\").castToNumber);\nconst discriminator = __webpack_require__(/*! ../helpers/model/discriminator */ \"(ssr)/./node_modules/mongoose/lib/helpers/model/discriminator.js\");\nconst geospatial = __webpack_require__(/*! ./operators/geospatial */ \"(ssr)/./node_modules/mongoose/lib/schema/operators/geospatial.js\");\nconst getConstructor = __webpack_require__(/*! ../helpers/discriminator/getConstructor */ \"(ssr)/./node_modules/mongoose/lib/helpers/discriminator/getConstructor.js\");\nconst handleIdOption = __webpack_require__(/*! ../helpers/schema/handleIdOption */ \"(ssr)/./node_modules/mongoose/lib/helpers/schema/handleIdOption.js\");\nconst internalToObjectOptions = (__webpack_require__(/*! ../options */ \"(ssr)/./node_modules/mongoose/lib/options.js\").internalToObjectOptions);\nconst isExclusive = __webpack_require__(/*! ../helpers/projection/isExclusive */ \"(ssr)/./node_modules/mongoose/lib/helpers/projection/isExclusive.js\");\nconst utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\nconst InvalidSchemaOptionError = __webpack_require__(/*! ../error/invalidSchemaOption */ \"(ssr)/./node_modules/mongoose/lib/error/invalidSchemaOption.js\");\n\nlet SubdocumentType;\n\nmodule.exports = SchemaSubdocument;\n\n/**\n * Single nested subdocument SchemaType constructor.\n *\n * @param {Schema} schema\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaSubdocument(schema, path, options) {\n  if (schema.options.timeseries) {\n    throw new InvalidSchemaOptionError(path, 'timeseries');\n  }\n  const schemaTypeIdOption = SchemaSubdocument.defaultOptions &&\n    SchemaSubdocument.defaultOptions._id;\n  if (schemaTypeIdOption != null) {\n    options = options || {};\n    options._id = schemaTypeIdOption;\n  }\n\n  schema = handleIdOption(schema, options);\n\n  this.caster = _createConstructor(schema, null, options);\n  this.caster.path = path;\n  this.caster.prototype.$basePath = path;\n  this.schema = schema;\n  this.$isSingleNested = true;\n  this.base = schema.base;\n  SchemaType.call(this, path, options, 'Embedded');\n}\n\n/*!\n * ignore\n */\n\nSchemaSubdocument.prototype = Object.create(SchemaType.prototype);\nSchemaSubdocument.prototype.constructor = SchemaSubdocument;\nSchemaSubdocument.prototype.OptionsConstructor = SchemaSubdocumentOptions;\n\n/*!\n * ignore\n */\n\nfunction _createConstructor(schema, baseClass, options) {\n  // lazy load\n  SubdocumentType || (SubdocumentType = __webpack_require__(/*! ../types/subdocument */ \"(ssr)/./node_modules/mongoose/lib/types/subdocument.js\"));\n\n  const _embedded = function SingleNested(value, path, parent) {\n    this.$__parent = parent;\n    SubdocumentType.apply(this, arguments);\n\n    if (parent == null) {\n      return;\n    }\n    this.$session(parent.$session());\n  };\n\n  schema._preCompile();\n\n  const proto = baseClass != null ? baseClass.prototype : SubdocumentType.prototype;\n  _embedded.prototype = Object.create(proto);\n  _embedded.prototype.$__setSchema(schema);\n  _embedded.prototype.constructor = _embedded;\n  _embedded.$__required = options?.required;\n  _embedded.base = schema.base;\n  _embedded.schema = schema;\n  _embedded.$isSingleNested = true;\n  _embedded.events = new EventEmitter();\n  _embedded.prototype.toBSON = function() {\n    return this.toObject(internalToObjectOptions);\n  };\n\n  // apply methods\n  for (const i in schema.methods) {\n    _embedded.prototype[i] = schema.methods[i];\n  }\n\n  // apply statics\n  for (const i in schema.statics) {\n    _embedded[i] = schema.statics[i];\n  }\n\n  for (const i in EventEmitter.prototype) {\n    _embedded[i] = EventEmitter.prototype[i];\n  }\n\n  return _embedded;\n}\n\n/**\n * Special case for when users use a common location schema to represent\n * locations for use with $geoWithin.\n * https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n *\n * @param {Object} val\n * @api private\n */\n\nSchemaSubdocument.prototype.$conditionalHandlers.$geoWithin = function handle$geoWithin(val, context) {\n  return { $geometry: this.castForQuery(null, val.$geometry, context) };\n};\n\n/*!\n * ignore\n */\n\nSchemaSubdocument.prototype.$conditionalHandlers.$near =\nSchemaSubdocument.prototype.$conditionalHandlers.$nearSphere = geospatial.cast$near;\n\nSchemaSubdocument.prototype.$conditionalHandlers.$within =\nSchemaSubdocument.prototype.$conditionalHandlers.$geoWithin = geospatial.cast$within;\n\nSchemaSubdocument.prototype.$conditionalHandlers.$geoIntersects =\n  geospatial.cast$geoIntersects;\n\nSchemaSubdocument.prototype.$conditionalHandlers.$minDistance = castToNumber;\nSchemaSubdocument.prototype.$conditionalHandlers.$maxDistance = castToNumber;\n\nSchemaSubdocument.prototype.$conditionalHandlers.$exists = $exists;\n\n/**\n * Casts contents\n *\n * @param {Object} value\n * @api private\n */\n\nSchemaSubdocument.prototype.cast = function(val, doc, init, priorVal, options) {\n  if (val && val.$isSingleNested && val.parent === doc) {\n    return val;\n  }\n\n  if (val != null && (typeof val !== 'object' || Array.isArray(val))) {\n    throw new ObjectExpectedError(this.path, val);\n  }\n\n  const discriminatorKeyPath = this.schema.path(this.schema.options.discriminatorKey);\n  const defaultDiscriminatorValue = discriminatorKeyPath == null ? null : discriminatorKeyPath.getDefault(doc);\n  const Constructor = getConstructor(this.caster, val, defaultDiscriminatorValue);\n\n  let subdoc;\n\n  // Only pull relevant selected paths and pull out the base path\n  const parentSelected = doc && doc.$__ && doc.$__.selected;\n  const path = this.path;\n  const selected = parentSelected == null ? null : Object.keys(parentSelected).reduce((obj, key) => {\n    if (key.startsWith(path + '.')) {\n      obj = obj || {};\n      obj[key.substring(path.length + 1)] = parentSelected[key];\n    }\n    return obj;\n  }, null);\n  if (init) {\n    subdoc = new Constructor(void 0, selected, doc, false, { defaults: false });\n    delete subdoc.$__.defaults;\n    subdoc.$init(val);\n    const exclude = isExclusive(selected);\n    applyDefaults(subdoc, selected, exclude);\n  } else {\n    options = Object.assign({}, options, { priorDoc: priorVal });\n    if (Object.keys(val).length === 0) {\n      return new Constructor({}, selected, doc, undefined, options);\n    }\n\n    return new Constructor(val, selected, doc, undefined, options);\n  }\n\n  return subdoc;\n};\n\n/**\n * Casts contents for query\n *\n * @param {string} [$conditional] optional query operator (like `$eq` or `$in`)\n * @param {any} value\n * @api private\n */\n\nSchemaSubdocument.prototype.castForQuery = function($conditional, val, context, options) {\n  let handler;\n  if ($conditional != null) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional);\n    }\n    return handler.call(this, val);\n  }\n  if (val == null) {\n    return val;\n  }\n\n  const Constructor = getConstructor(this.caster, val);\n  if (val instanceof Constructor) {\n    return val;\n  }\n\n  if (this.options.runSetters) {\n    val = this._applySetters(val, context);\n  }\n\n  const overrideStrict = options != null && options.strict != null ?\n    options.strict :\n    void 0;\n\n  try {\n    val = new Constructor(val, overrideStrict);\n  } catch (error) {\n    // Make sure we always wrap in a CastError (gh-6803)\n    if (!(error instanceof CastError)) {\n      throw new CastError('Embedded', val, this.path, error, this);\n    }\n    throw error;\n  }\n  return val;\n};\n\n/**\n * Async validation on this single nested doc.\n *\n * @api private\n */\n\nSchemaSubdocument.prototype.doValidate = function(value, fn, scope, options) {\n  const Constructor = getConstructor(this.caster, value);\n\n  if (value && !(value instanceof Constructor)) {\n    value = new Constructor(value, null, (scope != null && scope.$__ != null) ? scope : null);\n  }\n\n  if (options && options.skipSchemaValidators) {\n    if (!value) {\n      return fn(null);\n    }\n    return value.validate().then(() => fn(null), err => fn(err));\n  }\n\n  SchemaType.prototype.doValidate.call(this, value, function(error) {\n    if (error) {\n      return fn(error);\n    }\n    if (!value) {\n      return fn(null);\n    }\n\n    value.validate().then(() => fn(null), err => fn(err));\n  }, scope, options);\n};\n\n/**\n * Synchronously validate this single nested doc\n *\n * @api private\n */\n\nSchemaSubdocument.prototype.doValidateSync = function(value, scope, options) {\n  if (!options || !options.skipSchemaValidators) {\n    const schemaTypeError = SchemaType.prototype.doValidateSync.call(this, value, scope);\n    if (schemaTypeError) {\n      return schemaTypeError;\n    }\n  }\n  if (!value) {\n    return;\n  }\n  return value.validateSync();\n};\n\n/**\n * Adds a discriminator to this single nested subdocument.\n *\n * #### Example:\n *\n *     const shapeSchema = Schema({ name: String }, { discriminatorKey: 'kind' });\n *     const schema = Schema({ shape: shapeSchema });\n *\n *     const singleNestedPath = parentSchema.path('shape');\n *     singleNestedPath.discriminator('Circle', Schema({ radius: Number }));\n *\n * @param {String} name\n * @param {Schema} schema fields to add to the schema for instances of this sub-class\n * @param {Object|string} [options] If string, same as `options.value`.\n * @param {String} [options.value] the string stored in the `discriminatorKey` property. If not specified, Mongoose uses the `name` parameter.\n * @param {Boolean} [options.clone=true] By default, `discriminator()` clones the given `schema`. Set to `false` to skip cloning.\n * @return {Function} the constructor Mongoose will use for creating instances of this discriminator model\n * @see discriminators https://mongoosejs.com/docs/discriminators.html\n * @api public\n */\n\nSchemaSubdocument.prototype.discriminator = function(name, schema, options) {\n  options = options || {};\n  const value = utils.isPOJO(options) ? options.value : options;\n  const clone = typeof options.clone === 'boolean'\n    ? options.clone\n    : true;\n\n  if (schema.instanceOfSchema && clone) {\n    schema = schema.clone();\n  }\n\n  schema = discriminator(this.caster, name, schema, value);\n\n  this.caster.discriminators[name] = _createConstructor(schema, this.caster);\n\n  return this.caster.discriminators[name];\n};\n\n/*!\n * ignore\n */\n\nSchemaSubdocument.defaultOptions = {};\n\n/**\n * Sets a default option for all Subdocument instances.\n *\n * #### Example:\n *\n *     // Make all numbers have option `min` equal to 0.\n *     mongoose.Schema.Subdocument.set('required', true);\n *\n * @param {String} option The option you'd like to set the value for\n * @param {Any} value value for option\n * @return {void}\n * @function set\n * @static\n * @api public\n */\n\nSchemaSubdocument.set = SchemaType.set;\n\nSchemaSubdocument.setters = [];\n\n/**\n * Attaches a getter for all Subdocument instances\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaSubdocument.get = SchemaType.get;\n\n/*!\n * ignore\n */\n\nSchemaSubdocument.prototype.toJSON = function toJSON() {\n  return { path: this.path, options: this.options };\n};\n\n/*!\n * ignore\n */\n\nSchemaSubdocument.prototype.clone = function() {\n  const schematype = new this.constructor(\n    this.schema,\n    this.path,\n    { ...this.options, _skipApplyDiscriminators: true }\n  );\n  schematype.validators = this.validators.slice();\n  if (this.requiredValidator !== undefined) {\n    schematype.requiredValidator = this.requiredValidator;\n  }\n  schematype.caster.discriminators = Object.assign({}, this.caster.discriminators);\n  return schematype;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/schema/subdocument.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/schema/symbols.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongoose/lib/schema/symbols.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.schemaMixedSymbol = Symbol.for('mongoose:schema_mixed');\n\nexports.builtInMiddleware = Symbol.for('mongoose:built-in-middleware');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3NjaGVtYS9zeW1ib2xzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLHlCQUF5Qjs7QUFFekIseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9saWIvc2NoZW1hL3N5bWJvbHMuanM/MWIwNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuc2NoZW1hTWl4ZWRTeW1ib2wgPSBTeW1ib2wuZm9yKCdtb25nb29zZTpzY2hlbWFfbWl4ZWQnKTtcblxuZXhwb3J0cy5idWlsdEluTWlkZGxld2FyZSA9IFN5bWJvbC5mb3IoJ21vbmdvb3NlOmJ1aWx0LWluLW1pZGRsZXdhcmUnKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/schema/symbols.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/schema/uuid.js":
/*!**************************************************!*\
  !*** ./node_modules/mongoose/lib/schema/uuid.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseBuffer = __webpack_require__(/*! ../types/buffer */ \"(ssr)/./node_modules/mongoose/lib/types/buffer.js\");\nconst SchemaType = __webpack_require__(/*! ../schemaType */ \"(ssr)/./node_modules/mongoose/lib/schemaType.js\");\nconst CastError = SchemaType.CastError;\nconst utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\nconst handleBitwiseOperator = __webpack_require__(/*! ./operators/bitwise */ \"(ssr)/./node_modules/mongoose/lib/schema/operators/bitwise.js\");\n\nconst UUID_FORMAT = /[0-9a-f]{8}-[0-9a-f]{4}-[0-9][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}/i;\nconst Binary = MongooseBuffer.Binary;\n\n/**\n * Helper function to convert the input hex-string to a buffer\n * @param {String} hex The hex string to convert\n * @returns {Buffer} The hex as buffer\n * @api private\n */\n\nfunction hex2buffer(hex) {\n  // use buffer built-in function to convert from hex-string to buffer\n  const buff = hex != null && Buffer.from(hex, 'hex');\n  return buff;\n}\n\n/**\n * Helper function to convert the buffer input to a string\n * @param {Buffer} buf The buffer to convert to a hex-string\n * @returns {String} The buffer as a hex-string\n * @api private\n */\n\nfunction binary2hex(buf) {\n  // use buffer built-in function to convert from buffer to hex-string\n  const hex = buf != null && buf.toString('hex');\n  return hex;\n}\n\n/**\n * Convert a String to Binary\n * @param {String} uuidStr The value to process\n * @returns {MongooseBuffer} The binary to store\n * @api private\n */\n\nfunction stringToBinary(uuidStr) {\n  // Protect against undefined & throwing err\n  if (typeof uuidStr !== 'string') uuidStr = '';\n  const hex = uuidStr.replace(/[{}-]/g, ''); // remove extra characters\n  const bytes = hex2buffer(hex);\n  const buff = new MongooseBuffer(bytes);\n  buff._subtype = 4;\n\n  return buff;\n}\n\n/**\n * Convert binary to a uuid string\n * @param {Buffer|Binary|String} uuidBin The value to process\n * @returns {String} The completed uuid-string\n * @api private\n */\nfunction binaryToString(uuidBin) {\n  // i(hasezoey) dont quite know why, but \"uuidBin\" may sometimes also be the already processed string\n  let hex;\n  if (typeof uuidBin !== 'string' && uuidBin != null) {\n    hex = binary2hex(uuidBin);\n    const uuidStr = hex.substring(0, 8) + '-' + hex.substring(8, 8 + 4) + '-' + hex.substring(12, 12 + 4) + '-' + hex.substring(16, 16 + 4) + '-' + hex.substring(20, 20 + 12);\n    return uuidStr;\n  }\n  return uuidBin;\n}\n\n/**\n * UUIDv1 SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaUUID(key, options) {\n  SchemaType.call(this, key, options, 'UUID');\n  this.getters.push(function(value) {\n    // For populated\n    if (value != null && value.$__ != null) {\n      return value;\n    }\n    return binaryToString(value);\n  });\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaUUID.schemaName = 'UUID';\n\nSchemaUUID.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaUUID.prototype = Object.create(SchemaType.prototype);\nSchemaUUID.prototype.constructor = SchemaUUID;\n\n/*!\n * ignore\n */\n\nSchemaUUID._cast = function(value) {\n  if (value == null) {\n    return value;\n  }\n\n  function newBuffer(initbuff) {\n    const buff = new MongooseBuffer(initbuff);\n    buff._subtype = 4;\n    return buff;\n  }\n\n  if (typeof value === 'string') {\n    if (UUID_FORMAT.test(value)) {\n      return stringToBinary(value);\n    } else {\n      throw new CastError(SchemaUUID.schemaName, value, this.path);\n    }\n  }\n\n  if (Buffer.isBuffer(value)) {\n    return newBuffer(value);\n  }\n\n  if (value instanceof Binary) {\n    return newBuffer(value.value(true));\n  }\n\n  // Re: gh-647 and gh-3030, we're ok with casting using `toString()`\n  // **unless** its the default Object.toString, because \"[object Object]\"\n  // doesn't really qualify as useful data\n  if (value.toString && value.toString !== Object.prototype.toString) {\n    if (UUID_FORMAT.test(value.toString())) {\n      return stringToBinary(value.toString());\n    }\n  }\n\n  throw new CastError(SchemaUUID.schemaName, value, this.path);\n};\n\n/**\n * Attaches a getter for all UUID instances.\n *\n * #### Example:\n *\n *     // Note that `v` is a string by default\n *     mongoose.Schema.UUID.get(v => v.toUpperCase());\n *\n *     const Model = mongoose.model('Test', new Schema({ test: 'UUID' }));\n *     new Model({ test: uuid.v4() }).test; // UUID with all uppercase\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaUUID.get = SchemaType.get;\n\n/**\n * Sets a default option for all UUID instances.\n *\n * #### Example:\n *\n *     // Make all UUIDs have `required` of true by default.\n *     mongoose.Schema.UUID.set('required', true);\n *\n *     const User = mongoose.model('User', new Schema({ test: mongoose.UUID }));\n *     new User({ }).validateSync().errors.test.message; // Path `test` is required.\n *\n * @param {String} option The option you'd like to set the value for\n * @param {Any} value value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaUUID.set = SchemaType.set;\n\nSchemaUUID.setters = [];\n\n/**\n * Get/set the function used to cast arbitrary values to UUIDs.\n *\n * #### Example:\n *\n *     // Make Mongoose refuse to cast UUIDs with 0 length\n *     const original = mongoose.Schema.Types.UUID.cast();\n *     mongoose.UUID.cast(v => {\n *       assert.ok(typeof v === \"string\" && v.length > 0);\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.UUID.cast(false);\n *\n * @param {Function} [caster]\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaUUID.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nSchemaUUID._checkRequired = v => v != null;\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaUUID.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @return {Boolean}\n * @api public\n */\n\nSchemaUUID.prototype.checkRequired = function checkRequired(value) {\n  if (Buffer.isBuffer(value)) {\n    value = binaryToString(value);\n  }\n  return value != null && UUID_FORMAT.test(value);\n};\n\n/**\n * Casts to UUID\n *\n * @param {Object} value\n * @param {Object} doc\n * @param {Boolean} init whether this is an initialization cast\n * @api private\n */\n\nSchemaUUID.prototype.cast = function(value, doc, init) {\n  if (utils.isNonBuiltinObject(value) &&\n      SchemaType._isRef(this, value, doc, init)) {\n    return this._castRef(value, doc, init);\n  }\n\n  let castFn;\n  if (typeof this._castFunction === 'function') {\n    castFn = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castFn = this.constructor.cast();\n  } else {\n    castFn = SchemaUUID.cast();\n  }\n\n  try {\n    return castFn(value);\n  } catch (error) {\n    throw new CastError(SchemaUUID.schemaName, value, this.path, error, this);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\n/*!\n * ignore\n */\n\nfunction handleArray(val) {\n  return val.map((m) => {\n    return this.cast(m);\n  });\n}\n\nSchemaUUID.prototype.$conditionalHandlers = {\n  ...SchemaType.prototype.$conditionalHandlers,\n  $bitsAllClear: handleBitwiseOperator,\n  $bitsAnyClear: handleBitwiseOperator,\n  $bitsAllSet: handleBitwiseOperator,\n  $bitsAnySet: handleBitwiseOperator,\n  $all: handleArray,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $in: handleArray,\n  $lt: handleSingle,\n  $lte: handleSingle,\n  $ne: handleSingle,\n  $nin: handleArray\n};\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} val\n * @api private\n */\n\nSchemaUUID.prototype.castForQuery = function($conditional, val, context) {\n  let handler;\n  if ($conditional != null) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler)\n      throw new Error('Can\\'t use ' + $conditional + ' with UUID.');\n    return handler.call(this, val, context);\n  }\n\n  try {\n    return this.applySetters(val, context);\n  } catch (err) {\n    if (err instanceof CastError && err.path === this.path && this.$fullPath != null) {\n      err.path = this.$fullPath;\n    }\n    throw err;\n  }\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaUUID;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/schema/uuid.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/schemaType.js":
/*!*************************************************!*\
  !*** ./node_modules/mongoose/lib/schemaType.js ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\nconst MongooseError = __webpack_require__(/*! ./error/index */ \"(ssr)/./node_modules/mongoose/lib/error/index.js\");\nconst SchemaTypeOptions = __webpack_require__(/*! ./options/schemaTypeOptions */ \"(ssr)/./node_modules/mongoose/lib/options/schemaTypeOptions.js\");\nconst $exists = __webpack_require__(/*! ./schema/operators/exists */ \"(ssr)/./node_modules/mongoose/lib/schema/operators/exists.js\");\nconst $type = __webpack_require__(/*! ./schema/operators/type */ \"(ssr)/./node_modules/mongoose/lib/schema/operators/type.js\");\nconst clone = __webpack_require__(/*! ./helpers/clone */ \"(ssr)/./node_modules/mongoose/lib/helpers/clone.js\");\nconst handleImmutable = __webpack_require__(/*! ./helpers/schematype/handleImmutable */ \"(ssr)/./node_modules/mongoose/lib/helpers/schematype/handleImmutable.js\");\nconst isAsyncFunction = __webpack_require__(/*! ./helpers/isAsyncFunction */ \"(ssr)/./node_modules/mongoose/lib/helpers/isAsyncFunction.js\");\nconst isSimpleValidator = __webpack_require__(/*! ./helpers/isSimpleValidator */ \"(ssr)/./node_modules/mongoose/lib/helpers/isSimpleValidator.js\");\nconst immediate = __webpack_require__(/*! ./helpers/immediate */ \"(ssr)/./node_modules/mongoose/lib/helpers/immediate.js\");\nconst schemaTypeSymbol = (__webpack_require__(/*! ./helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").schemaTypeSymbol);\nconst utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\nconst validatorErrorSymbol = (__webpack_require__(/*! ./helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").validatorErrorSymbol);\nconst documentIsModified = (__webpack_require__(/*! ./helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").documentIsModified);\n\nconst populateModelSymbol = (__webpack_require__(/*! ./helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").populateModelSymbol);\n\nconst CastError = MongooseError.CastError;\nconst ValidatorError = MongooseError.ValidatorError;\n\nconst setOptionsForDefaults = { _skipMarkModified: true };\n\n/**\n * SchemaType constructor. Do **not** instantiate `SchemaType` directly.\n * Mongoose converts your schema paths into SchemaTypes automatically.\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: String });\n *     schema.path('name') instanceof SchemaType; // true\n *\n * @param {String} path\n * @param {SchemaTypeOptions} [options] See [SchemaTypeOptions docs](https://mongoosejs.com/docs/api/schematypeoptions.html)\n * @param {String} [instance]\n * @api public\n */\n\nfunction SchemaType(path, options, instance) {\n  this[schemaTypeSymbol] = true;\n  this.path = path;\n  this.instance = instance;\n  this.validators = [];\n  this.getters = this.constructor.hasOwnProperty('getters') ?\n    this.constructor.getters.slice() :\n    [];\n  this.setters = this.constructor.hasOwnProperty('setters') ?\n    this.constructor.setters.slice() :\n    [];\n\n  this.splitPath();\n\n  options = options || {};\n  const defaultOptions = this.constructor.defaultOptions || {};\n  const defaultOptionsKeys = Object.keys(defaultOptions);\n\n  for (const option of defaultOptionsKeys) {\n    if (option === 'validate') {\n      this.validate(defaultOptions.validate);\n    } else if (defaultOptions.hasOwnProperty(option) && !Object.prototype.hasOwnProperty.call(options, option)) {\n      options[option] = defaultOptions[option];\n    }\n  }\n\n  if (options.select == null) {\n    delete options.select;\n  }\n\n  const Options = this.OptionsConstructor || SchemaTypeOptions;\n  this.options = new Options(options);\n  this._index = null;\n\n\n  if (utils.hasUserDefinedProperty(this.options, 'immutable')) {\n    this.$immutable = this.options.immutable;\n\n    handleImmutable(this);\n  }\n\n  const keys = Object.keys(this.options);\n  for (const prop of keys) {\n    if (prop === 'cast') {\n      if (Array.isArray(this.options[prop])) {\n        this.castFunction.apply(this, this.options[prop]);\n      } else {\n        this.castFunction(this.options[prop]);\n      }\n      continue;\n    }\n    if (utils.hasUserDefinedProperty(this.options, prop) && typeof this[prop] === 'function') {\n      // { unique: true, index: true }\n      if (prop === 'index' && this._index) {\n        if (options.index === false) {\n          const index = this._index;\n          if (typeof index === 'object' && index != null) {\n            if (index.unique) {\n              throw new Error('Path \"' + this.path + '\" may not have `index` ' +\n                'set to false and `unique` set to true');\n            }\n            if (index.sparse) {\n              throw new Error('Path \"' + this.path + '\" may not have `index` ' +\n                'set to false and `sparse` set to true');\n            }\n          }\n\n          this._index = false;\n        }\n        continue;\n      }\n\n      const val = options[prop];\n      // Special case so we don't screw up array defaults, see gh-5780\n      if (prop === 'default') {\n        this.default(val);\n        continue;\n      }\n\n      const opts = Array.isArray(val) ? val : [val];\n\n      this[prop].apply(this, opts);\n    }\n  }\n\n  Object.defineProperty(this, '$$context', {\n    enumerable: false,\n    configurable: false,\n    writable: true,\n    value: null\n  });\n}\n\n/**\n * The class that Mongoose uses internally to instantiate this SchemaType's `options` property.\n * @memberOf SchemaType\n * @instance\n * @api private\n */\n\nSchemaType.prototype.OptionsConstructor = SchemaTypeOptions;\n\n/**\n * The path to this SchemaType in a Schema.\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: String });\n *     schema.path('name').path; // 'name'\n *\n * @property path\n * @api public\n * @memberOf SchemaType\n */\n\nSchemaType.prototype.path;\n\n/**\n * The validators that Mongoose should run to validate properties at this SchemaType's path.\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: { type: String, required: true } });\n *     schema.path('name').validators.length; // 1, the `required` validator\n *\n * @property validators\n * @api public\n * @memberOf SchemaType\n */\n\nSchemaType.prototype.validators;\n\n/**\n * True if this SchemaType has a required validator. False otherwise.\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: { type: String, required: true } });\n *     schema.path('name').isRequired; // true\n *\n *     schema.path('name').required(false);\n *     schema.path('name').isRequired; // false\n *\n * @property isRequired\n * @api public\n * @memberOf SchemaType\n */\n\nSchemaType.prototype.isRequired;\n\n/**\n * Split the current dottet path into segments\n *\n * @return {String[]|undefined}\n * @api private\n */\n\nSchemaType.prototype.splitPath = function() {\n  if (this._presplitPath != null) {\n    return this._presplitPath;\n  }\n  if (this.path == null) {\n    return undefined;\n  }\n\n  this._presplitPath = this.path.indexOf('.') === -1 ? [this.path] : this.path.split('.');\n  return this._presplitPath;\n};\n\n/**\n * Get/set the function used to cast arbitrary values to this type.\n *\n * #### Example:\n *\n *     // Disallow `null` for numbers, and don't try to cast any values to\n *     // numbers, so even strings like '123' will cause a CastError.\n *     mongoose.Number.cast(function(v) {\n *       assert.ok(v === undefined || typeof v === 'number');\n *       return v;\n *     });\n *\n * @param {Function|false} caster Function that casts arbitrary values to this type, or throws an error if casting failed\n * @return {Function}\n * @static\n * @memberOf SchemaType\n * @function cast\n * @api public\n */\n\nSchemaType.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = v => v;\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/**\n * Get/set the function used to cast arbitrary values to this particular schematype instance.\n * Overrides `SchemaType.cast()`.\n *\n * #### Example:\n *\n *     // Disallow `null` for numbers, and don't try to cast any values to\n *     // numbers, so even strings like '123' will cause a CastError.\n *     const number = new mongoose.Number('mypath', {});\n *     number.cast(function(v) {\n *       assert.ok(v === undefined || typeof v === 'number');\n *       return v;\n *     });\n *\n * @param {Function|false} caster Function that casts arbitrary values to this type, or throws an error if casting failed\n * @return {Function}\n * @memberOf SchemaType\n * @api public\n */\n\nSchemaType.prototype.castFunction = function castFunction(caster, message) {\n  if (arguments.length === 0) {\n    return this._castFunction;\n  }\n\n  if (caster === false) {\n    caster = this.constructor._defaultCaster || (v => v);\n  }\n  if (typeof caster === 'string') {\n    this._castErrorMessage = caster;\n    return this._castFunction;\n  }\n  if (caster != null) {\n    this._castFunction = caster;\n  }\n  if (message != null) {\n    this._castErrorMessage = message;\n  }\n\n  return this._castFunction;\n};\n\n/**\n * The function that Mongoose calls to cast arbitrary values to this SchemaType.\n *\n * @param {Object} value value to cast\n * @param {Document} doc document that triggers the casting\n * @param {Boolean} init\n * @api public\n */\n\nSchemaType.prototype.cast = function cast() {\n  throw new Error('Base SchemaType class does not implement a `cast()` function');\n};\n\n/**\n * Sets a default option for this schema type.\n *\n * #### Example:\n *\n *     // Make all strings be trimmed by default\n *     mongoose.SchemaTypes.String.set('trim', true);\n *\n * @param {String} option The name of the option you'd like to set (e.g. trim, lowercase, etc...)\n * @param {Any} value The value of the option you'd like to set.\n * @return {void}\n * @static\n * @memberOf SchemaType\n * @function set\n * @api public\n */\n\nSchemaType.set = function set(option, value) {\n  if (!this.hasOwnProperty('defaultOptions')) {\n    this.defaultOptions = Object.assign({}, this.defaultOptions);\n  }\n  this.defaultOptions[option] = value;\n};\n\n/**\n * Attaches a getter for all instances of this schema type.\n *\n * #### Example:\n *\n *     // Make all numbers round down\n *     mongoose.Number.get(function(v) { return Math.floor(v); });\n *\n * @param {Function} getter\n * @return {this}\n * @static\n * @memberOf SchemaType\n * @function get\n * @api public\n */\n\nSchemaType.get = function(getter) {\n  this.getters = this.hasOwnProperty('getters') ? this.getters : [];\n  this.getters.push(getter);\n};\n\n/**\n * Sets a default value for this SchemaType.\n *\n * #### Example:\n *\n *     const schema = new Schema({ n: { type: Number, default: 10 })\n *     const M = db.model('M', schema)\n *     const m = new M;\n *     console.log(m.n) // 10\n *\n * Defaults can be either `functions` which return the value to use as the default or the literal value itself. Either way, the value will be cast based on its schema type before being set during document creation.\n *\n * #### Example:\n *\n *     // values are cast:\n *     const schema = new Schema({ aNumber: { type: Number, default: 4.815162342 }})\n *     const M = db.model('M', schema)\n *     const m = new M;\n *     console.log(m.aNumber) // 4.815162342\n *\n *     // default unique objects for Mixed types:\n *     const schema = new Schema({ mixed: Schema.Types.Mixed });\n *     schema.path('mixed').default(function () {\n *       return {};\n *     });\n *\n *     // if we don't use a function to return object literals for Mixed defaults,\n *     // each document will receive a reference to the same object literal creating\n *     // a \"shared\" object instance:\n *     const schema = new Schema({ mixed: Schema.Types.Mixed });\n *     schema.path('mixed').default({});\n *     const M = db.model('M', schema);\n *     const m1 = new M;\n *     m1.mixed.added = 1;\n *     console.log(m1.mixed); // { added: 1 }\n *     const m2 = new M;\n *     console.log(m2.mixed); // { added: 1 }\n *\n * @param {Function|any} val The default value to set\n * @return {Any|undefined} Returns the set default value.\n * @api public\n */\n\nSchemaType.prototype.default = function(val) {\n  if (arguments.length === 1) {\n    if (val === void 0) {\n      this.defaultValue = void 0;\n      return void 0;\n    }\n\n    if (val != null && val.instanceOfSchema) {\n      throw new MongooseError('Cannot set default value of path `' + this.path +\n        '` to a mongoose Schema instance.');\n    }\n\n    this.defaultValue = val;\n    return this.defaultValue;\n  } else if (arguments.length > 1) {\n    this.defaultValue = [...arguments];\n  }\n  return this.defaultValue;\n};\n\n/**\n * Declares the index options for this schematype.\n *\n * #### Example:\n *\n *     const s = new Schema({ name: { type: String, index: true })\n *     const s = new Schema({ name: { type: String, index: -1 })\n *     const s = new Schema({ loc: { type: [Number], index: 'hashed' })\n *     const s = new Schema({ loc: { type: [Number], index: '2d', sparse: true })\n *     const s = new Schema({ loc: { type: [Number], index: { type: '2dsphere', sparse: true }})\n *     const s = new Schema({ date: { type: Date, index: { unique: true, expires: '1d' }})\n *     s.path('my.path').index(true);\n *     s.path('my.date').index({ expires: 60 });\n *     s.path('my.path').index({ unique: true, sparse: true });\n *\n * #### Note:\n *\n * _Indexes are created [in the background](https://www.mongodb.com/docs/manual/core/index-creation/#index-creation-background)\n * by default. If `background` is set to `false`, MongoDB will not execute any\n * read/write operations you send until the index build.\n * Specify `background: false` to override Mongoose's default._\n *\n * @param {Object|Boolean|String|Number} options\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaType.prototype.index = function(options) {\n  this._index = options;\n  utils.expires(this._index);\n  return this;\n};\n\n/**\n * Declares an unique index.\n *\n * #### Example:\n *\n *     const s = new Schema({ name: { type: String, unique: true } });\n *     s.path('name').index({ unique: true });\n *\n * _NOTE: violating the constraint returns an `E11000` error from MongoDB when saving, not a Mongoose validation error._\n *\n * @param {Boolean} bool\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaType.prototype.unique = function(bool) {\n  if (this._index === false) {\n    if (!bool) {\n      return;\n    }\n    throw new Error('Path \"' + this.path + '\" may not have `index` set to ' +\n      'false and `unique` set to true');\n  }\n\n  if (!this.options.hasOwnProperty('index') && bool === false) {\n    return this;\n  }\n\n  if (this._index == null || this._index === true) {\n    this._index = {};\n  } else if (typeof this._index === 'string') {\n    this._index = { type: this._index };\n  }\n\n  this._index.unique = bool;\n  return this;\n};\n\n/**\n * Declares a full text index.\n *\n * ### Example:\n *\n *      const s = new Schema({ name : { type: String, text : true } })\n *      s.path('name').index({ text : true });\n *\n * @param {Boolean} bool\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaType.prototype.text = function(bool) {\n  if (this._index === false) {\n    if (!bool) {\n      return this;\n    }\n    throw new Error('Path \"' + this.path + '\" may not have `index` set to ' +\n      'false and `text` set to true');\n  }\n\n  if (!this.options.hasOwnProperty('index') && bool === false) {\n    return this;\n  }\n\n  if (this._index === null || this._index === undefined ||\n    typeof this._index === 'boolean') {\n    this._index = {};\n  } else if (typeof this._index === 'string') {\n    this._index = { type: this._index };\n  }\n\n  this._index.text = bool;\n  return this;\n};\n\n/**\n * Declares a sparse index.\n *\n * #### Example:\n *\n *     const s = new Schema({ name: { type: String, sparse: true } });\n *     s.path('name').index({ sparse: true });\n *\n * @param {Boolean} bool\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaType.prototype.sparse = function(bool) {\n  if (this._index === false) {\n    if (!bool) {\n      return this;\n    }\n    throw new Error('Path \"' + this.path + '\" may not have `index` set to ' +\n      'false and `sparse` set to true');\n  }\n\n  if (!this.options.hasOwnProperty('index') && bool === false) {\n    return this;\n  }\n\n  if (this._index == null || typeof this._index === 'boolean') {\n    this._index = {};\n  } else if (typeof this._index === 'string') {\n    this._index = { type: this._index };\n  }\n\n  this._index.sparse = bool;\n  return this;\n};\n\n/**\n * Defines this path as immutable. Mongoose prevents you from changing\n * immutable paths unless the parent document has [`isNew: true`](https://mongoosejs.com/docs/api/document.html#Document.prototype.isNew()).\n *\n * #### Example:\n *\n *     const schema = new Schema({\n *       name: { type: String, immutable: true },\n *       age: Number\n *     });\n *     const Model = mongoose.model('Test', schema);\n *\n *     await Model.create({ name: 'test' });\n *     const doc = await Model.findOne();\n *\n *     doc.isNew; // false\n *     doc.name = 'new name';\n *     doc.name; // 'test', because `name` is immutable\n *\n * Mongoose also prevents changing immutable properties using `updateOne()`\n * and `updateMany()` based on [strict mode](https://mongoosejs.com/docs/guide.html#strict).\n *\n * #### Example:\n *\n *     // Mongoose will strip out the `name` update, because `name` is immutable\n *     Model.updateOne({}, { $set: { name: 'test2' }, $inc: { age: 1 } });\n *\n *     // If `strict` is set to 'throw', Mongoose will throw an error if you\n *     // update `name`\n *     const err = await Model.updateOne({}, { name: 'test2' }, { strict: 'throw' }).\n *       then(() => null, err => err);\n *     err.name; // StrictModeError\n *\n *     // If `strict` is `false`, Mongoose allows updating `name` even though\n *     // the property is immutable.\n *     Model.updateOne({}, { name: 'test2' }, { strict: false });\n *\n * @param {Boolean} bool\n * @return {SchemaType} this\n * @see isNew https://mongoosejs.com/docs/api/document.html#Document.prototype.isNew()\n * @api public\n */\n\nSchemaType.prototype.immutable = function(bool) {\n  this.$immutable = bool;\n  handleImmutable(this);\n\n  return this;\n};\n\n/**\n * Defines a custom function for transforming this path when converting a document to JSON.\n *\n * Mongoose calls this function with one parameter: the current `value` of the path. Mongoose\n * then uses the return value in the JSON output.\n *\n * #### Example:\n *\n *     const schema = new Schema({\n *       date: { type: Date, transform: v => v.getFullYear() }\n *     });\n *     const Model = mongoose.model('Test', schema);\n *\n *     await Model.create({ date: new Date('2016-06-01') });\n *     const doc = await Model.findOne();\n *\n *     doc.date instanceof Date; // true\n *\n *     doc.toJSON().date; // 2016 as a number\n *     JSON.stringify(doc); // '{\"_id\":...,\"date\":2016}'\n *\n * @param {Function} fn\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaType.prototype.transform = function(fn) {\n  this.options.transform = fn;\n\n  return this;\n};\n\n/**\n * Adds a setter to this schematype.\n *\n * #### Example:\n *\n *     function capitalize (val) {\n *       if (typeof val !== 'string') val = '';\n *       return val.charAt(0).toUpperCase() + val.substring(1);\n *     }\n *\n *     // defining within the schema\n *     const s = new Schema({ name: { type: String, set: capitalize }});\n *\n *     // or with the SchemaType\n *     const s = new Schema({ name: String })\n *     s.path('name').set(capitalize);\n *\n * Setters allow you to transform the data before it gets to the raw mongodb\n * document or query.\n *\n * Suppose you are implementing user registration for a website. Users provide\n * an email and password, which gets saved to mongodb. The email is a string\n * that you will want to normalize to lower case, in order to avoid one email\n * having more than one account -- e.g., otherwise, avenue@q.com can be registered for 2 accounts via avenue@q.com and AvEnUe@Q.CoM.\n *\n * You can set up email lower case normalization easily via a Mongoose setter.\n *\n *     function toLower(v) {\n *       return v.toLowerCase();\n *     }\n *\n *     const UserSchema = new Schema({\n *       email: { type: String, set: toLower }\n *     });\n *\n *     const User = db.model('User', UserSchema);\n *\n *     const user = new User({email: 'AVENUE@Q.COM'});\n *     console.log(user.email); // 'avenue@q.com'\n *\n *     // or\n *     const user = new User();\n *     user.email = 'Avenue@Q.com';\n *     console.log(user.email); // 'avenue@q.com'\n *     User.updateOne({ _id: _id }, { $set: { email: 'AVENUE@Q.COM' } }); // update to 'avenue@q.com'\n *\n * As you can see above, setters allow you to transform the data before it\n * stored in MongoDB, or before executing a query.\n *\n * _NOTE: we could have also just used the built-in `lowercase: true` SchemaType option instead of defining our own function._\n *\n *     new Schema({ email: { type: String, lowercase: true }})\n *\n * Setters are also passed a second argument, the schematype on which the setter was defined. This allows for tailored behavior based on options passed in the schema.\n *\n *     function inspector (val, priorValue, schematype) {\n *       if (schematype.options.required) {\n *         return schematype.path + ' is required';\n *       } else {\n *         return val;\n *       }\n *     }\n *\n *     const VirusSchema = new Schema({\n *       name: { type: String, required: true, set: inspector },\n *       taxonomy: { type: String, set: inspector }\n *     })\n *\n *     const Virus = db.model('Virus', VirusSchema);\n *     const v = new Virus({ name: 'Parvoviridae', taxonomy: 'Parvovirinae' });\n *\n *     console.log(v.name);     // name is required\n *     console.log(v.taxonomy); // Parvovirinae\n *\n * You can also use setters to modify other properties on the document. If\n * you're setting a property `name` on a document, the setter will run with\n * `this` as the document. Be careful, in mongoose 5 setters will also run\n * when querying by `name` with `this` as the query.\n *\n *     const nameSchema = new Schema({ name: String, keywords: [String] });\n *     nameSchema.path('name').set(function(v) {\n *       // Need to check if `this` is a document, because in mongoose 5\n *       // setters will also run on queries, in which case `this` will be a\n *       // mongoose query object.\n *       if (this instanceof Document && v != null) {\n *         this.keywords = v.split(' ');\n *       }\n *       return v;\n *     });\n *\n * @param {Function} fn\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaType.prototype.set = function(fn) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('A setter must be a function.');\n  }\n  this.setters.push(fn);\n  return this;\n};\n\n/**\n * Adds a getter to this schematype.\n *\n * #### Example:\n *\n *     function dob (val) {\n *       if (!val) return val;\n *       return (val.getMonth() + 1) + \"/\" + val.getDate() + \"/\" + val.getFullYear();\n *     }\n *\n *     // defining within the schema\n *     const s = new Schema({ born: { type: Date, get: dob })\n *\n *     // or by retreiving its SchemaType\n *     const s = new Schema({ born: Date })\n *     s.path('born').get(dob)\n *\n * Getters allow you to transform the representation of the data as it travels from the raw mongodb document to the value that you see.\n *\n * Suppose you are storing credit card numbers and you want to hide everything except the last 4 digits to the mongoose user. You can do so by defining a getter in the following way:\n *\n *     function obfuscate (cc) {\n *       return '****-****-****-' + cc.slice(cc.length-4, cc.length);\n *     }\n *\n *     const AccountSchema = new Schema({\n *       creditCardNumber: { type: String, get: obfuscate }\n *     });\n *\n *     const Account = db.model('Account', AccountSchema);\n *\n *     Account.findById(id, function (err, found) {\n *       console.log(found.creditCardNumber); // '****-****-****-1234'\n *     });\n *\n * Getters are also passed a second argument, the schematype on which the getter was defined. This allows for tailored behavior based on options passed in the schema.\n *\n *     function inspector (val, priorValue, schematype) {\n *       if (schematype.options.required) {\n *         return schematype.path + ' is required';\n *       } else {\n *         return schematype.path + ' is not';\n *       }\n *     }\n *\n *     const VirusSchema = new Schema({\n *       name: { type: String, required: true, get: inspector },\n *       taxonomy: { type: String, get: inspector }\n *     })\n *\n *     const Virus = db.model('Virus', VirusSchema);\n *\n *     Virus.findById(id, function (err, virus) {\n *       console.log(virus.name);     // name is required\n *       console.log(virus.taxonomy); // taxonomy is not\n *     })\n *\n * @param {Function} fn\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaType.prototype.get = function(fn) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('A getter must be a function.');\n  }\n  this.getters.push(fn);\n  return this;\n};\n\n/**\n * Adds validator(s) for this document path.\n *\n * Validators always receive the value to validate as their first argument and\n * must return `Boolean`. Returning `false` or throwing an error means\n * validation failed.\n *\n * The error message argument is optional. If not passed, the [default generic error message template](https://mongoosejs.com/docs/api/error.html#Error.messages) will be used.\n *\n * #### Example:\n *\n *     // make sure every value is equal to \"something\"\n *     function validator (val) {\n *       return val === 'something';\n *     }\n *     new Schema({ name: { type: String, validate: validator }});\n *\n *     // with a custom error message\n *\n *     const custom = [validator, 'Uh oh, {PATH} does not equal \"something\".']\n *     new Schema({ name: { type: String, validate: custom }});\n *\n *     // adding many validators at a time\n *\n *     const many = [\n *         { validator: validator, message: 'uh oh' }\n *       , { validator: anotherValidator, message: 'failed' }\n *     ]\n *     new Schema({ name: { type: String, validate: many }});\n *\n *     // or utilizing SchemaType methods directly:\n *\n *     const schema = new Schema({ name: 'string' });\n *     schema.path('name').validate(validator, 'validation of `{PATH}` failed with value `{VALUE}`');\n *\n * #### Error message templates:\n *\n * Below is a list of supported template keywords:\n *\n * - PATH: The schema path where the error is being triggered.\n * - VALUE: The value assigned to the PATH that is triggering the error.\n * - KIND: The validation property that triggered the error i.e. required.\n * - REASON: The error object that caused this error if there was one.\n *\n * If Mongoose's built-in error message templating isn't enough, Mongoose\n * supports setting the `message` property to a function.\n *\n *     schema.path('name').validate({\n *       validator: function(v) { return v.length > 5; },\n *       // `errors['name']` will be \"name must have length 5, got 'foo'\"\n *       message: function(props) {\n *         return `${props.path} must have length 5, got '${props.value}'`;\n *       }\n *     });\n *\n * To bypass Mongoose's error messages and just copy the error message that\n * the validator throws, do this:\n *\n *     schema.path('name').validate({\n *       validator: function() { throw new Error('Oops!'); },\n *       // `errors['name']` will be \"Oops!\"\n *       message: function(props) { return props.reason.message; }\n *     });\n *\n * #### Asynchronous validation:\n *\n * Mongoose supports validators that return a promise. A validator that returns\n * a promise is called an _async validator_. Async validators run in\n * parallel, and `validate()` will wait until all async validators have settled.\n *\n *     schema.path('name').validate({\n *       validator: function (value) {\n *         return new Promise(function (resolve, reject) {\n *           resolve(false); // validation failed\n *         });\n *       }\n *     });\n *\n * You might use asynchronous validators to retreive other documents from the database to validate against or to meet other I/O bound validation needs.\n *\n * Validation occurs `pre('save')` or whenever you manually execute [document#validate](https://mongoosejs.com/docs/api/document.html#Document.prototype.validate()).\n *\n * If validation fails during `pre('save')` and no callback was passed to receive the error, an `error` event will be emitted on your Models associated db [connection](https://mongoosejs.com/docs/api/connection.html#Connection()), passing the validation error object along.\n *\n *     const conn = mongoose.createConnection(..);\n *     conn.on('error', handleError);\n *\n *     const Product = conn.model('Product', yourSchema);\n *     const dvd = new Product(..);\n *     dvd.save(); // emits error on the `conn` above\n *\n * If you want to handle these errors at the Model level, add an `error`\n * listener to your Model as shown below.\n *\n *     // registering an error listener on the Model lets us handle errors more locally\n *     Product.on('error', handleError);\n *\n * @param {RegExp|Function|Object} obj validator function, or hash describing options\n * @param {Function} [obj.validator] validator function. If the validator function returns `undefined` or a truthy value, validation succeeds. If it returns [falsy](https://masteringjs.io/tutorials/fundamentals/falsy) (except `undefined`) or throws an error, validation fails.\n * @param {String|Function} [obj.message] optional error message. If function, should return the error message as a string\n * @param {Boolean} [obj.propsParameter=false] If true, Mongoose will pass the validator properties object (with the `validator` function, `message`, etc.) as the 2nd arg to the validator function. This is disabled by default because many validators [rely on positional args](https://github.com/chriso/validator.js#validators), so turning this on may cause unpredictable behavior in external validators.\n * @param {String|Function} [errorMsg] optional error message. If function, should return the error message as a string\n * @param {String} [type] optional validator type\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaType.prototype.validate = function(obj, message, type) {\n  if (typeof obj === 'function' || obj && utils.getFunctionName(obj.constructor) === 'RegExp') {\n    let properties;\n    if (typeof message === 'function') {\n      properties = { validator: obj, message: message };\n      properties.type = type || 'user defined';\n    } else if (message instanceof Object && !type) {\n      properties = isSimpleValidator(message) ? Object.assign({}, message) : clone(message);\n      if (!properties.message) {\n        properties.message = properties.msg;\n      }\n      properties.validator = obj;\n      properties.type = properties.type || 'user defined';\n    } else {\n      if (message == null) {\n        message = MongooseError.messages.general.default;\n      }\n      if (!type) {\n        type = 'user defined';\n      }\n      properties = { message: message, type: type, validator: obj };\n    }\n\n    this.validators.push(properties);\n    return this;\n  }\n\n  let i;\n  let length;\n  let arg;\n\n  for (i = 0, length = arguments.length; i < length; i++) {\n    arg = arguments[i];\n    if (!utils.isPOJO(arg)) {\n      const msg = 'Invalid validator. Received (' + typeof arg + ') '\n        + arg\n        + '. See https://mongoosejs.com/docs/api/schematype.html#SchemaType.prototype.validate()';\n\n      throw new Error(msg);\n    }\n    this.validate(arg.validator, arg);\n  }\n\n  return this;\n};\n\n/**\n * Adds a required validator to this SchemaType. The validator gets added\n * to the front of this SchemaType's validators array using `unshift()`.\n *\n * #### Example:\n *\n *     const s = new Schema({ born: { type: Date, required: true })\n *\n *     // or with custom error message\n *\n *     const s = new Schema({ born: { type: Date, required: '{PATH} is required!' })\n *\n *     // or with a function\n *\n *     const s = new Schema({\n *       userId: ObjectId,\n *       username: {\n *         type: String,\n *         required: function() { return this.userId != null; }\n *       }\n *     })\n *\n *     // or with a function and a custom message\n *     const s = new Schema({\n *       userId: ObjectId,\n *       username: {\n *         type: String,\n *         required: [\n *           function() { return this.userId != null; },\n *           'username is required if id is specified'\n *         ]\n *       }\n *     })\n *\n *     // or through the path API\n *\n *     s.path('name').required(true);\n *\n *     // with custom error messaging\n *\n *     s.path('name').required(true, 'grrr :( ');\n *\n *     // or make a path conditionally required based on a function\n *     const isOver18 = function() { return this.age >= 18; };\n *     s.path('voterRegistrationId').required(isOver18);\n *\n * The required validator uses the SchemaType's `checkRequired` function to\n * determine whether a given value satisfies the required validator. By default,\n * a value satisfies the required validator if `val != null` (that is, if\n * the value is not null nor undefined). However, most built-in mongoose schema\n * types override the default `checkRequired` function:\n *\n * @param {Boolean|Function|Object} required enable/disable the validator, or function that returns required boolean, or options object\n * @param {Boolean|Function} [options.isRequired] enable/disable the validator, or function that returns required boolean\n * @param {Function} [options.ErrorConstructor] custom error constructor. The constructor receives 1 parameter, an object containing the validator properties.\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages https://mongoosejs.com/docs/api/error.html#Error.messages\n * @see SchemaArray#checkRequired https://mongoosejs.com/docs/api/schemaarray.html#SchemaArray.prototype.checkRequired()\n * @see SchemaBoolean#checkRequired https://mongoosejs.com/docs/api/schemaboolean.html#SchemaBoolean.prototype.checkRequired()\n * @see SchemaBuffer#checkRequired https://mongoosejs.com/docs/api/schemabuffer.html#SchemaBuffer.prototype.checkRequired()\n * @see SchemaNumber#checkRequired https://mongoosejs.com/docs/api/schemanumber.html#SchemaNumber.prototype.checkRequired()\n * @see SchemaObjectId#checkRequired https://mongoosejs.com/docs/api/schemaobjectid.html#ObjectId.prototype.checkRequired()\n * @see SchemaString#checkRequired https://mongoosejs.com/docs/api/schemastring.html#SchemaString.prototype.checkRequired()\n * @api public\n */\n\nSchemaType.prototype.required = function(required, message) {\n  let customOptions = {};\n\n  if (arguments.length > 0 && required == null) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.requiredValidator;\n    }, this);\n\n    this.isRequired = false;\n    delete this.originalRequiredValue;\n    return this;\n  }\n\n  if (typeof required === 'object') {\n    customOptions = required;\n    message = customOptions.message || message;\n    required = required.isRequired;\n  }\n\n  if (required === false) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.requiredValidator;\n    }, this);\n\n    this.isRequired = false;\n    delete this.originalRequiredValue;\n    return this;\n  }\n\n  const _this = this;\n  this.isRequired = true;\n\n  this.requiredValidator = function(v) {\n    const cachedRequired = this && this.$__ && this.$__.cachedRequired;\n\n    // no validation when this path wasn't selected in the query.\n    if (cachedRequired != null && !this.$__isSelected(_this.path) && !this[documentIsModified](_this.path)) {\n      return true;\n    }\n\n    // `$cachedRequired` gets set in `_evaluateRequiredFunctions()` so we\n    // don't call required functions multiple times in one validate call\n    // See gh-6801\n    if (cachedRequired != null && _this.path in cachedRequired) {\n      const res = cachedRequired[_this.path] ?\n        _this.checkRequired(v, this) :\n        true;\n      delete cachedRequired[_this.path];\n      return res;\n    } else if (typeof required === 'function') {\n      return required.apply(this) ? _this.checkRequired(v, this) : true;\n    }\n\n    return _this.checkRequired(v, this);\n  };\n  this.originalRequiredValue = required;\n\n  if (typeof required === 'string') {\n    message = required;\n    required = undefined;\n  }\n\n  const msg = message || MongooseError.messages.general.required;\n  this.validators.unshift(Object.assign({}, customOptions, {\n    validator: this.requiredValidator,\n    message: msg,\n    type: 'required'\n  }));\n\n  return this;\n};\n\n/**\n * Set the model that this path refers to. This is the option that [populate](https://mongoosejs.com/docs/populate.html)\n * looks at to determine the foreign collection it should query.\n *\n * #### Example:\n *\n *     const userSchema = new Schema({ name: String });\n *     const User = mongoose.model('User', userSchema);\n *\n *     const postSchema = new Schema({ user: mongoose.ObjectId });\n *     postSchema.path('user').ref('User'); // Can set ref to a model name\n *     postSchema.path('user').ref(User); // Or a model class\n *     postSchema.path('user').ref(() => 'User'); // Or a function that returns the model name\n *     postSchema.path('user').ref(() => User); // Or a function that returns the model class\n *\n *     // Or you can just declare the `ref` inline in your schema\n *     const postSchema2 = new Schema({\n *       user: { type: mongoose.ObjectId, ref: User }\n *     });\n *\n * @param {String|Model|Function} ref either a model name, a [Model](https://mongoosejs.com/docs/models.html), or a function that returns a model name or model.\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaType.prototype.ref = function(ref) {\n  this.options.ref = ref;\n  return this;\n};\n\n/**\n * Gets the default value\n *\n * @param {Object} scope the scope which callback are executed\n * @param {Boolean} init\n * @return {Any} The Stored default value.\n * @api private\n */\n\nSchemaType.prototype.getDefault = function(scope, init, options) {\n  let ret;\n  if (typeof this.defaultValue === 'function') {\n    if (\n      this.defaultValue === Date.now ||\n      this.defaultValue === Array ||\n      this.defaultValue.name.toLowerCase() === 'objectid'\n    ) {\n      ret = this.defaultValue.call(scope);\n    } else {\n      ret = this.defaultValue.call(scope, scope);\n    }\n  } else {\n    ret = this.defaultValue;\n  }\n\n  if (ret !== null && ret !== undefined) {\n    if (typeof ret === 'object' && (!this.options || !this.options.shared)) {\n      ret = clone(ret);\n    }\n\n    if (options && options.skipCast) {\n      return this._applySetters(ret, scope);\n    }\n\n    const casted = this.applySetters(ret, scope, init, undefined, setOptionsForDefaults);\n    if (casted && !Array.isArray(casted) && casted.$isSingleNested) {\n      casted.$__parent = scope;\n    }\n    return casted;\n  }\n  return ret;\n};\n\n/**\n * Applies setters without casting\n *\n * @param {Any} value\n * @param {Any} scope\n * @param {Boolean} init\n * @param {Any} priorVal\n * @param {Object} [options]\n * @instance\n * @api private\n */\n\nSchemaType.prototype._applySetters = function(value, scope, init, priorVal, options) {\n  let v = value;\n  if (init) {\n    return v;\n  }\n  const setters = this.setters;\n\n  for (let i = setters.length - 1; i >= 0; i--) {\n    v = setters[i].call(scope, v, priorVal, this, options);\n  }\n\n  return v;\n};\n\n/*!\n * ignore\n */\n\nSchemaType.prototype._castNullish = function _castNullish(v) {\n  return v;\n};\n\n/**\n * Applies setters\n *\n * @param {Object} value\n * @param {Object} scope\n * @param {Boolean} init\n * @return {Any}\n * @api private\n */\n\nSchemaType.prototype.applySetters = function(value, scope, init, priorVal, options) {\n  let v = this._applySetters(value, scope, init, priorVal, options);\n  if (v == null) {\n    return this._castNullish(v);\n  }\n  // do not cast until all setters are applied #665\n  v = this.cast(v, scope, init, priorVal, options);\n\n  return v;\n};\n\n/**\n * Applies getters to a value\n *\n * @param {Object} value\n * @param {Object} scope\n * @return {Any}\n * @api private\n */\n\nSchemaType.prototype.applyGetters = function(value, scope) {\n  let v = value;\n  const getters = this.getters;\n  const len = getters.length;\n\n  if (len === 0) {\n    return v;\n  }\n\n  for (let i = 0; i < len; ++i) {\n    v = getters[i].call(scope, v, this);\n  }\n\n  return v;\n};\n\n/**\n * Sets default `select()` behavior for this path.\n *\n * Set to `true` if this path should always be included in the results, `false` if it should be excluded by default. This setting can be overridden at the query level.\n *\n * #### Example:\n *\n *     T = db.model('T', new Schema({ x: { type: String, select: true }}));\n *     T.find(..); // field x will always be selected ..\n *     // .. unless overridden;\n *     T.find().select('-x').exec(callback);\n *\n * @param {Boolean} val\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaType.prototype.select = function select(val) {\n  this.selected = !!val;\n  return this;\n};\n\n/**\n * Performs a validation of `value` using the validators declared for this SchemaType.\n *\n * @param {Any} value\n * @param {Function} callback\n * @param {Object} scope\n * @param {Object} [options]\n * @param {String} [options.path]\n * @return {Any} If no validators, returns the output from calling `fn`, otherwise no return\n * @api public\n */\n\nSchemaType.prototype.doValidate = function(value, fn, scope, options) {\n  let err = false;\n  const path = this.path;\n\n  // Avoid non-object `validators`\n  const validators = this.validators.\n    filter(v => typeof v === 'object' && v !== null);\n\n  let count = validators.length;\n\n  if (!count) {\n    return fn(null);\n  }\n\n  for (let i = 0, len = validators.length; i < len; ++i) {\n    if (err) {\n      break;\n    }\n\n    const v = validators[i];\n    const validator = v.validator;\n    let ok;\n\n    const validatorProperties = isSimpleValidator(v) ? Object.assign({}, v) : clone(v);\n    validatorProperties.path = options && options.path ? options.path : path;\n    validatorProperties.fullPath = this.$fullPath;\n    validatorProperties.value = value;\n\n    if (validator instanceof RegExp) {\n      validate(validator.test(value), validatorProperties, scope);\n      continue;\n    }\n\n    if (typeof validator !== 'function') {\n      continue;\n    }\n\n    if (value === undefined && validator !== this.requiredValidator) {\n      validate(true, validatorProperties, scope);\n      continue;\n    }\n\n    try {\n      if (validatorProperties.propsParameter) {\n        ok = validator.call(scope, value, validatorProperties);\n      } else {\n        ok = validator.call(scope, value);\n      }\n    } catch (error) {\n      ok = false;\n      validatorProperties.reason = error;\n      if (error.message) {\n        validatorProperties.message = error.message;\n      }\n    }\n\n    if (ok != null && typeof ok.then === 'function') {\n      ok.then(\n        function(ok) { validate(ok, validatorProperties, scope); },\n        function(error) {\n          validatorProperties.reason = error;\n          validatorProperties.message = error.message;\n          ok = false;\n          validate(ok, validatorProperties, scope);\n        });\n    } else {\n      validate(ok, validatorProperties, scope);\n    }\n  }\n\n  function validate(ok, validatorProperties, scope) {\n    if (err) {\n      return;\n    }\n    if (ok === undefined || ok) {\n      if (--count <= 0) {\n        immediate(function() {\n          fn(null);\n        });\n      }\n    } else {\n      const ErrorConstructor = validatorProperties.ErrorConstructor || ValidatorError;\n      err = new ErrorConstructor(validatorProperties, scope);\n      err[validatorErrorSymbol] = true;\n      immediate(function() {\n        fn(err);\n      });\n    }\n  }\n};\n\n\nfunction _validate(ok, validatorProperties) {\n  if (ok !== undefined && !ok) {\n    const ErrorConstructor = validatorProperties.ErrorConstructor || ValidatorError;\n    const err = new ErrorConstructor(validatorProperties);\n    err[validatorErrorSymbol] = true;\n    return err;\n  }\n}\n\n/**\n * Performs a validation of `value` using the validators declared for this SchemaType.\n *\n * #### Note:\n *\n * This method ignores the asynchronous validators.\n *\n * @param {Any} value\n * @param {Object} scope\n * @param {Object} [options]\n * @param {Object} [options.path]\n * @return {MongooseError|null}\n * @api private\n */\n\nSchemaType.prototype.doValidateSync = function(value, scope, options) {\n  const path = this.path;\n  const count = this.validators.length;\n\n  if (!count) {\n    return null;\n  }\n\n  let validators = this.validators;\n  if (value === void 0) {\n    if (this.validators.length !== 0 && this.validators[0].type === 'required') {\n      validators = [this.validators[0]];\n    } else {\n      return null;\n    }\n  }\n\n  let err = null;\n  let i = 0;\n  const len = validators.length;\n  for (i = 0; i < len; ++i) {\n\n    const v = validators[i];\n\n    if (v === null || typeof v !== 'object') {\n      continue;\n    }\n\n    const validator = v.validator;\n    const validatorProperties = isSimpleValidator(v) ? Object.assign({}, v) : clone(v);\n    validatorProperties.path = options && options.path ? options.path : path;\n    validatorProperties.fullPath = this.$fullPath;\n    validatorProperties.value = value;\n    let ok = false;\n\n    // Skip any explicit async validators. Validators that return a promise\n    // will still run, but won't trigger any errors.\n    if (isAsyncFunction(validator)) {\n      continue;\n    }\n\n    if (validator instanceof RegExp) {\n      err = _validate(validator.test(value), validatorProperties);\n      continue;\n    }\n\n    if (typeof validator !== 'function') {\n      continue;\n    }\n\n    try {\n      if (validatorProperties.propsParameter) {\n        ok = validator.call(scope, value, validatorProperties);\n      } else {\n        ok = validator.call(scope, value);\n      }\n    } catch (error) {\n      ok = false;\n      validatorProperties.reason = error;\n    }\n\n    // Skip any validators that return a promise, we can't handle those\n    // synchronously\n    if (ok != null && typeof ok.then === 'function') {\n      continue;\n    }\n    err = _validate(ok, validatorProperties);\n    if (err) {\n      break;\n    }\n  }\n\n  return err;\n};\n\n/**\n * Determines if value is a valid Reference.\n *\n * @param {SchemaType} self\n * @param {Object} value\n * @param {Document} doc\n * @param {Boolean} init\n * @return {Boolean}\n * @api private\n */\n\nSchemaType._isRef = function(self, value, doc, init) {\n  // fast path\n  let ref = init && self.options && (self.options.ref || self.options.refPath);\n\n  if (!ref && doc && doc.$__ != null) {\n    // checks for\n    // - this populated with adhoc model and no ref was set in schema OR\n    // - setting / pushing values after population\n    const path = doc.$__fullPath(self.path, true);\n\n    const owner = doc.ownerDocument();\n    ref = (path != null && owner.$populated(path)) || doc.$populated(self.path);\n  }\n\n  if (ref) {\n    if (value == null) {\n      return true;\n    }\n    if (!Buffer.isBuffer(value) && // buffers are objects too\n      value._bsontype !== 'Binary' // raw binary value from the db\n      && utils.isObject(value) // might have deselected _id in population query\n    ) {\n      return true;\n    }\n\n    return init;\n  }\n\n  return false;\n};\n\n/*!\n * ignore\n */\n\nSchemaType.prototype._castRef = function _castRef(value, doc, init) {\n  if (value == null) {\n    return value;\n  }\n\n  if (value.$__ != null) {\n    value.$__.wasPopulated = value.$__.wasPopulated || true;\n    return value;\n  }\n\n  // setting a populated path\n  if (Buffer.isBuffer(value) || !utils.isObject(value)) {\n    if (init) {\n      return value;\n    }\n    throw new CastError(this.instance, value, this.path, null, this);\n  }\n\n  // Handle the case where user directly sets a populated\n  // path to a plain object; cast to the Model used in\n  // the population query.\n  const path = doc.$__fullPath(this.path, true);\n  const owner = doc.ownerDocument();\n  const pop = owner.$populated(path, true);\n\n  let ret = value;\n  if (!doc.$__.populated ||\n    !doc.$__.populated[path] ||\n    !doc.$__.populated[path].options ||\n    !doc.$__.populated[path].options.options ||\n    !doc.$__.populated[path].options.options.lean) {\n    ret = new pop.options[populateModelSymbol](value);\n    ret.$__.wasPopulated = true;\n  }\n\n  return ret;\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val, context) {\n  return this.castForQuery(null, val, context);\n}\n\n/*!\n * ignore\n */\n\nfunction handleArray(val, context) {\n  const _this = this;\n  if (!Array.isArray(val)) {\n    return [this.castForQuery(null, val, context)];\n  }\n  return val.map(function(m) {\n    return _this.castForQuery(null, m, context);\n  });\n}\n\n/**\n * Just like handleArray, except also allows `[]` because surprisingly\n * `$in: [1, []]` works fine\n * @api private\n */\n\nfunction handle$in(val, context) {\n  const _this = this;\n  if (!Array.isArray(val)) {\n    return [this.castForQuery(null, val, context)];\n  }\n  return val.map(function(m) {\n    if (Array.isArray(m) && m.length === 0) {\n      return m;\n    }\n    return _this.castForQuery(null, m, context);\n  });\n}\n\n/*!\n * ignore\n */\n\nSchemaType.prototype.$conditionalHandlers = {\n  $all: handleArray,\n  $eq: handleSingle,\n  $in: handle$in,\n  $ne: handleSingle,\n  $nin: handle$in,\n  $exists: $exists,\n  $type: $type\n};\n\n/**\n * Cast the given value with the given optional query operator.\n *\n * @param {String} [$conditional] query operator, like `$eq` or `$in`\n * @param {Any} val\n * @param {Query} context\n * @return {Any}\n * @api private\n */\n\nSchemaType.prototype.castForQuery = function($conditional, val, context) {\n  let handler;\n  if ($conditional != null) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional);\n    }\n    return handler.call(this, val, context);\n  }\n\n  try {\n    return this.applySetters(val, context);\n  } catch (err) {\n    if (err instanceof CastError && err.path === this.path && this.$fullPath != null) {\n      err.path = this.$fullPath;\n    }\n    throw err;\n  }\n};\n\n/**\n * Set & Get the `checkRequired` function\n * Override the function the required validator uses to check whether a value\n * passes the `required` check. Override this on the individual SchemaType.\n *\n * #### Example:\n *\n *     // Use this to allow empty strings to pass the `required` validator\n *     mongoose.Schema.Types.String.checkRequired(v => typeof v === 'string');\n *\n * @param {Function} [fn] If set, will overwrite the current set function\n * @return {Function} The input `fn` or the already set function\n * @static\n * @memberOf SchemaType\n * @function checkRequired\n * @api public\n */\n\nSchemaType.checkRequired = function(fn) {\n  if (arguments.length !== 0) {\n    this._checkRequired = fn;\n  }\n\n  return this._checkRequired;\n};\n\n/**\n * Default check for if this path satisfies the `required` validator.\n *\n * @param {Any} val\n * @return {Boolean} `true` when the value is not `null`, `false` otherwise\n * @api private\n */\n\nSchemaType.prototype.checkRequired = function(val) {\n  return val != null;\n};\n\n/**\n * Clone the current SchemaType\n *\n * @return {SchemaType} The cloned SchemaType instance\n * @api private\n */\n\nSchemaType.prototype.clone = function() {\n  const options = Object.assign({}, this.options);\n  const schematype = new this.constructor(this.path, options, this.instance);\n  schematype.validators = this.validators.slice();\n  if (this.requiredValidator !== undefined) schematype.requiredValidator = this.requiredValidator;\n  if (this.defaultValue !== undefined) schematype.defaultValue = this.defaultValue;\n  if (this.$immutable !== undefined && this.options.immutable === undefined) {\n    schematype.$immutable = this.$immutable;\n\n    handleImmutable(schematype);\n  }\n  if (this._index !== undefined) schematype._index = this._index;\n  if (this.selected !== undefined) schematype.selected = this.selected;\n  if (this.isRequired !== undefined) schematype.isRequired = this.isRequired;\n  if (this.originalRequiredValue !== undefined) schematype.originalRequiredValue = this.originalRequiredValue;\n  schematype.getters = this.getters.slice();\n  schematype.setters = this.setters.slice();\n  return schematype;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = SchemaType;\n\nexports.CastError = CastError;\n\nexports.ValidatorError = ValidatorError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3NjaGVtYVR5cGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBLHNCQUFzQixtQkFBTyxDQUFDLHVFQUFlO0FBQzdDLDBCQUEwQixtQkFBTyxDQUFDLG1HQUE2QjtBQUMvRCxnQkFBZ0IsbUJBQU8sQ0FBQywrRkFBMkI7QUFDbkQsY0FBYyxtQkFBTyxDQUFDLDJGQUF5QjtBQUMvQyxjQUFjLG1CQUFPLENBQUMsMkVBQWlCO0FBQ3ZDLHdCQUF3QixtQkFBTyxDQUFDLHFIQUFzQztBQUN0RSx3QkFBd0IsbUJBQU8sQ0FBQywrRkFBMkI7QUFDM0QsMEJBQTBCLG1CQUFPLENBQUMsbUdBQTZCO0FBQy9ELGtCQUFrQixtQkFBTyxDQUFDLG1GQUFxQjtBQUMvQyx5QkFBeUIsdUhBQTZDO0FBQ3RFLGNBQWMsbUJBQU8sQ0FBQywyREFBUztBQUMvQiw2QkFBNkIsMkhBQWlEO0FBQzlFLDJCQUEyQix5SEFBK0M7O0FBRTFFLDRCQUE0QiwwSEFBZ0Q7O0FBRTVFO0FBQ0E7O0FBRUEsZ0NBQWdDOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsY0FBYztBQUNqRCxrREFBa0Q7QUFDbEQ7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxtQkFBbUI7QUFDOUIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxjQUFjO0FBQ2pELGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsUUFBUSxnQ0FBZ0M7QUFDM0UsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxRQUFRLGdDQUFnQztBQUMzRSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFdBQVcsZ0JBQWdCO0FBQzNCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFdBQVcsZ0JBQWdCO0FBQzNCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsU0FBUztBQUNwQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsS0FBSztBQUNoQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsdUJBQXVCO0FBQ2hFO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsS0FBSywyQkFBMkI7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLFdBQVcscUNBQXFDO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsMkJBQTJCO0FBQzlEO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsMkJBQTJCO0FBQzlELHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsS0FBSztBQUNuQztBQUNBLDhCQUE4QixLQUFLO0FBQ25DO0FBQ0EsV0FBVyxjQUFjO0FBQ3pCLFlBQVksZUFBZTtBQUMzQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsUUFBUSwyQkFBMkI7QUFDakUsOEJBQThCLFFBQVEseUJBQXlCO0FBQy9ELDhCQUE4QixPQUFPLGlDQUFpQztBQUN0RSw4QkFBOEIsT0FBTywyQ0FBMkM7QUFDaEYsOEJBQThCLE9BQU8seUJBQXlCLGlDQUFpQztBQUMvRiw4QkFBOEIsUUFBUSxxQkFBcUIsOEJBQThCO0FBQ3pGO0FBQ0EsaUNBQWlDLGFBQWE7QUFDOUMsaUNBQWlDLDRCQUE0QjtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyw4QkFBOEI7QUFDekMsWUFBWSxZQUFZO0FBQ3hCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLFFBQVEsOEJBQThCO0FBQ3BFLDhCQUE4QixjQUFjO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixZQUFZLFlBQVk7QUFDeEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLG9CQUFvQjtBQUNwQjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixTQUFTLDZCQUE2QjtBQUNyRSwrQkFBK0IsYUFBYTtBQUM1QztBQUNBLFdBQVcsU0FBUztBQUNwQixZQUFZLFlBQVk7QUFDeEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osb0JBQW9CO0FBQ3BCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLFFBQVEsOEJBQThCO0FBQ3BFLDhCQUE4QixjQUFjO0FBQzVDO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFlBQVksWUFBWTtBQUN4QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osb0JBQW9CO0FBQ3BCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiwrQkFBK0I7QUFDaEQ7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLDRCQUE0QixjQUFjO0FBQzFDO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsSUFBSSxRQUFRLGVBQWUsVUFBVSxVQUFVO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxJQUFJLGVBQWUsSUFBSSxpQkFBaUI7QUFDbkY7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLElBQUksZUFBZSxJQUFJLGVBQWU7QUFDL0Q7QUFDQSxXQUFXLFNBQVM7QUFDcEIsWUFBWSxZQUFZO0FBQ3hCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsUUFBUTtBQUNSO0FBQ0E7QUFDQSw0QkFBNEIsOEJBQThCO0FBQzFEO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQSwwQkFBMEI7QUFDMUIsNEJBQTRCLEtBQUssc0JBQXNCO0FBQ3ZEO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLFlBQVksWUFBWTtBQUN4QjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLFFBQVEsZ0NBQWdDO0FBQ3RFO0FBQ0E7QUFDQSw4QkFBOEIsY0FBYztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsc0JBQXNCO0FBQ3BELGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQyx3QkFBd0IsVUFBVSxJQUFJLFFBQVEseUJBQXlCLEdBQUc7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVMsZ0NBQWdDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDhDQUE4QztBQUMvRCxxQkFBcUI7QUFDckIsUUFBUTtBQUNSO0FBQ0E7QUFDQSw2QkFBNkIsZ0RBQWdEO0FBQzdFO0FBQ0EsZ0NBQWdDO0FBQ2hDLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsa0NBQWtDO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxXQUFXLFVBQVU7QUFDckIsWUFBWSxZQUFZO0FBQ3hCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixRQUFRLHNCQUFzQjtBQUM1RDtBQUNBO0FBQ0EsOEJBQThCLFlBQVk7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QixRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUMsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDhDQUE4QztBQUMvRCxxQkFBcUI7QUFDckIsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDLHNDQUFzQztBQUN0QyxRQUFRO0FBQ1I7QUFDQSxXQUFXLFVBQVU7QUFDckIsWUFBWSxZQUFZO0FBQ3hCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVEsb0NBQW9DO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxNQUFNO0FBQ2pELG9CQUFvQixRQUFRLGlDQUFpQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixhQUFhO0FBQ2I7QUFDQSxvQkFBb0IsUUFBUSwrQkFBK0I7QUFDM0Q7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGdCQUFnQjtBQUNuRCxnRUFBZ0UsS0FBSyxzQkFBc0IsTUFBTTtBQUNqRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLHNCQUFzQjtBQUN4RDtBQUNBO0FBQ0EscUJBQXFCLFlBQVksMkJBQTJCLFlBQVk7QUFDeEU7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQywyQkFBMkI7QUFDNUQ7QUFDQSxvQ0FBb0M7QUFDcEMsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCLFlBQVk7QUFDWjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHdCQUF3QjtBQUNuQyxXQUFXLFVBQVU7QUFDckIsV0FBVyxpQkFBaUI7QUFDNUIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsaUJBQWlCO0FBQzVCLFdBQVcsUUFBUTtBQUNuQixZQUFZLFlBQVk7QUFDeEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLE1BQU07QUFDTixnRUFBZ0U7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSx5Q0FBeUMsWUFBWTtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLFFBQVEsNEJBQTRCO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixRQUFRLHdCQUF3QixNQUFNLGVBQWU7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsNkJBQTZCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyx5QkFBeUI7QUFDcEMsV0FBVyxrQkFBa0I7QUFDN0IsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsUUFBUTtBQUNuQixZQUFZLFlBQVk7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLGNBQWM7QUFDckQ7QUFDQTtBQUNBLHVDQUF1Qyx5QkFBeUI7QUFDaEUsNENBQTRDO0FBQzVDLDBDQUEwQztBQUMxQyxrREFBa0Q7QUFDbEQsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixRQUFRO0FBQ1I7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQyxZQUFZLFlBQVk7QUFDeEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCLFlBQVksS0FBSztBQUNqQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1DQUFtQyxRQUFRO0FBQzNDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCLFNBQVM7QUFDM0I7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLEtBQUssNkJBQTZCO0FBQ3hFLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsWUFBWSxZQUFZO0FBQ3hCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsVUFBVTtBQUNyQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixZQUFZLEtBQUs7QUFDakI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSwyQ0FBMkMsU0FBUztBQUNwRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHVFQUF1RTtBQUN2RTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQXVCLDJDQUEyQztBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFNBQVM7O0FBRXZCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVFQUF1RTtBQUN2RTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFlBQVk7QUFDdkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsVUFBVTtBQUNyQixXQUFXLFNBQVM7QUFDcEIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxPQUFPO0FBQ2xCLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixZQUFZLFVBQVU7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixZQUFZLFNBQVM7QUFDckI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWSxZQUFZO0FBQ3hCO0FBQ0E7O0FBRUE7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxpQkFBaUI7O0FBRWpCLHNCQUFzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3NjaGVtYVR5cGUuanM/NGVlMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qIVxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG5jb25zdCBNb25nb29zZUVycm9yID0gcmVxdWlyZSgnLi9lcnJvci9pbmRleCcpO1xuY29uc3QgU2NoZW1hVHlwZU9wdGlvbnMgPSByZXF1aXJlKCcuL29wdGlvbnMvc2NoZW1hVHlwZU9wdGlvbnMnKTtcbmNvbnN0ICRleGlzdHMgPSByZXF1aXJlKCcuL3NjaGVtYS9vcGVyYXRvcnMvZXhpc3RzJyk7XG5jb25zdCAkdHlwZSA9IHJlcXVpcmUoJy4vc2NoZW1hL29wZXJhdG9ycy90eXBlJyk7XG5jb25zdCBjbG9uZSA9IHJlcXVpcmUoJy4vaGVscGVycy9jbG9uZScpO1xuY29uc3QgaGFuZGxlSW1tdXRhYmxlID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NjaGVtYXR5cGUvaGFuZGxlSW1tdXRhYmxlJyk7XG5jb25zdCBpc0FzeW5jRnVuY3Rpb24gPSByZXF1aXJlKCcuL2hlbHBlcnMvaXNBc3luY0Z1bmN0aW9uJyk7XG5jb25zdCBpc1NpbXBsZVZhbGlkYXRvciA9IHJlcXVpcmUoJy4vaGVscGVycy9pc1NpbXBsZVZhbGlkYXRvcicpO1xuY29uc3QgaW1tZWRpYXRlID0gcmVxdWlyZSgnLi9oZWxwZXJzL2ltbWVkaWF0ZScpO1xuY29uc3Qgc2NoZW1hVHlwZVN5bWJvbCA9IHJlcXVpcmUoJy4vaGVscGVycy9zeW1ib2xzJykuc2NoZW1hVHlwZVN5bWJvbDtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuY29uc3QgdmFsaWRhdG9yRXJyb3JTeW1ib2wgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ltYm9scycpLnZhbGlkYXRvckVycm9yU3ltYm9sO1xuY29uc3QgZG9jdW1lbnRJc01vZGlmaWVkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3N5bWJvbHMnKS5kb2N1bWVudElzTW9kaWZpZWQ7XG5cbmNvbnN0IHBvcHVsYXRlTW9kZWxTeW1ib2wgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ltYm9scycpLnBvcHVsYXRlTW9kZWxTeW1ib2w7XG5cbmNvbnN0IENhc3RFcnJvciA9IE1vbmdvb3NlRXJyb3IuQ2FzdEVycm9yO1xuY29uc3QgVmFsaWRhdG9yRXJyb3IgPSBNb25nb29zZUVycm9yLlZhbGlkYXRvckVycm9yO1xuXG5jb25zdCBzZXRPcHRpb25zRm9yRGVmYXVsdHMgPSB7IF9za2lwTWFya01vZGlmaWVkOiB0cnVlIH07XG5cbi8qKlxuICogU2NoZW1hVHlwZSBjb25zdHJ1Y3Rvci4gRG8gKipub3QqKiBpbnN0YW50aWF0ZSBgU2NoZW1hVHlwZWAgZGlyZWN0bHkuXG4gKiBNb25nb29zZSBjb252ZXJ0cyB5b3VyIHNjaGVtYSBwYXRocyBpbnRvIFNjaGVtYVR5cGVzIGF1dG9tYXRpY2FsbHkuXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBjb25zdCBzY2hlbWEgPSBuZXcgU2NoZW1hKHsgbmFtZTogU3RyaW5nIH0pO1xuICogICAgIHNjaGVtYS5wYXRoKCduYW1lJykgaW5zdGFuY2VvZiBTY2hlbWFUeXBlOyAvLyB0cnVlXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHBhdGhcbiAqIEBwYXJhbSB7U2NoZW1hVHlwZU9wdGlvbnN9IFtvcHRpb25zXSBTZWUgW1NjaGVtYVR5cGVPcHRpb25zIGRvY3NdKGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9hcGkvc2NoZW1hdHlwZW9wdGlvbnMuaHRtbClcbiAqIEBwYXJhbSB7U3RyaW5nfSBbaW5zdGFuY2VdXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFNjaGVtYVR5cGUocGF0aCwgb3B0aW9ucywgaW5zdGFuY2UpIHtcbiAgdGhpc1tzY2hlbWFUeXBlU3ltYm9sXSA9IHRydWU7XG4gIHRoaXMucGF0aCA9IHBhdGg7XG4gIHRoaXMuaW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgdGhpcy52YWxpZGF0b3JzID0gW107XG4gIHRoaXMuZ2V0dGVycyA9IHRoaXMuY29uc3RydWN0b3IuaGFzT3duUHJvcGVydHkoJ2dldHRlcnMnKSA/XG4gICAgdGhpcy5jb25zdHJ1Y3Rvci5nZXR0ZXJzLnNsaWNlKCkgOlxuICAgIFtdO1xuICB0aGlzLnNldHRlcnMgPSB0aGlzLmNvbnN0cnVjdG9yLmhhc093blByb3BlcnR5KCdzZXR0ZXJzJykgP1xuICAgIHRoaXMuY29uc3RydWN0b3Iuc2V0dGVycy5zbGljZSgpIDpcbiAgICBbXTtcblxuICB0aGlzLnNwbGl0UGF0aCgpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IHRoaXMuY29uc3RydWN0b3IuZGVmYXVsdE9wdGlvbnMgfHwge307XG4gIGNvbnN0IGRlZmF1bHRPcHRpb25zS2V5cyA9IE9iamVjdC5rZXlzKGRlZmF1bHRPcHRpb25zKTtcblxuICBmb3IgKGNvbnN0IG9wdGlvbiBvZiBkZWZhdWx0T3B0aW9uc0tleXMpIHtcbiAgICBpZiAob3B0aW9uID09PSAndmFsaWRhdGUnKSB7XG4gICAgICB0aGlzLnZhbGlkYXRlKGRlZmF1bHRPcHRpb25zLnZhbGlkYXRlKTtcbiAgICB9IGVsc2UgaWYgKGRlZmF1bHRPcHRpb25zLmhhc093blByb3BlcnR5KG9wdGlvbikgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCBvcHRpb24pKSB7XG4gICAgICBvcHRpb25zW29wdGlvbl0gPSBkZWZhdWx0T3B0aW9uc1tvcHRpb25dO1xuICAgIH1cbiAgfVxuXG4gIGlmIChvcHRpb25zLnNlbGVjdCA9PSBudWxsKSB7XG4gICAgZGVsZXRlIG9wdGlvbnMuc2VsZWN0O1xuICB9XG5cbiAgY29uc3QgT3B0aW9ucyA9IHRoaXMuT3B0aW9uc0NvbnN0cnVjdG9yIHx8IFNjaGVtYVR5cGVPcHRpb25zO1xuICB0aGlzLm9wdGlvbnMgPSBuZXcgT3B0aW9ucyhvcHRpb25zKTtcbiAgdGhpcy5faW5kZXggPSBudWxsO1xuXG5cbiAgaWYgKHV0aWxzLmhhc1VzZXJEZWZpbmVkUHJvcGVydHkodGhpcy5vcHRpb25zLCAnaW1tdXRhYmxlJykpIHtcbiAgICB0aGlzLiRpbW11dGFibGUgPSB0aGlzLm9wdGlvbnMuaW1tdXRhYmxlO1xuXG4gICAgaGFuZGxlSW1tdXRhYmxlKHRoaXMpO1xuICB9XG5cbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMub3B0aW9ucyk7XG4gIGZvciAoY29uc3QgcHJvcCBvZiBrZXlzKSB7XG4gICAgaWYgKHByb3AgPT09ICdjYXN0Jykge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5vcHRpb25zW3Byb3BdKSkge1xuICAgICAgICB0aGlzLmNhc3RGdW5jdGlvbi5hcHBseSh0aGlzLCB0aGlzLm9wdGlvbnNbcHJvcF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jYXN0RnVuY3Rpb24odGhpcy5vcHRpb25zW3Byb3BdKTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaGFzVXNlckRlZmluZWRQcm9wZXJ0eSh0aGlzLm9wdGlvbnMsIHByb3ApICYmIHR5cGVvZiB0aGlzW3Byb3BdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyB7IHVuaXF1ZTogdHJ1ZSwgaW5kZXg6IHRydWUgfVxuICAgICAgaWYgKHByb3AgPT09ICdpbmRleCcgJiYgdGhpcy5faW5kZXgpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuaW5kZXggPT09IGZhbHNlKSB7XG4gICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLl9pbmRleDtcbiAgICAgICAgICBpZiAodHlwZW9mIGluZGV4ID09PSAnb2JqZWN0JyAmJiBpbmRleCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXgudW5pcXVlKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUGF0aCBcIicgKyB0aGlzLnBhdGggKyAnXCIgbWF5IG5vdCBoYXZlIGBpbmRleGAgJyArXG4gICAgICAgICAgICAgICAgJ3NldCB0byBmYWxzZSBhbmQgYHVuaXF1ZWAgc2V0IHRvIHRydWUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbmRleC5zcGFyc2UpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQYXRoIFwiJyArIHRoaXMucGF0aCArICdcIiBtYXkgbm90IGhhdmUgYGluZGV4YCAnICtcbiAgICAgICAgICAgICAgICAnc2V0IHRvIGZhbHNlIGFuZCBgc3BhcnNlYCBzZXQgdG8gdHJ1ZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuX2luZGV4ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHZhbCA9IG9wdGlvbnNbcHJvcF07XG4gICAgICAvLyBTcGVjaWFsIGNhc2Ugc28gd2UgZG9uJ3Qgc2NyZXcgdXAgYXJyYXkgZGVmYXVsdHMsIHNlZSBnaC01NzgwXG4gICAgICBpZiAocHJvcCA9PT0gJ2RlZmF1bHQnKSB7XG4gICAgICAgIHRoaXMuZGVmYXVsdCh2YWwpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgb3B0cyA9IEFycmF5LmlzQXJyYXkodmFsKSA/IHZhbCA6IFt2YWxdO1xuXG4gICAgICB0aGlzW3Byb3BdLmFwcGx5KHRoaXMsIG9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnJCRjb250ZXh0Jywge1xuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgdmFsdWU6IG51bGxcbiAgfSk7XG59XG5cbi8qKlxuICogVGhlIGNsYXNzIHRoYXQgTW9uZ29vc2UgdXNlcyBpbnRlcm5hbGx5IHRvIGluc3RhbnRpYXRlIHRoaXMgU2NoZW1hVHlwZSdzIGBvcHRpb25zYCBwcm9wZXJ0eS5cbiAqIEBtZW1iZXJPZiBTY2hlbWFUeXBlXG4gKiBAaW5zdGFuY2VcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNjaGVtYVR5cGUucHJvdG90eXBlLk9wdGlvbnNDb25zdHJ1Y3RvciA9IFNjaGVtYVR5cGVPcHRpb25zO1xuXG4vKipcbiAqIFRoZSBwYXRoIHRvIHRoaXMgU2NoZW1hVHlwZSBpbiBhIFNjaGVtYS5cbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKlxuICogICAgIGNvbnN0IHNjaGVtYSA9IG5ldyBTY2hlbWEoeyBuYW1lOiBTdHJpbmcgfSk7XG4gKiAgICAgc2NoZW1hLnBhdGgoJ25hbWUnKS5wYXRoOyAvLyAnbmFtZSdcbiAqXG4gKiBAcHJvcGVydHkgcGF0aFxuICogQGFwaSBwdWJsaWNcbiAqIEBtZW1iZXJPZiBTY2hlbWFUeXBlXG4gKi9cblxuU2NoZW1hVHlwZS5wcm90b3R5cGUucGF0aDtcblxuLyoqXG4gKiBUaGUgdmFsaWRhdG9ycyB0aGF0IE1vbmdvb3NlIHNob3VsZCBydW4gdG8gdmFsaWRhdGUgcHJvcGVydGllcyBhdCB0aGlzIFNjaGVtYVR5cGUncyBwYXRoLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3Qgc2NoZW1hID0gbmV3IFNjaGVtYSh7IG5hbWU6IHsgdHlwZTogU3RyaW5nLCByZXF1aXJlZDogdHJ1ZSB9IH0pO1xuICogICAgIHNjaGVtYS5wYXRoKCduYW1lJykudmFsaWRhdG9ycy5sZW5ndGg7IC8vIDEsIHRoZSBgcmVxdWlyZWRgIHZhbGlkYXRvclxuICpcbiAqIEBwcm9wZXJ0eSB2YWxpZGF0b3JzXG4gKiBAYXBpIHB1YmxpY1xuICogQG1lbWJlck9mIFNjaGVtYVR5cGVcbiAqL1xuXG5TY2hlbWFUeXBlLnByb3RvdHlwZS52YWxpZGF0b3JzO1xuXG4vKipcbiAqIFRydWUgaWYgdGhpcyBTY2hlbWFUeXBlIGhhcyBhIHJlcXVpcmVkIHZhbGlkYXRvci4gRmFsc2Ugb3RoZXJ3aXNlLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3Qgc2NoZW1hID0gbmV3IFNjaGVtYSh7IG5hbWU6IHsgdHlwZTogU3RyaW5nLCByZXF1aXJlZDogdHJ1ZSB9IH0pO1xuICogICAgIHNjaGVtYS5wYXRoKCduYW1lJykuaXNSZXF1aXJlZDsgLy8gdHJ1ZVxuICpcbiAqICAgICBzY2hlbWEucGF0aCgnbmFtZScpLnJlcXVpcmVkKGZhbHNlKTtcbiAqICAgICBzY2hlbWEucGF0aCgnbmFtZScpLmlzUmVxdWlyZWQ7IC8vIGZhbHNlXG4gKlxuICogQHByb3BlcnR5IGlzUmVxdWlyZWRcbiAqIEBhcGkgcHVibGljXG4gKiBAbWVtYmVyT2YgU2NoZW1hVHlwZVxuICovXG5cblNjaGVtYVR5cGUucHJvdG90eXBlLmlzUmVxdWlyZWQ7XG5cbi8qKlxuICogU3BsaXQgdGhlIGN1cnJlbnQgZG90dGV0IHBhdGggaW50byBzZWdtZW50c1xuICpcbiAqIEByZXR1cm4ge1N0cmluZ1tdfHVuZGVmaW5lZH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNjaGVtYVR5cGUucHJvdG90eXBlLnNwbGl0UGF0aCA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5fcHJlc3BsaXRQYXRoICE9IG51bGwpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJlc3BsaXRQYXRoO1xuICB9XG4gIGlmICh0aGlzLnBhdGggPT0gbnVsbCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICB0aGlzLl9wcmVzcGxpdFBhdGggPSB0aGlzLnBhdGguaW5kZXhPZignLicpID09PSAtMSA/IFt0aGlzLnBhdGhdIDogdGhpcy5wYXRoLnNwbGl0KCcuJyk7XG4gIHJldHVybiB0aGlzLl9wcmVzcGxpdFBhdGg7XG59O1xuXG4vKipcbiAqIEdldC9zZXQgdGhlIGZ1bmN0aW9uIHVzZWQgdG8gY2FzdCBhcmJpdHJhcnkgdmFsdWVzIHRvIHRoaXMgdHlwZS5cbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKlxuICogICAgIC8vIERpc2FsbG93IGBudWxsYCBmb3IgbnVtYmVycywgYW5kIGRvbid0IHRyeSB0byBjYXN0IGFueSB2YWx1ZXMgdG9cbiAqICAgICAvLyBudW1iZXJzLCBzbyBldmVuIHN0cmluZ3MgbGlrZSAnMTIzJyB3aWxsIGNhdXNlIGEgQ2FzdEVycm9yLlxuICogICAgIG1vbmdvb3NlLk51bWJlci5jYXN0KGZ1bmN0aW9uKHYpIHtcbiAqICAgICAgIGFzc2VydC5vayh2ID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIHYgPT09ICdudW1iZXInKTtcbiAqICAgICAgIHJldHVybiB2O1xuICogICAgIH0pO1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258ZmFsc2V9IGNhc3RlciBGdW5jdGlvbiB0aGF0IGNhc3RzIGFyYml0cmFyeSB2YWx1ZXMgdG8gdGhpcyB0eXBlLCBvciB0aHJvd3MgYW4gZXJyb3IgaWYgY2FzdGluZyBmYWlsZWRcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIFNjaGVtYVR5cGVcbiAqIEBmdW5jdGlvbiBjYXN0XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNjaGVtYVR5cGUuY2FzdCA9IGZ1bmN0aW9uIGNhc3QoY2FzdGVyKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Nhc3Q7XG4gIH1cbiAgaWYgKGNhc3RlciA9PT0gZmFsc2UpIHtcbiAgICBjYXN0ZXIgPSB2ID0+IHY7XG4gIH1cbiAgdGhpcy5fY2FzdCA9IGNhc3RlcjtcblxuICByZXR1cm4gdGhpcy5fY2FzdDtcbn07XG5cbi8qKlxuICogR2V0L3NldCB0aGUgZnVuY3Rpb24gdXNlZCB0byBjYXN0IGFyYml0cmFyeSB2YWx1ZXMgdG8gdGhpcyBwYXJ0aWN1bGFyIHNjaGVtYXR5cGUgaW5zdGFuY2UuXG4gKiBPdmVycmlkZXMgYFNjaGVtYVR5cGUuY2FzdCgpYC5cbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKlxuICogICAgIC8vIERpc2FsbG93IGBudWxsYCBmb3IgbnVtYmVycywgYW5kIGRvbid0IHRyeSB0byBjYXN0IGFueSB2YWx1ZXMgdG9cbiAqICAgICAvLyBudW1iZXJzLCBzbyBldmVuIHN0cmluZ3MgbGlrZSAnMTIzJyB3aWxsIGNhdXNlIGEgQ2FzdEVycm9yLlxuICogICAgIGNvbnN0IG51bWJlciA9IG5ldyBtb25nb29zZS5OdW1iZXIoJ215cGF0aCcsIHt9KTtcbiAqICAgICBudW1iZXIuY2FzdChmdW5jdGlvbih2KSB7XG4gKiAgICAgICBhc3NlcnQub2sodiA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiB2ID09PSAnbnVtYmVyJyk7XG4gKiAgICAgICByZXR1cm4gdjtcbiAqICAgICB9KTtcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufGZhbHNlfSBjYXN0ZXIgRnVuY3Rpb24gdGhhdCBjYXN0cyBhcmJpdHJhcnkgdmFsdWVzIHRvIHRoaXMgdHlwZSwgb3IgdGhyb3dzIGFuIGVycm9yIGlmIGNhc3RpbmcgZmFpbGVkXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBtZW1iZXJPZiBTY2hlbWFUeXBlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNjaGVtYVR5cGUucHJvdG90eXBlLmNhc3RGdW5jdGlvbiA9IGZ1bmN0aW9uIGNhc3RGdW5jdGlvbihjYXN0ZXIsIG1lc3NhZ2UpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdGhpcy5fY2FzdEZ1bmN0aW9uO1xuICB9XG5cbiAgaWYgKGNhc3RlciA9PT0gZmFsc2UpIHtcbiAgICBjYXN0ZXIgPSB0aGlzLmNvbnN0cnVjdG9yLl9kZWZhdWx0Q2FzdGVyIHx8ICh2ID0+IHYpO1xuICB9XG4gIGlmICh0eXBlb2YgY2FzdGVyID09PSAnc3RyaW5nJykge1xuICAgIHRoaXMuX2Nhc3RFcnJvck1lc3NhZ2UgPSBjYXN0ZXI7XG4gICAgcmV0dXJuIHRoaXMuX2Nhc3RGdW5jdGlvbjtcbiAgfVxuICBpZiAoY2FzdGVyICE9IG51bGwpIHtcbiAgICB0aGlzLl9jYXN0RnVuY3Rpb24gPSBjYXN0ZXI7XG4gIH1cbiAgaWYgKG1lc3NhZ2UgIT0gbnVsbCkge1xuICAgIHRoaXMuX2Nhc3RFcnJvck1lc3NhZ2UgPSBtZXNzYWdlO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX2Nhc3RGdW5jdGlvbjtcbn07XG5cbi8qKlxuICogVGhlIGZ1bmN0aW9uIHRoYXQgTW9uZ29vc2UgY2FsbHMgdG8gY2FzdCBhcmJpdHJhcnkgdmFsdWVzIHRvIHRoaXMgU2NoZW1hVHlwZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsdWUgdmFsdWUgdG8gY2FzdFxuICogQHBhcmFtIHtEb2N1bWVudH0gZG9jIGRvY3VtZW50IHRoYXQgdHJpZ2dlcnMgdGhlIGNhc3RpbmdcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaW5pdFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5TY2hlbWFUeXBlLnByb3RvdHlwZS5jYXN0ID0gZnVuY3Rpb24gY2FzdCgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdCYXNlIFNjaGVtYVR5cGUgY2xhc3MgZG9lcyBub3QgaW1wbGVtZW50IGEgYGNhc3QoKWAgZnVuY3Rpb24nKTtcbn07XG5cbi8qKlxuICogU2V0cyBhIGRlZmF1bHQgb3B0aW9uIGZvciB0aGlzIHNjaGVtYSB0eXBlLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgLy8gTWFrZSBhbGwgc3RyaW5ncyBiZSB0cmltbWVkIGJ5IGRlZmF1bHRcbiAqICAgICBtb25nb29zZS5TY2hlbWFUeXBlcy5TdHJpbmcuc2V0KCd0cmltJywgdHJ1ZSk7XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbiBUaGUgbmFtZSBvZiB0aGUgb3B0aW9uIHlvdSdkIGxpa2UgdG8gc2V0IChlLmcuIHRyaW0sIGxvd2VyY2FzZSwgZXRjLi4uKVxuICogQHBhcmFtIHtBbnl9IHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgb3B0aW9uIHlvdSdkIGxpa2UgdG8gc2V0LlxuICogQHJldHVybiB7dm9pZH1cbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBTY2hlbWFUeXBlXG4gKiBAZnVuY3Rpb24gc2V0XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNjaGVtYVR5cGUuc2V0ID0gZnVuY3Rpb24gc2V0KG9wdGlvbiwgdmFsdWUpIHtcbiAgaWYgKCF0aGlzLmhhc093blByb3BlcnR5KCdkZWZhdWx0T3B0aW9ucycpKSB7XG4gICAgdGhpcy5kZWZhdWx0T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuZGVmYXVsdE9wdGlvbnMpO1xuICB9XG4gIHRoaXMuZGVmYXVsdE9wdGlvbnNbb3B0aW9uXSA9IHZhbHVlO1xufTtcblxuLyoqXG4gKiBBdHRhY2hlcyBhIGdldHRlciBmb3IgYWxsIGluc3RhbmNlcyBvZiB0aGlzIHNjaGVtYSB0eXBlLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgLy8gTWFrZSBhbGwgbnVtYmVycyByb3VuZCBkb3duXG4gKiAgICAgbW9uZ29vc2UuTnVtYmVyLmdldChmdW5jdGlvbih2KSB7IHJldHVybiBNYXRoLmZsb29yKHYpOyB9KTtcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBnZXR0ZXJcbiAqIEByZXR1cm4ge3RoaXN9XG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgU2NoZW1hVHlwZVxuICogQGZ1bmN0aW9uIGdldFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5TY2hlbWFUeXBlLmdldCA9IGZ1bmN0aW9uKGdldHRlcikge1xuICB0aGlzLmdldHRlcnMgPSB0aGlzLmhhc093blByb3BlcnR5KCdnZXR0ZXJzJykgPyB0aGlzLmdldHRlcnMgOiBbXTtcbiAgdGhpcy5nZXR0ZXJzLnB1c2goZ2V0dGVyKTtcbn07XG5cbi8qKlxuICogU2V0cyBhIGRlZmF1bHQgdmFsdWUgZm9yIHRoaXMgU2NoZW1hVHlwZS5cbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKlxuICogICAgIGNvbnN0IHNjaGVtYSA9IG5ldyBTY2hlbWEoeyBuOiB7IHR5cGU6IE51bWJlciwgZGVmYXVsdDogMTAgfSlcbiAqICAgICBjb25zdCBNID0gZGIubW9kZWwoJ00nLCBzY2hlbWEpXG4gKiAgICAgY29uc3QgbSA9IG5ldyBNO1xuICogICAgIGNvbnNvbGUubG9nKG0ubikgLy8gMTBcbiAqXG4gKiBEZWZhdWx0cyBjYW4gYmUgZWl0aGVyIGBmdW5jdGlvbnNgIHdoaWNoIHJldHVybiB0aGUgdmFsdWUgdG8gdXNlIGFzIHRoZSBkZWZhdWx0IG9yIHRoZSBsaXRlcmFsIHZhbHVlIGl0c2VsZi4gRWl0aGVyIHdheSwgdGhlIHZhbHVlIHdpbGwgYmUgY2FzdCBiYXNlZCBvbiBpdHMgc2NoZW1hIHR5cGUgYmVmb3JlIGJlaW5nIHNldCBkdXJpbmcgZG9jdW1lbnQgY3JlYXRpb24uXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICAvLyB2YWx1ZXMgYXJlIGNhc3Q6XG4gKiAgICAgY29uc3Qgc2NoZW1hID0gbmV3IFNjaGVtYSh7IGFOdW1iZXI6IHsgdHlwZTogTnVtYmVyLCBkZWZhdWx0OiA0LjgxNTE2MjM0MiB9fSlcbiAqICAgICBjb25zdCBNID0gZGIubW9kZWwoJ00nLCBzY2hlbWEpXG4gKiAgICAgY29uc3QgbSA9IG5ldyBNO1xuICogICAgIGNvbnNvbGUubG9nKG0uYU51bWJlcikgLy8gNC44MTUxNjIzNDJcbiAqXG4gKiAgICAgLy8gZGVmYXVsdCB1bmlxdWUgb2JqZWN0cyBmb3IgTWl4ZWQgdHlwZXM6XG4gKiAgICAgY29uc3Qgc2NoZW1hID0gbmV3IFNjaGVtYSh7IG1peGVkOiBTY2hlbWEuVHlwZXMuTWl4ZWQgfSk7XG4gKiAgICAgc2NoZW1hLnBhdGgoJ21peGVkJykuZGVmYXVsdChmdW5jdGlvbiAoKSB7XG4gKiAgICAgICByZXR1cm4ge307XG4gKiAgICAgfSk7XG4gKlxuICogICAgIC8vIGlmIHdlIGRvbid0IHVzZSBhIGZ1bmN0aW9uIHRvIHJldHVybiBvYmplY3QgbGl0ZXJhbHMgZm9yIE1peGVkIGRlZmF1bHRzLFxuICogICAgIC8vIGVhY2ggZG9jdW1lbnQgd2lsbCByZWNlaXZlIGEgcmVmZXJlbmNlIHRvIHRoZSBzYW1lIG9iamVjdCBsaXRlcmFsIGNyZWF0aW5nXG4gKiAgICAgLy8gYSBcInNoYXJlZFwiIG9iamVjdCBpbnN0YW5jZTpcbiAqICAgICBjb25zdCBzY2hlbWEgPSBuZXcgU2NoZW1hKHsgbWl4ZWQ6IFNjaGVtYS5UeXBlcy5NaXhlZCB9KTtcbiAqICAgICBzY2hlbWEucGF0aCgnbWl4ZWQnKS5kZWZhdWx0KHt9KTtcbiAqICAgICBjb25zdCBNID0gZGIubW9kZWwoJ00nLCBzY2hlbWEpO1xuICogICAgIGNvbnN0IG0xID0gbmV3IE07XG4gKiAgICAgbTEubWl4ZWQuYWRkZWQgPSAxO1xuICogICAgIGNvbnNvbGUubG9nKG0xLm1peGVkKTsgLy8geyBhZGRlZDogMSB9XG4gKiAgICAgY29uc3QgbTIgPSBuZXcgTTtcbiAqICAgICBjb25zb2xlLmxvZyhtMi5taXhlZCk7IC8vIHsgYWRkZWQ6IDEgfVxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258YW55fSB2YWwgVGhlIGRlZmF1bHQgdmFsdWUgdG8gc2V0XG4gKiBAcmV0dXJuIHtBbnl8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBzZXQgZGVmYXVsdCB2YWx1ZS5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU2NoZW1hVHlwZS5wcm90b3R5cGUuZGVmYXVsdCA9IGZ1bmN0aW9uKHZhbCkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIGlmICh2YWwgPT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5kZWZhdWx0VmFsdWUgPSB2b2lkIDA7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH1cblxuICAgIGlmICh2YWwgIT0gbnVsbCAmJiB2YWwuaW5zdGFuY2VPZlNjaGVtYSkge1xuICAgICAgdGhyb3cgbmV3IE1vbmdvb3NlRXJyb3IoJ0Nhbm5vdCBzZXQgZGVmYXVsdCB2YWx1ZSBvZiBwYXRoIGAnICsgdGhpcy5wYXRoICtcbiAgICAgICAgJ2AgdG8gYSBtb25nb29zZSBTY2hlbWEgaW5zdGFuY2UuJyk7XG4gICAgfVxuXG4gICAgdGhpcy5kZWZhdWx0VmFsdWUgPSB2YWw7XG4gICAgcmV0dXJuIHRoaXMuZGVmYXVsdFZhbHVlO1xuICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgdGhpcy5kZWZhdWx0VmFsdWUgPSBbLi4uYXJndW1lbnRzXTtcbiAgfVxuICByZXR1cm4gdGhpcy5kZWZhdWx0VmFsdWU7XG59O1xuXG4vKipcbiAqIERlY2xhcmVzIHRoZSBpbmRleCBvcHRpb25zIGZvciB0aGlzIHNjaGVtYXR5cGUuXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBjb25zdCBzID0gbmV3IFNjaGVtYSh7IG5hbWU6IHsgdHlwZTogU3RyaW5nLCBpbmRleDogdHJ1ZSB9KVxuICogICAgIGNvbnN0IHMgPSBuZXcgU2NoZW1hKHsgbmFtZTogeyB0eXBlOiBTdHJpbmcsIGluZGV4OiAtMSB9KVxuICogICAgIGNvbnN0IHMgPSBuZXcgU2NoZW1hKHsgbG9jOiB7IHR5cGU6IFtOdW1iZXJdLCBpbmRleDogJ2hhc2hlZCcgfSlcbiAqICAgICBjb25zdCBzID0gbmV3IFNjaGVtYSh7IGxvYzogeyB0eXBlOiBbTnVtYmVyXSwgaW5kZXg6ICcyZCcsIHNwYXJzZTogdHJ1ZSB9KVxuICogICAgIGNvbnN0IHMgPSBuZXcgU2NoZW1hKHsgbG9jOiB7IHR5cGU6IFtOdW1iZXJdLCBpbmRleDogeyB0eXBlOiAnMmRzcGhlcmUnLCBzcGFyc2U6IHRydWUgfX0pXG4gKiAgICAgY29uc3QgcyA9IG5ldyBTY2hlbWEoeyBkYXRlOiB7IHR5cGU6IERhdGUsIGluZGV4OiB7IHVuaXF1ZTogdHJ1ZSwgZXhwaXJlczogJzFkJyB9fSlcbiAqICAgICBzLnBhdGgoJ215LnBhdGgnKS5pbmRleCh0cnVlKTtcbiAqICAgICBzLnBhdGgoJ215LmRhdGUnKS5pbmRleCh7IGV4cGlyZXM6IDYwIH0pO1xuICogICAgIHMucGF0aCgnbXkucGF0aCcpLmluZGV4KHsgdW5pcXVlOiB0cnVlLCBzcGFyc2U6IHRydWUgfSk7XG4gKlxuICogIyMjIyBOb3RlOlxuICpcbiAqIF9JbmRleGVzIGFyZSBjcmVhdGVkIFtpbiB0aGUgYmFja2dyb3VuZF0oaHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZG9jcy9tYW51YWwvY29yZS9pbmRleC1jcmVhdGlvbi8jaW5kZXgtY3JlYXRpb24tYmFja2dyb3VuZClcbiAqIGJ5IGRlZmF1bHQuIElmIGBiYWNrZ3JvdW5kYCBpcyBzZXQgdG8gYGZhbHNlYCwgTW9uZ29EQiB3aWxsIG5vdCBleGVjdXRlIGFueVxuICogcmVhZC93cml0ZSBvcGVyYXRpb25zIHlvdSBzZW5kIHVudGlsIHRoZSBpbmRleCBidWlsZC5cbiAqIFNwZWNpZnkgYGJhY2tncm91bmQ6IGZhbHNlYCB0byBvdmVycmlkZSBNb25nb29zZSdzIGRlZmF1bHQuX1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEJvb2xlYW58U3RyaW5nfE51bWJlcn0gb3B0aW9uc1xuICogQHJldHVybiB7U2NoZW1hVHlwZX0gdGhpc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5TY2hlbWFUeXBlLnByb3RvdHlwZS5pbmRleCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgdGhpcy5faW5kZXggPSBvcHRpb25zO1xuICB1dGlscy5leHBpcmVzKHRoaXMuX2luZGV4KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIERlY2xhcmVzIGFuIHVuaXF1ZSBpbmRleC5cbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKlxuICogICAgIGNvbnN0IHMgPSBuZXcgU2NoZW1hKHsgbmFtZTogeyB0eXBlOiBTdHJpbmcsIHVuaXF1ZTogdHJ1ZSB9IH0pO1xuICogICAgIHMucGF0aCgnbmFtZScpLmluZGV4KHsgdW5pcXVlOiB0cnVlIH0pO1xuICpcbiAqIF9OT1RFOiB2aW9sYXRpbmcgdGhlIGNvbnN0cmFpbnQgcmV0dXJucyBhbiBgRTExMDAwYCBlcnJvciBmcm9tIE1vbmdvREIgd2hlbiBzYXZpbmcsIG5vdCBhIE1vbmdvb3NlIHZhbGlkYXRpb24gZXJyb3IuX1xuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gYm9vbFxuICogQHJldHVybiB7U2NoZW1hVHlwZX0gdGhpc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5TY2hlbWFUeXBlLnByb3RvdHlwZS51bmlxdWUgPSBmdW5jdGlvbihib29sKSB7XG4gIGlmICh0aGlzLl9pbmRleCA9PT0gZmFsc2UpIHtcbiAgICBpZiAoIWJvb2wpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdQYXRoIFwiJyArIHRoaXMucGF0aCArICdcIiBtYXkgbm90IGhhdmUgYGluZGV4YCBzZXQgdG8gJyArXG4gICAgICAnZmFsc2UgYW5kIGB1bmlxdWVgIHNldCB0byB0cnVlJyk7XG4gIH1cblxuICBpZiAoIXRoaXMub3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnaW5kZXgnKSAmJiBib29sID09PSBmYWxzZSkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgaWYgKHRoaXMuX2luZGV4ID09IG51bGwgfHwgdGhpcy5faW5kZXggPT09IHRydWUpIHtcbiAgICB0aGlzLl9pbmRleCA9IHt9O1xuICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLl9pbmRleCA9PT0gJ3N0cmluZycpIHtcbiAgICB0aGlzLl9pbmRleCA9IHsgdHlwZTogdGhpcy5faW5kZXggfTtcbiAgfVxuXG4gIHRoaXMuX2luZGV4LnVuaXF1ZSA9IGJvb2w7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBEZWNsYXJlcyBhIGZ1bGwgdGV4dCBpbmRleC5cbiAqXG4gKiAjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgIGNvbnN0IHMgPSBuZXcgU2NoZW1hKHsgbmFtZSA6IHsgdHlwZTogU3RyaW5nLCB0ZXh0IDogdHJ1ZSB9IH0pXG4gKiAgICAgIHMucGF0aCgnbmFtZScpLmluZGV4KHsgdGV4dCA6IHRydWUgfSk7XG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBib29sXG4gKiBAcmV0dXJuIHtTY2hlbWFUeXBlfSB0aGlzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNjaGVtYVR5cGUucHJvdG90eXBlLnRleHQgPSBmdW5jdGlvbihib29sKSB7XG4gIGlmICh0aGlzLl9pbmRleCA9PT0gZmFsc2UpIHtcbiAgICBpZiAoIWJvb2wpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1BhdGggXCInICsgdGhpcy5wYXRoICsgJ1wiIG1heSBub3QgaGF2ZSBgaW5kZXhgIHNldCB0byAnICtcbiAgICAgICdmYWxzZSBhbmQgYHRleHRgIHNldCB0byB0cnVlJyk7XG4gIH1cblxuICBpZiAoIXRoaXMub3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnaW5kZXgnKSAmJiBib29sID09PSBmYWxzZSkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgaWYgKHRoaXMuX2luZGV4ID09PSBudWxsIHx8IHRoaXMuX2luZGV4ID09PSB1bmRlZmluZWQgfHxcbiAgICB0eXBlb2YgdGhpcy5faW5kZXggPT09ICdib29sZWFuJykge1xuICAgIHRoaXMuX2luZGV4ID0ge307XG4gIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuX2luZGV4ID09PSAnc3RyaW5nJykge1xuICAgIHRoaXMuX2luZGV4ID0geyB0eXBlOiB0aGlzLl9pbmRleCB9O1xuICB9XG5cbiAgdGhpcy5faW5kZXgudGV4dCA9IGJvb2w7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBEZWNsYXJlcyBhIHNwYXJzZSBpbmRleC5cbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKlxuICogICAgIGNvbnN0IHMgPSBuZXcgU2NoZW1hKHsgbmFtZTogeyB0eXBlOiBTdHJpbmcsIHNwYXJzZTogdHJ1ZSB9IH0pO1xuICogICAgIHMucGF0aCgnbmFtZScpLmluZGV4KHsgc3BhcnNlOiB0cnVlIH0pO1xuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gYm9vbFxuICogQHJldHVybiB7U2NoZW1hVHlwZX0gdGhpc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5TY2hlbWFUeXBlLnByb3RvdHlwZS5zcGFyc2UgPSBmdW5jdGlvbihib29sKSB7XG4gIGlmICh0aGlzLl9pbmRleCA9PT0gZmFsc2UpIHtcbiAgICBpZiAoIWJvb2wpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1BhdGggXCInICsgdGhpcy5wYXRoICsgJ1wiIG1heSBub3QgaGF2ZSBgaW5kZXhgIHNldCB0byAnICtcbiAgICAgICdmYWxzZSBhbmQgYHNwYXJzZWAgc2V0IHRvIHRydWUnKTtcbiAgfVxuXG4gIGlmICghdGhpcy5vcHRpb25zLmhhc093blByb3BlcnR5KCdpbmRleCcpICYmIGJvb2wgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBpZiAodGhpcy5faW5kZXggPT0gbnVsbCB8fCB0eXBlb2YgdGhpcy5faW5kZXggPT09ICdib29sZWFuJykge1xuICAgIHRoaXMuX2luZGV4ID0ge307XG4gIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuX2luZGV4ID09PSAnc3RyaW5nJykge1xuICAgIHRoaXMuX2luZGV4ID0geyB0eXBlOiB0aGlzLl9pbmRleCB9O1xuICB9XG5cbiAgdGhpcy5faW5kZXguc3BhcnNlID0gYm9vbDtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIERlZmluZXMgdGhpcyBwYXRoIGFzIGltbXV0YWJsZS4gTW9uZ29vc2UgcHJldmVudHMgeW91IGZyb20gY2hhbmdpbmdcbiAqIGltbXV0YWJsZSBwYXRocyB1bmxlc3MgdGhlIHBhcmVudCBkb2N1bWVudCBoYXMgW2Bpc05ldzogdHJ1ZWBdKGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9hcGkvZG9jdW1lbnQuaHRtbCNEb2N1bWVudC5wcm90b3R5cGUuaXNOZXcoKSkuXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBjb25zdCBzY2hlbWEgPSBuZXcgU2NoZW1hKHtcbiAqICAgICAgIG5hbWU6IHsgdHlwZTogU3RyaW5nLCBpbW11dGFibGU6IHRydWUgfSxcbiAqICAgICAgIGFnZTogTnVtYmVyXG4gKiAgICAgfSk7XG4gKiAgICAgY29uc3QgTW9kZWwgPSBtb25nb29zZS5tb2RlbCgnVGVzdCcsIHNjaGVtYSk7XG4gKlxuICogICAgIGF3YWl0IE1vZGVsLmNyZWF0ZSh7IG5hbWU6ICd0ZXN0JyB9KTtcbiAqICAgICBjb25zdCBkb2MgPSBhd2FpdCBNb2RlbC5maW5kT25lKCk7XG4gKlxuICogICAgIGRvYy5pc05ldzsgLy8gZmFsc2VcbiAqICAgICBkb2MubmFtZSA9ICduZXcgbmFtZSc7XG4gKiAgICAgZG9jLm5hbWU7IC8vICd0ZXN0JywgYmVjYXVzZSBgbmFtZWAgaXMgaW1tdXRhYmxlXG4gKlxuICogTW9uZ29vc2UgYWxzbyBwcmV2ZW50cyBjaGFuZ2luZyBpbW11dGFibGUgcHJvcGVydGllcyB1c2luZyBgdXBkYXRlT25lKClgXG4gKiBhbmQgYHVwZGF0ZU1hbnkoKWAgYmFzZWQgb24gW3N0cmljdCBtb2RlXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvZ3VpZGUuaHRtbCNzdHJpY3QpLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgLy8gTW9uZ29vc2Ugd2lsbCBzdHJpcCBvdXQgdGhlIGBuYW1lYCB1cGRhdGUsIGJlY2F1c2UgYG5hbWVgIGlzIGltbXV0YWJsZVxuICogICAgIE1vZGVsLnVwZGF0ZU9uZSh7fSwgeyAkc2V0OiB7IG5hbWU6ICd0ZXN0MicgfSwgJGluYzogeyBhZ2U6IDEgfSB9KTtcbiAqXG4gKiAgICAgLy8gSWYgYHN0cmljdGAgaXMgc2V0IHRvICd0aHJvdycsIE1vbmdvb3NlIHdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgeW91XG4gKiAgICAgLy8gdXBkYXRlIGBuYW1lYFxuICogICAgIGNvbnN0IGVyciA9IGF3YWl0IE1vZGVsLnVwZGF0ZU9uZSh7fSwgeyBuYW1lOiAndGVzdDInIH0sIHsgc3RyaWN0OiAndGhyb3cnIH0pLlxuICogICAgICAgdGhlbigoKSA9PiBudWxsLCBlcnIgPT4gZXJyKTtcbiAqICAgICBlcnIubmFtZTsgLy8gU3RyaWN0TW9kZUVycm9yXG4gKlxuICogICAgIC8vIElmIGBzdHJpY3RgIGlzIGBmYWxzZWAsIE1vbmdvb3NlIGFsbG93cyB1cGRhdGluZyBgbmFtZWAgZXZlbiB0aG91Z2hcbiAqICAgICAvLyB0aGUgcHJvcGVydHkgaXMgaW1tdXRhYmxlLlxuICogICAgIE1vZGVsLnVwZGF0ZU9uZSh7fSwgeyBuYW1lOiAndGVzdDInIH0sIHsgc3RyaWN0OiBmYWxzZSB9KTtcbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGJvb2xcbiAqIEByZXR1cm4ge1NjaGVtYVR5cGV9IHRoaXNcbiAqIEBzZWUgaXNOZXcgaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2FwaS9kb2N1bWVudC5odG1sI0RvY3VtZW50LnByb3RvdHlwZS5pc05ldygpXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNjaGVtYVR5cGUucHJvdG90eXBlLmltbXV0YWJsZSA9IGZ1bmN0aW9uKGJvb2wpIHtcbiAgdGhpcy4kaW1tdXRhYmxlID0gYm9vbDtcbiAgaGFuZGxlSW1tdXRhYmxlKHRoaXMpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBEZWZpbmVzIGEgY3VzdG9tIGZ1bmN0aW9uIGZvciB0cmFuc2Zvcm1pbmcgdGhpcyBwYXRoIHdoZW4gY29udmVydGluZyBhIGRvY3VtZW50IHRvIEpTT04uXG4gKlxuICogTW9uZ29vc2UgY2FsbHMgdGhpcyBmdW5jdGlvbiB3aXRoIG9uZSBwYXJhbWV0ZXI6IHRoZSBjdXJyZW50IGB2YWx1ZWAgb2YgdGhlIHBhdGguIE1vbmdvb3NlXG4gKiB0aGVuIHVzZXMgdGhlIHJldHVybiB2YWx1ZSBpbiB0aGUgSlNPTiBvdXRwdXQuXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBjb25zdCBzY2hlbWEgPSBuZXcgU2NoZW1hKHtcbiAqICAgICAgIGRhdGU6IHsgdHlwZTogRGF0ZSwgdHJhbnNmb3JtOiB2ID0+IHYuZ2V0RnVsbFllYXIoKSB9XG4gKiAgICAgfSk7XG4gKiAgICAgY29uc3QgTW9kZWwgPSBtb25nb29zZS5tb2RlbCgnVGVzdCcsIHNjaGVtYSk7XG4gKlxuICogICAgIGF3YWl0IE1vZGVsLmNyZWF0ZSh7IGRhdGU6IG5ldyBEYXRlKCcyMDE2LTA2LTAxJykgfSk7XG4gKiAgICAgY29uc3QgZG9jID0gYXdhaXQgTW9kZWwuZmluZE9uZSgpO1xuICpcbiAqICAgICBkb2MuZGF0ZSBpbnN0YW5jZW9mIERhdGU7IC8vIHRydWVcbiAqXG4gKiAgICAgZG9jLnRvSlNPTigpLmRhdGU7IC8vIDIwMTYgYXMgYSBudW1iZXJcbiAqICAgICBKU09OLnN0cmluZ2lmeShkb2MpOyAvLyAne1wiX2lkXCI6Li4uLFwiZGF0ZVwiOjIwMTZ9J1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHtTY2hlbWFUeXBlfSB0aGlzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNjaGVtYVR5cGUucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKGZuKSB7XG4gIHRoaXMub3B0aW9ucy50cmFuc2Zvcm0gPSBmbjtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQWRkcyBhIHNldHRlciB0byB0aGlzIHNjaGVtYXR5cGUuXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBmdW5jdGlvbiBjYXBpdGFsaXplICh2YWwpIHtcbiAqICAgICAgIGlmICh0eXBlb2YgdmFsICE9PSAnc3RyaW5nJykgdmFsID0gJyc7XG4gKiAgICAgICByZXR1cm4gdmFsLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdmFsLnN1YnN0cmluZygxKTtcbiAqICAgICB9XG4gKlxuICogICAgIC8vIGRlZmluaW5nIHdpdGhpbiB0aGUgc2NoZW1hXG4gKiAgICAgY29uc3QgcyA9IG5ldyBTY2hlbWEoeyBuYW1lOiB7IHR5cGU6IFN0cmluZywgc2V0OiBjYXBpdGFsaXplIH19KTtcbiAqXG4gKiAgICAgLy8gb3Igd2l0aCB0aGUgU2NoZW1hVHlwZVxuICogICAgIGNvbnN0IHMgPSBuZXcgU2NoZW1hKHsgbmFtZTogU3RyaW5nIH0pXG4gKiAgICAgcy5wYXRoKCduYW1lJykuc2V0KGNhcGl0YWxpemUpO1xuICpcbiAqIFNldHRlcnMgYWxsb3cgeW91IHRvIHRyYW5zZm9ybSB0aGUgZGF0YSBiZWZvcmUgaXQgZ2V0cyB0byB0aGUgcmF3IG1vbmdvZGJcbiAqIGRvY3VtZW50IG9yIHF1ZXJ5LlxuICpcbiAqIFN1cHBvc2UgeW91IGFyZSBpbXBsZW1lbnRpbmcgdXNlciByZWdpc3RyYXRpb24gZm9yIGEgd2Vic2l0ZS4gVXNlcnMgcHJvdmlkZVxuICogYW4gZW1haWwgYW5kIHBhc3N3b3JkLCB3aGljaCBnZXRzIHNhdmVkIHRvIG1vbmdvZGIuIFRoZSBlbWFpbCBpcyBhIHN0cmluZ1xuICogdGhhdCB5b3Ugd2lsbCB3YW50IHRvIG5vcm1hbGl6ZSB0byBsb3dlciBjYXNlLCBpbiBvcmRlciB0byBhdm9pZCBvbmUgZW1haWxcbiAqIGhhdmluZyBtb3JlIHRoYW4gb25lIGFjY291bnQgLS0gZS5nLiwgb3RoZXJ3aXNlLCBhdmVudWVAcS5jb20gY2FuIGJlIHJlZ2lzdGVyZWQgZm9yIDIgYWNjb3VudHMgdmlhIGF2ZW51ZUBxLmNvbSBhbmQgQXZFblVlQFEuQ29NLlxuICpcbiAqIFlvdSBjYW4gc2V0IHVwIGVtYWlsIGxvd2VyIGNhc2Ugbm9ybWFsaXphdGlvbiBlYXNpbHkgdmlhIGEgTW9uZ29vc2Ugc2V0dGVyLlxuICpcbiAqICAgICBmdW5jdGlvbiB0b0xvd2VyKHYpIHtcbiAqICAgICAgIHJldHVybiB2LnRvTG93ZXJDYXNlKCk7XG4gKiAgICAgfVxuICpcbiAqICAgICBjb25zdCBVc2VyU2NoZW1hID0gbmV3IFNjaGVtYSh7XG4gKiAgICAgICBlbWFpbDogeyB0eXBlOiBTdHJpbmcsIHNldDogdG9Mb3dlciB9XG4gKiAgICAgfSk7XG4gKlxuICogICAgIGNvbnN0IFVzZXIgPSBkYi5tb2RlbCgnVXNlcicsIFVzZXJTY2hlbWEpO1xuICpcbiAqICAgICBjb25zdCB1c2VyID0gbmV3IFVzZXIoe2VtYWlsOiAnQVZFTlVFQFEuQ09NJ30pO1xuICogICAgIGNvbnNvbGUubG9nKHVzZXIuZW1haWwpOyAvLyAnYXZlbnVlQHEuY29tJ1xuICpcbiAqICAgICAvLyBvclxuICogICAgIGNvbnN0IHVzZXIgPSBuZXcgVXNlcigpO1xuICogICAgIHVzZXIuZW1haWwgPSAnQXZlbnVlQFEuY29tJztcbiAqICAgICBjb25zb2xlLmxvZyh1c2VyLmVtYWlsKTsgLy8gJ2F2ZW51ZUBxLmNvbSdcbiAqICAgICBVc2VyLnVwZGF0ZU9uZSh7IF9pZDogX2lkIH0sIHsgJHNldDogeyBlbWFpbDogJ0FWRU5VRUBRLkNPTScgfSB9KTsgLy8gdXBkYXRlIHRvICdhdmVudWVAcS5jb20nXG4gKlxuICogQXMgeW91IGNhbiBzZWUgYWJvdmUsIHNldHRlcnMgYWxsb3cgeW91IHRvIHRyYW5zZm9ybSB0aGUgZGF0YSBiZWZvcmUgaXRcbiAqIHN0b3JlZCBpbiBNb25nb0RCLCBvciBiZWZvcmUgZXhlY3V0aW5nIGEgcXVlcnkuXG4gKlxuICogX05PVEU6IHdlIGNvdWxkIGhhdmUgYWxzbyBqdXN0IHVzZWQgdGhlIGJ1aWx0LWluIGBsb3dlcmNhc2U6IHRydWVgIFNjaGVtYVR5cGUgb3B0aW9uIGluc3RlYWQgb2YgZGVmaW5pbmcgb3VyIG93biBmdW5jdGlvbi5fXG4gKlxuICogICAgIG5ldyBTY2hlbWEoeyBlbWFpbDogeyB0eXBlOiBTdHJpbmcsIGxvd2VyY2FzZTogdHJ1ZSB9fSlcbiAqXG4gKiBTZXR0ZXJzIGFyZSBhbHNvIHBhc3NlZCBhIHNlY29uZCBhcmd1bWVudCwgdGhlIHNjaGVtYXR5cGUgb24gd2hpY2ggdGhlIHNldHRlciB3YXMgZGVmaW5lZC4gVGhpcyBhbGxvd3MgZm9yIHRhaWxvcmVkIGJlaGF2aW9yIGJhc2VkIG9uIG9wdGlvbnMgcGFzc2VkIGluIHRoZSBzY2hlbWEuXG4gKlxuICogICAgIGZ1bmN0aW9uIGluc3BlY3RvciAodmFsLCBwcmlvclZhbHVlLCBzY2hlbWF0eXBlKSB7XG4gKiAgICAgICBpZiAoc2NoZW1hdHlwZS5vcHRpb25zLnJlcXVpcmVkKSB7XG4gKiAgICAgICAgIHJldHVybiBzY2hlbWF0eXBlLnBhdGggKyAnIGlzIHJlcXVpcmVkJztcbiAqICAgICAgIH0gZWxzZSB7XG4gKiAgICAgICAgIHJldHVybiB2YWw7XG4gKiAgICAgICB9XG4gKiAgICAgfVxuICpcbiAqICAgICBjb25zdCBWaXJ1c1NjaGVtYSA9IG5ldyBTY2hlbWEoe1xuICogICAgICAgbmFtZTogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlLCBzZXQ6IGluc3BlY3RvciB9LFxuICogICAgICAgdGF4b25vbXk6IHsgdHlwZTogU3RyaW5nLCBzZXQ6IGluc3BlY3RvciB9XG4gKiAgICAgfSlcbiAqXG4gKiAgICAgY29uc3QgVmlydXMgPSBkYi5tb2RlbCgnVmlydXMnLCBWaXJ1c1NjaGVtYSk7XG4gKiAgICAgY29uc3QgdiA9IG5ldyBWaXJ1cyh7IG5hbWU6ICdQYXJ2b3ZpcmlkYWUnLCB0YXhvbm9teTogJ1BhcnZvdmlyaW5hZScgfSk7XG4gKlxuICogICAgIGNvbnNvbGUubG9nKHYubmFtZSk7ICAgICAvLyBuYW1lIGlzIHJlcXVpcmVkXG4gKiAgICAgY29uc29sZS5sb2codi50YXhvbm9teSk7IC8vIFBhcnZvdmlyaW5hZVxuICpcbiAqIFlvdSBjYW4gYWxzbyB1c2Ugc2V0dGVycyB0byBtb2RpZnkgb3RoZXIgcHJvcGVydGllcyBvbiB0aGUgZG9jdW1lbnQuIElmXG4gKiB5b3UncmUgc2V0dGluZyBhIHByb3BlcnR5IGBuYW1lYCBvbiBhIGRvY3VtZW50LCB0aGUgc2V0dGVyIHdpbGwgcnVuIHdpdGhcbiAqIGB0aGlzYCBhcyB0aGUgZG9jdW1lbnQuIEJlIGNhcmVmdWwsIGluIG1vbmdvb3NlIDUgc2V0dGVycyB3aWxsIGFsc28gcnVuXG4gKiB3aGVuIHF1ZXJ5aW5nIGJ5IGBuYW1lYCB3aXRoIGB0aGlzYCBhcyB0aGUgcXVlcnkuXG4gKlxuICogICAgIGNvbnN0IG5hbWVTY2hlbWEgPSBuZXcgU2NoZW1hKHsgbmFtZTogU3RyaW5nLCBrZXl3b3JkczogW1N0cmluZ10gfSk7XG4gKiAgICAgbmFtZVNjaGVtYS5wYXRoKCduYW1lJykuc2V0KGZ1bmN0aW9uKHYpIHtcbiAqICAgICAgIC8vIE5lZWQgdG8gY2hlY2sgaWYgYHRoaXNgIGlzIGEgZG9jdW1lbnQsIGJlY2F1c2UgaW4gbW9uZ29vc2UgNVxuICogICAgICAgLy8gc2V0dGVycyB3aWxsIGFsc28gcnVuIG9uIHF1ZXJpZXMsIGluIHdoaWNoIGNhc2UgYHRoaXNgIHdpbGwgYmUgYVxuICogICAgICAgLy8gbW9uZ29vc2UgcXVlcnkgb2JqZWN0LlxuICogICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBEb2N1bWVudCAmJiB2ICE9IG51bGwpIHtcbiAqICAgICAgICAgdGhpcy5rZXl3b3JkcyA9IHYuc3BsaXQoJyAnKTtcbiAqICAgICAgIH1cbiAqICAgICAgIHJldHVybiB2O1xuICogICAgIH0pO1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHtTY2hlbWFUeXBlfSB0aGlzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNjaGVtYVR5cGUucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGZuKSB7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBIHNldHRlciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cbiAgdGhpcy5zZXR0ZXJzLnB1c2goZm4pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQWRkcyBhIGdldHRlciB0byB0aGlzIHNjaGVtYXR5cGUuXG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICpcbiAqICAgICBmdW5jdGlvbiBkb2IgKHZhbCkge1xuICogICAgICAgaWYgKCF2YWwpIHJldHVybiB2YWw7XG4gKiAgICAgICByZXR1cm4gKHZhbC5nZXRNb250aCgpICsgMSkgKyBcIi9cIiArIHZhbC5nZXREYXRlKCkgKyBcIi9cIiArIHZhbC5nZXRGdWxsWWVhcigpO1xuICogICAgIH1cbiAqXG4gKiAgICAgLy8gZGVmaW5pbmcgd2l0aGluIHRoZSBzY2hlbWFcbiAqICAgICBjb25zdCBzID0gbmV3IFNjaGVtYSh7IGJvcm46IHsgdHlwZTogRGF0ZSwgZ2V0OiBkb2IgfSlcbiAqXG4gKiAgICAgLy8gb3IgYnkgcmV0cmVpdmluZyBpdHMgU2NoZW1hVHlwZVxuICogICAgIGNvbnN0IHMgPSBuZXcgU2NoZW1hKHsgYm9ybjogRGF0ZSB9KVxuICogICAgIHMucGF0aCgnYm9ybicpLmdldChkb2IpXG4gKlxuICogR2V0dGVycyBhbGxvdyB5b3UgdG8gdHJhbnNmb3JtIHRoZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZGF0YSBhcyBpdCB0cmF2ZWxzIGZyb20gdGhlIHJhdyBtb25nb2RiIGRvY3VtZW50IHRvIHRoZSB2YWx1ZSB0aGF0IHlvdSBzZWUuXG4gKlxuICogU3VwcG9zZSB5b3UgYXJlIHN0b3JpbmcgY3JlZGl0IGNhcmQgbnVtYmVycyBhbmQgeW91IHdhbnQgdG8gaGlkZSBldmVyeXRoaW5nIGV4Y2VwdCB0aGUgbGFzdCA0IGRpZ2l0cyB0byB0aGUgbW9uZ29vc2UgdXNlci4gWW91IGNhbiBkbyBzbyBieSBkZWZpbmluZyBhIGdldHRlciBpbiB0aGUgZm9sbG93aW5nIHdheTpcbiAqXG4gKiAgICAgZnVuY3Rpb24gb2JmdXNjYXRlIChjYykge1xuICogICAgICAgcmV0dXJuICcqKioqLSoqKiotKioqKi0nICsgY2Muc2xpY2UoY2MubGVuZ3RoLTQsIGNjLmxlbmd0aCk7XG4gKiAgICAgfVxuICpcbiAqICAgICBjb25zdCBBY2NvdW50U2NoZW1hID0gbmV3IFNjaGVtYSh7XG4gKiAgICAgICBjcmVkaXRDYXJkTnVtYmVyOiB7IHR5cGU6IFN0cmluZywgZ2V0OiBvYmZ1c2NhdGUgfVxuICogICAgIH0pO1xuICpcbiAqICAgICBjb25zdCBBY2NvdW50ID0gZGIubW9kZWwoJ0FjY291bnQnLCBBY2NvdW50U2NoZW1hKTtcbiAqXG4gKiAgICAgQWNjb3VudC5maW5kQnlJZChpZCwgZnVuY3Rpb24gKGVyciwgZm91bmQpIHtcbiAqICAgICAgIGNvbnNvbGUubG9nKGZvdW5kLmNyZWRpdENhcmROdW1iZXIpOyAvLyAnKioqKi0qKioqLSoqKiotMTIzNCdcbiAqICAgICB9KTtcbiAqXG4gKiBHZXR0ZXJzIGFyZSBhbHNvIHBhc3NlZCBhIHNlY29uZCBhcmd1bWVudCwgdGhlIHNjaGVtYXR5cGUgb24gd2hpY2ggdGhlIGdldHRlciB3YXMgZGVmaW5lZC4gVGhpcyBhbGxvd3MgZm9yIHRhaWxvcmVkIGJlaGF2aW9yIGJhc2VkIG9uIG9wdGlvbnMgcGFzc2VkIGluIHRoZSBzY2hlbWEuXG4gKlxuICogICAgIGZ1bmN0aW9uIGluc3BlY3RvciAodmFsLCBwcmlvclZhbHVlLCBzY2hlbWF0eXBlKSB7XG4gKiAgICAgICBpZiAoc2NoZW1hdHlwZS5vcHRpb25zLnJlcXVpcmVkKSB7XG4gKiAgICAgICAgIHJldHVybiBzY2hlbWF0eXBlLnBhdGggKyAnIGlzIHJlcXVpcmVkJztcbiAqICAgICAgIH0gZWxzZSB7XG4gKiAgICAgICAgIHJldHVybiBzY2hlbWF0eXBlLnBhdGggKyAnIGlzIG5vdCc7XG4gKiAgICAgICB9XG4gKiAgICAgfVxuICpcbiAqICAgICBjb25zdCBWaXJ1c1NjaGVtYSA9IG5ldyBTY2hlbWEoe1xuICogICAgICAgbmFtZTogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlLCBnZXQ6IGluc3BlY3RvciB9LFxuICogICAgICAgdGF4b25vbXk6IHsgdHlwZTogU3RyaW5nLCBnZXQ6IGluc3BlY3RvciB9XG4gKiAgICAgfSlcbiAqXG4gKiAgICAgY29uc3QgVmlydXMgPSBkYi5tb2RlbCgnVmlydXMnLCBWaXJ1c1NjaGVtYSk7XG4gKlxuICogICAgIFZpcnVzLmZpbmRCeUlkKGlkLCBmdW5jdGlvbiAoZXJyLCB2aXJ1cykge1xuICogICAgICAgY29uc29sZS5sb2codmlydXMubmFtZSk7ICAgICAvLyBuYW1lIGlzIHJlcXVpcmVkXG4gKiAgICAgICBjb25zb2xlLmxvZyh2aXJ1cy50YXhvbm9teSk7IC8vIHRheG9ub215IGlzIG5vdFxuICogICAgIH0pXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEByZXR1cm4ge1NjaGVtYVR5cGV9IHRoaXNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU2NoZW1hVHlwZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oZm4pIHtcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0EgZ2V0dGVyIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuICB0aGlzLmdldHRlcnMucHVzaChmbik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBBZGRzIHZhbGlkYXRvcihzKSBmb3IgdGhpcyBkb2N1bWVudCBwYXRoLlxuICpcbiAqIFZhbGlkYXRvcnMgYWx3YXlzIHJlY2VpdmUgdGhlIHZhbHVlIHRvIHZhbGlkYXRlIGFzIHRoZWlyIGZpcnN0IGFyZ3VtZW50IGFuZFxuICogbXVzdCByZXR1cm4gYEJvb2xlYW5gLiBSZXR1cm5pbmcgYGZhbHNlYCBvciB0aHJvd2luZyBhbiBlcnJvciBtZWFuc1xuICogdmFsaWRhdGlvbiBmYWlsZWQuXG4gKlxuICogVGhlIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQgaXMgb3B0aW9uYWwuIElmIG5vdCBwYXNzZWQsIHRoZSBbZGVmYXVsdCBnZW5lcmljIGVycm9yIG1lc3NhZ2UgdGVtcGxhdGVdKGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9hcGkvZXJyb3IuaHRtbCNFcnJvci5tZXNzYWdlcykgd2lsbCBiZSB1c2VkLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgLy8gbWFrZSBzdXJlIGV2ZXJ5IHZhbHVlIGlzIGVxdWFsIHRvIFwic29tZXRoaW5nXCJcbiAqICAgICBmdW5jdGlvbiB2YWxpZGF0b3IgKHZhbCkge1xuICogICAgICAgcmV0dXJuIHZhbCA9PT0gJ3NvbWV0aGluZyc7XG4gKiAgICAgfVxuICogICAgIG5ldyBTY2hlbWEoeyBuYW1lOiB7IHR5cGU6IFN0cmluZywgdmFsaWRhdGU6IHZhbGlkYXRvciB9fSk7XG4gKlxuICogICAgIC8vIHdpdGggYSBjdXN0b20gZXJyb3IgbWVzc2FnZVxuICpcbiAqICAgICBjb25zdCBjdXN0b20gPSBbdmFsaWRhdG9yLCAnVWggb2gsIHtQQVRIfSBkb2VzIG5vdCBlcXVhbCBcInNvbWV0aGluZ1wiLiddXG4gKiAgICAgbmV3IFNjaGVtYSh7IG5hbWU6IHsgdHlwZTogU3RyaW5nLCB2YWxpZGF0ZTogY3VzdG9tIH19KTtcbiAqXG4gKiAgICAgLy8gYWRkaW5nIG1hbnkgdmFsaWRhdG9ycyBhdCBhIHRpbWVcbiAqXG4gKiAgICAgY29uc3QgbWFueSA9IFtcbiAqICAgICAgICAgeyB2YWxpZGF0b3I6IHZhbGlkYXRvciwgbWVzc2FnZTogJ3VoIG9oJyB9XG4gKiAgICAgICAsIHsgdmFsaWRhdG9yOiBhbm90aGVyVmFsaWRhdG9yLCBtZXNzYWdlOiAnZmFpbGVkJyB9XG4gKiAgICAgXVxuICogICAgIG5ldyBTY2hlbWEoeyBuYW1lOiB7IHR5cGU6IFN0cmluZywgdmFsaWRhdGU6IG1hbnkgfX0pO1xuICpcbiAqICAgICAvLyBvciB1dGlsaXppbmcgU2NoZW1hVHlwZSBtZXRob2RzIGRpcmVjdGx5OlxuICpcbiAqICAgICBjb25zdCBzY2hlbWEgPSBuZXcgU2NoZW1hKHsgbmFtZTogJ3N0cmluZycgfSk7XG4gKiAgICAgc2NoZW1hLnBhdGgoJ25hbWUnKS52YWxpZGF0ZSh2YWxpZGF0b3IsICd2YWxpZGF0aW9uIG9mIGB7UEFUSH1gIGZhaWxlZCB3aXRoIHZhbHVlIGB7VkFMVUV9YCcpO1xuICpcbiAqICMjIyMgRXJyb3IgbWVzc2FnZSB0ZW1wbGF0ZXM6XG4gKlxuICogQmVsb3cgaXMgYSBsaXN0IG9mIHN1cHBvcnRlZCB0ZW1wbGF0ZSBrZXl3b3JkczpcbiAqXG4gKiAtIFBBVEg6IFRoZSBzY2hlbWEgcGF0aCB3aGVyZSB0aGUgZXJyb3IgaXMgYmVpbmcgdHJpZ2dlcmVkLlxuICogLSBWQUxVRTogVGhlIHZhbHVlIGFzc2lnbmVkIHRvIHRoZSBQQVRIIHRoYXQgaXMgdHJpZ2dlcmluZyB0aGUgZXJyb3IuXG4gKiAtIEtJTkQ6IFRoZSB2YWxpZGF0aW9uIHByb3BlcnR5IHRoYXQgdHJpZ2dlcmVkIHRoZSBlcnJvciBpLmUuIHJlcXVpcmVkLlxuICogLSBSRUFTT046IFRoZSBlcnJvciBvYmplY3QgdGhhdCBjYXVzZWQgdGhpcyBlcnJvciBpZiB0aGVyZSB3YXMgb25lLlxuICpcbiAqIElmIE1vbmdvb3NlJ3MgYnVpbHQtaW4gZXJyb3IgbWVzc2FnZSB0ZW1wbGF0aW5nIGlzbid0IGVub3VnaCwgTW9uZ29vc2VcbiAqIHN1cHBvcnRzIHNldHRpbmcgdGhlIGBtZXNzYWdlYCBwcm9wZXJ0eSB0byBhIGZ1bmN0aW9uLlxuICpcbiAqICAgICBzY2hlbWEucGF0aCgnbmFtZScpLnZhbGlkYXRlKHtcbiAqICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24odikgeyByZXR1cm4gdi5sZW5ndGggPiA1OyB9LFxuICogICAgICAgLy8gYGVycm9yc1snbmFtZSddYCB3aWxsIGJlIFwibmFtZSBtdXN0IGhhdmUgbGVuZ3RoIDUsIGdvdCAnZm9vJ1wiXG4gKiAgICAgICBtZXNzYWdlOiBmdW5jdGlvbihwcm9wcykge1xuICogICAgICAgICByZXR1cm4gYCR7cHJvcHMucGF0aH0gbXVzdCBoYXZlIGxlbmd0aCA1LCBnb3QgJyR7cHJvcHMudmFsdWV9J2A7XG4gKiAgICAgICB9XG4gKiAgICAgfSk7XG4gKlxuICogVG8gYnlwYXNzIE1vbmdvb3NlJ3MgZXJyb3IgbWVzc2FnZXMgYW5kIGp1c3QgY29weSB0aGUgZXJyb3IgbWVzc2FnZSB0aGF0XG4gKiB0aGUgdmFsaWRhdG9yIHRocm93cywgZG8gdGhpczpcbiAqXG4gKiAgICAgc2NoZW1hLnBhdGgoJ25hbWUnKS52YWxpZGF0ZSh7XG4gKiAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRXJyb3IoJ09vcHMhJyk7IH0sXG4gKiAgICAgICAvLyBgZXJyb3JzWyduYW1lJ11gIHdpbGwgYmUgXCJPb3BzIVwiXG4gKiAgICAgICBtZXNzYWdlOiBmdW5jdGlvbihwcm9wcykgeyByZXR1cm4gcHJvcHMucmVhc29uLm1lc3NhZ2U7IH1cbiAqICAgICB9KTtcbiAqXG4gKiAjIyMjIEFzeW5jaHJvbm91cyB2YWxpZGF0aW9uOlxuICpcbiAqIE1vbmdvb3NlIHN1cHBvcnRzIHZhbGlkYXRvcnMgdGhhdCByZXR1cm4gYSBwcm9taXNlLiBBIHZhbGlkYXRvciB0aGF0IHJldHVybnNcbiAqIGEgcHJvbWlzZSBpcyBjYWxsZWQgYW4gX2FzeW5jIHZhbGlkYXRvcl8uIEFzeW5jIHZhbGlkYXRvcnMgcnVuIGluXG4gKiBwYXJhbGxlbCwgYW5kIGB2YWxpZGF0ZSgpYCB3aWxsIHdhaXQgdW50aWwgYWxsIGFzeW5jIHZhbGlkYXRvcnMgaGF2ZSBzZXR0bGVkLlxuICpcbiAqICAgICBzY2hlbWEucGF0aCgnbmFtZScpLnZhbGlkYXRlKHtcbiAqICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gKHZhbHVlKSB7XG4gKiAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gKiAgICAgICAgICAgcmVzb2x2ZShmYWxzZSk7IC8vIHZhbGlkYXRpb24gZmFpbGVkXG4gKiAgICAgICAgIH0pO1xuICogICAgICAgfVxuICogICAgIH0pO1xuICpcbiAqIFlvdSBtaWdodCB1c2UgYXN5bmNocm9ub3VzIHZhbGlkYXRvcnMgdG8gcmV0cmVpdmUgb3RoZXIgZG9jdW1lbnRzIGZyb20gdGhlIGRhdGFiYXNlIHRvIHZhbGlkYXRlIGFnYWluc3Qgb3IgdG8gbWVldCBvdGhlciBJL08gYm91bmQgdmFsaWRhdGlvbiBuZWVkcy5cbiAqXG4gKiBWYWxpZGF0aW9uIG9jY3VycyBgcHJlKCdzYXZlJylgIG9yIHdoZW5ldmVyIHlvdSBtYW51YWxseSBleGVjdXRlIFtkb2N1bWVudCN2YWxpZGF0ZV0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2FwaS9kb2N1bWVudC5odG1sI0RvY3VtZW50LnByb3RvdHlwZS52YWxpZGF0ZSgpKS5cbiAqXG4gKiBJZiB2YWxpZGF0aW9uIGZhaWxzIGR1cmluZyBgcHJlKCdzYXZlJylgIGFuZCBubyBjYWxsYmFjayB3YXMgcGFzc2VkIHRvIHJlY2VpdmUgdGhlIGVycm9yLCBhbiBgZXJyb3JgIGV2ZW50IHdpbGwgYmUgZW1pdHRlZCBvbiB5b3VyIE1vZGVscyBhc3NvY2lhdGVkIGRiIFtjb25uZWN0aW9uXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvYXBpL2Nvbm5lY3Rpb24uaHRtbCNDb25uZWN0aW9uKCkpLCBwYXNzaW5nIHRoZSB2YWxpZGF0aW9uIGVycm9yIG9iamVjdCBhbG9uZy5cbiAqXG4gKiAgICAgY29uc3QgY29ubiA9IG1vbmdvb3NlLmNyZWF0ZUNvbm5lY3Rpb24oLi4pO1xuICogICAgIGNvbm4ub24oJ2Vycm9yJywgaGFuZGxlRXJyb3IpO1xuICpcbiAqICAgICBjb25zdCBQcm9kdWN0ID0gY29ubi5tb2RlbCgnUHJvZHVjdCcsIHlvdXJTY2hlbWEpO1xuICogICAgIGNvbnN0IGR2ZCA9IG5ldyBQcm9kdWN0KC4uKTtcbiAqICAgICBkdmQuc2F2ZSgpOyAvLyBlbWl0cyBlcnJvciBvbiB0aGUgYGNvbm5gIGFib3ZlXG4gKlxuICogSWYgeW91IHdhbnQgdG8gaGFuZGxlIHRoZXNlIGVycm9ycyBhdCB0aGUgTW9kZWwgbGV2ZWwsIGFkZCBhbiBgZXJyb3JgXG4gKiBsaXN0ZW5lciB0byB5b3VyIE1vZGVsIGFzIHNob3duIGJlbG93LlxuICpcbiAqICAgICAvLyByZWdpc3RlcmluZyBhbiBlcnJvciBsaXN0ZW5lciBvbiB0aGUgTW9kZWwgbGV0cyB1cyBoYW5kbGUgZXJyb3JzIG1vcmUgbG9jYWxseVxuICogICAgIFByb2R1Y3Qub24oJ2Vycm9yJywgaGFuZGxlRXJyb3IpO1xuICpcbiAqIEBwYXJhbSB7UmVnRXhwfEZ1bmN0aW9ufE9iamVjdH0gb2JqIHZhbGlkYXRvciBmdW5jdGlvbiwgb3IgaGFzaCBkZXNjcmliaW5nIG9wdGlvbnNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvYmoudmFsaWRhdG9yXSB2YWxpZGF0b3IgZnVuY3Rpb24uIElmIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb24gcmV0dXJucyBgdW5kZWZpbmVkYCBvciBhIHRydXRoeSB2YWx1ZSwgdmFsaWRhdGlvbiBzdWNjZWVkcy4gSWYgaXQgcmV0dXJucyBbZmFsc3ldKGh0dHBzOi8vbWFzdGVyaW5nanMuaW8vdHV0b3JpYWxzL2Z1bmRhbWVudGFscy9mYWxzeSkgKGV4Y2VwdCBgdW5kZWZpbmVkYCkgb3IgdGhyb3dzIGFuIGVycm9yLCB2YWxpZGF0aW9uIGZhaWxzLlxuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IFtvYmoubWVzc2FnZV0gb3B0aW9uYWwgZXJyb3IgbWVzc2FnZS4gSWYgZnVuY3Rpb24sIHNob3VsZCByZXR1cm4gdGhlIGVycm9yIG1lc3NhZ2UgYXMgYSBzdHJpbmdcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29iai5wcm9wc1BhcmFtZXRlcj1mYWxzZV0gSWYgdHJ1ZSwgTW9uZ29vc2Ugd2lsbCBwYXNzIHRoZSB2YWxpZGF0b3IgcHJvcGVydGllcyBvYmplY3QgKHdpdGggdGhlIGB2YWxpZGF0b3JgIGZ1bmN0aW9uLCBgbWVzc2FnZWAsIGV0Yy4pIGFzIHRoZSAybmQgYXJnIHRvIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb24uIFRoaXMgaXMgZGlzYWJsZWQgYnkgZGVmYXVsdCBiZWNhdXNlIG1hbnkgdmFsaWRhdG9ycyBbcmVseSBvbiBwb3NpdGlvbmFsIGFyZ3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9jaHJpc28vdmFsaWRhdG9yLmpzI3ZhbGlkYXRvcnMpLCBzbyB0dXJuaW5nIHRoaXMgb24gbWF5IGNhdXNlIHVucHJlZGljdGFibGUgYmVoYXZpb3IgaW4gZXh0ZXJuYWwgdmFsaWRhdG9ycy5cbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBbZXJyb3JNc2ddIG9wdGlvbmFsIGVycm9yIG1lc3NhZ2UuIElmIGZ1bmN0aW9uLCBzaG91bGQgcmV0dXJuIHRoZSBlcnJvciBtZXNzYWdlIGFzIGEgc3RyaW5nXG4gKiBAcGFyYW0ge1N0cmluZ30gW3R5cGVdIG9wdGlvbmFsIHZhbGlkYXRvciB0eXBlXG4gKiBAcmV0dXJuIHtTY2hlbWFUeXBlfSB0aGlzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNjaGVtYVR5cGUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24ob2JqLCBtZXNzYWdlLCB0eXBlKSB7XG4gIGlmICh0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nIHx8IG9iaiAmJiB1dGlscy5nZXRGdW5jdGlvbk5hbWUob2JqLmNvbnN0cnVjdG9yKSA9PT0gJ1JlZ0V4cCcpIHtcbiAgICBsZXQgcHJvcGVydGllcztcbiAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHByb3BlcnRpZXMgPSB7IHZhbGlkYXRvcjogb2JqLCBtZXNzYWdlOiBtZXNzYWdlIH07XG4gICAgICBwcm9wZXJ0aWVzLnR5cGUgPSB0eXBlIHx8ICd1c2VyIGRlZmluZWQnO1xuICAgIH0gZWxzZSBpZiAobWVzc2FnZSBpbnN0YW5jZW9mIE9iamVjdCAmJiAhdHlwZSkge1xuICAgICAgcHJvcGVydGllcyA9IGlzU2ltcGxlVmFsaWRhdG9yKG1lc3NhZ2UpID8gT2JqZWN0LmFzc2lnbih7fSwgbWVzc2FnZSkgOiBjbG9uZShtZXNzYWdlKTtcbiAgICAgIGlmICghcHJvcGVydGllcy5tZXNzYWdlKSB7XG4gICAgICAgIHByb3BlcnRpZXMubWVzc2FnZSA9IHByb3BlcnRpZXMubXNnO1xuICAgICAgfVxuICAgICAgcHJvcGVydGllcy52YWxpZGF0b3IgPSBvYmo7XG4gICAgICBwcm9wZXJ0aWVzLnR5cGUgPSBwcm9wZXJ0aWVzLnR5cGUgfHwgJ3VzZXIgZGVmaW5lZCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChtZXNzYWdlID09IG51bGwpIHtcbiAgICAgICAgbWVzc2FnZSA9IE1vbmdvb3NlRXJyb3IubWVzc2FnZXMuZ2VuZXJhbC5kZWZhdWx0O1xuICAgICAgfVxuICAgICAgaWYgKCF0eXBlKSB7XG4gICAgICAgIHR5cGUgPSAndXNlciBkZWZpbmVkJztcbiAgICAgIH1cbiAgICAgIHByb3BlcnRpZXMgPSB7IG1lc3NhZ2U6IG1lc3NhZ2UsIHR5cGU6IHR5cGUsIHZhbGlkYXRvcjogb2JqIH07XG4gICAgfVxuXG4gICAgdGhpcy52YWxpZGF0b3JzLnB1c2gocHJvcGVydGllcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBsZXQgaTtcbiAgbGV0IGxlbmd0aDtcbiAgbGV0IGFyZztcblxuICBmb3IgKGkgPSAwLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBhcmcgPSBhcmd1bWVudHNbaV07XG4gICAgaWYgKCF1dGlscy5pc1BPSk8oYXJnKSkge1xuICAgICAgY29uc3QgbXNnID0gJ0ludmFsaWQgdmFsaWRhdG9yLiBSZWNlaXZlZCAoJyArIHR5cGVvZiBhcmcgKyAnKSAnXG4gICAgICAgICsgYXJnXG4gICAgICAgICsgJy4gU2VlIGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9hcGkvc2NoZW1hdHlwZS5odG1sI1NjaGVtYVR5cGUucHJvdG90eXBlLnZhbGlkYXRlKCknO1xuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG4gICAgdGhpcy52YWxpZGF0ZShhcmcudmFsaWRhdG9yLCBhcmcpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEFkZHMgYSByZXF1aXJlZCB2YWxpZGF0b3IgdG8gdGhpcyBTY2hlbWFUeXBlLiBUaGUgdmFsaWRhdG9yIGdldHMgYWRkZWRcbiAqIHRvIHRoZSBmcm9udCBvZiB0aGlzIFNjaGVtYVR5cGUncyB2YWxpZGF0b3JzIGFycmF5IHVzaW5nIGB1bnNoaWZ0KClgLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3QgcyA9IG5ldyBTY2hlbWEoeyBib3JuOiB7IHR5cGU6IERhdGUsIHJlcXVpcmVkOiB0cnVlIH0pXG4gKlxuICogICAgIC8vIG9yIHdpdGggY3VzdG9tIGVycm9yIG1lc3NhZ2VcbiAqXG4gKiAgICAgY29uc3QgcyA9IG5ldyBTY2hlbWEoeyBib3JuOiB7IHR5cGU6IERhdGUsIHJlcXVpcmVkOiAne1BBVEh9IGlzIHJlcXVpcmVkIScgfSlcbiAqXG4gKiAgICAgLy8gb3Igd2l0aCBhIGZ1bmN0aW9uXG4gKlxuICogICAgIGNvbnN0IHMgPSBuZXcgU2NoZW1hKHtcbiAqICAgICAgIHVzZXJJZDogT2JqZWN0SWQsXG4gKiAgICAgICB1c2VybmFtZToge1xuICogICAgICAgICB0eXBlOiBTdHJpbmcsXG4gKiAgICAgICAgIHJlcXVpcmVkOiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMudXNlcklkICE9IG51bGw7IH1cbiAqICAgICAgIH1cbiAqICAgICB9KVxuICpcbiAqICAgICAvLyBvciB3aXRoIGEgZnVuY3Rpb24gYW5kIGEgY3VzdG9tIG1lc3NhZ2VcbiAqICAgICBjb25zdCBzID0gbmV3IFNjaGVtYSh7XG4gKiAgICAgICB1c2VySWQ6IE9iamVjdElkLFxuICogICAgICAgdXNlcm5hbWU6IHtcbiAqICAgICAgICAgdHlwZTogU3RyaW5nLFxuICogICAgICAgICByZXF1aXJlZDogW1xuICogICAgICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy51c2VySWQgIT0gbnVsbDsgfSxcbiAqICAgICAgICAgICAndXNlcm5hbWUgaXMgcmVxdWlyZWQgaWYgaWQgaXMgc3BlY2lmaWVkJ1xuICogICAgICAgICBdXG4gKiAgICAgICB9XG4gKiAgICAgfSlcbiAqXG4gKiAgICAgLy8gb3IgdGhyb3VnaCB0aGUgcGF0aCBBUElcbiAqXG4gKiAgICAgcy5wYXRoKCduYW1lJykucmVxdWlyZWQodHJ1ZSk7XG4gKlxuICogICAgIC8vIHdpdGggY3VzdG9tIGVycm9yIG1lc3NhZ2luZ1xuICpcbiAqICAgICBzLnBhdGgoJ25hbWUnKS5yZXF1aXJlZCh0cnVlLCAnZ3JyciA6KCAnKTtcbiAqXG4gKiAgICAgLy8gb3IgbWFrZSBhIHBhdGggY29uZGl0aW9uYWxseSByZXF1aXJlZCBiYXNlZCBvbiBhIGZ1bmN0aW9uXG4gKiAgICAgY29uc3QgaXNPdmVyMTggPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuYWdlID49IDE4OyB9O1xuICogICAgIHMucGF0aCgndm90ZXJSZWdpc3RyYXRpb25JZCcpLnJlcXVpcmVkKGlzT3ZlcjE4KTtcbiAqXG4gKiBUaGUgcmVxdWlyZWQgdmFsaWRhdG9yIHVzZXMgdGhlIFNjaGVtYVR5cGUncyBgY2hlY2tSZXF1aXJlZGAgZnVuY3Rpb24gdG9cbiAqIGRldGVybWluZSB3aGV0aGVyIGEgZ2l2ZW4gdmFsdWUgc2F0aXNmaWVzIHRoZSByZXF1aXJlZCB2YWxpZGF0b3IuIEJ5IGRlZmF1bHQsXG4gKiBhIHZhbHVlIHNhdGlzZmllcyB0aGUgcmVxdWlyZWQgdmFsaWRhdG9yIGlmIGB2YWwgIT0gbnVsbGAgKHRoYXQgaXMsIGlmXG4gKiB0aGUgdmFsdWUgaXMgbm90IG51bGwgbm9yIHVuZGVmaW5lZCkuIEhvd2V2ZXIsIG1vc3QgYnVpbHQtaW4gbW9uZ29vc2Ugc2NoZW1hXG4gKiB0eXBlcyBvdmVycmlkZSB0aGUgZGVmYXVsdCBgY2hlY2tSZXF1aXJlZGAgZnVuY3Rpb246XG4gKlxuICogQHBhcmFtIHtCb29sZWFufEZ1bmN0aW9ufE9iamVjdH0gcmVxdWlyZWQgZW5hYmxlL2Rpc2FibGUgdGhlIHZhbGlkYXRvciwgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHJlcXVpcmVkIGJvb2xlYW4sIG9yIG9wdGlvbnMgb2JqZWN0XG4gKiBAcGFyYW0ge0Jvb2xlYW58RnVuY3Rpb259IFtvcHRpb25zLmlzUmVxdWlyZWRdIGVuYWJsZS9kaXNhYmxlIHRoZSB2YWxpZGF0b3IsIG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyByZXF1aXJlZCBib29sZWFuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy5FcnJvckNvbnN0cnVjdG9yXSBjdXN0b20gZXJyb3IgY29uc3RydWN0b3IuIFRoZSBjb25zdHJ1Y3RvciByZWNlaXZlcyAxIHBhcmFtZXRlciwgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHZhbGlkYXRvciBwcm9wZXJ0aWVzLlxuICogQHBhcmFtIHtTdHJpbmd9IFttZXNzYWdlXSBvcHRpb25hbCBjdXN0b20gZXJyb3IgbWVzc2FnZVxuICogQHJldHVybiB7U2NoZW1hVHlwZX0gdGhpc1xuICogQHNlZSBDdXN0b21pemVkIEVycm9yIE1lc3NhZ2VzIGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9hcGkvZXJyb3IuaHRtbCNFcnJvci5tZXNzYWdlc1xuICogQHNlZSBTY2hlbWFBcnJheSNjaGVja1JlcXVpcmVkIGh0dHBzOi8vbW9uZ29vc2Vqcy5jb20vZG9jcy9hcGkvc2NoZW1hYXJyYXkuaHRtbCNTY2hlbWFBcnJheS5wcm90b3R5cGUuY2hlY2tSZXF1aXJlZCgpXG4gKiBAc2VlIFNjaGVtYUJvb2xlYW4jY2hlY2tSZXF1aXJlZCBodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvYXBpL3NjaGVtYWJvb2xlYW4uaHRtbCNTY2hlbWFCb29sZWFuLnByb3RvdHlwZS5jaGVja1JlcXVpcmVkKClcbiAqIEBzZWUgU2NoZW1hQnVmZmVyI2NoZWNrUmVxdWlyZWQgaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2FwaS9zY2hlbWFidWZmZXIuaHRtbCNTY2hlbWFCdWZmZXIucHJvdG90eXBlLmNoZWNrUmVxdWlyZWQoKVxuICogQHNlZSBTY2hlbWFOdW1iZXIjY2hlY2tSZXF1aXJlZCBodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvYXBpL3NjaGVtYW51bWJlci5odG1sI1NjaGVtYU51bWJlci5wcm90b3R5cGUuY2hlY2tSZXF1aXJlZCgpXG4gKiBAc2VlIFNjaGVtYU9iamVjdElkI2NoZWNrUmVxdWlyZWQgaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2FwaS9zY2hlbWFvYmplY3RpZC5odG1sI09iamVjdElkLnByb3RvdHlwZS5jaGVja1JlcXVpcmVkKClcbiAqIEBzZWUgU2NoZW1hU3RyaW5nI2NoZWNrUmVxdWlyZWQgaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL2FwaS9zY2hlbWFzdHJpbmcuaHRtbCNTY2hlbWFTdHJpbmcucHJvdG90eXBlLmNoZWNrUmVxdWlyZWQoKVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5TY2hlbWFUeXBlLnByb3RvdHlwZS5yZXF1aXJlZCA9IGZ1bmN0aW9uKHJlcXVpcmVkLCBtZXNzYWdlKSB7XG4gIGxldCBjdXN0b21PcHRpb25zID0ge307XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIHJlcXVpcmVkID09IG51bGwpIHtcbiAgICB0aGlzLnZhbGlkYXRvcnMgPSB0aGlzLnZhbGlkYXRvcnMuZmlsdGVyKGZ1bmN0aW9uKHYpIHtcbiAgICAgIHJldHVybiB2LnZhbGlkYXRvciAhPT0gdGhpcy5yZXF1aXJlZFZhbGlkYXRvcjtcbiAgICB9LCB0aGlzKTtcblxuICAgIHRoaXMuaXNSZXF1aXJlZCA9IGZhbHNlO1xuICAgIGRlbGV0ZSB0aGlzLm9yaWdpbmFsUmVxdWlyZWRWYWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVxdWlyZWQgPT09ICdvYmplY3QnKSB7XG4gICAgY3VzdG9tT3B0aW9ucyA9IHJlcXVpcmVkO1xuICAgIG1lc3NhZ2UgPSBjdXN0b21PcHRpb25zLm1lc3NhZ2UgfHwgbWVzc2FnZTtcbiAgICByZXF1aXJlZCA9IHJlcXVpcmVkLmlzUmVxdWlyZWQ7XG4gIH1cblxuICBpZiAocmVxdWlyZWQgPT09IGZhbHNlKSB7XG4gICAgdGhpcy52YWxpZGF0b3JzID0gdGhpcy52YWxpZGF0b3JzLmZpbHRlcihmdW5jdGlvbih2KSB7XG4gICAgICByZXR1cm4gdi52YWxpZGF0b3IgIT09IHRoaXMucmVxdWlyZWRWYWxpZGF0b3I7XG4gICAgfSwgdGhpcyk7XG5cbiAgICB0aGlzLmlzUmVxdWlyZWQgPSBmYWxzZTtcbiAgICBkZWxldGUgdGhpcy5vcmlnaW5hbFJlcXVpcmVkVmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjb25zdCBfdGhpcyA9IHRoaXM7XG4gIHRoaXMuaXNSZXF1aXJlZCA9IHRydWU7XG5cbiAgdGhpcy5yZXF1aXJlZFZhbGlkYXRvciA9IGZ1bmN0aW9uKHYpIHtcbiAgICBjb25zdCBjYWNoZWRSZXF1aXJlZCA9IHRoaXMgJiYgdGhpcy4kX18gJiYgdGhpcy4kX18uY2FjaGVkUmVxdWlyZWQ7XG5cbiAgICAvLyBubyB2YWxpZGF0aW9uIHdoZW4gdGhpcyBwYXRoIHdhc24ndCBzZWxlY3RlZCBpbiB0aGUgcXVlcnkuXG4gICAgaWYgKGNhY2hlZFJlcXVpcmVkICE9IG51bGwgJiYgIXRoaXMuJF9faXNTZWxlY3RlZChfdGhpcy5wYXRoKSAmJiAhdGhpc1tkb2N1bWVudElzTW9kaWZpZWRdKF90aGlzLnBhdGgpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBgJGNhY2hlZFJlcXVpcmVkYCBnZXRzIHNldCBpbiBgX2V2YWx1YXRlUmVxdWlyZWRGdW5jdGlvbnMoKWAgc28gd2VcbiAgICAvLyBkb24ndCBjYWxsIHJlcXVpcmVkIGZ1bmN0aW9ucyBtdWx0aXBsZSB0aW1lcyBpbiBvbmUgdmFsaWRhdGUgY2FsbFxuICAgIC8vIFNlZSBnaC02ODAxXG4gICAgaWYgKGNhY2hlZFJlcXVpcmVkICE9IG51bGwgJiYgX3RoaXMucGF0aCBpbiBjYWNoZWRSZXF1aXJlZCkge1xuICAgICAgY29uc3QgcmVzID0gY2FjaGVkUmVxdWlyZWRbX3RoaXMucGF0aF0gP1xuICAgICAgICBfdGhpcy5jaGVja1JlcXVpcmVkKHYsIHRoaXMpIDpcbiAgICAgICAgdHJ1ZTtcbiAgICAgIGRlbGV0ZSBjYWNoZWRSZXF1aXJlZFtfdGhpcy5wYXRoXTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcmVxdWlyZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiByZXF1aXJlZC5hcHBseSh0aGlzKSA/IF90aGlzLmNoZWNrUmVxdWlyZWQodiwgdGhpcykgOiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcy5jaGVja1JlcXVpcmVkKHYsIHRoaXMpO1xuICB9O1xuICB0aGlzLm9yaWdpbmFsUmVxdWlyZWRWYWx1ZSA9IHJlcXVpcmVkO1xuXG4gIGlmICh0eXBlb2YgcmVxdWlyZWQgPT09ICdzdHJpbmcnKSB7XG4gICAgbWVzc2FnZSA9IHJlcXVpcmVkO1xuICAgIHJlcXVpcmVkID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgY29uc3QgbXNnID0gbWVzc2FnZSB8fCBNb25nb29zZUVycm9yLm1lc3NhZ2VzLmdlbmVyYWwucmVxdWlyZWQ7XG4gIHRoaXMudmFsaWRhdG9ycy51bnNoaWZ0KE9iamVjdC5hc3NpZ24oe30sIGN1c3RvbU9wdGlvbnMsIHtcbiAgICB2YWxpZGF0b3I6IHRoaXMucmVxdWlyZWRWYWxpZGF0b3IsXG4gICAgbWVzc2FnZTogbXNnLFxuICAgIHR5cGU6ICdyZXF1aXJlZCdcbiAgfSkpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIG1vZGVsIHRoYXQgdGhpcyBwYXRoIHJlZmVycyB0by4gVGhpcyBpcyB0aGUgb3B0aW9uIHRoYXQgW3BvcHVsYXRlXShodHRwczovL21vbmdvb3NlanMuY29tL2RvY3MvcG9wdWxhdGUuaHRtbClcbiAqIGxvb2tzIGF0IHRvIGRldGVybWluZSB0aGUgZm9yZWlnbiBjb2xsZWN0aW9uIGl0IHNob3VsZCBxdWVyeS5cbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKlxuICogICAgIGNvbnN0IHVzZXJTY2hlbWEgPSBuZXcgU2NoZW1hKHsgbmFtZTogU3RyaW5nIH0pO1xuICogICAgIGNvbnN0IFVzZXIgPSBtb25nb29zZS5tb2RlbCgnVXNlcicsIHVzZXJTY2hlbWEpO1xuICpcbiAqICAgICBjb25zdCBwb3N0U2NoZW1hID0gbmV3IFNjaGVtYSh7IHVzZXI6IG1vbmdvb3NlLk9iamVjdElkIH0pO1xuICogICAgIHBvc3RTY2hlbWEucGF0aCgndXNlcicpLnJlZignVXNlcicpOyAvLyBDYW4gc2V0IHJlZiB0byBhIG1vZGVsIG5hbWVcbiAqICAgICBwb3N0U2NoZW1hLnBhdGgoJ3VzZXInKS5yZWYoVXNlcik7IC8vIE9yIGEgbW9kZWwgY2xhc3NcbiAqICAgICBwb3N0U2NoZW1hLnBhdGgoJ3VzZXInKS5yZWYoKCkgPT4gJ1VzZXInKTsgLy8gT3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG1vZGVsIG5hbWVcbiAqICAgICBwb3N0U2NoZW1hLnBhdGgoJ3VzZXInKS5yZWYoKCkgPT4gVXNlcik7IC8vIE9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBtb2RlbCBjbGFzc1xuICpcbiAqICAgICAvLyBPciB5b3UgY2FuIGp1c3QgZGVjbGFyZSB0aGUgYHJlZmAgaW5saW5lIGluIHlvdXIgc2NoZW1hXG4gKiAgICAgY29uc3QgcG9zdFNjaGVtYTIgPSBuZXcgU2NoZW1hKHtcbiAqICAgICAgIHVzZXI6IHsgdHlwZTogbW9uZ29vc2UuT2JqZWN0SWQsIHJlZjogVXNlciB9XG4gKiAgICAgfSk7XG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TW9kZWx8RnVuY3Rpb259IHJlZiBlaXRoZXIgYSBtb2RlbCBuYW1lLCBhIFtNb2RlbF0oaHR0cHM6Ly9tb25nb29zZWpzLmNvbS9kb2NzL21vZGVscy5odG1sKSwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBtb2RlbCBuYW1lIG9yIG1vZGVsLlxuICogQHJldHVybiB7U2NoZW1hVHlwZX0gdGhpc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5TY2hlbWFUeXBlLnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbihyZWYpIHtcbiAgdGhpcy5vcHRpb25zLnJlZiA9IHJlZjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEdldHMgdGhlIGRlZmF1bHQgdmFsdWVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc2NvcGUgdGhlIHNjb3BlIHdoaWNoIGNhbGxiYWNrIGFyZSBleGVjdXRlZFxuICogQHBhcmFtIHtCb29sZWFufSBpbml0XG4gKiBAcmV0dXJuIHtBbnl9IFRoZSBTdG9yZWQgZGVmYXVsdCB2YWx1ZS5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNjaGVtYVR5cGUucHJvdG90eXBlLmdldERlZmF1bHQgPSBmdW5jdGlvbihzY29wZSwgaW5pdCwgb3B0aW9ucykge1xuICBsZXQgcmV0O1xuICBpZiAodHlwZW9mIHRoaXMuZGVmYXVsdFZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5kZWZhdWx0VmFsdWUgPT09IERhdGUubm93IHx8XG4gICAgICB0aGlzLmRlZmF1bHRWYWx1ZSA9PT0gQXJyYXkgfHxcbiAgICAgIHRoaXMuZGVmYXVsdFZhbHVlLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ29iamVjdGlkJ1xuICAgICkge1xuICAgICAgcmV0ID0gdGhpcy5kZWZhdWx0VmFsdWUuY2FsbChzY29wZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldCA9IHRoaXMuZGVmYXVsdFZhbHVlLmNhbGwoc2NvcGUsIHNjb3BlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0ID0gdGhpcy5kZWZhdWx0VmFsdWU7XG4gIH1cblxuICBpZiAocmV0ICE9PSBudWxsICYmIHJldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiByZXQgPT09ICdvYmplY3QnICYmICghdGhpcy5vcHRpb25zIHx8ICF0aGlzLm9wdGlvbnMuc2hhcmVkKSkge1xuICAgICAgcmV0ID0gY2xvbmUocmV0KTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnNraXBDYXN0KSB7XG4gICAgICByZXR1cm4gdGhpcy5fYXBwbHlTZXR0ZXJzKHJldCwgc2NvcGUpO1xuICAgIH1cblxuICAgIGNvbnN0IGNhc3RlZCA9IHRoaXMuYXBwbHlTZXR0ZXJzKHJldCwgc2NvcGUsIGluaXQsIHVuZGVmaW5lZCwgc2V0T3B0aW9uc0ZvckRlZmF1bHRzKTtcbiAgICBpZiAoY2FzdGVkICYmICFBcnJheS5pc0FycmF5KGNhc3RlZCkgJiYgY2FzdGVkLiRpc1NpbmdsZU5lc3RlZCkge1xuICAgICAgY2FzdGVkLiRfX3BhcmVudCA9IHNjb3BlO1xuICAgIH1cbiAgICByZXR1cm4gY2FzdGVkO1xuICB9XG4gIHJldHVybiByZXQ7XG59O1xuXG4vKipcbiAqIEFwcGxpZXMgc2V0dGVycyB3aXRob3V0IGNhc3RpbmdcbiAqXG4gKiBAcGFyYW0ge0FueX0gdmFsdWVcbiAqIEBwYXJhbSB7QW55fSBzY29wZVxuICogQHBhcmFtIHtCb29sZWFufSBpbml0XG4gKiBAcGFyYW0ge0FueX0gcHJpb3JWYWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBpbnN0YW5jZVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU2NoZW1hVHlwZS5wcm90b3R5cGUuX2FwcGx5U2V0dGVycyA9IGZ1bmN0aW9uKHZhbHVlLCBzY29wZSwgaW5pdCwgcHJpb3JWYWwsIG9wdGlvbnMpIHtcbiAgbGV0IHYgPSB2YWx1ZTtcbiAgaWYgKGluaXQpIHtcbiAgICByZXR1cm4gdjtcbiAgfVxuICBjb25zdCBzZXR0ZXJzID0gdGhpcy5zZXR0ZXJzO1xuXG4gIGZvciAobGV0IGkgPSBzZXR0ZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdiA9IHNldHRlcnNbaV0uY2FsbChzY29wZSwgdiwgcHJpb3JWYWwsIHRoaXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgcmV0dXJuIHY7XG59O1xuXG4vKiFcbiAqIGlnbm9yZVxuICovXG5cblNjaGVtYVR5cGUucHJvdG90eXBlLl9jYXN0TnVsbGlzaCA9IGZ1bmN0aW9uIF9jYXN0TnVsbGlzaCh2KSB7XG4gIHJldHVybiB2O1xufTtcblxuLyoqXG4gKiBBcHBsaWVzIHNldHRlcnNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsdWVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzY29wZVxuICogQHBhcmFtIHtCb29sZWFufSBpbml0XG4gKiBAcmV0dXJuIHtBbnl9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5TY2hlbWFUeXBlLnByb3RvdHlwZS5hcHBseVNldHRlcnMgPSBmdW5jdGlvbih2YWx1ZSwgc2NvcGUsIGluaXQsIHByaW9yVmFsLCBvcHRpb25zKSB7XG4gIGxldCB2ID0gdGhpcy5fYXBwbHlTZXR0ZXJzKHZhbHVlLCBzY29wZSwgaW5pdCwgcHJpb3JWYWwsIG9wdGlvbnMpO1xuICBpZiAodiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Nhc3ROdWxsaXNoKHYpO1xuICB9XG4gIC8vIGRvIG5vdCBjYXN0IHVudGlsIGFsbCBzZXR0ZXJzIGFyZSBhcHBsaWVkICM2NjVcbiAgdiA9IHRoaXMuY2FzdCh2LCBzY29wZSwgaW5pdCwgcHJpb3JWYWwsIG9wdGlvbnMpO1xuXG4gIHJldHVybiB2O1xufTtcblxuLyoqXG4gKiBBcHBsaWVzIGdldHRlcnMgdG8gYSB2YWx1ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZVxuICogQHBhcmFtIHtPYmplY3R9IHNjb3BlXG4gKiBAcmV0dXJuIHtBbnl9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5TY2hlbWFUeXBlLnByb3RvdHlwZS5hcHBseUdldHRlcnMgPSBmdW5jdGlvbih2YWx1ZSwgc2NvcGUpIHtcbiAgbGV0IHYgPSB2YWx1ZTtcbiAgY29uc3QgZ2V0dGVycyA9IHRoaXMuZ2V0dGVycztcbiAgY29uc3QgbGVuID0gZ2V0dGVycy5sZW5ndGg7XG5cbiAgaWYgKGxlbiA9PT0gMCkge1xuICAgIHJldHVybiB2O1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIHYgPSBnZXR0ZXJzW2ldLmNhbGwoc2NvcGUsIHYsIHRoaXMpO1xuICB9XG5cbiAgcmV0dXJuIHY7XG59O1xuXG4vKipcbiAqIFNldHMgZGVmYXVsdCBgc2VsZWN0KClgIGJlaGF2aW9yIGZvciB0aGlzIHBhdGguXG4gKlxuICogU2V0IHRvIGB0cnVlYCBpZiB0aGlzIHBhdGggc2hvdWxkIGFsd2F5cyBiZSBpbmNsdWRlZCBpbiB0aGUgcmVzdWx0cywgYGZhbHNlYCBpZiBpdCBzaG91bGQgYmUgZXhjbHVkZWQgYnkgZGVmYXVsdC4gVGhpcyBzZXR0aW5nIGNhbiBiZSBvdmVycmlkZGVuIGF0IHRoZSBxdWVyeSBsZXZlbC5cbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKlxuICogICAgIFQgPSBkYi5tb2RlbCgnVCcsIG5ldyBTY2hlbWEoeyB4OiB7IHR5cGU6IFN0cmluZywgc2VsZWN0OiB0cnVlIH19KSk7XG4gKiAgICAgVC5maW5kKC4uKTsgLy8gZmllbGQgeCB3aWxsIGFsd2F5cyBiZSBzZWxlY3RlZCAuLlxuICogICAgIC8vIC4uIHVubGVzcyBvdmVycmlkZGVuO1xuICogICAgIFQuZmluZCgpLnNlbGVjdCgnLXgnKS5leGVjKGNhbGxiYWNrKTtcbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHZhbFxuICogQHJldHVybiB7U2NoZW1hVHlwZX0gdGhpc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5TY2hlbWFUeXBlLnByb3RvdHlwZS5zZWxlY3QgPSBmdW5jdGlvbiBzZWxlY3QodmFsKSB7XG4gIHRoaXMuc2VsZWN0ZWQgPSAhIXZhbDtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFBlcmZvcm1zIGEgdmFsaWRhdGlvbiBvZiBgdmFsdWVgIHVzaW5nIHRoZSB2YWxpZGF0b3JzIGRlY2xhcmVkIGZvciB0aGlzIFNjaGVtYVR5cGUuXG4gKlxuICogQHBhcmFtIHtBbnl9IHZhbHVlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHBhcmFtIHtPYmplY3R9IHNjb3BlXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMucGF0aF1cbiAqIEByZXR1cm4ge0FueX0gSWYgbm8gdmFsaWRhdG9ycywgcmV0dXJucyB0aGUgb3V0cHV0IGZyb20gY2FsbGluZyBgZm5gLCBvdGhlcndpc2Ugbm8gcmV0dXJuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNjaGVtYVR5cGUucHJvdG90eXBlLmRvVmFsaWRhdGUgPSBmdW5jdGlvbih2YWx1ZSwgZm4sIHNjb3BlLCBvcHRpb25zKSB7XG4gIGxldCBlcnIgPSBmYWxzZTtcbiAgY29uc3QgcGF0aCA9IHRoaXMucGF0aDtcblxuICAvLyBBdm9pZCBub24tb2JqZWN0IGB2YWxpZGF0b3JzYFxuICBjb25zdCB2YWxpZGF0b3JzID0gdGhpcy52YWxpZGF0b3JzLlxuICAgIGZpbHRlcih2ID0+IHR5cGVvZiB2ID09PSAnb2JqZWN0JyAmJiB2ICE9PSBudWxsKTtcblxuICBsZXQgY291bnQgPSB2YWxpZGF0b3JzLmxlbmd0aDtcblxuICBpZiAoIWNvdW50KSB7XG4gICAgcmV0dXJuIGZuKG51bGwpO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHZhbGlkYXRvcnMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBjb25zdCB2ID0gdmFsaWRhdG9yc1tpXTtcbiAgICBjb25zdCB2YWxpZGF0b3IgPSB2LnZhbGlkYXRvcjtcbiAgICBsZXQgb2s7XG5cbiAgICBjb25zdCB2YWxpZGF0b3JQcm9wZXJ0aWVzID0gaXNTaW1wbGVWYWxpZGF0b3IodikgPyBPYmplY3QuYXNzaWduKHt9LCB2KSA6IGNsb25lKHYpO1xuICAgIHZhbGlkYXRvclByb3BlcnRpZXMucGF0aCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5wYXRoID8gb3B0aW9ucy5wYXRoIDogcGF0aDtcbiAgICB2YWxpZGF0b3JQcm9wZXJ0aWVzLmZ1bGxQYXRoID0gdGhpcy4kZnVsbFBhdGg7XG4gICAgdmFsaWRhdG9yUHJvcGVydGllcy52YWx1ZSA9IHZhbHVlO1xuXG4gICAgaWYgKHZhbGlkYXRvciBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgdmFsaWRhdGUodmFsaWRhdG9yLnRlc3QodmFsdWUpLCB2YWxpZGF0b3JQcm9wZXJ0aWVzLCBzY29wZSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHZhbGlkYXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgdmFsaWRhdG9yICE9PSB0aGlzLnJlcXVpcmVkVmFsaWRhdG9yKSB7XG4gICAgICB2YWxpZGF0ZSh0cnVlLCB2YWxpZGF0b3JQcm9wZXJ0aWVzLCBzY29wZSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaWYgKHZhbGlkYXRvclByb3BlcnRpZXMucHJvcHNQYXJhbWV0ZXIpIHtcbiAgICAgICAgb2sgPSB2YWxpZGF0b3IuY2FsbChzY29wZSwgdmFsdWUsIHZhbGlkYXRvclByb3BlcnRpZXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2sgPSB2YWxpZGF0b3IuY2FsbChzY29wZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBvayA9IGZhbHNlO1xuICAgICAgdmFsaWRhdG9yUHJvcGVydGllcy5yZWFzb24gPSBlcnJvcjtcbiAgICAgIGlmIChlcnJvci5tZXNzYWdlKSB7XG4gICAgICAgIHZhbGlkYXRvclByb3BlcnRpZXMubWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9rICE9IG51bGwgJiYgdHlwZW9mIG9rLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG9rLnRoZW4oXG4gICAgICAgIGZ1bmN0aW9uKG9rKSB7IHZhbGlkYXRlKG9rLCB2YWxpZGF0b3JQcm9wZXJ0aWVzLCBzY29wZSk7IH0sXG4gICAgICAgIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgdmFsaWRhdG9yUHJvcGVydGllcy5yZWFzb24gPSBlcnJvcjtcbiAgICAgICAgICB2YWxpZGF0b3JQcm9wZXJ0aWVzLm1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlO1xuICAgICAgICAgIG9rID0gZmFsc2U7XG4gICAgICAgICAgdmFsaWRhdGUob2ssIHZhbGlkYXRvclByb3BlcnRpZXMsIHNjb3BlKTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbGlkYXRlKG9rLCB2YWxpZGF0b3JQcm9wZXJ0aWVzLCBzY29wZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdmFsaWRhdGUob2ssIHZhbGlkYXRvclByb3BlcnRpZXMsIHNjb3BlKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAob2sgPT09IHVuZGVmaW5lZCB8fCBvaykge1xuICAgICAgaWYgKC0tY291bnQgPD0gMCkge1xuICAgICAgICBpbW1lZGlhdGUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZm4obnVsbCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBFcnJvckNvbnN0cnVjdG9yID0gdmFsaWRhdG9yUHJvcGVydGllcy5FcnJvckNvbnN0cnVjdG9yIHx8IFZhbGlkYXRvckVycm9yO1xuICAgICAgZXJyID0gbmV3IEVycm9yQ29uc3RydWN0b3IodmFsaWRhdG9yUHJvcGVydGllcywgc2NvcGUpO1xuICAgICAgZXJyW3ZhbGlkYXRvckVycm9yU3ltYm9sXSA9IHRydWU7XG4gICAgICBpbW1lZGlhdGUoZnVuY3Rpb24oKSB7XG4gICAgICAgIGZuKGVycik7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn07XG5cblxuZnVuY3Rpb24gX3ZhbGlkYXRlKG9rLCB2YWxpZGF0b3JQcm9wZXJ0aWVzKSB7XG4gIGlmIChvayAhPT0gdW5kZWZpbmVkICYmICFvaykge1xuICAgIGNvbnN0IEVycm9yQ29uc3RydWN0b3IgPSB2YWxpZGF0b3JQcm9wZXJ0aWVzLkVycm9yQ29uc3RydWN0b3IgfHwgVmFsaWRhdG9yRXJyb3I7XG4gICAgY29uc3QgZXJyID0gbmV3IEVycm9yQ29uc3RydWN0b3IodmFsaWRhdG9yUHJvcGVydGllcyk7XG4gICAgZXJyW3ZhbGlkYXRvckVycm9yU3ltYm9sXSA9IHRydWU7XG4gICAgcmV0dXJuIGVycjtcbiAgfVxufVxuXG4vKipcbiAqIFBlcmZvcm1zIGEgdmFsaWRhdGlvbiBvZiBgdmFsdWVgIHVzaW5nIHRoZSB2YWxpZGF0b3JzIGRlY2xhcmVkIGZvciB0aGlzIFNjaGVtYVR5cGUuXG4gKlxuICogIyMjIyBOb3RlOlxuICpcbiAqIFRoaXMgbWV0aG9kIGlnbm9yZXMgdGhlIGFzeW5jaHJvbm91cyB2YWxpZGF0b3JzLlxuICpcbiAqIEBwYXJhbSB7QW55fSB2YWx1ZVxuICogQHBhcmFtIHtPYmplY3R9IHNjb3BlXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMucGF0aF1cbiAqIEByZXR1cm4ge01vbmdvb3NlRXJyb3J8bnVsbH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNjaGVtYVR5cGUucHJvdG90eXBlLmRvVmFsaWRhdGVTeW5jID0gZnVuY3Rpb24odmFsdWUsIHNjb3BlLCBvcHRpb25zKSB7XG4gIGNvbnN0IHBhdGggPSB0aGlzLnBhdGg7XG4gIGNvbnN0IGNvdW50ID0gdGhpcy52YWxpZGF0b3JzLmxlbmd0aDtcblxuICBpZiAoIWNvdW50KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBsZXQgdmFsaWRhdG9ycyA9IHRoaXMudmFsaWRhdG9ycztcbiAgaWYgKHZhbHVlID09PSB2b2lkIDApIHtcbiAgICBpZiAodGhpcy52YWxpZGF0b3JzLmxlbmd0aCAhPT0gMCAmJiB0aGlzLnZhbGlkYXRvcnNbMF0udHlwZSA9PT0gJ3JlcXVpcmVkJykge1xuICAgICAgdmFsaWRhdG9ycyA9IFt0aGlzLnZhbGlkYXRvcnNbMF1dO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBsZXQgZXJyID0gbnVsbDtcbiAgbGV0IGkgPSAwO1xuICBjb25zdCBsZW4gPSB2YWxpZGF0b3JzLmxlbmd0aDtcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG5cbiAgICBjb25zdCB2ID0gdmFsaWRhdG9yc1tpXTtcblxuICAgIGlmICh2ID09PSBudWxsIHx8IHR5cGVvZiB2ICE9PSAnb2JqZWN0Jykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgY29uc3QgdmFsaWRhdG9yID0gdi52YWxpZGF0b3I7XG4gICAgY29uc3QgdmFsaWRhdG9yUHJvcGVydGllcyA9IGlzU2ltcGxlVmFsaWRhdG9yKHYpID8gT2JqZWN0LmFzc2lnbih7fSwgdikgOiBjbG9uZSh2KTtcbiAgICB2YWxpZGF0b3JQcm9wZXJ0aWVzLnBhdGggPSBvcHRpb25zICYmIG9wdGlvbnMucGF0aCA/IG9wdGlvbnMucGF0aCA6IHBhdGg7XG4gICAgdmFsaWRhdG9yUHJvcGVydGllcy5mdWxsUGF0aCA9IHRoaXMuJGZ1bGxQYXRoO1xuICAgIHZhbGlkYXRvclByb3BlcnRpZXMudmFsdWUgPSB2YWx1ZTtcbiAgICBsZXQgb2sgPSBmYWxzZTtcblxuICAgIC8vIFNraXAgYW55IGV4cGxpY2l0IGFzeW5jIHZhbGlkYXRvcnMuIFZhbGlkYXRvcnMgdGhhdCByZXR1cm4gYSBwcm9taXNlXG4gICAgLy8gd2lsbCBzdGlsbCBydW4sIGJ1dCB3b24ndCB0cmlnZ2VyIGFueSBlcnJvcnMuXG4gICAgaWYgKGlzQXN5bmNGdW5jdGlvbih2YWxpZGF0b3IpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAodmFsaWRhdG9yIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICBlcnIgPSBfdmFsaWRhdGUodmFsaWRhdG9yLnRlc3QodmFsdWUpLCB2YWxpZGF0b3JQcm9wZXJ0aWVzKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmFsaWRhdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaWYgKHZhbGlkYXRvclByb3BlcnRpZXMucHJvcHNQYXJhbWV0ZXIpIHtcbiAgICAgICAgb2sgPSB2YWxpZGF0b3IuY2FsbChzY29wZSwgdmFsdWUsIHZhbGlkYXRvclByb3BlcnRpZXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2sgPSB2YWxpZGF0b3IuY2FsbChzY29wZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBvayA9IGZhbHNlO1xuICAgICAgdmFsaWRhdG9yUHJvcGVydGllcy5yZWFzb24gPSBlcnJvcjtcbiAgICB9XG5cbiAgICAvLyBTa2lwIGFueSB2YWxpZGF0b3JzIHRoYXQgcmV0dXJuIGEgcHJvbWlzZSwgd2UgY2FuJ3QgaGFuZGxlIHRob3NlXG4gICAgLy8gc3luY2hyb25vdXNseVxuICAgIGlmIChvayAhPSBudWxsICYmIHR5cGVvZiBvay50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgZXJyID0gX3ZhbGlkYXRlKG9rLCB2YWxpZGF0b3JQcm9wZXJ0aWVzKTtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXJyO1xufTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHZhbHVlIGlzIGEgdmFsaWQgUmVmZXJlbmNlLlxuICpcbiAqIEBwYXJhbSB7U2NoZW1hVHlwZX0gc2VsZlxuICogQHBhcmFtIHtPYmplY3R9IHZhbHVlXG4gKiBAcGFyYW0ge0RvY3VtZW50fSBkb2NcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaW5pdFxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNjaGVtYVR5cGUuX2lzUmVmID0gZnVuY3Rpb24oc2VsZiwgdmFsdWUsIGRvYywgaW5pdCkge1xuICAvLyBmYXN0IHBhdGhcbiAgbGV0IHJlZiA9IGluaXQgJiYgc2VsZi5vcHRpb25zICYmIChzZWxmLm9wdGlvbnMucmVmIHx8IHNlbGYub3B0aW9ucy5yZWZQYXRoKTtcblxuICBpZiAoIXJlZiAmJiBkb2MgJiYgZG9jLiRfXyAhPSBudWxsKSB7XG4gICAgLy8gY2hlY2tzIGZvclxuICAgIC8vIC0gdGhpcyBwb3B1bGF0ZWQgd2l0aCBhZGhvYyBtb2RlbCBhbmQgbm8gcmVmIHdhcyBzZXQgaW4gc2NoZW1hIE9SXG4gICAgLy8gLSBzZXR0aW5nIC8gcHVzaGluZyB2YWx1ZXMgYWZ0ZXIgcG9wdWxhdGlvblxuICAgIGNvbnN0IHBhdGggPSBkb2MuJF9fZnVsbFBhdGgoc2VsZi5wYXRoLCB0cnVlKTtcblxuICAgIGNvbnN0IG93bmVyID0gZG9jLm93bmVyRG9jdW1lbnQoKTtcbiAgICByZWYgPSAocGF0aCAhPSBudWxsICYmIG93bmVyLiRwb3B1bGF0ZWQocGF0aCkpIHx8IGRvYy4kcG9wdWxhdGVkKHNlbGYucGF0aCk7XG4gIH1cblxuICBpZiAocmVmKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkgJiYgLy8gYnVmZmVycyBhcmUgb2JqZWN0cyB0b29cbiAgICAgIHZhbHVlLl9ic29udHlwZSAhPT0gJ0JpbmFyeScgLy8gcmF3IGJpbmFyeSB2YWx1ZSBmcm9tIHRoZSBkYlxuICAgICAgJiYgdXRpbHMuaXNPYmplY3QodmFsdWUpIC8vIG1pZ2h0IGhhdmUgZGVzZWxlY3RlZCBfaWQgaW4gcG9wdWxhdGlvbiBxdWVyeVxuICAgICkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluaXQ7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuXG4vKiFcbiAqIGlnbm9yZVxuICovXG5cblNjaGVtYVR5cGUucHJvdG90eXBlLl9jYXN0UmVmID0gZnVuY3Rpb24gX2Nhc3RSZWYodmFsdWUsIGRvYywgaW5pdCkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGlmICh2YWx1ZS4kX18gIT0gbnVsbCkge1xuICAgIHZhbHVlLiRfXy53YXNQb3B1bGF0ZWQgPSB2YWx1ZS4kX18ud2FzUG9wdWxhdGVkIHx8IHRydWU7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLy8gc2V0dGluZyBhIHBvcHVsYXRlZCBwYXRoXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsdWUpIHx8ICF1dGlscy5pc09iamVjdCh2YWx1ZSkpIHtcbiAgICBpZiAoaW5pdCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgQ2FzdEVycm9yKHRoaXMuaW5zdGFuY2UsIHZhbHVlLCB0aGlzLnBhdGgsIG51bGwsIHRoaXMpO1xuICB9XG5cbiAgLy8gSGFuZGxlIHRoZSBjYXNlIHdoZXJlIHVzZXIgZGlyZWN0bHkgc2V0cyBhIHBvcHVsYXRlZFxuICAvLyBwYXRoIHRvIGEgcGxhaW4gb2JqZWN0OyBjYXN0IHRvIHRoZSBNb2RlbCB1c2VkIGluXG4gIC8vIHRoZSBwb3B1bGF0aW9uIHF1ZXJ5LlxuICBjb25zdCBwYXRoID0gZG9jLiRfX2Z1bGxQYXRoKHRoaXMucGF0aCwgdHJ1ZSk7XG4gIGNvbnN0IG93bmVyID0gZG9jLm93bmVyRG9jdW1lbnQoKTtcbiAgY29uc3QgcG9wID0gb3duZXIuJHBvcHVsYXRlZChwYXRoLCB0cnVlKTtcblxuICBsZXQgcmV0ID0gdmFsdWU7XG4gIGlmICghZG9jLiRfXy5wb3B1bGF0ZWQgfHxcbiAgICAhZG9jLiRfXy5wb3B1bGF0ZWRbcGF0aF0gfHxcbiAgICAhZG9jLiRfXy5wb3B1bGF0ZWRbcGF0aF0ub3B0aW9ucyB8fFxuICAgICFkb2MuJF9fLnBvcHVsYXRlZFtwYXRoXS5vcHRpb25zLm9wdGlvbnMgfHxcbiAgICAhZG9jLiRfXy5wb3B1bGF0ZWRbcGF0aF0ub3B0aW9ucy5vcHRpb25zLmxlYW4pIHtcbiAgICByZXQgPSBuZXcgcG9wLm9wdGlvbnNbcG9wdWxhdGVNb2RlbFN5bWJvbF0odmFsdWUpO1xuICAgIHJldC4kX18ud2FzUG9wdWxhdGVkID0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuXG4vKiFcbiAqIGlnbm9yZVxuICovXG5cbmZ1bmN0aW9uIGhhbmRsZVNpbmdsZSh2YWwsIGNvbnRleHQpIHtcbiAgcmV0dXJuIHRoaXMuY2FzdEZvclF1ZXJ5KG51bGwsIHZhbCwgY29udGV4dCk7XG59XG5cbi8qIVxuICogaWdub3JlXG4gKi9cblxuZnVuY3Rpb24gaGFuZGxlQXJyYXkodmFsLCBjb250ZXh0KSB7XG4gIGNvbnN0IF90aGlzID0gdGhpcztcbiAgaWYgKCFBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICByZXR1cm4gW3RoaXMuY2FzdEZvclF1ZXJ5KG51bGwsIHZhbCwgY29udGV4dCldO1xuICB9XG4gIHJldHVybiB2YWwubWFwKGZ1bmN0aW9uKG0pIHtcbiAgICByZXR1cm4gX3RoaXMuY2FzdEZvclF1ZXJ5KG51bGwsIG0sIGNvbnRleHQpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBKdXN0IGxpa2UgaGFuZGxlQXJyYXksIGV4Y2VwdCBhbHNvIGFsbG93cyBgW11gIGJlY2F1c2Ugc3VycHJpc2luZ2x5XG4gKiBgJGluOiBbMSwgW11dYCB3b3JrcyBmaW5lXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBoYW5kbGUkaW4odmFsLCBjb250ZXh0KSB7XG4gIGNvbnN0IF90aGlzID0gdGhpcztcbiAgaWYgKCFBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICByZXR1cm4gW3RoaXMuY2FzdEZvclF1ZXJ5KG51bGwsIHZhbCwgY29udGV4dCldO1xuICB9XG4gIHJldHVybiB2YWwubWFwKGZ1bmN0aW9uKG0pIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShtKSAmJiBtLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIG07XG4gICAgfVxuICAgIHJldHVybiBfdGhpcy5jYXN0Rm9yUXVlcnkobnVsbCwgbSwgY29udGV4dCk7XG4gIH0pO1xufVxuXG4vKiFcbiAqIGlnbm9yZVxuICovXG5cblNjaGVtYVR5cGUucHJvdG90eXBlLiRjb25kaXRpb25hbEhhbmRsZXJzID0ge1xuICAkYWxsOiBoYW5kbGVBcnJheSxcbiAgJGVxOiBoYW5kbGVTaW5nbGUsXG4gICRpbjogaGFuZGxlJGluLFxuICAkbmU6IGhhbmRsZVNpbmdsZSxcbiAgJG5pbjogaGFuZGxlJGluLFxuICAkZXhpc3RzOiAkZXhpc3RzLFxuICAkdHlwZTogJHR5cGVcbn07XG5cbi8qKlxuICogQ2FzdCB0aGUgZ2l2ZW4gdmFsdWUgd2l0aCB0aGUgZ2l2ZW4gb3B0aW9uYWwgcXVlcnkgb3BlcmF0b3IuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IFskY29uZGl0aW9uYWxdIHF1ZXJ5IG9wZXJhdG9yLCBsaWtlIGAkZXFgIG9yIGAkaW5gXG4gKiBAcGFyYW0ge0FueX0gdmFsXG4gKiBAcGFyYW0ge1F1ZXJ5fSBjb250ZXh0XG4gKiBAcmV0dXJuIHtBbnl9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5TY2hlbWFUeXBlLnByb3RvdHlwZS5jYXN0Rm9yUXVlcnkgPSBmdW5jdGlvbigkY29uZGl0aW9uYWwsIHZhbCwgY29udGV4dCkge1xuICBsZXQgaGFuZGxlcjtcbiAgaWYgKCRjb25kaXRpb25hbCAhPSBudWxsKSB7XG4gICAgaGFuZGxlciA9IHRoaXMuJGNvbmRpdGlvbmFsSGFuZGxlcnNbJGNvbmRpdGlvbmFsXTtcbiAgICBpZiAoIWhhbmRsZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2FuXFwndCB1c2UgJyArICRjb25kaXRpb25hbCk7XG4gICAgfVxuICAgIHJldHVybiBoYW5kbGVyLmNhbGwodGhpcywgdmFsLCBjb250ZXh0KTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgcmV0dXJuIHRoaXMuYXBwbHlTZXR0ZXJzKHZhbCwgY29udGV4dCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChlcnIgaW5zdGFuY2VvZiBDYXN0RXJyb3IgJiYgZXJyLnBhdGggPT09IHRoaXMucGF0aCAmJiB0aGlzLiRmdWxsUGF0aCAhPSBudWxsKSB7XG4gICAgICBlcnIucGF0aCA9IHRoaXMuJGZ1bGxQYXRoO1xuICAgIH1cbiAgICB0aHJvdyBlcnI7XG4gIH1cbn07XG5cbi8qKlxuICogU2V0ICYgR2V0IHRoZSBgY2hlY2tSZXF1aXJlZGAgZnVuY3Rpb25cbiAqIE92ZXJyaWRlIHRoZSBmdW5jdGlvbiB0aGUgcmVxdWlyZWQgdmFsaWRhdG9yIHVzZXMgdG8gY2hlY2sgd2hldGhlciBhIHZhbHVlXG4gKiBwYXNzZXMgdGhlIGByZXF1aXJlZGAgY2hlY2suIE92ZXJyaWRlIHRoaXMgb24gdGhlIGluZGl2aWR1YWwgU2NoZW1hVHlwZS5cbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKlxuICogICAgIC8vIFVzZSB0aGlzIHRvIGFsbG93IGVtcHR5IHN0cmluZ3MgdG8gcGFzcyB0aGUgYHJlcXVpcmVkYCB2YWxpZGF0b3JcbiAqICAgICBtb25nb29zZS5TY2hlbWEuVHlwZXMuU3RyaW5nLmNoZWNrUmVxdWlyZWQodiA9PiB0eXBlb2YgdiA9PT0gJ3N0cmluZycpO1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtmbl0gSWYgc2V0LCB3aWxsIG92ZXJ3cml0ZSB0aGUgY3VycmVudCBzZXQgZnVuY3Rpb25cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgaW5wdXQgYGZuYCBvciB0aGUgYWxyZWFkeSBzZXQgZnVuY3Rpb25cbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBTY2hlbWFUeXBlXG4gKiBAZnVuY3Rpb24gY2hlY2tSZXF1aXJlZFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5TY2hlbWFUeXBlLmNoZWNrUmVxdWlyZWQgPSBmdW5jdGlvbihmbikge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gMCkge1xuICAgIHRoaXMuX2NoZWNrUmVxdWlyZWQgPSBmbjtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9jaGVja1JlcXVpcmVkO1xufTtcblxuLyoqXG4gKiBEZWZhdWx0IGNoZWNrIGZvciBpZiB0aGlzIHBhdGggc2F0aXNmaWVzIHRoZSBgcmVxdWlyZWRgIHZhbGlkYXRvci5cbiAqXG4gKiBAcGFyYW0ge0FueX0gdmFsXG4gKiBAcmV0dXJuIHtCb29sZWFufSBgdHJ1ZWAgd2hlbiB0aGUgdmFsdWUgaXMgbm90IGBudWxsYCwgYGZhbHNlYCBvdGhlcndpc2VcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNjaGVtYVR5cGUucHJvdG90eXBlLmNoZWNrUmVxdWlyZWQgPSBmdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPSBudWxsO1xufTtcblxuLyoqXG4gKiBDbG9uZSB0aGUgY3VycmVudCBTY2hlbWFUeXBlXG4gKlxuICogQHJldHVybiB7U2NoZW1hVHlwZX0gVGhlIGNsb25lZCBTY2hlbWFUeXBlIGluc3RhbmNlXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5TY2hlbWFUeXBlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICBjb25zdCBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5vcHRpb25zKTtcbiAgY29uc3Qgc2NoZW1hdHlwZSA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMucGF0aCwgb3B0aW9ucywgdGhpcy5pbnN0YW5jZSk7XG4gIHNjaGVtYXR5cGUudmFsaWRhdG9ycyA9IHRoaXMudmFsaWRhdG9ycy5zbGljZSgpO1xuICBpZiAodGhpcy5yZXF1aXJlZFZhbGlkYXRvciAhPT0gdW5kZWZpbmVkKSBzY2hlbWF0eXBlLnJlcXVpcmVkVmFsaWRhdG9yID0gdGhpcy5yZXF1aXJlZFZhbGlkYXRvcjtcbiAgaWYgKHRoaXMuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHNjaGVtYXR5cGUuZGVmYXVsdFZhbHVlID0gdGhpcy5kZWZhdWx0VmFsdWU7XG4gIGlmICh0aGlzLiRpbW11dGFibGUgIT09IHVuZGVmaW5lZCAmJiB0aGlzLm9wdGlvbnMuaW1tdXRhYmxlID09PSB1bmRlZmluZWQpIHtcbiAgICBzY2hlbWF0eXBlLiRpbW11dGFibGUgPSB0aGlzLiRpbW11dGFibGU7XG5cbiAgICBoYW5kbGVJbW11dGFibGUoc2NoZW1hdHlwZSk7XG4gIH1cbiAgaWYgKHRoaXMuX2luZGV4ICE9PSB1bmRlZmluZWQpIHNjaGVtYXR5cGUuX2luZGV4ID0gdGhpcy5faW5kZXg7XG4gIGlmICh0aGlzLnNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHNjaGVtYXR5cGUuc2VsZWN0ZWQgPSB0aGlzLnNlbGVjdGVkO1xuICBpZiAodGhpcy5pc1JlcXVpcmVkICE9PSB1bmRlZmluZWQpIHNjaGVtYXR5cGUuaXNSZXF1aXJlZCA9IHRoaXMuaXNSZXF1aXJlZDtcbiAgaWYgKHRoaXMub3JpZ2luYWxSZXF1aXJlZFZhbHVlICE9PSB1bmRlZmluZWQpIHNjaGVtYXR5cGUub3JpZ2luYWxSZXF1aXJlZFZhbHVlID0gdGhpcy5vcmlnaW5hbFJlcXVpcmVkVmFsdWU7XG4gIHNjaGVtYXR5cGUuZ2V0dGVycyA9IHRoaXMuZ2V0dGVycy5zbGljZSgpO1xuICBzY2hlbWF0eXBlLnNldHRlcnMgPSB0aGlzLnNldHRlcnMuc2xpY2UoKTtcbiAgcmV0dXJuIHNjaGVtYXR5cGU7XG59O1xuXG4vKiFcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IFNjaGVtYVR5cGU7XG5cbmV4cG9ydHMuQ2FzdEVycm9yID0gQ2FzdEVycm9yO1xuXG5leHBvcnRzLlZhbGlkYXRvckVycm9yID0gVmFsaWRhdG9yRXJyb3I7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/schemaType.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/stateMachine.js":
/*!***************************************************!*\
  !*** ./node_modules/mongoose/lib/stateMachine.js ***!
  \***************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Module dependencies.\n */\n\n\n\nconst utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\"); // eslint-disable-line no-unused-vars\n\n/**\n * StateMachine represents a minimal `interface` for the\n * constructors it builds via StateMachine.ctor(...).\n *\n * @api private\n */\n\nconst StateMachine = module.exports = exports = function StateMachine() {\n};\n\n/**\n * StateMachine.ctor('state1', 'state2', ...)\n * A factory method for subclassing StateMachine.\n * The arguments are a list of states. For each state,\n * the constructor's prototype gets state transition\n * methods named after each state. These transition methods\n * place their path argument into the given state.\n *\n * @param {String} state\n * @param {String} [state]\n * @return {Function} subclass constructor\n * @api private\n */\n\nStateMachine.ctor = function() {\n  const states = [...arguments];\n\n  const ctor = function() {\n    StateMachine.apply(this, arguments);\n    this.paths = {};\n    this.states = {};\n  };\n\n  ctor.prototype = new StateMachine();\n\n  ctor.prototype.stateNames = states;\n\n  states.forEach(function(state) {\n    // Changes the `path`'s state to `state`.\n    ctor.prototype[state] = function(path) {\n      this._changeState(path, state);\n    };\n  });\n\n  return ctor;\n};\n\n/**\n * This function is wrapped by the state change functions:\n *\n * - `require(path)`\n * - `modify(path)`\n * - `init(path)`\n *\n * @api private\n */\n\nStateMachine.prototype._changeState = function _changeState(path, nextState) {\n  const prevState = this.paths[path];\n  if (prevState === nextState) {\n    return;\n  }\n  const prevBucket = this.states[prevState];\n  if (prevBucket) delete prevBucket[path];\n\n  this.paths[path] = nextState;\n  this.states[nextState] = this.states[nextState] || {};\n  this.states[nextState][path] = true;\n};\n\n/*!\n * ignore\n */\n\nStateMachine.prototype.clear = function clear(state) {\n  if (this.states[state] == null) {\n    return;\n  }\n  const keys = Object.keys(this.states[state]);\n  let i = keys.length;\n  let path;\n\n  while (i--) {\n    path = keys[i];\n    delete this.states[state][path];\n    delete this.paths[path];\n  }\n};\n\n/*!\n * ignore\n */\n\nStateMachine.prototype.clearPath = function clearPath(path) {\n  const state = this.paths[path];\n  if (!state) {\n    return;\n  }\n  delete this.paths[path];\n  delete this.states[state][path];\n};\n\n/**\n * Gets the paths for the given state, or empty object `{}` if none.\n * @api private\n */\n\nStateMachine.prototype.getStatePaths = function getStatePaths(state) {\n  if (this.states[state] != null) {\n    return this.states[state];\n  }\n  return {};\n};\n\n/**\n * Checks to see if at least one path is in the states passed in via `arguments`\n * e.g., this.some('required', 'inited')\n *\n * @param {String} state that we want to check for.\n * @api private\n */\n\nStateMachine.prototype.some = function some() {\n  const _this = this;\n  const what = arguments.length ? arguments : this.stateNames;\n  return Array.prototype.some.call(what, function(state) {\n    if (_this.states[state] == null) {\n      return false;\n    }\n    return Object.keys(_this.states[state]).length;\n  });\n};\n\n/**\n * This function builds the functions that get assigned to `forEach` and `map`,\n * since both of those methods share a lot of the same logic.\n *\n * @param {String} iterMethod is either 'forEach' or 'map'\n * @return {Function}\n * @api private\n */\n\nStateMachine.prototype._iter = function _iter(iterMethod) {\n  return function() {\n    let states = [...arguments];\n    const callback = states.pop();\n\n    if (!states.length) states = this.stateNames;\n\n    const _this = this;\n\n    const paths = states.reduce(function(paths, state) {\n      if (_this.states[state] == null) {\n        return paths;\n      }\n      return paths.concat(Object.keys(_this.states[state]));\n    }, []);\n\n    return paths[iterMethod](function(path, i, paths) {\n      return callback(path, i, paths);\n    });\n  };\n};\n\n/**\n * Iterates over the paths that belong to one of the parameter states.\n *\n * The function profile can look like:\n * this.forEach(state1, fn);         // iterates over all paths in state1\n * this.forEach(state1, state2, fn); // iterates over all paths in state1 or state2\n * this.forEach(fn);                 // iterates over all paths in all states\n *\n * @param {String} [state]\n * @param {String} [state]\n * @param {Function} callback\n * @api private\n */\n\nStateMachine.prototype.forEach = function forEach() {\n  this.forEach = this._iter('forEach');\n  return this.forEach.apply(this, arguments);\n};\n\n/**\n * Maps over the paths that belong to one of the parameter states.\n *\n * The function profile can look like:\n * this.forEach(state1, fn);         // iterates over all paths in state1\n * this.forEach(state1, state2, fn); // iterates over all paths in state1 or state2\n * this.forEach(fn);                 // iterates over all paths in all states\n *\n * @param {String} [state]\n * @param {String} [state]\n * @param {Function} callback\n * @return {Array}\n * @api private\n */\n\nStateMachine.prototype.map = function map() {\n  this.map = this._iter('map');\n  return this.map.apply(this, arguments);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/stateMachine.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/types/array/index.js":
/*!********************************************************!*\
  !*** ./node_modules/mongoose/lib/types/array/index.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Module dependencies.\n */\n\n\n\nconst Document = __webpack_require__(/*! ../../document */ \"(ssr)/./node_modules/mongoose/lib/document.js\");\nconst mongooseArrayMethods = __webpack_require__(/*! ./methods */ \"(ssr)/./node_modules/mongoose/lib/types/array/methods/index.js\");\n\nconst arrayAtomicsSymbol = (__webpack_require__(/*! ../../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").arrayAtomicsSymbol);\nconst arrayAtomicsBackupSymbol = (__webpack_require__(/*! ../../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").arrayAtomicsBackupSymbol);\nconst arrayParentSymbol = (__webpack_require__(/*! ../../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").arrayParentSymbol);\nconst arrayPathSymbol = (__webpack_require__(/*! ../../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").arrayPathSymbol);\nconst arraySchemaSymbol = (__webpack_require__(/*! ../../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").arraySchemaSymbol);\n\n/**\n * Mongoose Array constructor.\n *\n * #### Note:\n *\n * _Values always have to be passed to the constructor to initialize, otherwise `MongooseArray#push` will mark the array as modified._\n *\n * @param {Array} values\n * @param {String} path\n * @param {Document} doc parent document\n * @api private\n * @inherits Array https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n * @see https://bit.ly/f6CnZU\n */\nconst _basePush = Array.prototype.push;\nconst numberRE = /^\\d+$/;\n\nfunction MongooseArray(values, path, doc, schematype) {\n  let __array;\n\n  if (Array.isArray(values)) {\n    const len = values.length;\n\n    // Perf optimizations for small arrays: much faster to use `...` than `for` + `push`,\n    // but large arrays may cause stack overflows. And for arrays of length 0/1, just\n    // modifying the array is faster. Seems small, but adds up when you have a document\n    // with thousands of nested arrays.\n    if (len === 0) {\n      __array = new Array();\n    } else if (len === 1) {\n      __array = new Array(1);\n      __array[0] = values[0];\n    } else if (len < 10000) {\n      __array = new Array();\n      _basePush.apply(__array, values);\n    } else {\n      __array = new Array();\n      for (let i = 0; i < len; ++i) {\n        _basePush.call(__array, values[i]);\n      }\n    }\n  } else {\n    __array = [];\n  }\n\n  const internals = {\n    [arrayAtomicsSymbol]: {},\n    [arrayAtomicsBackupSymbol]: void 0,\n    [arrayPathSymbol]: path,\n    [arraySchemaSymbol]: schematype,\n    [arrayParentSymbol]: void 0,\n    isMongooseArray: true,\n    isMongooseArrayProxy: true,\n    __array: __array\n  };\n\n  if (values && values[arrayAtomicsSymbol] != null) {\n    internals[arrayAtomicsSymbol] = values[arrayAtomicsSymbol];\n  }\n\n  // Because doc comes from the context of another function, doc === global\n  // can happen if there was a null somewhere up the chain (see #3020)\n  // RB Jun 17, 2015 updated to check for presence of expected paths instead\n  // to make more proof against unusual node environments\n  if (doc != null && doc instanceof Document) {\n    internals[arrayParentSymbol] = doc;\n    internals[arraySchemaSymbol] = schematype || doc.schema.path(path);\n  }\n\n  const proxy = new Proxy(__array, {\n    get: function(target, prop) {\n      if (internals.hasOwnProperty(prop)) {\n        return internals[prop];\n      }\n      if (mongooseArrayMethods.hasOwnProperty(prop)) {\n        return mongooseArrayMethods[prop];\n      }\n      if (typeof prop === 'string' && numberRE.test(prop) && schematype?.$embeddedSchemaType != null) {\n        return schematype.$embeddedSchemaType.applyGetters(__array[prop], doc);\n      }\n\n      return __array[prop];\n    },\n    set: function(target, prop, value) {\n      if (typeof prop === 'string' && numberRE.test(prop)) {\n        mongooseArrayMethods.set.call(proxy, prop, value, false);\n      } else if (internals.hasOwnProperty(prop)) {\n        internals[prop] = value;\n      } else {\n        __array[prop] = value;\n      }\n\n      return true;\n    }\n  });\n\n  return proxy;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = MongooseArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3R5cGVzL2FycmF5L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYixpQkFBaUIsbUJBQU8sQ0FBQyxxRUFBZ0I7QUFDekMsNkJBQTZCLG1CQUFPLENBQUMsaUZBQVc7O0FBRWhELDJCQUEyQiw2SEFBbUQ7QUFDOUUsaUNBQWlDLG1JQUF5RDtBQUMxRiwwQkFBMEIsNEhBQWtEO0FBQzVFLHdCQUF3QiwwSEFBZ0Q7QUFDeEUsMEJBQTBCLDRIQUFrRDs7QUFFNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxzQkFBc0IsU0FBUztBQUMvQjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi90eXBlcy9hcnJheS9pbmRleC5qcz81MThlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IERvY3VtZW50ID0gcmVxdWlyZSgnLi4vLi4vZG9jdW1lbnQnKTtcbmNvbnN0IG1vbmdvb3NlQXJyYXlNZXRob2RzID0gcmVxdWlyZSgnLi9tZXRob2RzJyk7XG5cbmNvbnN0IGFycmF5QXRvbWljc1N5bWJvbCA9IHJlcXVpcmUoJy4uLy4uL2hlbHBlcnMvc3ltYm9scycpLmFycmF5QXRvbWljc1N5bWJvbDtcbmNvbnN0IGFycmF5QXRvbWljc0JhY2t1cFN5bWJvbCA9IHJlcXVpcmUoJy4uLy4uL2hlbHBlcnMvc3ltYm9scycpLmFycmF5QXRvbWljc0JhY2t1cFN5bWJvbDtcbmNvbnN0IGFycmF5UGFyZW50U3ltYm9sID0gcmVxdWlyZSgnLi4vLi4vaGVscGVycy9zeW1ib2xzJykuYXJyYXlQYXJlbnRTeW1ib2w7XG5jb25zdCBhcnJheVBhdGhTeW1ib2wgPSByZXF1aXJlKCcuLi8uLi9oZWxwZXJzL3N5bWJvbHMnKS5hcnJheVBhdGhTeW1ib2w7XG5jb25zdCBhcnJheVNjaGVtYVN5bWJvbCA9IHJlcXVpcmUoJy4uLy4uL2hlbHBlcnMvc3ltYm9scycpLmFycmF5U2NoZW1hU3ltYm9sO1xuXG4vKipcbiAqIE1vbmdvb3NlIEFycmF5IGNvbnN0cnVjdG9yLlxuICpcbiAqICMjIyMgTm90ZTpcbiAqXG4gKiBfVmFsdWVzIGFsd2F5cyBoYXZlIHRvIGJlIHBhc3NlZCB0byB0aGUgY29uc3RydWN0b3IgdG8gaW5pdGlhbGl6ZSwgb3RoZXJ3aXNlIGBNb25nb29zZUFycmF5I3B1c2hgIHdpbGwgbWFyayB0aGUgYXJyYXkgYXMgbW9kaWZpZWQuX1xuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlc1xuICogQHBhcmFtIHtTdHJpbmd9IHBhdGhcbiAqIEBwYXJhbSB7RG9jdW1lbnR9IGRvYyBwYXJlbnQgZG9jdW1lbnRcbiAqIEBhcGkgcHJpdmF0ZVxuICogQGluaGVyaXRzIEFycmF5IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5XG4gKiBAc2VlIGh0dHBzOi8vYml0Lmx5L2Y2Q25aVVxuICovXG5jb25zdCBfYmFzZVB1c2ggPSBBcnJheS5wcm90b3R5cGUucHVzaDtcbmNvbnN0IG51bWJlclJFID0gL15cXGQrJC87XG5cbmZ1bmN0aW9uIE1vbmdvb3NlQXJyYXkodmFsdWVzLCBwYXRoLCBkb2MsIHNjaGVtYXR5cGUpIHtcbiAgbGV0IF9fYXJyYXk7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVzKSkge1xuICAgIGNvbnN0IGxlbiA9IHZhbHVlcy5sZW5ndGg7XG5cbiAgICAvLyBQZXJmIG9wdGltaXphdGlvbnMgZm9yIHNtYWxsIGFycmF5czogbXVjaCBmYXN0ZXIgdG8gdXNlIGAuLi5gIHRoYW4gYGZvcmAgKyBgcHVzaGAsXG4gICAgLy8gYnV0IGxhcmdlIGFycmF5cyBtYXkgY2F1c2Ugc3RhY2sgb3ZlcmZsb3dzLiBBbmQgZm9yIGFycmF5cyBvZiBsZW5ndGggMC8xLCBqdXN0XG4gICAgLy8gbW9kaWZ5aW5nIHRoZSBhcnJheSBpcyBmYXN0ZXIuIFNlZW1zIHNtYWxsLCBidXQgYWRkcyB1cCB3aGVuIHlvdSBoYXZlIGEgZG9jdW1lbnRcbiAgICAvLyB3aXRoIHRob3VzYW5kcyBvZiBuZXN0ZWQgYXJyYXlzLlxuICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgIF9fYXJyYXkgPSBuZXcgQXJyYXkoKTtcbiAgICB9IGVsc2UgaWYgKGxlbiA9PT0gMSkge1xuICAgICAgX19hcnJheSA9IG5ldyBBcnJheSgxKTtcbiAgICAgIF9fYXJyYXlbMF0gPSB2YWx1ZXNbMF07XG4gICAgfSBlbHNlIGlmIChsZW4gPCAxMDAwMCkge1xuICAgICAgX19hcnJheSA9IG5ldyBBcnJheSgpO1xuICAgICAgX2Jhc2VQdXNoLmFwcGx5KF9fYXJyYXksIHZhbHVlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9fYXJyYXkgPSBuZXcgQXJyYXkoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgX2Jhc2VQdXNoLmNhbGwoX19hcnJheSwgdmFsdWVzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgX19hcnJheSA9IFtdO1xuICB9XG5cbiAgY29uc3QgaW50ZXJuYWxzID0ge1xuICAgIFthcnJheUF0b21pY3NTeW1ib2xdOiB7fSxcbiAgICBbYXJyYXlBdG9taWNzQmFja3VwU3ltYm9sXTogdm9pZCAwLFxuICAgIFthcnJheVBhdGhTeW1ib2xdOiBwYXRoLFxuICAgIFthcnJheVNjaGVtYVN5bWJvbF06IHNjaGVtYXR5cGUsXG4gICAgW2FycmF5UGFyZW50U3ltYm9sXTogdm9pZCAwLFxuICAgIGlzTW9uZ29vc2VBcnJheTogdHJ1ZSxcbiAgICBpc01vbmdvb3NlQXJyYXlQcm94eTogdHJ1ZSxcbiAgICBfX2FycmF5OiBfX2FycmF5XG4gIH07XG5cbiAgaWYgKHZhbHVlcyAmJiB2YWx1ZXNbYXJyYXlBdG9taWNzU3ltYm9sXSAhPSBudWxsKSB7XG4gICAgaW50ZXJuYWxzW2FycmF5QXRvbWljc1N5bWJvbF0gPSB2YWx1ZXNbYXJyYXlBdG9taWNzU3ltYm9sXTtcbiAgfVxuXG4gIC8vIEJlY2F1c2UgZG9jIGNvbWVzIGZyb20gdGhlIGNvbnRleHQgb2YgYW5vdGhlciBmdW5jdGlvbiwgZG9jID09PSBnbG9iYWxcbiAgLy8gY2FuIGhhcHBlbiBpZiB0aGVyZSB3YXMgYSBudWxsIHNvbWV3aGVyZSB1cCB0aGUgY2hhaW4gKHNlZSAjMzAyMClcbiAgLy8gUkIgSnVuIDE3LCAyMDE1IHVwZGF0ZWQgdG8gY2hlY2sgZm9yIHByZXNlbmNlIG9mIGV4cGVjdGVkIHBhdGhzIGluc3RlYWRcbiAgLy8gdG8gbWFrZSBtb3JlIHByb29mIGFnYWluc3QgdW51c3VhbCBub2RlIGVudmlyb25tZW50c1xuICBpZiAoZG9jICE9IG51bGwgJiYgZG9jIGluc3RhbmNlb2YgRG9jdW1lbnQpIHtcbiAgICBpbnRlcm5hbHNbYXJyYXlQYXJlbnRTeW1ib2xdID0gZG9jO1xuICAgIGludGVybmFsc1thcnJheVNjaGVtYVN5bWJvbF0gPSBzY2hlbWF0eXBlIHx8IGRvYy5zY2hlbWEucGF0aChwYXRoKTtcbiAgfVxuXG4gIGNvbnN0IHByb3h5ID0gbmV3IFByb3h5KF9fYXJyYXksIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKHRhcmdldCwgcHJvcCkge1xuICAgICAgaWYgKGludGVybmFscy5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICByZXR1cm4gaW50ZXJuYWxzW3Byb3BdO1xuICAgICAgfVxuICAgICAgaWYgKG1vbmdvb3NlQXJyYXlNZXRob2RzLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgIHJldHVybiBtb25nb29zZUFycmF5TWV0aG9kc1twcm9wXTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgcHJvcCA9PT0gJ3N0cmluZycgJiYgbnVtYmVyUkUudGVzdChwcm9wKSAmJiBzY2hlbWF0eXBlPy4kZW1iZWRkZWRTY2hlbWFUeXBlICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHNjaGVtYXR5cGUuJGVtYmVkZGVkU2NoZW1hVHlwZS5hcHBseUdldHRlcnMoX19hcnJheVtwcm9wXSwgZG9jKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9fYXJyYXlbcHJvcF07XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uKHRhcmdldCwgcHJvcCwgdmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvcCA9PT0gJ3N0cmluZycgJiYgbnVtYmVyUkUudGVzdChwcm9wKSkge1xuICAgICAgICBtb25nb29zZUFycmF5TWV0aG9kcy5zZXQuY2FsbChwcm94eSwgcHJvcCwgdmFsdWUsIGZhbHNlKTtcbiAgICAgIH0gZWxzZSBpZiAoaW50ZXJuYWxzLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgIGludGVybmFsc1twcm9wXSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX19hcnJheVtwcm9wXSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwcm94eTtcbn1cblxuLyohXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBNb25nb29zZUFycmF5O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/types/array/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/types/array/isMongooseArray.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongoose/lib/types/array/isMongooseArray.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.isMongooseArray = function(mongooseArray) {\n  return Array.isArray(mongooseArray) && mongooseArray.isMongooseArray;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3R5cGVzL2FycmF5L2lzTW9uZ29vc2VBcnJheS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYix1QkFBdUI7QUFDdkI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3R5cGVzL2FycmF5L2lzTW9uZ29vc2VBcnJheS5qcz9lMTNhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5pc01vbmdvb3NlQXJyYXkgPSBmdW5jdGlvbihtb25nb29zZUFycmF5KSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KG1vbmdvb3NlQXJyYXkpICYmIG1vbmdvb3NlQXJyYXkuaXNNb25nb29zZUFycmF5O1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/types/array/isMongooseArray.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/types/array/methods/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongoose/lib/types/array/methods/index.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst Document = __webpack_require__(/*! ../../../document */ \"(ssr)/./node_modules/mongoose/lib/document.js\");\nconst ArraySubdocument = __webpack_require__(/*! ../../arraySubdocument */ \"(ssr)/./node_modules/mongoose/lib/types/arraySubdocument.js\");\nconst MongooseError = __webpack_require__(/*! ../../../error/mongooseError */ \"(ssr)/./node_modules/mongoose/lib/error/mongooseError.js\");\nconst cleanModifiedSubpaths = __webpack_require__(/*! ../../../helpers/document/cleanModifiedSubpaths */ \"(ssr)/./node_modules/mongoose/lib/helpers/document/cleanModifiedSubpaths.js\");\nconst clone = __webpack_require__(/*! ../../../helpers/clone */ \"(ssr)/./node_modules/mongoose/lib/helpers/clone.js\");\nconst internalToObjectOptions = (__webpack_require__(/*! ../../../options */ \"(ssr)/./node_modules/mongoose/lib/options.js\").internalToObjectOptions);\nconst mpath = __webpack_require__(/*! mpath */ \"(ssr)/./node_modules/mpath/index.js\");\nconst utils = __webpack_require__(/*! ../../../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\nconst isBsonType = __webpack_require__(/*! ../../../helpers/isBsonType */ \"(ssr)/./node_modules/mongoose/lib/helpers/isBsonType.js\");\n\nconst arrayAtomicsSymbol = (__webpack_require__(/*! ../../../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").arrayAtomicsSymbol);\nconst arrayParentSymbol = (__webpack_require__(/*! ../../../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").arrayParentSymbol);\nconst arrayPathSymbol = (__webpack_require__(/*! ../../../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").arrayPathSymbol);\nconst arraySchemaSymbol = (__webpack_require__(/*! ../../../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").arraySchemaSymbol);\nconst populateModelSymbol = (__webpack_require__(/*! ../../../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").populateModelSymbol);\nconst slicedSymbol = Symbol('mongoose#Array#sliced');\n\nconst _basePush = Array.prototype.push;\n\n/*!\n * ignore\n */\n\nconst methods = {\n  /**\n   * Depopulates stored atomic operation values as necessary for direct insertion to MongoDB.\n   *\n   * If no atomics exist, we return all array values after conversion.\n   *\n   * @return {Array}\n   * @method $__getAtomics\n   * @memberOf MongooseArray\n   * @instance\n   * @api private\n   */\n\n  $__getAtomics() {\n    const ret = [];\n    const keys = Object.keys(this[arrayAtomicsSymbol] || {});\n    let i = keys.length;\n\n    const opts = Object.assign({}, internalToObjectOptions, { _isNested: true });\n\n    if (i === 0) {\n      ret[0] = ['$set', this.toObject(opts)];\n      return ret;\n    }\n\n    while (i--) {\n      const op = keys[i];\n      let val = this[arrayAtomicsSymbol][op];\n\n      // the atomic values which are arrays are not MongooseArrays. we\n      // need to convert their elements as if they were MongooseArrays\n      // to handle populated arrays versus DocumentArrays properly.\n      if (utils.isMongooseObject(val)) {\n        val = val.toObject(opts);\n      } else if (Array.isArray(val)) {\n        val = this.toObject.call(val, opts);\n      } else if (val != null && Array.isArray(val.$each)) {\n        val.$each = this.toObject.call(val.$each, opts);\n      } else if (val != null && typeof val.valueOf === 'function') {\n        val = val.valueOf();\n      }\n\n      if (op === '$addToSet') {\n        val = { $each: val };\n      }\n\n      ret.push([op, val]);\n    }\n\n    return ret;\n  },\n\n  /*!\n   * ignore\n   */\n\n  $atomics() {\n    return this[arrayAtomicsSymbol];\n  },\n\n  /*!\n   * ignore\n   */\n\n  $parent() {\n    return this[arrayParentSymbol];\n  },\n\n  /*!\n   * ignore\n   */\n\n  $path() {\n    return this[arrayPathSymbol];\n  },\n\n  /**\n   * Atomically shifts the array at most one time per document `save()`.\n   *\n   * #### Note:\n   *\n   * _Calling this multiple times on an array before saving sends the same command as calling it once._\n   * _This update is implemented using the MongoDB [$pop](https://www.mongodb.com/docs/manual/reference/operator/update/pop/) method which enforces this restriction._\n   *\n   *      doc.array = [1,2,3];\n   *\n   *      const shifted = doc.array.$shift();\n   *      console.log(shifted); // 1\n   *      console.log(doc.array); // [2,3]\n   *\n   *      // no affect\n   *      shifted = doc.array.$shift();\n   *      console.log(doc.array); // [2,3]\n   *\n   *      doc.save(function (err) {\n   *        if (err) return handleError(err);\n   *\n   *        // we saved, now $shift works again\n   *        shifted = doc.array.$shift();\n   *        console.log(shifted ); // 2\n   *        console.log(doc.array); // [3]\n   *      })\n   *\n   * @api public\n   * @memberOf MongooseArray\n   * @instance\n   * @method $shift\n   * @see mongodb https://www.mongodb.com/docs/manual/reference/operator/update/pop/\n   */\n\n  $shift() {\n    this._registerAtomic('$pop', -1);\n    this._markModified();\n\n    // only allow shifting once\n    const __array = this.__array;\n    if (__array._shifted) {\n      return;\n    }\n    __array._shifted = true;\n\n    return [].shift.call(__array);\n  },\n\n  /**\n   * Pops the array atomically at most one time per document `save()`.\n   *\n   * #### NOTE:\n   *\n   * _Calling this multiple times on an array before saving sends the same command as calling it once._\n   * _This update is implemented using the MongoDB [$pop](https://www.mongodb.com/docs/manual/reference/operator/update/pop/) method which enforces this restriction._\n   *\n   *      doc.array = [1,2,3];\n   *\n   *      const popped = doc.array.$pop();\n   *      console.log(popped); // 3\n   *      console.log(doc.array); // [1,2]\n   *\n   *      // no affect\n   *      popped = doc.array.$pop();\n   *      console.log(doc.array); // [1,2]\n   *\n   *      doc.save(function (err) {\n   *        if (err) return handleError(err);\n   *\n   *        // we saved, now $pop works again\n   *        popped = doc.array.$pop();\n   *        console.log(popped); // 2\n   *        console.log(doc.array); // [1]\n   *      })\n   *\n   * @api public\n   * @method $pop\n   * @memberOf MongooseArray\n   * @instance\n   * @see mongodb https://www.mongodb.com/docs/manual/reference/operator/update/pop/\n   * @method $pop\n   * @memberOf MongooseArray\n   */\n\n  $pop() {\n    this._registerAtomic('$pop', 1);\n    this._markModified();\n\n    // only allow popping once\n    if (this._popped) {\n      return;\n    }\n    this._popped = true;\n\n    return [].pop.call(this);\n  },\n\n  /*!\n   * ignore\n   */\n\n  $schema() {\n    return this[arraySchemaSymbol];\n  },\n\n  /**\n   * Casts a member based on this arrays schema.\n   *\n   * @param {any} value\n   * @return value the casted value\n   * @method _cast\n   * @api private\n   * @memberOf MongooseArray\n   */\n\n  _cast(value) {\n    let populated = false;\n    let Model;\n\n    const parent = this[arrayParentSymbol];\n    if (parent) {\n      populated = parent.$populated(this[arrayPathSymbol], true);\n    }\n\n    if (populated && value !== null && value !== undefined) {\n      // cast to the populated Models schema\n      Model = populated.options[populateModelSymbol];\n      if (Model == null) {\n        throw new MongooseError('No populated model found for path `' + this[arrayPathSymbol] + '`. This is likely a bug in Mongoose, please report an issue on github.com/Automattic/mongoose.');\n      }\n\n      // only objects are permitted so we can safely assume that\n      // non-objects are to be interpreted as _id\n      if (Buffer.isBuffer(value) ||\n          isBsonType(value, 'ObjectId') || !utils.isObject(value)) {\n        value = { _id: value };\n      }\n\n      // gh-2399\n      // we should cast model only when it's not a discriminator\n      const isDisc = value.schema && value.schema.discriminatorMapping &&\n          value.schema.discriminatorMapping.key !== undefined;\n      if (!isDisc) {\n        value = new Model(value);\n      }\n      return this[arraySchemaSymbol].caster.applySetters(value, parent, true);\n    }\n\n    return this[arraySchemaSymbol].caster.applySetters(value, parent, false);\n  },\n\n  /**\n   * Internal helper for .map()\n   *\n   * @api private\n   * @return {Number}\n   * @method _mapCast\n   * @memberOf MongooseArray\n   */\n\n  _mapCast(val, index) {\n    return this._cast(val, this.length + index);\n  },\n\n  /**\n   * Marks this array as modified.\n   *\n   * If it bubbles up from an embedded document change, then it takes the following arguments (otherwise, takes 0 arguments)\n   *\n   * @param {ArraySubdocument} subdoc the embedded doc that invoked this method on the Array\n   * @param {String} embeddedPath the path which changed in the subdoc\n   * @method _markModified\n   * @api private\n   * @memberOf MongooseArray\n   */\n\n  _markModified(elem) {\n    const parent = this[arrayParentSymbol];\n    let dirtyPath;\n\n    if (parent) {\n      dirtyPath = this[arrayPathSymbol];\n\n      if (arguments.length) {\n        dirtyPath = dirtyPath + '.' + elem;\n      }\n\n      if (dirtyPath != null && dirtyPath.endsWith('.$')) {\n        return this;\n      }\n\n      parent.markModified(dirtyPath, arguments.length !== 0 ? elem : parent);\n    }\n\n    return this;\n  },\n\n  /**\n   * Register an atomic operation with the parent.\n   *\n   * @param {Array} op operation\n   * @param {any} val\n   * @method _registerAtomic\n   * @api private\n   * @memberOf MongooseArray\n   */\n\n  _registerAtomic(op, val) {\n    if (this[slicedSymbol]) {\n      return;\n    }\n    if (op === '$set') {\n      // $set takes precedence over all other ops.\n      // mark entire array modified.\n      this[arrayAtomicsSymbol] = { $set: val };\n      cleanModifiedSubpaths(this[arrayParentSymbol], this[arrayPathSymbol]);\n      this._markModified();\n      return this;\n    }\n\n    const atomics = this[arrayAtomicsSymbol];\n\n    // reset pop/shift after save\n    if (op === '$pop' && !('$pop' in atomics)) {\n      const _this = this;\n      this[arrayParentSymbol].once('save', function() {\n        _this._popped = _this._shifted = null;\n      });\n    }\n\n    // check for impossible $atomic combos (Mongo denies more than one\n    // $atomic op on a single path\n    if (atomics.$set || Object.keys(atomics).length && !(op in atomics)) {\n      // a different op was previously registered.\n      // save the entire thing.\n      this[arrayAtomicsSymbol] = { $set: this };\n      return this;\n    }\n\n    let selector;\n\n    if (op === '$pullAll' || op === '$addToSet') {\n      atomics[op] || (atomics[op] = []);\n      atomics[op] = atomics[op].concat(val);\n    } else if (op === '$pullDocs') {\n      const pullOp = atomics['$pull'] || (atomics['$pull'] = {});\n      if (val[0] instanceof ArraySubdocument) {\n        selector = pullOp['$or'] || (pullOp['$or'] = []);\n        Array.prototype.push.apply(selector, val.map(v => {\n          return v.toObject({\n            transform: (doc, ret) => {\n              if (v == null || v.$__ == null) {\n                return ret;\n              }\n\n              Object.keys(v.$__.activePaths.getStatePaths('default')).forEach(path => {\n                mpath.unset(path, ret);\n\n                _minimizePath(ret, path);\n              });\n\n              return ret;\n            },\n            virtuals: false\n          });\n        }));\n      } else {\n        selector = pullOp['_id'] || (pullOp['_id'] = { $in: [] });\n        selector['$in'] = selector['$in'].concat(val);\n      }\n    } else if (op === '$push') {\n      atomics.$push = atomics.$push || { $each: [] };\n      if (val != null && utils.hasUserDefinedProperty(val, '$each')) {\n        atomics.$push = val;\n      } else {\n        if (val.length === 1) {\n          atomics.$push.$each.push(val[0]);\n        } else if (val.length < 10000) {\n          atomics.$push.$each.push(...val);\n        } else {\n          for (const v of val) {\n            atomics.$push.$each.push(v);\n          }\n        }\n      }\n    } else {\n      atomics[op] = val;\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds values to the array if not already present.\n   *\n   * #### Example:\n   *\n   *     console.log(doc.array) // [2,3,4]\n   *     const added = doc.array.addToSet(4,5);\n   *     console.log(doc.array) // [2,3,4,5]\n   *     console.log(added)     // [5]\n   *\n   * @param {...any} [args]\n   * @return {Array} the values that were added\n   * @memberOf MongooseArray\n   * @api public\n   * @method addToSet\n   */\n\n  addToSet() {\n    _checkManualPopulation(this, arguments);\n\n    const values = [].map.call(arguments, this._mapCast, this);\n    const added = [];\n    let type = '';\n    if (values[0] instanceof ArraySubdocument) {\n      type = 'doc';\n    } else if (values[0] instanceof Date) {\n      type = 'date';\n    } else if (isBsonType(values[0], 'ObjectId')) {\n      type = 'ObjectId';\n    }\n\n    const rawValues = utils.isMongooseArray(values) ? values.__array : values;\n    const rawArray = utils.isMongooseArray(this) ? this.__array : this;\n\n    rawValues.forEach(function(v) {\n      let found;\n      const val = +v;\n      switch (type) {\n        case 'doc':\n          found = this.some(function(doc) {\n            return doc.equals(v);\n          });\n          break;\n        case 'date':\n          found = this.some(function(d) {\n            return +d === val;\n          });\n          break;\n        case 'ObjectId':\n          found = this.find(o => o.toString() === v.toString());\n          break;\n        default:\n          found = ~this.indexOf(v);\n          break;\n      }\n\n      if (!found) {\n        this._markModified();\n        rawArray.push(v);\n        this._registerAtomic('$addToSet', v);\n        [].push.call(added, v);\n      }\n    }, this);\n\n    return added;\n  },\n\n  /**\n   * Returns the number of pending atomic operations to send to the db for this array.\n   *\n   * @api private\n   * @return {Number}\n   * @method hasAtomics\n   * @memberOf MongooseArray\n   */\n\n  hasAtomics() {\n    if (!utils.isPOJO(this[arrayAtomicsSymbol])) {\n      return 0;\n    }\n\n    return Object.keys(this[arrayAtomicsSymbol]).length;\n  },\n\n  /**\n   * Return whether or not the `obj` is included in the array.\n   *\n   * @param {Object} obj the item to check\n   * @param {Number} fromIndex\n   * @return {Boolean}\n   * @api public\n   * @method includes\n   * @memberOf MongooseArray\n   */\n\n  includes(obj, fromIndex) {\n    const ret = this.indexOf(obj, fromIndex);\n    return ret !== -1;\n  },\n\n  /**\n   * Return the index of `obj` or `-1` if not found.\n   *\n   * @param {Object} obj the item to look for\n   * @param {Number} fromIndex\n   * @return {Number}\n   * @api public\n   * @method indexOf\n   * @memberOf MongooseArray\n   */\n\n  indexOf(obj, fromIndex) {\n    if (isBsonType(obj, 'ObjectId')) {\n      obj = obj.toString();\n    }\n\n    fromIndex = fromIndex == null ? 0 : fromIndex;\n    const len = this.length;\n    for (let i = fromIndex; i < len; ++i) {\n      if (obj == this[i]) {\n        return i;\n      }\n    }\n    return -1;\n  },\n\n  /**\n   * Helper for console.log\n   *\n   * @api public\n   * @method inspect\n   * @memberOf MongooseArray\n   */\n\n  inspect() {\n    return JSON.stringify(this);\n  },\n\n  /**\n   * Pushes items to the array non-atomically.\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @param {...any} [args]\n   * @api public\n   * @method nonAtomicPush\n   * @memberOf MongooseArray\n   */\n\n  nonAtomicPush() {\n    const values = [].map.call(arguments, this._mapCast, this);\n    this._markModified();\n    const ret = [].push.apply(this, values);\n    this._registerAtomic('$set', this);\n    return ret;\n  },\n\n  /**\n   * Wraps [`Array#pop`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/pop) with proper change tracking.\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified which will pass the entire thing to $set potentially overwriting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @see MongooseArray#$pop https://mongoosejs.com/docs/api/array.html#MongooseArray.prototype.$pop()\n   * @api public\n   * @method pop\n   * @memberOf MongooseArray\n   */\n\n  pop() {\n    this._markModified();\n    const ret = [].pop.call(this);\n    this._registerAtomic('$set', this);\n    return ret;\n  },\n\n  /**\n   * Pulls items from the array atomically. Equality is determined by casting\n   * the provided value to an embedded document and comparing using\n   * [the `Document.equals()` function.](https://mongoosejs.com/docs/api/document.html#Document.prototype.equals())\n   *\n   * #### Example:\n   *\n   *     doc.array.pull(ObjectId)\n   *     doc.array.pull({ _id: 'someId' })\n   *     doc.array.pull(36)\n   *     doc.array.pull('tag 1', 'tag 2')\n   *\n   * To remove a document from a subdocument array we may pass an object with a matching `_id`.\n   *\n   *     doc.subdocs.push({ _id: 4815162342 })\n   *     doc.subdocs.pull({ _id: 4815162342 }) // removed\n   *\n   * Or we may passing the _id directly and let mongoose take care of it.\n   *\n   *     doc.subdocs.push({ _id: 4815162342 })\n   *     doc.subdocs.pull(4815162342); // works\n   *\n   * The first pull call will result in a atomic operation on the database, if pull is called repeatedly without saving the document, a $set operation is used on the complete array instead, overwriting possible changes that happened on the database in the meantime.\n   *\n   * @param {...any} [args]\n   * @see mongodb https://www.mongodb.com/docs/manual/reference/operator/update/pull/\n   * @api public\n   * @method pull\n   * @memberOf MongooseArray\n   */\n\n  pull() {\n    const values = [].map.call(arguments, (v, i) => this._cast(v, i, { defaults: false }), this);\n    const cur = this[arrayParentSymbol].get(this[arrayPathSymbol]);\n    let i = cur.length;\n    let mem;\n    this._markModified();\n\n    while (i--) {\n      mem = cur[i];\n      if (mem instanceof Document) {\n        const some = values.some(function(v) {\n          return mem.equals(v);\n        });\n        if (some) {\n          [].splice.call(cur, i, 1);\n        }\n      } else if (~cur.indexOf.call(values, mem)) {\n        [].splice.call(cur, i, 1);\n      }\n    }\n\n    if (values[0] instanceof ArraySubdocument) {\n      this._registerAtomic('$pullDocs', values.map(function(v) {\n        const _id = v.$__getValue('_id');\n        if (_id === undefined || v.$isDefault('_id')) {\n          return v;\n        }\n        return _id;\n      }));\n    } else {\n      this._registerAtomic('$pullAll', values);\n    }\n\n\n    // Might have modified child paths and then pulled, like\n    // `doc.children[1].name = 'test';` followed by\n    // `doc.children.remove(doc.children[0]);`. In this case we fall back\n    // to a `$set` on the whole array. See #3511\n    if (cleanModifiedSubpaths(this[arrayParentSymbol], this[arrayPathSymbol]) > 0) {\n      this._registerAtomic('$set', this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.\n   *\n   * #### Example:\n   *\n   *     const schema = Schema({ nums: [Number] });\n   *     const Model = mongoose.model('Test', schema);\n   *\n   *     const doc = await Model.create({ nums: [3, 4] });\n   *     doc.nums.push(5); // Add 5 to the end of the array\n   *     await doc.save();\n   *\n   *     // You can also pass an object with `$each` as the\n   *     // first parameter to use MongoDB's `$position`\n   *     doc.nums.push({\n   *       $each: [1, 2],\n   *       $position: 0\n   *     });\n   *     doc.nums; // [1, 2, 3, 4, 5]\n   *\n   * @param {...Object} [args]\n   * @api public\n   * @method push\n   * @memberOf MongooseArray\n   */\n\n  push() {\n    let values = arguments;\n    let atomic = values;\n    const isOverwrite = values[0] != null &&\n      utils.hasUserDefinedProperty(values[0], '$each');\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n    if (isOverwrite) {\n      atomic = values[0];\n      values = values[0].$each;\n    }\n\n    if (this[arraySchemaSymbol] == null) {\n      return _basePush.apply(this, values);\n    }\n\n    _checkManualPopulation(this, values);\n\n    values = [].map.call(values, this._mapCast, this);\n    let ret;\n    const atomics = this[arrayAtomicsSymbol];\n    this._markModified();\n    if (isOverwrite) {\n      atomic.$each = values;\n\n      if ((atomics.$push && atomics.$push.$each && atomics.$push.$each.length || 0) !== 0 &&\n          atomics.$push.$position != atomic.$position) {\n        throw new MongooseError('Cannot call `Array#push()` multiple times ' +\n          'with different `$position`');\n      }\n\n      if (atomic.$position != null) {\n        [].splice.apply(arr, [atomic.$position, 0].concat(values));\n        ret = this.length;\n      } else {\n        ret = [].push.apply(arr, values);\n      }\n    } else {\n      if ((atomics.$push && atomics.$push.$each && atomics.$push.$each.length || 0) !== 0 &&\n          atomics.$push.$position != null) {\n        throw new MongooseError('Cannot call `Array#push()` multiple times ' +\n          'with different `$position`');\n      }\n      atomic = values;\n      ret = _basePush.apply(arr, values);\n    }\n\n    this._registerAtomic('$push', atomic);\n    return ret;\n  },\n\n  /**\n   * Alias of [pull](https://mongoosejs.com/docs/api/array.html#MongooseArray.prototype.pull())\n   *\n   * @see MongooseArray#pull https://mongoosejs.com/docs/api/array.html#MongooseArray.prototype.pull()\n   * @see mongodb https://www.mongodb.com/docs/manual/reference/operator/update/pull/\n   * @api public\n   * @memberOf MongooseArray\n   * @instance\n   * @method remove\n   */\n\n  remove() {\n    return this.pull.apply(this, arguments);\n  },\n\n  /**\n   * Sets the casted `val` at index `i` and marks the array modified.\n   *\n   * #### Example:\n   *\n   *     // given documents based on the following\n   *     const Doc = mongoose.model('Doc', new Schema({ array: [Number] }));\n   *\n   *     const doc = new Doc({ array: [2,3,4] })\n   *\n   *     console.log(doc.array) // [2,3,4]\n   *\n   *     doc.array.set(1,\"5\");\n   *     console.log(doc.array); // [2,5,4] // properly cast to number\n   *     doc.save() // the change is saved\n   *\n   *     // VS not using array#set\n   *     doc.array[1] = \"5\";\n   *     console.log(doc.array); // [2,\"5\",4] // no casting\n   *     doc.save() // change is not saved\n   *\n   * @return {Array} this\n   * @api public\n   * @method set\n   * @memberOf MongooseArray\n   */\n\n  set(i, val, skipModified) {\n    const arr = this.__array;\n    if (skipModified) {\n      arr[i] = val;\n      return this;\n    }\n    const value = methods._cast.call(this, val, i);\n    methods._markModified.call(this, i);\n    arr[i] = value;\n    return this;\n  },\n\n  /**\n   * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   *\n   * #### Example:\n   *\n   *     doc.array = [2,3];\n   *     const res = doc.array.shift();\n   *     console.log(res) // 2\n   *     console.log(doc.array) // [3]\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method shift\n   * @memberOf MongooseArray\n   */\n\n  shift() {\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n    this._markModified();\n    const ret = [].shift.call(arr);\n    this._registerAtomic('$set', this);\n    return ret;\n  },\n\n  /**\n   * Wraps [`Array#sort`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort) with proper change tracking.\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method sort\n   * @memberOf MongooseArray\n   * @see MasteringJS: Array sort https://masteringjs.io/tutorials/fundamentals/array-sort\n   */\n\n  sort() {\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n    const ret = [].sort.apply(arr, arguments);\n    this._registerAtomic('$set', this);\n    return ret;\n  },\n\n  /**\n   * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method splice\n   * @memberOf MongooseArray\n   * @see MasteringJS: Array splice https://masteringjs.io/tutorials/fundamentals/array-splice\n   */\n\n  splice() {\n    let ret;\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n\n    this._markModified();\n    _checkManualPopulation(this, Array.prototype.slice.call(arguments, 2));\n\n    if (arguments.length) {\n      let vals;\n      if (this[arraySchemaSymbol] == null) {\n        vals = arguments;\n      } else {\n        vals = [];\n        for (let i = 0; i < arguments.length; ++i) {\n          vals[i] = i < 2 ?\n            arguments[i] :\n            this._cast(arguments[i], arguments[0] + (i - 2));\n        }\n      }\n\n      ret = [].splice.apply(arr, vals);\n      this._registerAtomic('$set', this);\n    }\n\n    return ret;\n  },\n\n  /*!\n   * ignore\n   */\n\n  toBSON() {\n    return this.toObject(internalToObjectOptions);\n  },\n\n  /**\n   * Returns a native js Array.\n   *\n   * @param {Object} options\n   * @return {Array}\n   * @api public\n   * @method toObject\n   * @memberOf MongooseArray\n   */\n\n  toObject(options) {\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n    if (options && options.depopulate) {\n      options = clone(options);\n      options._isNested = true;\n      // Ensure return value is a vanilla array, because in Node.js 6+ `map()`\n      // is smart enough to use the inherited array's constructor.\n      return [].concat(arr).map(function(doc) {\n        return doc instanceof Document\n          ? doc.toObject(options)\n          : doc;\n      });\n    }\n\n    return [].concat(arr);\n  },\n\n  $toObject() {\n    return this.constructor.prototype.toObject.apply(this, arguments);\n  },\n  /**\n   * Wraps [`Array#unshift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwriting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method unshift\n   * @memberOf MongooseArray\n   */\n\n  unshift() {\n    _checkManualPopulation(this, arguments);\n\n    let values;\n    if (this[arraySchemaSymbol] == null) {\n      values = arguments;\n    } else {\n      values = [].map.call(arguments, this._cast, this);\n    }\n\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n    this._markModified();\n    [].unshift.apply(arr, values);\n    this._registerAtomic('$set', this);\n    return this.length;\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction _isAllSubdocs(docs, ref) {\n  if (!ref) {\n    return false;\n  }\n\n  for (const arg of docs) {\n    if (arg == null) {\n      return false;\n    }\n    const model = arg.constructor;\n    if (!(arg instanceof Document) ||\n      (model.modelName !== ref && model.baseModelName !== ref)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/*!\n * Minimize _just_ empty objects along the path chain specified\n * by `parts`, ignoring all other paths. Useful in cases where\n * you want to minimize after unsetting a path.\n *\n * #### Example:\n *\n *     const obj = { foo: { bar: { baz: {} } }, a: {} };\n *     _minimizePath(obj, 'foo.bar.baz');\n *     obj; // { a: {} }\n */\n\nfunction _minimizePath(obj, parts, i) {\n  if (typeof parts === 'string') {\n    if (parts.indexOf('.') === -1) {\n      return;\n    }\n\n    parts = mpath.stringToParts(parts);\n  }\n  i = i || 0;\n  if (i >= parts.length) {\n    return;\n  }\n  if (obj == null || typeof obj !== 'object') {\n    return;\n  }\n\n  _minimizePath(obj[parts[0]], parts, i + 1);\n  if (obj[parts[0]] != null && typeof obj[parts[0]] === 'object' && Object.keys(obj[parts[0]]).length === 0) {\n    delete obj[parts[0]];\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _checkManualPopulation(arr, docs) {\n  const ref = arr == null ?\n    null :\n    arr[arraySchemaSymbol] && arr[arraySchemaSymbol].caster && arr[arraySchemaSymbol].caster.options && arr[arraySchemaSymbol].caster.options.ref || null;\n  if (arr.length === 0 &&\n      docs.length !== 0) {\n    if (_isAllSubdocs(docs, ref)) {\n      arr[arrayParentSymbol].$populated(arr[arrayPathSymbol], [], {\n        [populateModelSymbol]: docs[0].constructor\n      });\n    }\n  }\n}\n\nconst returnVanillaArrayMethods = [\n  'filter',\n  'flat',\n  'flatMap',\n  'map',\n  'slice'\n];\nfor (const method of returnVanillaArrayMethods) {\n  if (Array.prototype[method] == null) {\n    continue;\n  }\n\n  methods[method] = function() {\n    const _arr = utils.isMongooseArray(this) ? this.__array : this;\n    const arr = [].concat(_arr);\n\n    return arr[method].apply(arr, arguments);\n  };\n}\n\nmodule.exports = methods;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/types/array/methods/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/types/arraySubdocument.js":
/*!*************************************************************!*\
  !*** ./node_modules/mongoose/lib/types/arraySubdocument.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Module dependencies.\n */\n\n\n\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst Subdocument = __webpack_require__(/*! ./subdocument */ \"(ssr)/./node_modules/mongoose/lib/types/subdocument.js\");\nconst utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\n\nconst documentArrayParent = (__webpack_require__(/*! ../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").documentArrayParent);\n\n/**\n * A constructor.\n *\n * @param {Object} obj js object returned from the db\n * @param {MongooseDocumentArray} parentArr the parent array of this document\n * @param {Boolean} skipId\n * @param {Object} fields\n * @param {Number} index\n * @inherits Document\n * @api private\n */\n\nfunction ArraySubdocument(obj, parentArr, skipId, fields, index) {\n  if (utils.isMongooseDocumentArray(parentArr)) {\n    this.__parentArray = parentArr;\n    this[documentArrayParent] = parentArr.$parent();\n  } else {\n    this.__parentArray = undefined;\n    this[documentArrayParent] = undefined;\n  }\n  this.$setIndex(index);\n  this.$__parent = this[documentArrayParent];\n\n  let options;\n  if (typeof skipId === 'object' && skipId != null) {\n    options = { isNew: true, ...skipId };\n    skipId = undefined;\n  } else {\n    options = { isNew: true };\n  }\n\n  Subdocument.call(this, obj, fields, this[documentArrayParent], skipId, options);\n}\n\n/*!\n * Inherit from Subdocument\n */\nArraySubdocument.prototype = Object.create(Subdocument.prototype);\nArraySubdocument.prototype.constructor = ArraySubdocument;\n\nObject.defineProperty(ArraySubdocument.prototype, '$isSingleNested', {\n  configurable: false,\n  writable: false,\n  value: false\n});\n\nObject.defineProperty(ArraySubdocument.prototype, '$isDocumentArrayElement', {\n  configurable: false,\n  writable: false,\n  value: true\n});\n\nfor (const i in EventEmitter.prototype) {\n  ArraySubdocument[i] = EventEmitter.prototype[i];\n}\n\n/*!\n * ignore\n */\n\nArraySubdocument.prototype.$setIndex = function(index) {\n  this.__index = index;\n\n  if (this.$__ != null && this.$__.validationError != null) {\n    const keys = Object.keys(this.$__.validationError.errors);\n    for (const key of keys) {\n      this.invalidate(key, this.$__.validationError.errors[key]);\n    }\n  }\n};\n\n/*!\n * ignore\n */\n\nArraySubdocument.prototype.populate = function() {\n  throw new Error('Mongoose does not support calling populate() on nested ' +\n    'docs. Instead of `doc.arr[0].populate(\"path\")`, use ' +\n    '`doc.populate(\"arr.0.path\")`');\n};\n\n/*!\n * ignore\n */\n\nArraySubdocument.prototype.$__removeFromParent = function() {\n  const _id = this._doc._id;\n  if (!_id) {\n    throw new Error('For your own good, Mongoose does not know ' +\n      'how to remove an ArraySubdocument that has no _id');\n  }\n  this.__parentArray.pull({ _id: _id });\n};\n\n/**\n * Returns the full path to this document. If optional `path` is passed, it is appended to the full path.\n *\n * @param {String} [path]\n * @param {Boolean} [skipIndex] Skip adding the array index. For example `arr.foo` instead of `arr.0.foo`.\n * @return {String}\n * @api private\n * @method $__fullPath\n * @memberOf ArraySubdocument\n * @instance\n */\n\nArraySubdocument.prototype.$__fullPath = function(path, skipIndex) {\n  if (this.__index == null) {\n    return null;\n  }\n  if (!this.$__.fullPath) {\n    this.ownerDocument();\n  }\n\n  if (skipIndex) {\n    return path ?\n      this.$__.fullPath + '.' + path :\n      this.$__.fullPath;\n  }\n\n  return path ?\n    this.$__.fullPath + '.' + this.__index + '.' + path :\n    this.$__.fullPath + '.' + this.__index;\n};\n\n/**\n * Given a path relative to this document, return the path relative\n * to the top-level document.\n * @method $__pathRelativeToParent\n * @memberOf ArraySubdocument\n * @instance\n * @api private\n */\n\nArraySubdocument.prototype.$__pathRelativeToParent = function(path, skipIndex) {\n  if (this.__index == null) {\n    return null;\n  }\n  if (skipIndex) {\n    return path == null ? this.__parentArray.$path() : this.__parentArray.$path() + '.' + path;\n  }\n  if (path == null) {\n    return this.__parentArray.$path() + '.' + this.__index;\n  }\n  return this.__parentArray.$path() + '.' + this.__index + '.' + path;\n};\n\n/**\n * Returns this sub-documents parent document.\n * @method $parent\n * @memberOf ArraySubdocument\n * @instance\n * @api public\n */\n\nArraySubdocument.prototype.$parent = function() {\n  return this[documentArrayParent];\n};\n\n/**\n * Returns this subdocument's parent array.\n *\n * #### Example:\n *\n *     const Test = mongoose.model('Test', new Schema({\n *       docArr: [{ name: String }]\n *     }));\n *     const doc = new Test({ docArr: [{ name: 'test subdoc' }] });\n *\n *     doc.docArr[0].parentArray() === doc.docArr; // true\n *\n * @api public\n * @method parentArray\n * @returns DocumentArray\n */\n\nArraySubdocument.prototype.parentArray = function() {\n  return this.__parentArray;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = ArraySubdocument;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/types/arraySubdocument.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/types/buffer.js":
/*!***************************************************!*\
  !*** ./node_modules/mongoose/lib/types/buffer.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Module dependencies.\n */\n\n\n\nconst Binary = (__webpack_require__(/*! bson */ \"(ssr)/./node_modules/bson/lib/bson.cjs\").Binary);\nconst utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\n\n/**\n * Mongoose Buffer constructor.\n *\n * Values always have to be passed to the constructor to initialize.\n *\n * @param {Buffer} value\n * @param {String} encode\n * @param {Number} offset\n * @api private\n * @inherits Buffer https://nodejs.org/api/buffer.html\n * @see https://bit.ly/f6CnZU\n */\n\nfunction MongooseBuffer(value, encode, offset) {\n  let val = value;\n  if (value == null) {\n    val = 0;\n  }\n\n  let encoding;\n  let path;\n  let doc;\n\n  if (Array.isArray(encode)) {\n    // internal casting\n    path = encode[0];\n    doc = encode[1];\n  } else {\n    encoding = encode;\n  }\n\n  let buf;\n  if (typeof val === 'number' || val instanceof Number) {\n    buf = Buffer.alloc(val);\n  } else { // string, array or object { type: 'Buffer', data: [...] }\n    buf = Buffer.from(val, encoding, offset);\n  }\n  utils.decorate(buf, MongooseBuffer.mixin);\n  buf.isMongooseBuffer = true;\n\n  // make sure these internal props don't show up in Object.keys()\n  buf[MongooseBuffer.pathSymbol] = path;\n  buf[parentSymbol] = doc;\n\n  buf._subtype = 0;\n  return buf;\n}\n\nconst pathSymbol = Symbol.for('mongoose#Buffer#_path');\nconst parentSymbol = Symbol.for('mongoose#Buffer#_parent');\nMongooseBuffer.pathSymbol = pathSymbol;\n\n/*!\n * Inherit from Buffer.\n */\n\nMongooseBuffer.mixin = {\n\n  /**\n   * Default subtype for the Binary representing this Buffer\n   *\n   * @api private\n   * @property _subtype\n   * @memberOf MongooseBuffer.mixin\n   * @static\n   */\n\n  _subtype: undefined,\n\n  /**\n   * Marks this buffer as modified.\n   *\n   * @api private\n   * @method _markModified\n   * @memberOf MongooseBuffer.mixin\n   * @static\n   */\n\n  _markModified: function() {\n    const parent = this[parentSymbol];\n\n    if (parent) {\n      parent.markModified(this[MongooseBuffer.pathSymbol]);\n    }\n    return this;\n  },\n\n  /**\n   * Writes the buffer.\n   *\n   * @api public\n   * @method write\n   * @memberOf MongooseBuffer.mixin\n   * @static\n   */\n\n  write: function() {\n    const written = Buffer.prototype.write.apply(this, arguments);\n\n    if (written > 0) {\n      this._markModified();\n    }\n\n    return written;\n  },\n\n  /**\n   * Copies the buffer.\n   *\n   * #### Note:\n   *\n   * `Buffer#copy` does not mark `target` as modified so you must copy from a `MongooseBuffer` for it to work as expected. This is a work around since `copy` modifies the target, not this.\n   *\n   * @return {Number} The number of bytes copied.\n   * @param {Buffer} target\n   * @method copy\n   * @memberOf MongooseBuffer.mixin\n   * @static\n   */\n\n  copy: function(target) {\n    const ret = Buffer.prototype.copy.apply(this, arguments);\n\n    if (target && target.isMongooseBuffer) {\n      target._markModified();\n    }\n\n    return ret;\n  }\n};\n\n/*!\n * Compile other Buffer methods marking this buffer as modified.\n */\n\nutils.each(\n  [\n    // node < 0.5\n    'writeUInt8', 'writeUInt16', 'writeUInt32', 'writeInt8', 'writeInt16', 'writeInt32',\n    'writeFloat', 'writeDouble', 'fill',\n    'utf8Write', 'binaryWrite', 'asciiWrite', 'set',\n\n    // node >= 0.5\n    'writeUInt16LE', 'writeUInt16BE', 'writeUInt32LE', 'writeUInt32BE',\n    'writeInt16LE', 'writeInt16BE', 'writeInt32LE', 'writeInt32BE', 'writeFloatLE', 'writeFloatBE', 'writeDoubleLE', 'writeDoubleBE']\n  , function(method) {\n    if (!Buffer.prototype[method]) {\n      return;\n    }\n    MongooseBuffer.mixin[method] = function() {\n      const ret = Buffer.prototype[method].apply(this, arguments);\n      this._markModified();\n      return ret;\n    };\n  });\n\n/**\n * Converts this buffer to its Binary type representation.\n *\n * #### SubTypes:\n *\n *     const bson = require('bson')\n *     bson.BSON_BINARY_SUBTYPE_DEFAULT\n *     bson.BSON_BINARY_SUBTYPE_FUNCTION\n *     bson.BSON_BINARY_SUBTYPE_BYTE_ARRAY\n *     bson.BSON_BINARY_SUBTYPE_UUID\n *     bson.BSON_BINARY_SUBTYPE_MD5\n *     bson.BSON_BINARY_SUBTYPE_USER_DEFINED\n *     doc.buffer.toObject(bson.BSON_BINARY_SUBTYPE_USER_DEFINED);\n *\n * @see bsonspec https://bsonspec.org/#/specification\n * @param {Hex} [subtype]\n * @return {Binary}\n * @api public\n * @method toObject\n * @memberOf MongooseBuffer\n */\n\nMongooseBuffer.mixin.toObject = function(options) {\n  const subtype = typeof options === 'number'\n    ? options\n    : (this._subtype || 0);\n  return new Binary(Buffer.from(this), subtype);\n};\n\nMongooseBuffer.mixin.$toObject = MongooseBuffer.mixin.toObject;\n\n/**\n * Converts this buffer for storage in MongoDB, including subtype\n *\n * @return {Binary}\n * @api public\n * @method toBSON\n * @memberOf MongooseBuffer\n */\n\nMongooseBuffer.mixin.toBSON = function() {\n  return new Binary(this, this._subtype || 0);\n};\n\n/**\n * Determines if this buffer is equals to `other` buffer\n *\n * @param {Buffer} other\n * @return {Boolean}\n * @method equals\n * @memberOf MongooseBuffer\n */\n\nMongooseBuffer.mixin.equals = function(other) {\n  if (!Buffer.isBuffer(other)) {\n    return false;\n  }\n\n  if (this.length !== other.length) {\n    return false;\n  }\n\n  for (let i = 0; i < this.length; ++i) {\n    if (this[i] !== other[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Sets the subtype option and marks the buffer modified.\n *\n * #### SubTypes:\n *\n *     const bson = require('bson')\n *     bson.BSON_BINARY_SUBTYPE_DEFAULT\n *     bson.BSON_BINARY_SUBTYPE_FUNCTION\n *     bson.BSON_BINARY_SUBTYPE_BYTE_ARRAY\n *     bson.BSON_BINARY_SUBTYPE_UUID\n *     bson.BSON_BINARY_SUBTYPE_MD5\n *     bson.BSON_BINARY_SUBTYPE_USER_DEFINED\n *\n *     doc.buffer.subtype(bson.BSON_BINARY_SUBTYPE_UUID);\n *\n * @see bsonspec https://bsonspec.org/#/specification\n * @param {Hex} subtype\n * @api public\n * @method subtype\n * @memberOf MongooseBuffer\n */\n\nMongooseBuffer.mixin.subtype = function(subtype) {\n  if (typeof subtype !== 'number') {\n    throw new TypeError('Invalid subtype. Expected a number');\n  }\n\n  if (this._subtype !== subtype) {\n    this._markModified();\n  }\n\n  this._subtype = subtype;\n};\n\n/*!\n * Module exports.\n */\n\nMongooseBuffer.Binary = Binary;\n\nmodule.exports = MongooseBuffer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/types/buffer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/types/decimal128.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongoose/lib/types/decimal128.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Decimal128 type constructor\n *\n * #### Example:\n *\n *     const id = new mongoose.Types.Decimal128('3.1415');\n *\n * @constructor Decimal128\n */\n\n\n\nmodule.exports = __webpack_require__(/*! bson */ \"(ssr)/./node_modules/bson/lib/bson.cjs\").Decimal128;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3R5cGVzL2RlY2ltYWwxMjguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVhOztBQUViLHFHQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3R5cGVzL2RlY2ltYWwxMjguanM/NjRlNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERlY2ltYWwxMjggdHlwZSBjb25zdHJ1Y3RvclxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3QgaWQgPSBuZXcgbW9uZ29vc2UuVHlwZXMuRGVjaW1hbDEyOCgnMy4xNDE1Jyk7XG4gKlxuICogQGNvbnN0cnVjdG9yIERlY2ltYWwxMjhcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnYnNvbicpLkRlY2ltYWwxMjg7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/types/decimal128.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/types/documentArray/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongoose/lib/types/documentArray/index.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\nconst ArrayMethods = __webpack_require__(/*! ../array/methods */ \"(ssr)/./node_modules/mongoose/lib/types/array/methods/index.js\");\nconst DocumentArrayMethods = __webpack_require__(/*! ./methods */ \"(ssr)/./node_modules/mongoose/lib/types/documentArray/methods/index.js\");\nconst Document = __webpack_require__(/*! ../../document */ \"(ssr)/./node_modules/mongoose/lib/document.js\");\n\nconst arrayAtomicsSymbol = (__webpack_require__(/*! ../../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").arrayAtomicsSymbol);\nconst arrayAtomicsBackupSymbol = (__webpack_require__(/*! ../../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").arrayAtomicsBackupSymbol);\nconst arrayParentSymbol = (__webpack_require__(/*! ../../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").arrayParentSymbol);\nconst arrayPathSymbol = (__webpack_require__(/*! ../../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").arrayPathSymbol);\nconst arraySchemaSymbol = (__webpack_require__(/*! ../../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").arraySchemaSymbol);\n\nconst _basePush = Array.prototype.push;\nconst numberRE = /^\\d+$/;\n/**\n * DocumentArray constructor\n *\n * @param {Array} values\n * @param {String} path the path to this array\n * @param {Document} doc parent document\n * @api private\n * @return {MongooseDocumentArray}\n * @inherits MongooseArray\n * @see https://bit.ly/f6CnZU\n */\n\nfunction MongooseDocumentArray(values, path, doc) {\n  const __array = [];\n\n  const internals = {\n    [arrayAtomicsSymbol]: {},\n    [arrayAtomicsBackupSymbol]: void 0,\n    [arrayPathSymbol]: path,\n    [arraySchemaSymbol]: void 0,\n    [arrayParentSymbol]: void 0\n  };\n\n  if (Array.isArray(values)) {\n    if (values[arrayPathSymbol] === path &&\n        values[arrayParentSymbol] === doc) {\n      internals[arrayAtomicsSymbol] = Object.assign({}, values[arrayAtomicsSymbol]);\n    }\n    values.forEach(v => {\n      _basePush.call(__array, v);\n    });\n  }\n  internals[arrayPathSymbol] = path;\n  internals.__array = __array;\n\n  // Because doc comes from the context of another function, doc === global\n  // can happen if there was a null somewhere up the chain (see #3020 && #3034)\n  // RB Jun 17, 2015 updated to check for presence of expected paths instead\n  // to make more proof against unusual node environments\n  if (doc && doc instanceof Document) {\n    internals[arrayParentSymbol] = doc;\n    internals[arraySchemaSymbol] = doc.$__schema.path(path);\n\n    // `schema.path()` doesn't drill into nested arrays properly yet, see\n    // gh-6398, gh-6602. This is a workaround because nested arrays are\n    // always plain non-document arrays, so once you get to a document array\n    // nesting is done. Matryoshka code.\n    while (internals[arraySchemaSymbol] != null &&\n        internals[arraySchemaSymbol].$isMongooseArray &&\n        !internals[arraySchemaSymbol].$isMongooseDocumentArray) {\n      internals[arraySchemaSymbol] = internals[arraySchemaSymbol].casterConstructor;\n    }\n  }\n\n  const proxy = new Proxy(__array, {\n    get: function(target, prop) {\n      if (prop === 'isMongooseArray' ||\n          prop === 'isMongooseArrayProxy' ||\n          prop === 'isMongooseDocumentArray' ||\n          prop === 'isMongooseDocumentArrayProxy') {\n        return true;\n      }\n      if (internals.hasOwnProperty(prop)) {\n        return internals[prop];\n      }\n      if (DocumentArrayMethods.hasOwnProperty(prop)) {\n        return DocumentArrayMethods[prop];\n      }\n      if (ArrayMethods.hasOwnProperty(prop)) {\n        return ArrayMethods[prop];\n      }\n\n      return __array[prop];\n    },\n    set: function(target, prop, value) {\n      if (typeof prop === 'string' && numberRE.test(prop)) {\n        DocumentArrayMethods.set.call(proxy, prop, value, false);\n      } else if (internals.hasOwnProperty(prop)) {\n        internals[prop] = value;\n      } else {\n        __array[prop] = value;\n      }\n\n      return true;\n    }\n  });\n\n  return proxy;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = MongooseDocumentArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3R5cGVzL2RvY3VtZW50QXJyYXkvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBLHFCQUFxQixtQkFBTyxDQUFDLHdGQUFrQjtBQUMvQyw2QkFBNkIsbUJBQU8sQ0FBQyx5RkFBVztBQUNoRCxpQkFBaUIsbUJBQU8sQ0FBQyxxRUFBZ0I7O0FBRXpDLDJCQUEyQiw2SEFBbUQ7QUFDOUUsaUNBQWlDLG1JQUF5RDtBQUMxRiwwQkFBMEIsNEhBQWtEO0FBQzVFLHdCQUF3QiwwSEFBZ0Q7QUFDeEUsMEJBQTBCLDRIQUFrRDs7QUFFNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxVQUFVO0FBQ3JCO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3R5cGVzL2RvY3VtZW50QXJyYXkvaW5kZXguanM/YTRkMyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qIVxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG5jb25zdCBBcnJheU1ldGhvZHMgPSByZXF1aXJlKCcuLi9hcnJheS9tZXRob2RzJyk7XG5jb25zdCBEb2N1bWVudEFycmF5TWV0aG9kcyA9IHJlcXVpcmUoJy4vbWV0aG9kcycpO1xuY29uc3QgRG9jdW1lbnQgPSByZXF1aXJlKCcuLi8uLi9kb2N1bWVudCcpO1xuXG5jb25zdCBhcnJheUF0b21pY3NTeW1ib2wgPSByZXF1aXJlKCcuLi8uLi9oZWxwZXJzL3N5bWJvbHMnKS5hcnJheUF0b21pY3NTeW1ib2w7XG5jb25zdCBhcnJheUF0b21pY3NCYWNrdXBTeW1ib2wgPSByZXF1aXJlKCcuLi8uLi9oZWxwZXJzL3N5bWJvbHMnKS5hcnJheUF0b21pY3NCYWNrdXBTeW1ib2w7XG5jb25zdCBhcnJheVBhcmVudFN5bWJvbCA9IHJlcXVpcmUoJy4uLy4uL2hlbHBlcnMvc3ltYm9scycpLmFycmF5UGFyZW50U3ltYm9sO1xuY29uc3QgYXJyYXlQYXRoU3ltYm9sID0gcmVxdWlyZSgnLi4vLi4vaGVscGVycy9zeW1ib2xzJykuYXJyYXlQYXRoU3ltYm9sO1xuY29uc3QgYXJyYXlTY2hlbWFTeW1ib2wgPSByZXF1aXJlKCcuLi8uLi9oZWxwZXJzL3N5bWJvbHMnKS5hcnJheVNjaGVtYVN5bWJvbDtcblxuY29uc3QgX2Jhc2VQdXNoID0gQXJyYXkucHJvdG90eXBlLnB1c2g7XG5jb25zdCBudW1iZXJSRSA9IC9eXFxkKyQvO1xuLyoqXG4gKiBEb2N1bWVudEFycmF5IGNvbnN0cnVjdG9yXG4gKlxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzXG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aCB0aGUgcGF0aCB0byB0aGlzIGFycmF5XG4gKiBAcGFyYW0ge0RvY3VtZW50fSBkb2MgcGFyZW50IGRvY3VtZW50XG4gKiBAYXBpIHByaXZhdGVcbiAqIEByZXR1cm4ge01vbmdvb3NlRG9jdW1lbnRBcnJheX1cbiAqIEBpbmhlcml0cyBNb25nb29zZUFycmF5XG4gKiBAc2VlIGh0dHBzOi8vYml0Lmx5L2Y2Q25aVVxuICovXG5cbmZ1bmN0aW9uIE1vbmdvb3NlRG9jdW1lbnRBcnJheSh2YWx1ZXMsIHBhdGgsIGRvYykge1xuICBjb25zdCBfX2FycmF5ID0gW107XG5cbiAgY29uc3QgaW50ZXJuYWxzID0ge1xuICAgIFthcnJheUF0b21pY3NTeW1ib2xdOiB7fSxcbiAgICBbYXJyYXlBdG9taWNzQmFja3VwU3ltYm9sXTogdm9pZCAwLFxuICAgIFthcnJheVBhdGhTeW1ib2xdOiBwYXRoLFxuICAgIFthcnJheVNjaGVtYVN5bWJvbF06IHZvaWQgMCxcbiAgICBbYXJyYXlQYXJlbnRTeW1ib2xdOiB2b2lkIDBcbiAgfTtcblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZXMpKSB7XG4gICAgaWYgKHZhbHVlc1thcnJheVBhdGhTeW1ib2xdID09PSBwYXRoICYmXG4gICAgICAgIHZhbHVlc1thcnJheVBhcmVudFN5bWJvbF0gPT09IGRvYykge1xuICAgICAgaW50ZXJuYWxzW2FycmF5QXRvbWljc1N5bWJvbF0gPSBPYmplY3QuYXNzaWduKHt9LCB2YWx1ZXNbYXJyYXlBdG9taWNzU3ltYm9sXSk7XG4gICAgfVxuICAgIHZhbHVlcy5mb3JFYWNoKHYgPT4ge1xuICAgICAgX2Jhc2VQdXNoLmNhbGwoX19hcnJheSwgdik7XG4gICAgfSk7XG4gIH1cbiAgaW50ZXJuYWxzW2FycmF5UGF0aFN5bWJvbF0gPSBwYXRoO1xuICBpbnRlcm5hbHMuX19hcnJheSA9IF9fYXJyYXk7XG5cbiAgLy8gQmVjYXVzZSBkb2MgY29tZXMgZnJvbSB0aGUgY29udGV4dCBvZiBhbm90aGVyIGZ1bmN0aW9uLCBkb2MgPT09IGdsb2JhbFxuICAvLyBjYW4gaGFwcGVuIGlmIHRoZXJlIHdhcyBhIG51bGwgc29tZXdoZXJlIHVwIHRoZSBjaGFpbiAoc2VlICMzMDIwICYmICMzMDM0KVxuICAvLyBSQiBKdW4gMTcsIDIwMTUgdXBkYXRlZCB0byBjaGVjayBmb3IgcHJlc2VuY2Ugb2YgZXhwZWN0ZWQgcGF0aHMgaW5zdGVhZFxuICAvLyB0byBtYWtlIG1vcmUgcHJvb2YgYWdhaW5zdCB1bnVzdWFsIG5vZGUgZW52aXJvbm1lbnRzXG4gIGlmIChkb2MgJiYgZG9jIGluc3RhbmNlb2YgRG9jdW1lbnQpIHtcbiAgICBpbnRlcm5hbHNbYXJyYXlQYXJlbnRTeW1ib2xdID0gZG9jO1xuICAgIGludGVybmFsc1thcnJheVNjaGVtYVN5bWJvbF0gPSBkb2MuJF9fc2NoZW1hLnBhdGgocGF0aCk7XG5cbiAgICAvLyBgc2NoZW1hLnBhdGgoKWAgZG9lc24ndCBkcmlsbCBpbnRvIG5lc3RlZCBhcnJheXMgcHJvcGVybHkgeWV0LCBzZWVcbiAgICAvLyBnaC02Mzk4LCBnaC02NjAyLiBUaGlzIGlzIGEgd29ya2Fyb3VuZCBiZWNhdXNlIG5lc3RlZCBhcnJheXMgYXJlXG4gICAgLy8gYWx3YXlzIHBsYWluIG5vbi1kb2N1bWVudCBhcnJheXMsIHNvIG9uY2UgeW91IGdldCB0byBhIGRvY3VtZW50IGFycmF5XG4gICAgLy8gbmVzdGluZyBpcyBkb25lLiBNYXRyeW9zaGthIGNvZGUuXG4gICAgd2hpbGUgKGludGVybmFsc1thcnJheVNjaGVtYVN5bWJvbF0gIT0gbnVsbCAmJlxuICAgICAgICBpbnRlcm5hbHNbYXJyYXlTY2hlbWFTeW1ib2xdLiRpc01vbmdvb3NlQXJyYXkgJiZcbiAgICAgICAgIWludGVybmFsc1thcnJheVNjaGVtYVN5bWJvbF0uJGlzTW9uZ29vc2VEb2N1bWVudEFycmF5KSB7XG4gICAgICBpbnRlcm5hbHNbYXJyYXlTY2hlbWFTeW1ib2xdID0gaW50ZXJuYWxzW2FycmF5U2NoZW1hU3ltYm9sXS5jYXN0ZXJDb25zdHJ1Y3RvcjtcbiAgICB9XG4gIH1cblxuICBjb25zdCBwcm94eSA9IG5ldyBQcm94eShfX2FycmF5LCB7XG4gICAgZ2V0OiBmdW5jdGlvbih0YXJnZXQsIHByb3ApIHtcbiAgICAgIGlmIChwcm9wID09PSAnaXNNb25nb29zZUFycmF5JyB8fFxuICAgICAgICAgIHByb3AgPT09ICdpc01vbmdvb3NlQXJyYXlQcm94eScgfHxcbiAgICAgICAgICBwcm9wID09PSAnaXNNb25nb29zZURvY3VtZW50QXJyYXknIHx8XG4gICAgICAgICAgcHJvcCA9PT0gJ2lzTW9uZ29vc2VEb2N1bWVudEFycmF5UHJveHknKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGludGVybmFscy5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICByZXR1cm4gaW50ZXJuYWxzW3Byb3BdO1xuICAgICAgfVxuICAgICAgaWYgKERvY3VtZW50QXJyYXlNZXRob2RzLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgIHJldHVybiBEb2N1bWVudEFycmF5TWV0aG9kc1twcm9wXTtcbiAgICAgIH1cbiAgICAgIGlmIChBcnJheU1ldGhvZHMuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5TWV0aG9kc1twcm9wXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9fYXJyYXlbcHJvcF07XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uKHRhcmdldCwgcHJvcCwgdmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvcCA9PT0gJ3N0cmluZycgJiYgbnVtYmVyUkUudGVzdChwcm9wKSkge1xuICAgICAgICBEb2N1bWVudEFycmF5TWV0aG9kcy5zZXQuY2FsbChwcm94eSwgcHJvcCwgdmFsdWUsIGZhbHNlKTtcbiAgICAgIH0gZWxzZSBpZiAoaW50ZXJuYWxzLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgIGludGVybmFsc1twcm9wXSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX19hcnJheVtwcm9wXSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwcm94eTtcbn1cblxuLyohXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1vbmdvb3NlRG9jdW1lbnRBcnJheTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/types/documentArray/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/types/documentArray/isMongooseDocumentArray.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/mongoose/lib/types/documentArray/isMongooseDocumentArray.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.isMongooseDocumentArray = function(mongooseDocumentArray) {\n  return Array.isArray(mongooseDocumentArray) && mongooseDocumentArray.isMongooseDocumentArray;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3R5cGVzL2RvY3VtZW50QXJyYXkvaXNNb25nb29zZURvY3VtZW50QXJyYXkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsK0JBQStCO0FBQy9CO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi90eXBlcy9kb2N1bWVudEFycmF5L2lzTW9uZ29vc2VEb2N1bWVudEFycmF5LmpzPzU3N2MiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLmlzTW9uZ29vc2VEb2N1bWVudEFycmF5ID0gZnVuY3Rpb24obW9uZ29vc2VEb2N1bWVudEFycmF5KSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KG1vbmdvb3NlRG9jdW1lbnRBcnJheSkgJiYgbW9uZ29vc2VEb2N1bWVudEFycmF5LmlzTW9uZ29vc2VEb2N1bWVudEFycmF5O1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/types/documentArray/isMongooseDocumentArray.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/types/documentArray/methods/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/mongoose/lib/types/documentArray/methods/index.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst ArrayMethods = __webpack_require__(/*! ../../array/methods */ \"(ssr)/./node_modules/mongoose/lib/types/array/methods/index.js\");\nconst Document = __webpack_require__(/*! ../../../document */ \"(ssr)/./node_modules/mongoose/lib/document.js\");\nconst castObjectId = __webpack_require__(/*! ../../../cast/objectid */ \"(ssr)/./node_modules/mongoose/lib/cast/objectid.js\");\nconst getDiscriminatorByValue = __webpack_require__(/*! ../../../helpers/discriminator/getDiscriminatorByValue */ \"(ssr)/./node_modules/mongoose/lib/helpers/discriminator/getDiscriminatorByValue.js\");\nconst internalToObjectOptions = (__webpack_require__(/*! ../../../options */ \"(ssr)/./node_modules/mongoose/lib/options.js\").internalToObjectOptions);\nconst utils = __webpack_require__(/*! ../../../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\nconst isBsonType = __webpack_require__(/*! ../../../helpers/isBsonType */ \"(ssr)/./node_modules/mongoose/lib/helpers/isBsonType.js\");\n\nconst arrayParentSymbol = (__webpack_require__(/*! ../../../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").arrayParentSymbol);\nconst arrayPathSymbol = (__webpack_require__(/*! ../../../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").arrayPathSymbol);\nconst arraySchemaSymbol = (__webpack_require__(/*! ../../../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").arraySchemaSymbol);\nconst documentArrayParent = (__webpack_require__(/*! ../../../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").documentArrayParent);\n\nconst _baseToString = Array.prototype.toString;\n\nconst methods = {\n  /*!\n   * ignore\n   */\n\n  toBSON() {\n    return this.toObject(internalToObjectOptions);\n  },\n\n  toString() {\n    return _baseToString.call(this.__array.map(subdoc => {\n      if (subdoc != null && subdoc.$__ != null) {\n        return subdoc.toString();\n      }\n      return subdoc;\n    }));\n  },\n\n  /*!\n   * ignore\n   */\n\n  getArrayParent() {\n    return this[arrayParentSymbol];\n  },\n\n  /**\n   * Overrides MongooseArray#cast\n   *\n   * @method _cast\n   * @api private\n   * @memberOf MongooseDocumentArray\n   */\n\n  _cast(value, index, options) {\n    if (this[arraySchemaSymbol] == null) {\n      return value;\n    }\n    let Constructor = this[arraySchemaSymbol].casterConstructor;\n    const isInstance = Constructor.$isMongooseDocumentArray ?\n      utils.isMongooseDocumentArray(value) :\n      value instanceof Constructor;\n    if (isInstance ||\n        // Hack re: #5001, see #5005\n        (value && value.constructor && value.constructor.baseCasterConstructor === Constructor)) {\n      if (!(value[documentArrayParent] && value.__parentArray)) {\n        // value may have been created using array.create()\n        value[documentArrayParent] = this[arrayParentSymbol];\n        value.__parentArray = this;\n      }\n      value.$setIndex(index);\n      return value;\n    }\n\n    if (value === undefined || value === null) {\n      return null;\n    }\n\n    // handle cast('string') or cast(ObjectId) etc.\n    // only objects are permitted so we can safely assume that\n    // non-objects are to be interpreted as _id\n    if (Buffer.isBuffer(value) ||\n        isBsonType(value, 'ObjectId') || !utils.isObject(value)) {\n      value = { _id: value };\n    }\n\n    if (value &&\n        Constructor.discriminators &&\n        Constructor.schema &&\n        Constructor.schema.options &&\n        Constructor.schema.options.discriminatorKey) {\n      if (typeof value[Constructor.schema.options.discriminatorKey] === 'string' &&\n          Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]]) {\n        Constructor = Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]];\n      } else {\n        const constructorByValue = getDiscriminatorByValue(Constructor.discriminators, value[Constructor.schema.options.discriminatorKey]);\n        if (constructorByValue) {\n          Constructor = constructorByValue;\n        }\n      }\n    }\n\n    if (Constructor.$isMongooseDocumentArray) {\n      return Constructor.cast(value, this, undefined, undefined, index);\n    }\n    const ret = new Constructor(value, this, options, undefined, index);\n    ret.isNew = true;\n    return ret;\n  },\n\n  /**\n   * Searches array items for the first document with a matching _id.\n   *\n   * #### Example:\n   *\n   *     const embeddedDoc = m.array.id(some_id);\n   *\n   * @return {EmbeddedDocument|null} the subdocument or null if not found.\n   * @param {ObjectId|String|Number|Buffer} id\n   * @TODO cast to the _id based on schema for proper comparison\n   * @method id\n   * @api public\n   * @memberOf MongooseDocumentArray\n   */\n\n  id(id) {\n    let casted;\n    let sid;\n    let _id;\n\n    try {\n      casted = castObjectId(id).toString();\n    } catch (e) {\n      casted = null;\n    }\n\n    for (const val of this) {\n      if (!val) {\n        continue;\n      }\n\n      _id = val.get('_id');\n\n      if (_id === null || typeof _id === 'undefined') {\n        continue;\n      } else if (_id instanceof Document) {\n        sid || (sid = String(id));\n        if (sid == _id._id) {\n          return val;\n        }\n      } else if (!isBsonType(id, 'ObjectId') && !isBsonType(_id, 'ObjectId')) {\n        if (id == _id || utils.deepEqual(id, _id)) {\n          return val;\n        }\n      } else if (casted == _id) {\n        return val;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns a native js Array of plain js objects\n   *\n   * #### Note:\n   *\n   * _Each sub-document is converted to a plain object by calling its `#toObject` method._\n   *\n   * @param {Object} [options] optional options to pass to each documents `toObject` method call during conversion\n   * @return {Array}\n   * @method toObject\n   * @api public\n   * @memberOf MongooseDocumentArray\n   */\n\n  toObject(options) {\n    // `[].concat` coerces the return value into a vanilla JS array, rather\n    // than a Mongoose array.\n    return [].concat(this.map(function(doc) {\n      if (doc == null) {\n        return null;\n      }\n      if (typeof doc.toObject !== 'function') {\n        return doc;\n      }\n      return doc.toObject(options);\n    }));\n  },\n\n  $toObject() {\n    return this.constructor.prototype.toObject.apply(this, arguments);\n  },\n\n  /**\n   * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.\n   *\n   * @param {...Object} [args]\n   * @api public\n   * @method push\n   * @memberOf MongooseDocumentArray\n   */\n\n  push() {\n    const ret = ArrayMethods.push.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  },\n\n  /**\n   * Pulls items from the array atomically.\n   *\n   * @param {...Object} [args]\n   * @api public\n   * @method pull\n   * @memberOf MongooseDocumentArray\n   */\n\n  pull() {\n    const ret = ArrayMethods.pull.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  },\n\n  /**\n   * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   * @api private\n   */\n\n  shift() {\n    const ret = ArrayMethods.shift.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  },\n\n  /**\n   * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.\n   * @api private\n   */\n\n  splice() {\n    const ret = ArrayMethods.splice.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  },\n\n  /**\n   * Helper for console.log\n   *\n   * @method inspect\n   * @api public\n   * @memberOf MongooseDocumentArray\n   */\n\n  inspect() {\n    return this.toObject();\n  },\n\n  /**\n   * Creates a subdocument casted to this schema.\n   *\n   * This is the same subdocument constructor used for casting.\n   *\n   * @param {Object} obj the value to cast to this arrays SubDocument schema\n   * @method create\n   * @api public\n   * @memberOf MongooseDocumentArray\n   */\n\n  create(obj) {\n    let Constructor = this[arraySchemaSymbol].casterConstructor;\n    if (obj &&\n        Constructor.discriminators &&\n        Constructor.schema &&\n        Constructor.schema.options &&\n        Constructor.schema.options.discriminatorKey) {\n      if (typeof obj[Constructor.schema.options.discriminatorKey] === 'string' &&\n          Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]]) {\n        Constructor = Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]];\n      } else {\n        const constructorByValue = getDiscriminatorByValue(Constructor.discriminators, obj[Constructor.schema.options.discriminatorKey]);\n        if (constructorByValue) {\n          Constructor = constructorByValue;\n        }\n      }\n    }\n\n    return new Constructor(obj, this);\n  },\n\n  /*!\n   * ignore\n   */\n\n  notify(event) {\n    const _this = this;\n    return function notify(val, _arr) {\n      _arr = _arr || _this;\n      let i = _arr.length;\n      while (i--) {\n        if (_arr[i] == null) {\n          continue;\n        }\n        switch (event) {\n          // only swap for save event for now, we may change this to all event types later\n          case 'save':\n            val = _this[i];\n            break;\n          default:\n            // NO-OP\n            break;\n        }\n\n        if (utils.isMongooseArray(_arr[i])) {\n          notify(val, _arr[i]);\n        } else if (_arr[i]) {\n          _arr[i].emit(event, val);\n        }\n      }\n    };\n  },\n\n  set(i, val, skipModified) {\n    const arr = this.__array;\n    if (skipModified) {\n      arr[i] = val;\n      return this;\n    }\n    const value = methods._cast.call(this, val, i);\n    methods._markModified.call(this, i);\n    arr[i] = value;\n    return this;\n  },\n\n  _markModified(elem, embeddedPath) {\n    const parent = this[arrayParentSymbol];\n    let dirtyPath;\n\n    if (parent) {\n      dirtyPath = this[arrayPathSymbol];\n\n      if (arguments.length) {\n        if (embeddedPath != null) {\n          // an embedded doc bubbled up the change\n          const index = elem.__index;\n          dirtyPath = dirtyPath + '.' + index + '.' + embeddedPath;\n        } else {\n          // directly set an index\n          dirtyPath = dirtyPath + '.' + elem;\n        }\n      }\n\n      if (dirtyPath != null && dirtyPath.endsWith('.$')) {\n        return this;\n      }\n\n      parent.markModified(dirtyPath, arguments.length !== 0 ? elem : parent);\n    }\n\n    return this;\n  }\n};\n\nmodule.exports = methods;\n\n/**\n * If this is a document array, each element may contain single\n * populated paths, so we need to modify the top-level document's\n * populated cache. See gh-8247, gh-8265.\n * @param {Array} arr\n * @api private\n */\n\nfunction _updateParentPopulated(arr) {\n  const parent = arr[arrayParentSymbol];\n  if (!parent || parent.$__.populated == null) return;\n\n  const populatedPaths = Object.keys(parent.$__.populated).\n    filter(p => p.startsWith(arr[arrayPathSymbol] + '.'));\n\n  for (const path of populatedPaths) {\n    const remnant = path.slice((arr[arrayPathSymbol] + '.').length);\n    if (!Array.isArray(parent.$__.populated[path].value)) {\n      continue;\n    }\n\n    parent.$__.populated[path].value = arr.map(val => val.$populated(remnant));\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3R5cGVzL2RvY3VtZW50QXJyYXkvbWV0aG9kcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixxQkFBcUIsbUJBQU8sQ0FBQywyRkFBcUI7QUFDbEQsaUJBQWlCLG1CQUFPLENBQUMsd0VBQW1CO0FBQzVDLHFCQUFxQixtQkFBTyxDQUFDLGtGQUF3QjtBQUNyRCxnQ0FBZ0MsbUJBQU8sQ0FBQyxrSkFBd0Q7QUFDaEcsZ0NBQWdDLHFIQUFtRDtBQUNuRixjQUFjLG1CQUFPLENBQUMsa0VBQWdCO0FBQ3RDLG1CQUFtQixtQkFBTyxDQUFDLDRGQUE2Qjs7QUFFeEQsMEJBQTBCLCtIQUFxRDtBQUMvRSx3QkFBd0IsNkhBQW1EO0FBQzNFLDBCQUEwQiwrSEFBcUQ7QUFDL0UsNEJBQTRCLGlJQUF1RDs7QUFFbkY7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHVCQUF1QjtBQUNyQyxhQUFhLCtCQUErQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsYUFBYSxXQUFXO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGFBQWEsV0FBVztBQUN4QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3R5cGVzL2RvY3VtZW50QXJyYXkvbWV0aG9kcy9pbmRleC5qcz9mMWQ3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgQXJyYXlNZXRob2RzID0gcmVxdWlyZSgnLi4vLi4vYXJyYXkvbWV0aG9kcycpO1xuY29uc3QgRG9jdW1lbnQgPSByZXF1aXJlKCcuLi8uLi8uLi9kb2N1bWVudCcpO1xuY29uc3QgY2FzdE9iamVjdElkID0gcmVxdWlyZSgnLi4vLi4vLi4vY2FzdC9vYmplY3RpZCcpO1xuY29uc3QgZ2V0RGlzY3JpbWluYXRvckJ5VmFsdWUgPSByZXF1aXJlKCcuLi8uLi8uLi9oZWxwZXJzL2Rpc2NyaW1pbmF0b3IvZ2V0RGlzY3JpbWluYXRvckJ5VmFsdWUnKTtcbmNvbnN0IGludGVybmFsVG9PYmplY3RPcHRpb25zID0gcmVxdWlyZSgnLi4vLi4vLi4vb3B0aW9ucycpLmludGVybmFsVG9PYmplY3RPcHRpb25zO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlscycpO1xuY29uc3QgaXNCc29uVHlwZSA9IHJlcXVpcmUoJy4uLy4uLy4uL2hlbHBlcnMvaXNCc29uVHlwZScpO1xuXG5jb25zdCBhcnJheVBhcmVudFN5bWJvbCA9IHJlcXVpcmUoJy4uLy4uLy4uL2hlbHBlcnMvc3ltYm9scycpLmFycmF5UGFyZW50U3ltYm9sO1xuY29uc3QgYXJyYXlQYXRoU3ltYm9sID0gcmVxdWlyZSgnLi4vLi4vLi4vaGVscGVycy9zeW1ib2xzJykuYXJyYXlQYXRoU3ltYm9sO1xuY29uc3QgYXJyYXlTY2hlbWFTeW1ib2wgPSByZXF1aXJlKCcuLi8uLi8uLi9oZWxwZXJzL3N5bWJvbHMnKS5hcnJheVNjaGVtYVN5bWJvbDtcbmNvbnN0IGRvY3VtZW50QXJyYXlQYXJlbnQgPSByZXF1aXJlKCcuLi8uLi8uLi9oZWxwZXJzL3N5bWJvbHMnKS5kb2N1bWVudEFycmF5UGFyZW50O1xuXG5jb25zdCBfYmFzZVRvU3RyaW5nID0gQXJyYXkucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5jb25zdCBtZXRob2RzID0ge1xuICAvKiFcbiAgICogaWdub3JlXG4gICAqL1xuXG4gIHRvQlNPTigpIHtcbiAgICByZXR1cm4gdGhpcy50b09iamVjdChpbnRlcm5hbFRvT2JqZWN0T3B0aW9ucyk7XG4gIH0sXG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIF9iYXNlVG9TdHJpbmcuY2FsbCh0aGlzLl9fYXJyYXkubWFwKHN1YmRvYyA9PiB7XG4gICAgICBpZiAoc3ViZG9jICE9IG51bGwgJiYgc3ViZG9jLiRfXyAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBzdWJkb2MudG9TdHJpbmcoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdWJkb2M7XG4gICAgfSkpO1xuICB9LFxuXG4gIC8qIVxuICAgKiBpZ25vcmVcbiAgICovXG5cbiAgZ2V0QXJyYXlQYXJlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXNbYXJyYXlQYXJlbnRTeW1ib2xdO1xuICB9LFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZXMgTW9uZ29vc2VBcnJheSNjYXN0XG4gICAqXG4gICAqIEBtZXRob2QgX2Nhc3RcbiAgICogQGFwaSBwcml2YXRlXG4gICAqIEBtZW1iZXJPZiBNb25nb29zZURvY3VtZW50QXJyYXlcbiAgICovXG5cbiAgX2Nhc3QodmFsdWUsIGluZGV4LCBvcHRpb25zKSB7XG4gICAgaWYgKHRoaXNbYXJyYXlTY2hlbWFTeW1ib2xdID09IG51bGwpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgbGV0IENvbnN0cnVjdG9yID0gdGhpc1thcnJheVNjaGVtYVN5bWJvbF0uY2FzdGVyQ29uc3RydWN0b3I7XG4gICAgY29uc3QgaXNJbnN0YW5jZSA9IENvbnN0cnVjdG9yLiRpc01vbmdvb3NlRG9jdW1lbnRBcnJheSA/XG4gICAgICB1dGlscy5pc01vbmdvb3NlRG9jdW1lbnRBcnJheSh2YWx1ZSkgOlxuICAgICAgdmFsdWUgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcjtcbiAgICBpZiAoaXNJbnN0YW5jZSB8fFxuICAgICAgICAvLyBIYWNrIHJlOiAjNTAwMSwgc2VlICM1MDA1XG4gICAgICAgICh2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvciAmJiB2YWx1ZS5jb25zdHJ1Y3Rvci5iYXNlQ2FzdGVyQ29uc3RydWN0b3IgPT09IENvbnN0cnVjdG9yKSkge1xuICAgICAgaWYgKCEodmFsdWVbZG9jdW1lbnRBcnJheVBhcmVudF0gJiYgdmFsdWUuX19wYXJlbnRBcnJheSkpIHtcbiAgICAgICAgLy8gdmFsdWUgbWF5IGhhdmUgYmVlbiBjcmVhdGVkIHVzaW5nIGFycmF5LmNyZWF0ZSgpXG4gICAgICAgIHZhbHVlW2RvY3VtZW50QXJyYXlQYXJlbnRdID0gdGhpc1thcnJheVBhcmVudFN5bWJvbF07XG4gICAgICAgIHZhbHVlLl9fcGFyZW50QXJyYXkgPSB0aGlzO1xuICAgICAgfVxuICAgICAgdmFsdWUuJHNldEluZGV4KGluZGV4KTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gaGFuZGxlIGNhc3QoJ3N0cmluZycpIG9yIGNhc3QoT2JqZWN0SWQpIGV0Yy5cbiAgICAvLyBvbmx5IG9iamVjdHMgYXJlIHBlcm1pdHRlZCBzbyB3ZSBjYW4gc2FmZWx5IGFzc3VtZSB0aGF0XG4gICAgLy8gbm9uLW9iamVjdHMgYXJlIHRvIGJlIGludGVycHJldGVkIGFzIF9pZFxuICAgIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsdWUpIHx8XG4gICAgICAgIGlzQnNvblR5cGUodmFsdWUsICdPYmplY3RJZCcpIHx8ICF1dGlscy5pc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHZhbHVlID0geyBfaWQ6IHZhbHVlIH07XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlICYmXG4gICAgICAgIENvbnN0cnVjdG9yLmRpc2NyaW1pbmF0b3JzICYmXG4gICAgICAgIENvbnN0cnVjdG9yLnNjaGVtYSAmJlxuICAgICAgICBDb25zdHJ1Y3Rvci5zY2hlbWEub3B0aW9ucyAmJlxuICAgICAgICBDb25zdHJ1Y3Rvci5zY2hlbWEub3B0aW9ucy5kaXNjcmltaW5hdG9yS2V5KSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlW0NvbnN0cnVjdG9yLnNjaGVtYS5vcHRpb25zLmRpc2NyaW1pbmF0b3JLZXldID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgIENvbnN0cnVjdG9yLmRpc2NyaW1pbmF0b3JzW3ZhbHVlW0NvbnN0cnVjdG9yLnNjaGVtYS5vcHRpb25zLmRpc2NyaW1pbmF0b3JLZXldXSkge1xuICAgICAgICBDb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yLmRpc2NyaW1pbmF0b3JzW3ZhbHVlW0NvbnN0cnVjdG9yLnNjaGVtYS5vcHRpb25zLmRpc2NyaW1pbmF0b3JLZXldXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGNvbnN0cnVjdG9yQnlWYWx1ZSA9IGdldERpc2NyaW1pbmF0b3JCeVZhbHVlKENvbnN0cnVjdG9yLmRpc2NyaW1pbmF0b3JzLCB2YWx1ZVtDb25zdHJ1Y3Rvci5zY2hlbWEub3B0aW9ucy5kaXNjcmltaW5hdG9yS2V5XSk7XG4gICAgICAgIGlmIChjb25zdHJ1Y3RvckJ5VmFsdWUpIHtcbiAgICAgICAgICBDb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yQnlWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChDb25zdHJ1Y3Rvci4kaXNNb25nb29zZURvY3VtZW50QXJyYXkpIHtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3Rvci5jYXN0KHZhbHVlLCB0aGlzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaW5kZXgpO1xuICAgIH1cbiAgICBjb25zdCByZXQgPSBuZXcgQ29uc3RydWN0b3IodmFsdWUsIHRoaXMsIG9wdGlvbnMsIHVuZGVmaW5lZCwgaW5kZXgpO1xuICAgIHJldC5pc05ldyA9IHRydWU7XG4gICAgcmV0dXJuIHJldDtcbiAgfSxcblxuICAvKipcbiAgICogU2VhcmNoZXMgYXJyYXkgaXRlbXMgZm9yIHRoZSBmaXJzdCBkb2N1bWVudCB3aXRoIGEgbWF0Y2hpbmcgX2lkLlxuICAgKlxuICAgKiAjIyMjIEV4YW1wbGU6XG4gICAqXG4gICAqICAgICBjb25zdCBlbWJlZGRlZERvYyA9IG0uYXJyYXkuaWQoc29tZV9pZCk7XG4gICAqXG4gICAqIEByZXR1cm4ge0VtYmVkZGVkRG9jdW1lbnR8bnVsbH0gdGhlIHN1YmRvY3VtZW50IG9yIG51bGwgaWYgbm90IGZvdW5kLlxuICAgKiBAcGFyYW0ge09iamVjdElkfFN0cmluZ3xOdW1iZXJ8QnVmZmVyfSBpZFxuICAgKiBAVE9ETyBjYXN0IHRvIHRoZSBfaWQgYmFzZWQgb24gc2NoZW1hIGZvciBwcm9wZXIgY29tcGFyaXNvblxuICAgKiBAbWV0aG9kIGlkXG4gICAqIEBhcGkgcHVibGljXG4gICAqIEBtZW1iZXJPZiBNb25nb29zZURvY3VtZW50QXJyYXlcbiAgICovXG5cbiAgaWQoaWQpIHtcbiAgICBsZXQgY2FzdGVkO1xuICAgIGxldCBzaWQ7XG4gICAgbGV0IF9pZDtcblxuICAgIHRyeSB7XG4gICAgICBjYXN0ZWQgPSBjYXN0T2JqZWN0SWQoaWQpLnRvU3RyaW5nKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY2FzdGVkID0gbnVsbDtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IHZhbCBvZiB0aGlzKSB7XG4gICAgICBpZiAoIXZhbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgX2lkID0gdmFsLmdldCgnX2lkJyk7XG5cbiAgICAgIGlmIChfaWQgPT09IG51bGwgfHwgdHlwZW9mIF9pZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2UgaWYgKF9pZCBpbnN0YW5jZW9mIERvY3VtZW50KSB7XG4gICAgICAgIHNpZCB8fCAoc2lkID0gU3RyaW5nKGlkKSk7XG4gICAgICAgIGlmIChzaWQgPT0gX2lkLl9pZCkge1xuICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIWlzQnNvblR5cGUoaWQsICdPYmplY3RJZCcpICYmICFpc0Jzb25UeXBlKF9pZCwgJ09iamVjdElkJykpIHtcbiAgICAgICAgaWYgKGlkID09IF9pZCB8fCB1dGlscy5kZWVwRXF1YWwoaWQsIF9pZCkpIHtcbiAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNhc3RlZCA9PSBfaWQpIHtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyBhIG5hdGl2ZSBqcyBBcnJheSBvZiBwbGFpbiBqcyBvYmplY3RzXG4gICAqXG4gICAqICMjIyMgTm90ZTpcbiAgICpcbiAgICogX0VhY2ggc3ViLWRvY3VtZW50IGlzIGNvbnZlcnRlZCB0byBhIHBsYWluIG9iamVjdCBieSBjYWxsaW5nIGl0cyBgI3RvT2JqZWN0YCBtZXRob2QuX1xuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIG9wdGlvbmFsIG9wdGlvbnMgdG8gcGFzcyB0byBlYWNoIGRvY3VtZW50cyBgdG9PYmplY3RgIG1ldGhvZCBjYWxsIGR1cmluZyBjb252ZXJzaW9uXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKiBAbWV0aG9kIHRvT2JqZWN0XG4gICAqIEBhcGkgcHVibGljXG4gICAqIEBtZW1iZXJPZiBNb25nb29zZURvY3VtZW50QXJyYXlcbiAgICovXG5cbiAgdG9PYmplY3Qob3B0aW9ucykge1xuICAgIC8vIGBbXS5jb25jYXRgIGNvZXJjZXMgdGhlIHJldHVybiB2YWx1ZSBpbnRvIGEgdmFuaWxsYSBKUyBhcnJheSwgcmF0aGVyXG4gICAgLy8gdGhhbiBhIE1vbmdvb3NlIGFycmF5LlxuICAgIHJldHVybiBbXS5jb25jYXQodGhpcy5tYXAoZnVuY3Rpb24oZG9jKSB7XG4gICAgICBpZiAoZG9jID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGRvYy50b09iamVjdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gZG9jO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRvYy50b09iamVjdChvcHRpb25zKTtcbiAgICB9KSk7XG4gIH0sXG5cbiAgJHRvT2JqZWN0KCkge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnByb3RvdHlwZS50b09iamVjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBXcmFwcyBbYEFycmF5I3B1c2hgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9wdXNoKSB3aXRoIHByb3BlciBjaGFuZ2UgdHJhY2tpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbYXJnc11cbiAgICogQGFwaSBwdWJsaWNcbiAgICogQG1ldGhvZCBwdXNoXG4gICAqIEBtZW1iZXJPZiBNb25nb29zZURvY3VtZW50QXJyYXlcbiAgICovXG5cbiAgcHVzaCgpIHtcbiAgICBjb25zdCByZXQgPSBBcnJheU1ldGhvZHMucHVzaC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgX3VwZGF0ZVBhcmVudFBvcHVsYXRlZCh0aGlzKTtcblxuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFB1bGxzIGl0ZW1zIGZyb20gdGhlIGFycmF5IGF0b21pY2FsbHkuXG4gICAqXG4gICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbYXJnc11cbiAgICogQGFwaSBwdWJsaWNcbiAgICogQG1ldGhvZCBwdWxsXG4gICAqIEBtZW1iZXJPZiBNb25nb29zZURvY3VtZW50QXJyYXlcbiAgICovXG5cbiAgcHVsbCgpIHtcbiAgICBjb25zdCByZXQgPSBBcnJheU1ldGhvZHMucHVsbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgX3VwZGF0ZVBhcmVudFBvcHVsYXRlZCh0aGlzKTtcblxuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFdyYXBzIFtgQXJyYXkjc2hpZnRgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS91bnNoaWZ0KSB3aXRoIHByb3BlciBjaGFuZ2UgdHJhY2tpbmcuXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cblxuICBzaGlmdCgpIHtcbiAgICBjb25zdCByZXQgPSBBcnJheU1ldGhvZHMuc2hpZnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIF91cGRhdGVQYXJlbnRQb3B1bGF0ZWQodGhpcyk7XG5cbiAgICByZXR1cm4gcmV0O1xuICB9LFxuXG4gIC8qKlxuICAgKiBXcmFwcyBbYEFycmF5I3NwbGljZWBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L3NwbGljZSkgd2l0aCBwcm9wZXIgY2hhbmdlIHRyYWNraW5nIGFuZCBjYXN0aW5nLlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG5cbiAgc3BsaWNlKCkge1xuICAgIGNvbnN0IHJldCA9IEFycmF5TWV0aG9kcy5zcGxpY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIF91cGRhdGVQYXJlbnRQb3B1bGF0ZWQodGhpcyk7XG5cbiAgICByZXR1cm4gcmV0O1xuICB9LFxuXG4gIC8qKlxuICAgKiBIZWxwZXIgZm9yIGNvbnNvbGUubG9nXG4gICAqXG4gICAqIEBtZXRob2QgaW5zcGVjdFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKiBAbWVtYmVyT2YgTW9uZ29vc2VEb2N1bWVudEFycmF5XG4gICAqL1xuXG4gIGluc3BlY3QoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9PYmplY3QoKTtcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHN1YmRvY3VtZW50IGNhc3RlZCB0byB0aGlzIHNjaGVtYS5cbiAgICpcbiAgICogVGhpcyBpcyB0aGUgc2FtZSBzdWJkb2N1bWVudCBjb25zdHJ1Y3RvciB1c2VkIGZvciBjYXN0aW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqIHRoZSB2YWx1ZSB0byBjYXN0IHRvIHRoaXMgYXJyYXlzIFN1YkRvY3VtZW50IHNjaGVtYVxuICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKiBAbWVtYmVyT2YgTW9uZ29vc2VEb2N1bWVudEFycmF5XG4gICAqL1xuXG4gIGNyZWF0ZShvYmopIHtcbiAgICBsZXQgQ29uc3RydWN0b3IgPSB0aGlzW2FycmF5U2NoZW1hU3ltYm9sXS5jYXN0ZXJDb25zdHJ1Y3RvcjtcbiAgICBpZiAob2JqICYmXG4gICAgICAgIENvbnN0cnVjdG9yLmRpc2NyaW1pbmF0b3JzICYmXG4gICAgICAgIENvbnN0cnVjdG9yLnNjaGVtYSAmJlxuICAgICAgICBDb25zdHJ1Y3Rvci5zY2hlbWEub3B0aW9ucyAmJlxuICAgICAgICBDb25zdHJ1Y3Rvci5zY2hlbWEub3B0aW9ucy5kaXNjcmltaW5hdG9yS2V5KSB7XG4gICAgICBpZiAodHlwZW9mIG9ialtDb25zdHJ1Y3Rvci5zY2hlbWEub3B0aW9ucy5kaXNjcmltaW5hdG9yS2V5XSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICBDb25zdHJ1Y3Rvci5kaXNjcmltaW5hdG9yc1tvYmpbQ29uc3RydWN0b3Iuc2NoZW1hLm9wdGlvbnMuZGlzY3JpbWluYXRvcktleV1dKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gQ29uc3RydWN0b3IuZGlzY3JpbWluYXRvcnNbb2JqW0NvbnN0cnVjdG9yLnNjaGVtYS5vcHRpb25zLmRpc2NyaW1pbmF0b3JLZXldXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGNvbnN0cnVjdG9yQnlWYWx1ZSA9IGdldERpc2NyaW1pbmF0b3JCeVZhbHVlKENvbnN0cnVjdG9yLmRpc2NyaW1pbmF0b3JzLCBvYmpbQ29uc3RydWN0b3Iuc2NoZW1hLm9wdGlvbnMuZGlzY3JpbWluYXRvcktleV0pO1xuICAgICAgICBpZiAoY29uc3RydWN0b3JCeVZhbHVlKSB7XG4gICAgICAgICAgQ29uc3RydWN0b3IgPSBjb25zdHJ1Y3RvckJ5VmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKG9iaiwgdGhpcyk7XG4gIH0sXG5cbiAgLyohXG4gICAqIGlnbm9yZVxuICAgKi9cblxuICBub3RpZnkoZXZlbnQpIHtcbiAgICBjb25zdCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5vdGlmeSh2YWwsIF9hcnIpIHtcbiAgICAgIF9hcnIgPSBfYXJyIHx8IF90aGlzO1xuICAgICAgbGV0IGkgPSBfYXJyLmxlbmd0aDtcbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgaWYgKF9hcnJbaV0gPT0gbnVsbCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoZXZlbnQpIHtcbiAgICAgICAgICAvLyBvbmx5IHN3YXAgZm9yIHNhdmUgZXZlbnQgZm9yIG5vdywgd2UgbWF5IGNoYW5nZSB0aGlzIHRvIGFsbCBldmVudCB0eXBlcyBsYXRlclxuICAgICAgICAgIGNhc2UgJ3NhdmUnOlxuICAgICAgICAgICAgdmFsID0gX3RoaXNbaV07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgLy8gTk8tT1BcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzTW9uZ29vc2VBcnJheShfYXJyW2ldKSkge1xuICAgICAgICAgIG5vdGlmeSh2YWwsIF9hcnJbaV0pO1xuICAgICAgICB9IGVsc2UgaWYgKF9hcnJbaV0pIHtcbiAgICAgICAgICBfYXJyW2ldLmVtaXQoZXZlbnQsIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9LFxuXG4gIHNldChpLCB2YWwsIHNraXBNb2RpZmllZCkge1xuICAgIGNvbnN0IGFyciA9IHRoaXMuX19hcnJheTtcbiAgICBpZiAoc2tpcE1vZGlmaWVkKSB7XG4gICAgICBhcnJbaV0gPSB2YWw7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgY29uc3QgdmFsdWUgPSBtZXRob2RzLl9jYXN0LmNhbGwodGhpcywgdmFsLCBpKTtcbiAgICBtZXRob2RzLl9tYXJrTW9kaWZpZWQuY2FsbCh0aGlzLCBpKTtcbiAgICBhcnJbaV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBfbWFya01vZGlmaWVkKGVsZW0sIGVtYmVkZGVkUGF0aCkge1xuICAgIGNvbnN0IHBhcmVudCA9IHRoaXNbYXJyYXlQYXJlbnRTeW1ib2xdO1xuICAgIGxldCBkaXJ0eVBhdGg7XG5cbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBkaXJ0eVBhdGggPSB0aGlzW2FycmF5UGF0aFN5bWJvbF07XG5cbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIGlmIChlbWJlZGRlZFBhdGggIT0gbnVsbCkge1xuICAgICAgICAgIC8vIGFuIGVtYmVkZGVkIGRvYyBidWJibGVkIHVwIHRoZSBjaGFuZ2VcbiAgICAgICAgICBjb25zdCBpbmRleCA9IGVsZW0uX19pbmRleDtcbiAgICAgICAgICBkaXJ0eVBhdGggPSBkaXJ0eVBhdGggKyAnLicgKyBpbmRleCArICcuJyArIGVtYmVkZGVkUGF0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBkaXJlY3RseSBzZXQgYW4gaW5kZXhcbiAgICAgICAgICBkaXJ0eVBhdGggPSBkaXJ0eVBhdGggKyAnLicgKyBlbGVtO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChkaXJ0eVBhdGggIT0gbnVsbCAmJiBkaXJ0eVBhdGguZW5kc1dpdGgoJy4kJykpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHBhcmVudC5tYXJrTW9kaWZpZWQoZGlydHlQYXRoLCBhcmd1bWVudHMubGVuZ3RoICE9PSAwID8gZWxlbSA6IHBhcmVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbWV0aG9kcztcblxuLyoqXG4gKiBJZiB0aGlzIGlzIGEgZG9jdW1lbnQgYXJyYXksIGVhY2ggZWxlbWVudCBtYXkgY29udGFpbiBzaW5nbGVcbiAqIHBvcHVsYXRlZCBwYXRocywgc28gd2UgbmVlZCB0byBtb2RpZnkgdGhlIHRvcC1sZXZlbCBkb2N1bWVudCdzXG4gKiBwb3B1bGF0ZWQgY2FjaGUuIFNlZSBnaC04MjQ3LCBnaC04MjY1LlxuICogQHBhcmFtIHtBcnJheX0gYXJyXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBfdXBkYXRlUGFyZW50UG9wdWxhdGVkKGFycikge1xuICBjb25zdCBwYXJlbnQgPSBhcnJbYXJyYXlQYXJlbnRTeW1ib2xdO1xuICBpZiAoIXBhcmVudCB8fCBwYXJlbnQuJF9fLnBvcHVsYXRlZCA9PSBudWxsKSByZXR1cm47XG5cbiAgY29uc3QgcG9wdWxhdGVkUGF0aHMgPSBPYmplY3Qua2V5cyhwYXJlbnQuJF9fLnBvcHVsYXRlZCkuXG4gICAgZmlsdGVyKHAgPT4gcC5zdGFydHNXaXRoKGFyclthcnJheVBhdGhTeW1ib2xdICsgJy4nKSk7XG5cbiAgZm9yIChjb25zdCBwYXRoIG9mIHBvcHVsYXRlZFBhdGhzKSB7XG4gICAgY29uc3QgcmVtbmFudCA9IHBhdGguc2xpY2UoKGFyclthcnJheVBhdGhTeW1ib2xdICsgJy4nKS5sZW5ndGgpO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShwYXJlbnQuJF9fLnBvcHVsYXRlZFtwYXRoXS52YWx1ZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHBhcmVudC4kX18ucG9wdWxhdGVkW3BhdGhdLnZhbHVlID0gYXJyLm1hcCh2YWwgPT4gdmFsLiRwb3B1bGF0ZWQocmVtbmFudCkpO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/types/documentArray/methods/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/types/index.js":
/*!**************************************************!*\
  !*** ./node_modules/mongoose/lib/types/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Module exports.\n */\n\n\n\nexports.Array = __webpack_require__(/*! ./array */ \"(ssr)/./node_modules/mongoose/lib/types/array/index.js\");\nexports.Buffer = __webpack_require__(/*! ./buffer */ \"(ssr)/./node_modules/mongoose/lib/types/buffer.js\");\n\nexports.Document = // @deprecate\nexports.Embedded = __webpack_require__(/*! ./arraySubdocument */ \"(ssr)/./node_modules/mongoose/lib/types/arraySubdocument.js\");\n\nexports.DocumentArray = __webpack_require__(/*! ./documentArray */ \"(ssr)/./node_modules/mongoose/lib/types/documentArray/index.js\");\nexports.Decimal128 = __webpack_require__(/*! ./decimal128 */ \"(ssr)/./node_modules/mongoose/lib/types/decimal128.js\");\nexports.ObjectId = __webpack_require__(/*! ./objectid */ \"(ssr)/./node_modules/mongoose/lib/types/objectid.js\");\n\nexports.Map = __webpack_require__(/*! ./map */ \"(ssr)/./node_modules/mongoose/lib/types/map.js\");\n\nexports.Subdocument = __webpack_require__(/*! ./subdocument */ \"(ssr)/./node_modules/mongoose/lib/types/subdocument.js\");\n\nexports.UUID = __webpack_require__(/*! ./uuid */ \"(ssr)/./node_modules/mongoose/lib/types/uuid.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3R5cGVzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWIsNEdBQWtDO0FBQ2xDLHlHQUFvQzs7QUFFcEMsZ0JBQWdCO0FBQ2hCLCtIQUFnRDs7QUFFaEQsb0lBQWtEO0FBQ2xELHFIQUE0QztBQUM1QywrR0FBd0M7O0FBRXhDLGdHQUE4Qjs7QUFFOUIsd0hBQThDOztBQUU5QyxtR0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi90eXBlcy9pbmRleC5qcz80MjIyIl0sInNvdXJjZXNDb250ZW50IjpbIlxuLyohXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuQXJyYXkgPSByZXF1aXJlKCcuL2FycmF5Jyk7XG5leHBvcnRzLkJ1ZmZlciA9IHJlcXVpcmUoJy4vYnVmZmVyJyk7XG5cbmV4cG9ydHMuRG9jdW1lbnQgPSAvLyBAZGVwcmVjYXRlXG5leHBvcnRzLkVtYmVkZGVkID0gcmVxdWlyZSgnLi9hcnJheVN1YmRvY3VtZW50Jyk7XG5cbmV4cG9ydHMuRG9jdW1lbnRBcnJheSA9IHJlcXVpcmUoJy4vZG9jdW1lbnRBcnJheScpO1xuZXhwb3J0cy5EZWNpbWFsMTI4ID0gcmVxdWlyZSgnLi9kZWNpbWFsMTI4Jyk7XG5leHBvcnRzLk9iamVjdElkID0gcmVxdWlyZSgnLi9vYmplY3RpZCcpO1xuXG5leHBvcnRzLk1hcCA9IHJlcXVpcmUoJy4vbWFwJyk7XG5cbmV4cG9ydHMuU3ViZG9jdW1lbnQgPSByZXF1aXJlKCcuL3N1YmRvY3VtZW50Jyk7XG5cbmV4cG9ydHMuVVVJRCA9IHJlcXVpcmUoJy4vdXVpZCcpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/types/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/types/map.js":
/*!************************************************!*\
  !*** ./node_modules/mongoose/lib/types/map.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst Mixed = __webpack_require__(/*! ../schema/mixed */ \"(ssr)/./node_modules/mongoose/lib/schema/mixed.js\");\nconst MongooseError = __webpack_require__(/*! ../error/mongooseError */ \"(ssr)/./node_modules/mongoose/lib/error/mongooseError.js\");\nconst clone = __webpack_require__(/*! ../helpers/clone */ \"(ssr)/./node_modules/mongoose/lib/helpers/clone.js\");\nconst deepEqual = (__webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\").deepEqual);\nconst getConstructorName = __webpack_require__(/*! ../helpers/getConstructorName */ \"(ssr)/./node_modules/mongoose/lib/helpers/getConstructorName.js\");\nconst handleSpreadDoc = __webpack_require__(/*! ../helpers/document/handleSpreadDoc */ \"(ssr)/./node_modules/mongoose/lib/helpers/document/handleSpreadDoc.js\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst specialProperties = __webpack_require__(/*! ../helpers/specialProperties */ \"(ssr)/./node_modules/mongoose/lib/helpers/specialProperties.js\");\nconst isBsonType = __webpack_require__(/*! ../helpers/isBsonType */ \"(ssr)/./node_modules/mongoose/lib/helpers/isBsonType.js\");\n\nconst populateModelSymbol = (__webpack_require__(/*! ../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").populateModelSymbol);\n\n/*!\n * ignore\n */\n\nclass MongooseMap extends Map {\n  constructor(v, path, doc, schemaType) {\n    if (getConstructorName(v) === 'Object') {\n      v = Object.keys(v).reduce((arr, key) => arr.concat([[key, v[key]]]), []);\n    }\n    super(v);\n    this.$__parent = doc != null && doc.$__ != null ? doc : null;\n    this.$__path = path;\n    this.$__schemaType = schemaType == null ? new Mixed(path) : schemaType;\n\n    this.$__runDeferred();\n  }\n\n  $init(key, value) {\n    checkValidKey(key);\n\n    super.set(key, value);\n\n    if (value != null && value.$isSingleNested) {\n      value.$basePath = this.$__path + '.' + key;\n    }\n  }\n\n  $__set(key, value) {\n    super.set(key, value);\n  }\n\n  /**\n   * Overwrites native Map's `get()` function to support Mongoose getters.\n   *\n   * @api public\n   * @method get\n   * @memberOf Map\n   */\n\n  get(key, options) {\n    if (isBsonType(key, 'ObjectId')) {\n      key = key.toString();\n    }\n\n    options = options || {};\n    if (options.getters === false) {\n      return super.get(key);\n    }\n    return this.$__schemaType.applyGetters(super.get(key), this.$__parent);\n  }\n\n  /**\n   * Overwrites native Map's `set()` function to support setters, `populate()`,\n   * and change tracking. Note that Mongoose maps _only_ support strings and\n   * ObjectIds as keys.\n   *\n   * #### Example:\n   *\n   *     doc.myMap.set('test', 42); // works\n   *     doc.myMap.set({ obj: 42 }, 42); // Throws \"Mongoose maps only support string keys\"\n   *\n   * @api public\n   * @method set\n   * @memberOf Map\n   */\n\n  set(key, value) {\n    if (isBsonType(key, 'ObjectId')) {\n      key = key.toString();\n    }\n\n    checkValidKey(key);\n    value = handleSpreadDoc(value);\n\n    // Weird, but because you can't assign to `this` before calling `super()`\n    // you can't get access to `$__schemaType` to cast in the initial call to\n    // `set()` from the `super()` constructor.\n\n    if (this.$__schemaType == null) {\n      this.$__deferred = this.$__deferred || [];\n      this.$__deferred.push({ key: key, value: value });\n      return;\n    }\n\n    let _fullPath;\n    const parent = this.$__parent;\n    const populated = parent != null && parent.$__ && parent.$__.populated ?\n      parent.$populated(fullPath.call(this), true) || parent.$populated(this.$__path, true) :\n      null;\n    const priorVal = this.get(key);\n\n    if (populated != null) {\n      if (this.$__schemaType.$isSingleNested) {\n        throw new MongooseError(\n          'Cannot manually populate single nested subdoc underneath Map ' +\n          `at path \"${this.$__path}\". Try using an array instead of a Map.`\n        );\n      }\n      if (Array.isArray(value) && this.$__schemaType.$isMongooseArray) {\n        value = value.map(v => {\n          if (v.$__ == null) {\n            v = new populated.options[populateModelSymbol](v);\n          }\n          // Doesn't support single nested \"in-place\" populate\n          v.$__.wasPopulated = { value: v._id };\n          return v;\n        });\n      } else {\n        if (value.$__ == null) {\n          value = new populated.options[populateModelSymbol](value);\n        }\n        // Doesn't support single nested \"in-place\" populate\n        value.$__.wasPopulated = { value: value._id };\n      }\n    } else {\n      try {\n        const options = this.$__schemaType.$isMongooseDocumentArray || this.$__schemaType.$isSingleNested ?\n          { path: fullPath.call(this) } :\n          null;\n        value = this.$__schemaType.applySetters(\n          value,\n          this.$__parent,\n          false,\n          this.get(key),\n          options\n        );\n      } catch (error) {\n        if (this.$__parent != null && this.$__parent.$__ != null) {\n          this.$__parent.invalidate(fullPath.call(this), error);\n          return;\n        }\n        throw error;\n      }\n    }\n\n    super.set(key, value);\n\n    if (parent != null && parent.$__ != null && !deepEqual(value, priorVal)) {\n      parent.markModified(fullPath.call(this));\n    }\n\n    // Delay calculating full path unless absolutely necessary, because string\n    // concatenation is a bottleneck re: #13171\n    function fullPath() {\n      if (_fullPath) {\n        return _fullPath;\n      }\n      _fullPath = this.$__path + '.' + key;\n      return _fullPath;\n    }\n  }\n\n  /**\n   * Overwrites native Map's `clear()` function to support change tracking.\n   *\n   * @api public\n   * @method clear\n   * @memberOf Map\n   */\n\n  clear() {\n    super.clear();\n    const parent = this.$__parent;\n    if (parent != null) {\n      parent.markModified(this.$__path);\n    }\n  }\n\n  /**\n   * Overwrites native Map's `delete()` function to support change tracking.\n   *\n   * @api public\n   * @method delete\n   * @memberOf Map\n   */\n\n  delete(key) {\n    if (isBsonType(key, 'ObjectId')) {\n      key = key.toString();\n    }\n\n    this.set(key, undefined);\n    return super.delete(key);\n  }\n\n  /**\n   * Converts this map to a native JavaScript Map so the MongoDB driver can serialize it.\n   *\n   * @api public\n   * @method toBSON\n   * @memberOf Map\n   */\n\n  toBSON() {\n    return new Map(this);\n  }\n\n  toObject(options) {\n    if (options && options.flattenMaps) {\n      const ret = {};\n      const keys = this.keys();\n      for (const key of keys) {\n        ret[key] = clone(this.get(key), options);\n      }\n      return ret;\n    }\n\n    return new Map(this);\n  }\n\n  $toObject() {\n    return this.constructor.prototype.toObject.apply(this, arguments);\n  }\n\n  /**\n   * Converts this map to a native JavaScript Map for `JSON.stringify()`. Set\n   * the `flattenMaps` option to convert this map to a POJO instead.\n   *\n   * #### Example:\n   *\n   *     doc.myMap.toJSON() instanceof Map; // true\n   *     doc.myMap.toJSON({ flattenMaps: true }) instanceof Map; // false\n   *\n   * @api public\n   * @method toJSON\n   * @param {Object} [options]\n   * @param {Boolean} [options.flattenMaps=false] set to `true` to convert the map to a POJO rather than a native JavaScript map\n   * @memberOf Map\n   */\n\n  toJSON(options) {\n    if (typeof (options && options.flattenMaps) === 'boolean' ? options.flattenMaps : true) {\n      const ret = {};\n      const keys = this.keys();\n      for (const key of keys) {\n        ret[key] = clone(this.get(key), options);\n      }\n      return ret;\n    }\n\n    return new Map(this);\n  }\n\n  inspect() {\n    return new Map(this);\n  }\n\n  $__runDeferred() {\n    if (!this.$__deferred) {\n      return;\n    }\n\n    for (const keyValueObject of this.$__deferred) {\n      this.set(keyValueObject.key, keyValueObject.value);\n    }\n\n    this.$__deferred = null;\n  }\n}\n\nif (util.inspect.custom) {\n  Object.defineProperty(MongooseMap.prototype, util.inspect.custom, {\n    enumerable: false,\n    writable: false,\n    configurable: false,\n    value: MongooseMap.prototype.inspect\n  });\n}\n\nObject.defineProperty(MongooseMap.prototype, '$__set', {\n  enumerable: false,\n  writable: true,\n  configurable: false\n});\n\nObject.defineProperty(MongooseMap.prototype, '$__parent', {\n  enumerable: false,\n  writable: true,\n  configurable: false\n});\n\nObject.defineProperty(MongooseMap.prototype, '$__path', {\n  enumerable: false,\n  writable: true,\n  configurable: false\n});\n\nObject.defineProperty(MongooseMap.prototype, '$__schemaType', {\n  enumerable: false,\n  writable: true,\n  configurable: false\n});\n\n/**\n * Set to `true` for all Mongoose map instances\n *\n * @api public\n * @property $isMongooseMap\n * @memberOf MongooseMap\n * @instance\n */\n\nObject.defineProperty(MongooseMap.prototype, '$isMongooseMap', {\n  enumerable: false,\n  writable: false,\n  configurable: false,\n  value: true\n});\n\nObject.defineProperty(MongooseMap.prototype, '$__deferredCalls', {\n  enumerable: false,\n  writable: false,\n  configurable: false,\n  value: true\n});\n\n/**\n * Since maps are stored as objects under the hood, keys must be strings\n * and can't contain any invalid characters\n * @param {String} key\n * @api private\n */\n\nfunction checkValidKey(key) {\n  const keyType = typeof key;\n  if (keyType !== 'string') {\n    throw new TypeError(`Mongoose maps only support string keys, got ${keyType}`);\n  }\n  if (key.startsWith('$')) {\n    throw new Error(`Mongoose maps do not support keys that start with \"$\", got \"${key}\"`);\n  }\n  if (key.includes('.')) {\n    throw new Error(`Mongoose maps do not support keys that contain \".\", got \"${key}\"`);\n  }\n  if (specialProperties.has(key)) {\n    throw new Error(`Mongoose maps do not support reserved key name \"${key}\"`);\n  }\n}\n\nmodule.exports = MongooseMap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/types/map.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/types/objectid.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongoose/lib/types/objectid.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * ObjectId type constructor\n *\n * #### Example:\n *\n *     const id = new mongoose.Types.ObjectId;\n *\n * @constructor ObjectId\n */\n\n\n\nconst ObjectId = (__webpack_require__(/*! bson */ \"(ssr)/./node_modules/bson/lib/bson.cjs\").ObjectId);\nconst objectIdSymbol = (__webpack_require__(/*! ../helpers/symbols */ \"(ssr)/./node_modules/mongoose/lib/helpers/symbols.js\").objectIdSymbol);\n\n/**\n * Getter for convenience with populate, see gh-6115\n * @api private\n */\n\nObject.defineProperty(ObjectId.prototype, '_id', {\n  enumerable: false,\n  configurable: true,\n  get: function() {\n    return this;\n  }\n});\n\n/*!\n * Convenience `valueOf()` to allow comparing ObjectIds using double equals re: gh-7299\n */\n\nif (!ObjectId.prototype.hasOwnProperty('valueOf')) {\n  ObjectId.prototype.valueOf = function objectIdValueOf() {\n    return this.toString();\n  };\n}\n\nObjectId.prototype[objectIdSymbol] = true;\n\nmodule.exports = ObjectId;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3R5cGVzL29iamVjdGlkLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYixpQkFBaUIsb0ZBQXdCO0FBQ3pDLHVCQUF1QixzSEFBNEM7O0FBRW5FO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi90eXBlcy9vYmplY3RpZC5qcz80ZDU1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogT2JqZWN0SWQgdHlwZSBjb25zdHJ1Y3RvclxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3QgaWQgPSBuZXcgbW9uZ29vc2UuVHlwZXMuT2JqZWN0SWQ7XG4gKlxuICogQGNvbnN0cnVjdG9yIE9iamVjdElkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBPYmplY3RJZCA9IHJlcXVpcmUoJ2Jzb24nKS5PYmplY3RJZDtcbmNvbnN0IG9iamVjdElkU3ltYm9sID0gcmVxdWlyZSgnLi4vaGVscGVycy9zeW1ib2xzJykub2JqZWN0SWRTeW1ib2w7XG5cbi8qKlxuICogR2V0dGVyIGZvciBjb252ZW5pZW5jZSB3aXRoIHBvcHVsYXRlLCBzZWUgZ2gtNjExNVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdElkLnByb3RvdHlwZSwgJ19pZCcsIHtcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufSk7XG5cbi8qIVxuICogQ29udmVuaWVuY2UgYHZhbHVlT2YoKWAgdG8gYWxsb3cgY29tcGFyaW5nIE9iamVjdElkcyB1c2luZyBkb3VibGUgZXF1YWxzIHJlOiBnaC03Mjk5XG4gKi9cblxuaWYgKCFPYmplY3RJZC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkoJ3ZhbHVlT2YnKSkge1xuICBPYmplY3RJZC5wcm90b3R5cGUudmFsdWVPZiA9IGZ1bmN0aW9uIG9iamVjdElkVmFsdWVPZigpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xuICB9O1xufVxuXG5PYmplY3RJZC5wcm90b3R5cGVbb2JqZWN0SWRTeW1ib2xdID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3RJZDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/types/objectid.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/types/subdocument.js":
/*!********************************************************!*\
  !*** ./node_modules/mongoose/lib/types/subdocument.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst Document = __webpack_require__(/*! ../document */ \"(ssr)/./node_modules/mongoose/lib/document.js\");\nconst immediate = __webpack_require__(/*! ../helpers/immediate */ \"(ssr)/./node_modules/mongoose/lib/helpers/immediate.js\");\nconst internalToObjectOptions = (__webpack_require__(/*! ../options */ \"(ssr)/./node_modules/mongoose/lib/options.js\").internalToObjectOptions);\nconst util = __webpack_require__(/*! util */ \"util\");\nconst utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\n\nmodule.exports = Subdocument;\n\n/**\n * Subdocument constructor.\n *\n * @inherits Document\n * @api private\n */\n\nfunction Subdocument(value, fields, parent, skipId, options) {\n  if (typeof skipId === 'object' && skipId != null && options == null) {\n    options = skipId;\n    skipId = undefined;\n  }\n  if (parent != null) {\n    // If setting a nested path, should copy isNew from parent re: gh-7048\n    const parentOptions = { isNew: parent.isNew };\n    if ('defaults' in parent.$__) {\n      parentOptions.defaults = parent.$__.defaults;\n    }\n    options = Object.assign(parentOptions, options);\n  }\n  if (options != null && options.path != null) {\n    this.$basePath = options.path;\n  }\n  Document.call(this, value, fields, skipId, options);\n\n  delete this.$__.priorDoc;\n}\n\nSubdocument.prototype = Object.create(Document.prototype);\n\nObject.defineProperty(Subdocument.prototype, '$isSubdocument', {\n  configurable: false,\n  writable: false,\n  value: true\n});\n\nObject.defineProperty(Subdocument.prototype, '$isSingleNested', {\n  configurable: false,\n  writable: false,\n  value: true\n});\n\n/*!\n * ignore\n */\n\nSubdocument.prototype.toBSON = function() {\n  return this.toObject(internalToObjectOptions);\n};\n\n/**\n * Used as a stub for middleware\n *\n * #### Note:\n *\n * _This is a no-op. Does not actually save the doc to the db._\n *\n * @param {Function} [fn]\n * @return {Promise} resolved Promise\n * @api private\n */\n\nSubdocument.prototype.save = async function save(options) {\n  options = options || {};\n\n  if (!options.suppressWarning) {\n    utils.warn('mongoose: calling `save()` on a subdoc does **not** save ' +\n      'the document to MongoDB, it only runs save middleware. ' +\n      'Use `subdoc.save({ suppressWarning: true })` to hide this warning ' +\n      'if you\\'re sure this behavior is right for your app.');\n  }\n\n  return new Promise((resolve, reject) => {\n    this.$__save((err) => {\n      if (err != null) {\n        return reject(err);\n      }\n      resolve(this);\n    });\n  });\n};\n\n/**\n * Given a path relative to this document, return the path relative\n * to the top-level document.\n * @param {String} path\n * @method $__fullPath\n * @memberOf Subdocument\n * @instance\n * @returns {String}\n * @api private\n */\n\nSubdocument.prototype.$__fullPath = function(path) {\n  if (!this.$__.fullPath) {\n    this.ownerDocument();\n  }\n\n  return path ?\n    this.$__.fullPath + '.' + path :\n    this.$__.fullPath;\n};\n\n/**\n * Given a path relative to this document, return the path relative\n * to the top-level document.\n * @param {String} p\n * @returns {String}\n * @method $__pathRelativeToParent\n * @memberOf Subdocument\n * @instance\n * @api private\n */\n\nSubdocument.prototype.$__pathRelativeToParent = function(p) {\n  if (p == null) {\n    return this.$basePath;\n  }\n  return [this.$basePath, p].join('.');\n};\n\n/**\n * Used as a stub for middleware\n *\n * #### Note:\n *\n * _This is a no-op. Does not actually save the doc to the db._\n *\n * @param {Function} [fn]\n * @method $__save\n * @api private\n */\n\nSubdocument.prototype.$__save = function(fn) {\n  return immediate(() => fn(null, this));\n};\n\n/*!\n * ignore\n */\n\nSubdocument.prototype.$isValid = function(path) {\n  const parent = this.$parent();\n  const fullPath = this.$__pathRelativeToParent(path);\n  if (parent != null && fullPath != null) {\n    return parent.$isValid(fullPath);\n  }\n  return Document.prototype.$isValid.call(this, path);\n};\n\n/*!\n * ignore\n */\n\nSubdocument.prototype.markModified = function(path) {\n  Document.prototype.markModified.call(this, path);\n  const parent = this.$parent();\n  const fullPath = this.$__pathRelativeToParent(path);\n\n  if (parent == null || fullPath == null) {\n    return;\n  }\n\n  const myPath = this.$__pathRelativeToParent().replace(/\\.$/, '');\n  if (parent.isDirectModified(myPath) || this.isNew) {\n    return;\n  }\n  this.$__parent.markModified(fullPath, this);\n};\n\n/*!\n * ignore\n */\n\nSubdocument.prototype.isModified = function(paths, options, modifiedPaths) {\n  const parent = this.$parent();\n  if (parent != null) {\n    if (Array.isArray(paths) || typeof paths === 'string') {\n      paths = (Array.isArray(paths) ? paths : paths.split(' '));\n      paths = paths.map(p => this.$__pathRelativeToParent(p)).filter(p => p != null);\n    } else if (!paths) {\n      paths = this.$__pathRelativeToParent();\n    }\n\n    return parent.$isModified(paths, options, modifiedPaths);\n  }\n\n  return Document.prototype.isModified.call(this, paths, options, modifiedPaths);\n};\n\n/**\n * Marks a path as valid, removing existing validation errors.\n *\n * @param {String} path the field to mark as valid\n * @api private\n * @method $markValid\n * @memberOf Subdocument\n */\n\nSubdocument.prototype.$markValid = function(path) {\n  Document.prototype.$markValid.call(this, path);\n  const parent = this.$parent();\n  const fullPath = this.$__pathRelativeToParent(path);\n  if (parent != null && fullPath != null) {\n    parent.$markValid(fullPath);\n  }\n};\n\n/*!\n * ignore\n */\n\nSubdocument.prototype.invalidate = function(path, err, val) {\n  Document.prototype.invalidate.call(this, path, err, val);\n\n  const parent = this.$parent();\n  const fullPath = this.$__pathRelativeToParent(path);\n  if (parent != null && fullPath != null) {\n    parent.invalidate(fullPath, err, val);\n  } else if (err.kind === 'cast' || err.name === 'CastError' || fullPath == null) {\n    throw err;\n  }\n\n  return this.ownerDocument().$__.validationError;\n};\n\n/*!\n * ignore\n */\n\nSubdocument.prototype.$ignore = function(path) {\n  Document.prototype.$ignore.call(this, path);\n  const parent = this.$parent();\n  const fullPath = this.$__pathRelativeToParent(path);\n  if (parent != null && fullPath != null) {\n    parent.$ignore(fullPath);\n  }\n};\n\n/**\n * Returns the top level document of this sub-document.\n *\n * @return {Document}\n */\n\nSubdocument.prototype.ownerDocument = function() {\n  if (this.$__.ownerDocument) {\n    return this.$__.ownerDocument;\n  }\n\n  let parent = this; // eslint-disable-line consistent-this\n  const paths = [];\n  const seenDocs = new Set([parent]);\n\n  while (true) {\n    if (typeof parent.$__pathRelativeToParent !== 'function') {\n      break;\n    }\n    paths.unshift(parent.$__pathRelativeToParent(void 0, true));\n    const _parent = parent.$parent();\n    if (_parent == null) {\n      break;\n    }\n    parent = _parent;\n    if (seenDocs.has(parent)) {\n      throw new Error('Infinite subdocument loop: subdoc with _id ' + parent._id + ' is a parent of itself');\n    }\n\n    seenDocs.add(parent);\n  }\n\n  this.$__.fullPath = paths.join('.');\n\n  this.$__.ownerDocument = parent;\n  return this.$__.ownerDocument;\n};\n\n/*!\n * ignore\n */\n\nSubdocument.prototype.$__fullPathWithIndexes = function() {\n  let parent = this; // eslint-disable-line consistent-this\n  const paths = [];\n  const seenDocs = new Set([parent]);\n\n  while (true) {\n    if (typeof parent.$__pathRelativeToParent !== 'function') {\n      break;\n    }\n    paths.unshift(parent.$__pathRelativeToParent(void 0, false));\n    const _parent = parent.$parent();\n    if (_parent == null) {\n      break;\n    }\n    parent = _parent;\n    if (seenDocs.has(parent)) {\n      throw new Error('Infinite subdocument loop: subdoc with _id ' + parent._id + ' is a parent of itself');\n    }\n\n    seenDocs.add(parent);\n  }\n\n  return paths.join('.');\n};\n\n/**\n * Returns this sub-documents parent document.\n *\n * @api public\n */\n\nSubdocument.prototype.parent = function() {\n  return this.$__parent;\n};\n\n/**\n * Returns this sub-documents parent document.\n *\n * @api public\n * @method $parent\n */\n\nSubdocument.prototype.$parent = Subdocument.prototype.parent;\n\n/**\n * no-op for hooks\n * @param {Function} cb\n * @method $__deleteOne\n * @memberOf Subdocument\n * @instance\n * @api private\n */\n\nSubdocument.prototype.$__deleteOne = function(cb) {\n  if (cb == null) {\n    return;\n  }\n  return cb(null, this);\n};\n\n/**\n * ignore\n * @method $__removeFromParent\n * @memberOf Subdocument\n * @instance\n * @api private\n */\n\nSubdocument.prototype.$__removeFromParent = function() {\n  this.$__parent.set(this.$basePath, null);\n};\n\n/**\n * Null-out this subdoc\n *\n * @param {Object} [options]\n * @param {Function} [callback] optional callback for compatibility with Document.prototype.remove\n */\n\nSubdocument.prototype.deleteOne = function(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n  registerRemoveListener(this);\n\n  // If removing entire doc, no need to remove subdoc\n  if (!options || !options.noop) {\n    this.$__removeFromParent();\n  }\n\n  return this.$__deleteOne(callback);\n};\n\n/*!\n * ignore\n */\n\nSubdocument.prototype.populate = function() {\n  throw new Error('Mongoose does not support calling populate() on nested ' +\n    'docs. Instead of `doc.nested.populate(\"path\")`, use ' +\n    '`doc.populate(\"nested.path\")`');\n};\n\n/**\n * Helper for console.log\n *\n * @api public\n */\n\nSubdocument.prototype.inspect = function() {\n  return this.toObject();\n};\n\nif (util.inspect.custom) {\n  // Avoid Node deprecation warning DEP0079\n  Subdocument.prototype[util.inspect.custom] = Subdocument.prototype.inspect;\n}\n\n/**\n * Registers remove event listeners for triggering\n * on subdocuments.\n *\n * @param {Subdocument} sub\n * @api private\n */\n\nfunction registerRemoveListener(sub) {\n  let owner = sub.ownerDocument();\n\n  function emitRemove() {\n    owner.$removeListener('save', emitRemove);\n    owner.$removeListener('deleteOne', emitRemove);\n    sub.emit('deleteOne', sub);\n    sub.constructor.emit('deleteOne', sub);\n    owner = sub = null;\n  }\n\n  owner.$on('save', emitRemove);\n  owner.$on('deleteOne', emitRemove);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/types/subdocument.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/types/uuid.js":
/*!*************************************************!*\
  !*** ./node_modules/mongoose/lib/types/uuid.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * UUID type constructor\n *\n * #### Example:\n *\n *     const id = new mongoose.Types.UUID();\n *\n * @constructor UUID\n */\n\n\n\nmodule.exports = __webpack_require__(/*! bson */ \"(ssr)/./node_modules/bson/lib/bson.cjs\").UUID;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3R5cGVzL3V1aWQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVhOztBQUViLCtGQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FpcnNvZnQvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3R5cGVzL3V1aWQuanM/MmRlZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVVSUQgdHlwZSBjb25zdHJ1Y3RvclxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3QgaWQgPSBuZXcgbW9uZ29vc2UuVHlwZXMuVVVJRCgpO1xuICpcbiAqIEBjb25zdHJ1Y3RvciBVVUlEXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ2Jzb24nKS5VVUlEO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/types/uuid.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/utils.js":
/*!********************************************!*\
  !*** ./node_modules/mongoose/lib/utils.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\n/*!\n * Module dependencies.\n */\n\nconst UUID = (__webpack_require__(/*! bson */ \"(ssr)/./node_modules/bson/lib/bson.cjs\").UUID);\nconst ms = __webpack_require__(/*! ms */ \"(ssr)/./node_modules/mongoose/node_modules/ms/index.js\");\nconst mpath = __webpack_require__(/*! mpath */ \"(ssr)/./node_modules/mpath/index.js\");\nconst ObjectId = __webpack_require__(/*! ./types/objectid */ \"(ssr)/./node_modules/mongoose/lib/types/objectid.js\");\nconst PopulateOptions = __webpack_require__(/*! ./options/populateOptions */ \"(ssr)/./node_modules/mongoose/lib/options/populateOptions.js\");\nconst clone = __webpack_require__(/*! ./helpers/clone */ \"(ssr)/./node_modules/mongoose/lib/helpers/clone.js\");\nconst immediate = __webpack_require__(/*! ./helpers/immediate */ \"(ssr)/./node_modules/mongoose/lib/helpers/immediate.js\");\nconst isObject = __webpack_require__(/*! ./helpers/isObject */ \"(ssr)/./node_modules/mongoose/lib/helpers/isObject.js\");\nconst isMongooseArray = __webpack_require__(/*! ./types/array/isMongooseArray */ \"(ssr)/./node_modules/mongoose/lib/types/array/isMongooseArray.js\");\nconst isMongooseDocumentArray = __webpack_require__(/*! ./types/documentArray/isMongooseDocumentArray */ \"(ssr)/./node_modules/mongoose/lib/types/documentArray/isMongooseDocumentArray.js\");\nconst isBsonType = __webpack_require__(/*! ./helpers/isBsonType */ \"(ssr)/./node_modules/mongoose/lib/helpers/isBsonType.js\");\nconst getFunctionName = __webpack_require__(/*! ./helpers/getFunctionName */ \"(ssr)/./node_modules/mongoose/lib/helpers/getFunctionName.js\");\nconst isMongooseObject = __webpack_require__(/*! ./helpers/isMongooseObject */ \"(ssr)/./node_modules/mongoose/lib/helpers/isMongooseObject.js\");\nconst promiseOrCallback = __webpack_require__(/*! ./helpers/promiseOrCallback */ \"(ssr)/./node_modules/mongoose/lib/helpers/promiseOrCallback.js\");\nconst schemaMerge = __webpack_require__(/*! ./helpers/schema/merge */ \"(ssr)/./node_modules/mongoose/lib/helpers/schema/merge.js\");\nconst specialProperties = __webpack_require__(/*! ./helpers/specialProperties */ \"(ssr)/./node_modules/mongoose/lib/helpers/specialProperties.js\");\nconst { trustedSymbol } = __webpack_require__(/*! ./helpers/query/trusted */ \"(ssr)/./node_modules/mongoose/lib/helpers/query/trusted.js\");\n\nlet Document;\n\nexports.specialProperties = specialProperties;\n\nexports.isMongooseArray = isMongooseArray.isMongooseArray;\nexports.isMongooseDocumentArray = isMongooseDocumentArray.isMongooseDocumentArray;\nexports.registerMongooseArray = isMongooseArray.registerMongooseArray;\nexports.registerMongooseDocumentArray = isMongooseDocumentArray.registerMongooseDocumentArray;\n\nconst oneSpaceRE = /\\s/;\nconst manySpaceRE = /\\s+/;\n\n/**\n * Produces a collection name from model `name`. By default, just returns\n * the model name\n *\n * @param {String} name a model name\n * @param {Function} pluralize function that pluralizes the collection name\n * @return {String} a collection name\n * @api private\n */\n\nexports.toCollectionName = function(name, pluralize) {\n  if (name === 'system.profile') {\n    return name;\n  }\n  if (name === 'system.indexes') {\n    return name;\n  }\n  if (typeof pluralize === 'function') {\n    return pluralize(name);\n  }\n  return name;\n};\n\n/**\n * Determines if `a` and `b` are deep equal.\n *\n * Modified from node/lib/assert.js\n *\n * @param {any} a a value to compare to `b`\n * @param {any} b a value to compare to `a`\n * @return {Boolean}\n * @api private\n */\n\nexports.deepEqual = function deepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (typeof a !== 'object' || typeof b !== 'object') {\n    return a === b;\n  }\n\n  if (a instanceof Date && b instanceof Date) {\n    return a.getTime() === b.getTime();\n  }\n\n  if ((isBsonType(a, 'ObjectId') && isBsonType(b, 'ObjectId')) ||\n      (isBsonType(a, 'Decimal128') && isBsonType(b, 'Decimal128'))) {\n    return a.toString() === b.toString();\n  }\n\n  if (a instanceof RegExp && b instanceof RegExp) {\n    return a.source === b.source &&\n        a.ignoreCase === b.ignoreCase &&\n        a.multiline === b.multiline &&\n        a.global === b.global &&\n        a.dotAll === b.dotAll &&\n        a.unicode === b.unicode &&\n        a.sticky === b.sticky &&\n        a.hasIndices === b.hasIndices;\n  }\n\n  if (a == null || b == null) {\n    return false;\n  }\n\n  if (a.prototype !== b.prototype) {\n    return false;\n  }\n\n  if (a instanceof Map || b instanceof Map) {\n    if (!(a instanceof Map) || !(b instanceof Map)) {\n      return false;\n    }\n    return deepEqual(Array.from(a.keys()), Array.from(b.keys())) &&\n      deepEqual(Array.from(a.values()), Array.from(b.values()));\n  }\n\n  // Handle MongooseNumbers\n  if (a instanceof Number && b instanceof Number) {\n    return a.valueOf() === b.valueOf();\n  }\n\n  if (Buffer.isBuffer(a)) {\n    return exports.buffer.areEqual(a, b);\n  }\n\n  if (Array.isArray(a) || Array.isArray(b)) {\n    if (!Array.isArray(a) || !Array.isArray(b)) {\n      return false;\n    }\n    const len = a.length;\n    if (len !== b.length) {\n      return false;\n    }\n    for (let i = 0; i < len; ++i) {\n      if (!deepEqual(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (a.$__ != null) {\n    a = a._doc;\n  } else if (isMongooseObject(a)) {\n    a = a.toObject();\n  }\n\n  if (b.$__ != null) {\n    b = b._doc;\n  } else if (isMongooseObject(b)) {\n    b = b.toObject();\n  }\n\n  const ka = Object.keys(a);\n  const kb = Object.keys(b);\n  const kaLength = ka.length;\n\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (kaLength !== kb.length) {\n    return false;\n  }\n\n  // ~~~cheap key test\n  for (let i = kaLength - 1; i >= 0; i--) {\n    if (ka[i] !== kb[i]) {\n      return false;\n    }\n  }\n\n  // equivalent values for every corresponding key, and\n  // ~~~possibly expensive deep test\n  for (const key of ka) {\n    if (!deepEqual(a[key], b[key])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Get the last element of an array\n * @param {Array} arr\n */\n\nexports.last = function(arr) {\n  if (arr.length > 0) {\n    return arr[arr.length - 1];\n  }\n  return void 0;\n};\n\n/*!\n * ignore\n */\n\nexports.promiseOrCallback = promiseOrCallback;\n\n/*!\n * ignore\n */\n\nexports.cloneArrays = function cloneArrays(arr) {\n  if (!Array.isArray(arr)) {\n    return arr;\n  }\n\n  return arr.map(el => exports.cloneArrays(el));\n};\n\n/*!\n * ignore\n */\n\nexports.omit = function omit(obj, keys) {\n  if (keys == null) {\n    return Object.assign({}, obj);\n  }\n  if (!Array.isArray(keys)) {\n    keys = [keys];\n  }\n\n  const ret = Object.assign({}, obj);\n  for (const key of keys) {\n    delete ret[key];\n  }\n  return ret;\n};\n\n/**\n * Merges `from` into `to` without overwriting existing properties.\n *\n * @param {Object} to\n * @param {Object} from\n * @param {Object} [options]\n * @param {String} [path]\n * @api private\n */\n\nexports.merge = function merge(to, from, options, path) {\n  options = options || {};\n\n  const keys = Object.keys(from);\n  let i = 0;\n  const len = keys.length;\n  let key;\n\n  if (from[trustedSymbol]) {\n    to[trustedSymbol] = from[trustedSymbol];\n  }\n\n  path = path || '';\n  const omitNested = options.omitNested || {};\n\n  while (i < len) {\n    key = keys[i++];\n    if (options.omit && options.omit[key]) {\n      continue;\n    }\n    if (omitNested[path]) {\n      continue;\n    }\n    if (specialProperties.has(key)) {\n      continue;\n    }\n    if (to[key] == null) {\n      to[key] = from[key];\n    } else if (exports.isObject(from[key])) {\n      if (!exports.isObject(to[key])) {\n        to[key] = {};\n      }\n      if (from[key] != null) {\n        // Skip merging schemas if we're creating a discriminator schema and\n        // base schema has a given path as a single nested but discriminator schema\n        // has the path as a document array, or vice versa (gh-9534)\n        if (options.isDiscriminatorSchemaMerge &&\n            (from[key].$isSingleNested && to[key].$isMongooseDocumentArray) ||\n            (from[key].$isMongooseDocumentArray && to[key].$isSingleNested)) {\n          continue;\n        } else if (from[key].instanceOfSchema) {\n          if (to[key].instanceOfSchema) {\n            schemaMerge(to[key], from[key].clone(), options.isDiscriminatorSchemaMerge);\n          } else {\n            to[key] = from[key].clone();\n          }\n          continue;\n        } else if (isBsonType(from[key], 'ObjectId')) {\n          to[key] = new ObjectId(from[key]);\n          continue;\n        }\n      }\n      merge(to[key], from[key], options, path ? path + '.' + key : key);\n    } else if (options.overwrite) {\n      to[key] = from[key];\n    }\n  }\n};\n\n/**\n * Applies toObject recursively.\n *\n * @param {Document|Array|Object} obj\n * @return {Object}\n * @api private\n */\n\nexports.toObject = function toObject(obj) {\n  Document || (Document = __webpack_require__(/*! ./document */ \"(ssr)/./node_modules/mongoose/lib/document.js\"));\n  let ret;\n\n  if (obj == null) {\n    return obj;\n  }\n\n  if (obj instanceof Document) {\n    return obj.toObject();\n  }\n\n  if (Array.isArray(obj)) {\n    ret = [];\n\n    for (const doc of obj) {\n      ret.push(toObject(doc));\n    }\n\n    return ret;\n  }\n\n  if (exports.isPOJO(obj)) {\n    ret = {};\n\n    if (obj[trustedSymbol]) {\n      ret[trustedSymbol] = obj[trustedSymbol];\n    }\n\n    for (const k of Object.keys(obj)) {\n      if (specialProperties.has(k)) {\n        continue;\n      }\n      ret[k] = toObject(obj[k]);\n    }\n\n    return ret;\n  }\n\n  return obj;\n};\n\nexports.isObject = isObject;\n\n/**\n * Determines if `arg` is a plain old JavaScript object (POJO). Specifically,\n * `arg` must be an object but not an instance of any special class, like String,\n * ObjectId, etc.\n *\n * `Object.getPrototypeOf()` is part of ES5: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\n *\n * @param {Object|Array|String|Function|RegExp|any} arg\n * @api private\n * @return {Boolean}\n */\n\nexports.isPOJO = __webpack_require__(/*! ./helpers/isPOJO */ \"(ssr)/./node_modules/mongoose/lib/helpers/isPOJO.js\");\n\n/**\n * Determines if `arg` is an object that isn't an instance of a built-in value\n * class, like Array, Buffer, ObjectId, etc.\n * @param {Any} val\n */\n\nexports.isNonBuiltinObject = function isNonBuiltinObject(val) {\n  return typeof val === 'object' &&\n    !exports.isNativeObject(val) &&\n    !exports.isMongooseType(val) &&\n    !(val instanceof UUID) &&\n    val != null;\n};\n\n/**\n * Determines if `obj` is a built-in object like an array, date, boolean,\n * etc.\n * @param {Any} arg\n */\n\nexports.isNativeObject = function(arg) {\n  return Array.isArray(arg) ||\n    arg instanceof Date ||\n    arg instanceof Boolean ||\n    arg instanceof Number ||\n    arg instanceof String;\n};\n\n/**\n * Determines if `val` is an object that has no own keys\n * @param {Any} val\n */\n\nexports.isEmptyObject = function(val) {\n  return val != null &&\n    typeof val === 'object' &&\n    Object.keys(val).length === 0;\n};\n\n/**\n * Search if `obj` or any POJOs nested underneath `obj` has a property named\n * `key`\n * @param {Object} obj\n * @param {String} key\n */\n\nexports.hasKey = function hasKey(obj, key) {\n  const props = Object.keys(obj);\n  for (const prop of props) {\n    if (prop === key) {\n      return true;\n    }\n    if (exports.isPOJO(obj[prop]) && exports.hasKey(obj[prop], key)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * process.nextTick helper.\n *\n * Wraps `callback` in a try/catch + nextTick.\n *\n * node-mongodb-native has a habit of state corruption when an error is immediately thrown from within a collection callback.\n *\n * @param {Function} callback\n * @api private\n */\n\nexports.tick = function tick(callback) {\n  if (typeof callback !== 'function') {\n    return;\n  }\n  return function() {\n    try {\n      callback.apply(this, arguments);\n    } catch (err) {\n      // only nextTick on err to get out of\n      // the event loop and avoid state corruption.\n      immediate(function() {\n        throw err;\n      });\n    }\n  };\n};\n\n/**\n * Returns true if `v` is an object that can be serialized as a primitive in\n * MongoDB\n * @param {Any} v\n */\n\nexports.isMongooseType = function(v) {\n  return isBsonType(v, 'ObjectId') || isBsonType(v, 'Decimal128') || v instanceof Buffer;\n};\n\nexports.isMongooseObject = isMongooseObject;\n\n/**\n * Converts `expires` options of index objects to `expiresAfterSeconds` options for MongoDB.\n *\n * @param {Object} object\n * @api private\n */\n\nexports.expires = function expires(object) {\n  if (!(object && object.constructor.name === 'Object')) {\n    return;\n  }\n  if (!('expires' in object)) {\n    return;\n  }\n\n  object.expireAfterSeconds = (typeof object.expires !== 'string')\n    ? object.expires\n    : Math.round(ms(object.expires) / 1000);\n  delete object.expires;\n};\n\n/**\n * populate helper\n * @param {String} path\n * @param {String} select\n * @param {Model} model\n * @param {Object} match\n * @param {Object} options\n * @param {Any} subPopulate\n * @param {Boolean} justOne\n * @param {Boolean} count\n */\n\nexports.populate = function populate(path, select, model, match, options, subPopulate, justOne, count) {\n  // might have passed an object specifying all arguments\n  let obj = null;\n  if (arguments.length === 1) {\n    if (path instanceof PopulateOptions) {\n      // If reusing old populate docs, avoid reusing `_docs` because that may\n      // lead to bugs and memory leaks. See gh-11641\n      path._docs = [];\n      path._childDocs = [];\n      return [path];\n    }\n\n    if (Array.isArray(path)) {\n      const singles = makeSingles(path);\n      return singles.map(o => exports.populate(o)[0]);\n    }\n\n    if (exports.isObject(path)) {\n      obj = Object.assign({}, path);\n    } else {\n      obj = { path: path };\n    }\n  } else if (typeof model === 'object') {\n    obj = {\n      path: path,\n      select: select,\n      match: model,\n      options: match\n    };\n  } else {\n    obj = {\n      path: path,\n      select: select,\n      model: model,\n      match: match,\n      options: options,\n      populate: subPopulate,\n      justOne: justOne,\n      count: count\n    };\n  }\n\n  if (typeof obj.path !== 'string') {\n    throw new TypeError('utils.populate: invalid path. Expected string. Got typeof `' + typeof path + '`');\n  }\n\n  return _populateObj(obj);\n\n  // The order of select/conditions args is opposite Model.find but\n  // necessary to keep backward compatibility (select could be\n  // an array, string, or object literal).\n  function makeSingles(arr) {\n    const ret = [];\n    arr.forEach(function(obj) {\n      if (oneSpaceRE.test(obj.path)) {\n        const paths = obj.path.split(manySpaceRE);\n        paths.forEach(function(p) {\n          const copy = Object.assign({}, obj);\n          copy.path = p;\n          ret.push(copy);\n        });\n      } else {\n        ret.push(obj);\n      }\n    });\n\n    return ret;\n  }\n};\n\nfunction _populateObj(obj) {\n  if (Array.isArray(obj.populate)) {\n    const ret = [];\n    obj.populate.forEach(function(obj) {\n      if (oneSpaceRE.test(obj.path)) {\n        const copy = Object.assign({}, obj);\n        const paths = copy.path.split(manySpaceRE);\n        paths.forEach(function(p) {\n          copy.path = p;\n          ret.push(exports.populate(copy)[0]);\n        });\n      } else {\n        ret.push(exports.populate(obj)[0]);\n      }\n    });\n    obj.populate = exports.populate(ret);\n  } else if (obj.populate != null && typeof obj.populate === 'object') {\n    obj.populate = exports.populate(obj.populate);\n  }\n\n  const ret = [];\n  const paths = oneSpaceRE.test(obj.path) ? obj.path.split(manySpaceRE) : [obj.path];\n  if (obj.options != null) {\n    obj.options = clone(obj.options);\n  }\n\n  for (const path of paths) {\n    ret.push(new PopulateOptions(Object.assign({}, obj, { path: path })));\n  }\n\n  return ret;\n}\n\n/**\n * Return the value of `obj` at the given `path`.\n *\n * @param {String} path\n * @param {Object} obj\n * @param {Any} map\n */\n\nexports.getValue = function(path, obj, map) {\n  return mpath.get(path, obj, getValueLookup, map);\n};\n\n/*!\n * ignore\n */\n\nconst mapGetterOptions = Object.freeze({ getters: false });\n\nfunction getValueLookup(obj, part) {\n  let _from = obj?._doc || obj;\n  if (_from != null && _from.isMongooseArrayProxy) {\n    _from = _from.__array;\n  }\n  return _from instanceof Map ?\n    _from.get(part, mapGetterOptions) :\n    _from[part];\n}\n\n/**\n * Sets the value of `obj` at the given `path`.\n *\n * @param {String} path\n * @param {Anything} val\n * @param {Object} obj\n * @param {Any} map\n * @param {Any} _copying\n */\n\nexports.setValue = function(path, val, obj, map, _copying) {\n  mpath.set(path, val, obj, '_doc', map, _copying);\n};\n\n/**\n * Returns an array of values from object `o`.\n *\n * @param {Object} o\n * @return {Array}\n * @api private\n */\n\nexports.object = {};\nexports.object.vals = function vals(o) {\n  const keys = Object.keys(o);\n  let i = keys.length;\n  const ret = [];\n\n  while (i--) {\n    ret.push(o[keys[i]]);\n  }\n\n  return ret;\n};\n\nconst hop = Object.prototype.hasOwnProperty;\n\n/**\n * Safer helper for hasOwnProperty checks\n *\n * @param {Object} obj\n * @param {String} prop\n */\n\nexports.object.hasOwnProperty = function(obj, prop) {\n  return hop.call(obj, prop);\n};\n\n/**\n * Determine if `val` is null or undefined\n *\n * @param {Any} val\n * @return {Boolean}\n */\n\nexports.isNullOrUndefined = function(val) {\n  return val === null || val === undefined;\n};\n\n/*!\n * ignore\n */\n\nexports.array = {};\n\n/**\n * Flattens an array.\n *\n * [ 1, [ 2, 3, [4] ]] -> [1,2,3,4]\n *\n * @param {Array} arr\n * @param {Function} [filter] If passed, will be invoked with each item in the array. If `filter` returns a falsy value, the item will not be included in the results.\n * @param {Array} ret\n * @return {Array}\n * @api private\n */\n\nexports.array.flatten = function flatten(arr, filter, ret) {\n  ret || (ret = []);\n\n  arr.forEach(function(item) {\n    if (Array.isArray(item)) {\n      flatten(item, filter, ret);\n    } else {\n      if (!filter || filter(item)) {\n        ret.push(item);\n      }\n    }\n  });\n\n  return ret;\n};\n\n/*!\n * ignore\n */\n\nconst _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nexports.hasUserDefinedProperty = function(obj, key) {\n  if (obj == null) {\n    return false;\n  }\n\n  if (Array.isArray(key)) {\n    for (const k of key) {\n      if (exports.hasUserDefinedProperty(obj, k)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  if (_hasOwnProperty.call(obj, key)) {\n    return true;\n  }\n  if (typeof obj === 'object' && key in obj) {\n    const v = obj[key];\n    return v !== Object.prototype[key] && v !== Array.prototype[key];\n  }\n\n  return false;\n};\n\n/*!\n * ignore\n */\n\nconst MAX_ARRAY_INDEX = Math.pow(2, 32) - 1;\n\nexports.isArrayIndex = function(val) {\n  if (typeof val === 'number') {\n    return val >= 0 && val <= MAX_ARRAY_INDEX;\n  }\n  if (typeof val === 'string') {\n    if (!/^\\d+$/.test(val)) {\n      return false;\n    }\n    val = +val;\n    return val >= 0 && val <= MAX_ARRAY_INDEX;\n  }\n\n  return false;\n};\n\n/**\n * Removes duplicate values from an array\n *\n * [1, 2, 3, 3, 5] => [1, 2, 3, 5]\n * [ ObjectId(\"550988ba0c19d57f697dc45e\"), ObjectId(\"550988ba0c19d57f697dc45e\") ]\n *    => [ObjectId(\"550988ba0c19d57f697dc45e\")]\n *\n * @param {Array} arr\n * @return {Array}\n * @api private\n */\n\nexports.array.unique = function(arr) {\n  const primitives = new Set();\n  const ids = new Set();\n  const ret = [];\n\n  for (const item of arr) {\n    if (typeof item === 'number' || typeof item === 'string' || item == null) {\n      if (primitives.has(item)) {\n        continue;\n      }\n      ret.push(item);\n      primitives.add(item);\n    } else if (isBsonType(item, 'ObjectId')) {\n      if (ids.has(item.toString())) {\n        continue;\n      }\n      ret.push(item);\n      ids.add(item.toString());\n    } else {\n      ret.push(item);\n    }\n  }\n\n  return ret;\n};\n\nexports.buffer = {};\n\n/**\n * Determines if two buffers are equal.\n *\n * @param {Buffer} a\n * @param {Object} b\n */\n\nexports.buffer.areEqual = function(a, b) {\n  if (!Buffer.isBuffer(a)) {\n    return false;\n  }\n  if (!Buffer.isBuffer(b)) {\n    return false;\n  }\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (let i = 0, len = a.length; i < len; ++i) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexports.getFunctionName = getFunctionName;\n\n/**\n * Decorate buffers\n * @param {Object} destination\n * @param {Object} source\n */\n\nexports.decorate = function(destination, source) {\n  for (const key in source) {\n    if (specialProperties.has(key)) {\n      continue;\n    }\n    destination[key] = source[key];\n  }\n};\n\n/**\n * merges to with a copy of from\n *\n * @param {Object} to\n * @param {Object} fromObj\n * @api private\n */\n\nexports.mergeClone = function(to, fromObj) {\n  if (isMongooseObject(fromObj)) {\n    fromObj = fromObj.toObject({\n      transform: false,\n      virtuals: false,\n      depopulate: true,\n      getters: false,\n      flattenDecimals: false\n    });\n  }\n  const keys = Object.keys(fromObj);\n  const len = keys.length;\n  let i = 0;\n  let key;\n\n  while (i < len) {\n    key = keys[i++];\n    if (specialProperties.has(key)) {\n      continue;\n    }\n    if (typeof to[key] === 'undefined') {\n      to[key] = clone(fromObj[key], {\n        transform: false,\n        virtuals: false,\n        depopulate: true,\n        getters: false,\n        flattenDecimals: false\n      });\n    } else {\n      let val = fromObj[key];\n      if (val != null && val.valueOf && !(val instanceof Date)) {\n        val = val.valueOf();\n      }\n      if (exports.isObject(val)) {\n        let obj = val;\n        if (isMongooseObject(val) && !val.isMongooseBuffer) {\n          obj = obj.toObject({\n            transform: false,\n            virtuals: false,\n            depopulate: true,\n            getters: false,\n            flattenDecimals: false\n          });\n        }\n        if (val.isMongooseBuffer) {\n          obj = Buffer.from(obj);\n        }\n        exports.mergeClone(to[key], obj);\n      } else {\n        to[key] = clone(val, {\n          flattenDecimals: false\n        });\n      }\n    }\n  }\n};\n\n/**\n * Executes a function on each element of an array (like _.each)\n *\n * @param {Array} arr\n * @param {Function} fn\n * @api private\n */\n\nexports.each = function(arr, fn) {\n  for (const item of arr) {\n    fn(item);\n  }\n};\n\n/**\n * Rename an object key, while preserving its position in the object\n *\n * @param {Object} oldObj\n * @param {String|Number} oldKey\n * @param {String|Number} newKey\n * @api private\n */\nexports.renameObjKey = function(oldObj, oldKey, newKey) {\n  const keys = Object.keys(oldObj);\n  return keys.reduce(\n    (acc, val) => {\n      if (val === oldKey) {\n        acc[newKey] = oldObj[oldKey];\n      } else {\n        acc[val] = oldObj[val];\n      }\n      return acc;\n    },\n    {}\n  );\n};\n\n/*!\n * ignore\n */\n\nexports.getOption = function(name) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n\n  for (const source of sources) {\n    if (source == null) {\n      continue;\n    }\n    if (source[name] != null) {\n      return source[name];\n    }\n  }\n\n  return null;\n};\n\n/*!\n * ignore\n */\n\nexports.noop = function() {};\n\nexports.errorToPOJO = function errorToPOJO(error) {\n  const isError = error instanceof Error;\n  if (!isError) {\n    throw new Error('`error` must be `instanceof Error`.');\n  }\n\n  const ret = {};\n  for (const properyName of Object.getOwnPropertyNames(error)) {\n    ret[properyName] = error[properyName];\n  }\n  return ret;\n};\n\n/*!\n * ignore\n */\n\nexports.warn = function warn(message) {\n  return process.emitWarning(message, { code: 'MONGOOSE' });\n};\n\n\nexports.injectTimestampsOption = function injectTimestampsOption(writeOperation, timestampsOption) {\n  if (timestampsOption == null) {\n    return;\n  }\n  writeOperation.timestamps = timestampsOption;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/validOptions.js":
/*!***************************************************!*\
  !*** ./node_modules/mongoose/lib/validOptions.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";
eval("\n/*!\n * Valid mongoose options\n */\n\n\n\nconst VALID_OPTIONS = Object.freeze([\n  'allowDiskUse',\n  'applyPluginsToChildSchemas',\n  'applyPluginsToDiscriminators',\n  'autoCreate',\n  'autoIndex',\n  'autoSearchIndex',\n  'bufferCommands',\n  'bufferTimeoutMS',\n  'cloneSchemas',\n  'debug',\n  'id',\n  'timestamps.createdAt.immutable',\n  'maxTimeMS',\n  'objectIdGetter',\n  'overwriteModels',\n  'returnOriginal',\n  'runValidators',\n  'sanitizeFilter',\n  'sanitizeProjection',\n  'selectPopulatedPaths',\n  'setDefaultsOnInsert',\n  'strict',\n  'strictPopulate',\n  'strictQuery',\n  'toJSON',\n  'toObject',\n  'translateAliases'\n]);\n\nmodule.exports = VALID_OPTIONS;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2UvbGliL3ZhbGlkT3B0aW9ucy5qcyIsIm1hcHBpbmdzIjoiO0FBQ0E7QUFDQTtBQUNBOztBQUVhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJzb2Z0Ly4vbm9kZV9tb2R1bGVzL21vbmdvb3NlL2xpYi92YWxpZE9wdGlvbnMuanM/Y2Q2NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qIVxuICogVmFsaWQgbW9uZ29vc2Ugb3B0aW9uc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgVkFMSURfT1BUSU9OUyA9IE9iamVjdC5mcmVlemUoW1xuICAnYWxsb3dEaXNrVXNlJyxcbiAgJ2FwcGx5UGx1Z2luc1RvQ2hpbGRTY2hlbWFzJyxcbiAgJ2FwcGx5UGx1Z2luc1RvRGlzY3JpbWluYXRvcnMnLFxuICAnYXV0b0NyZWF0ZScsXG4gICdhdXRvSW5kZXgnLFxuICAnYXV0b1NlYXJjaEluZGV4JyxcbiAgJ2J1ZmZlckNvbW1hbmRzJyxcbiAgJ2J1ZmZlclRpbWVvdXRNUycsXG4gICdjbG9uZVNjaGVtYXMnLFxuICAnZGVidWcnLFxuICAnaWQnLFxuICAndGltZXN0YW1wcy5jcmVhdGVkQXQuaW1tdXRhYmxlJyxcbiAgJ21heFRpbWVNUycsXG4gICdvYmplY3RJZEdldHRlcicsXG4gICdvdmVyd3JpdGVNb2RlbHMnLFxuICAncmV0dXJuT3JpZ2luYWwnLFxuICAncnVuVmFsaWRhdG9ycycsXG4gICdzYW5pdGl6ZUZpbHRlcicsXG4gICdzYW5pdGl6ZVByb2plY3Rpb24nLFxuICAnc2VsZWN0UG9wdWxhdGVkUGF0aHMnLFxuICAnc2V0RGVmYXVsdHNPbkluc2VydCcsXG4gICdzdHJpY3QnLFxuICAnc3RyaWN0UG9wdWxhdGUnLFxuICAnc3RyaWN0UXVlcnknLFxuICAndG9KU09OJyxcbiAgJ3RvT2JqZWN0JyxcbiAgJ3RyYW5zbGF0ZUFsaWFzZXMnXG5dKTtcblxubW9kdWxlLmV4cG9ydHMgPSBWQUxJRF9PUFRJT05TO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/validOptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/lib/virtualType.js":
/*!**************************************************!*\
  !*** ./node_modules/mongoose/lib/virtualType.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongoose/lib/utils.js\");\n\n/**\n * VirtualType constructor\n *\n * This is what mongoose uses to define virtual attributes via `Schema.prototype.virtual`.\n *\n * #### Example:\n *\n *     const fullname = schema.virtual('fullname');\n *     fullname instanceof mongoose.VirtualType // true\n *\n * @param {Object} options\n * @param {String|Function} [options.ref] if `ref` is not nullish, this becomes a [populated virtual](https://mongoosejs.com/docs/populate.html#populate-virtuals)\n * @param {String|Function} [options.localField] the local field to populate on if this is a populated virtual.\n * @param {String|Function} [options.foreignField] the foreign field to populate on if this is a populated virtual.\n * @param {Boolean} [options.justOne=false] by default, a populated virtual is an array. If you set `justOne`, the populated virtual will be a single doc or `null`.\n * @param {Boolean} [options.getters=false] if you set this to `true`, Mongoose will call any custom getters you defined on this virtual\n * @param {Boolean} [options.count=false] if you set this to `true`, `populate()` will set this virtual to the number of populated documents, as opposed to the documents themselves, using [`Query#countDocuments()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.countDocuments())\n * @param {Object|Function} [options.match=null] add an extra match condition to `populate()`\n * @param {Number} [options.limit=null] add a default `limit` to the `populate()` query\n * @param {Number} [options.skip=null] add a default `skip` to the `populate()` query\n * @param {Number} [options.perDocumentLimit=null] For legacy reasons, `limit` with `populate()` may give incorrect results because it only executes a single query for every document being populated. If you set `perDocumentLimit`, Mongoose will ensure correct `limit` per document by executing a separate query for each document to `populate()`. For example, `.find().populate({ path: 'test', perDocumentLimit: 2 })` will execute 2 additional queries if `.find()` returns 2 documents.\n * @param {Object} [options.options=null] Additional options like `limit` and `lean`.\n * @param {String} name\n * @api public\n */\n\nfunction VirtualType(options, name) {\n  this.path = name;\n  this.getters = [];\n  this.setters = [];\n  this.options = Object.assign({}, options);\n}\n\n/**\n * If no getters/setters, add a default\n *\n * @api private\n */\n\nVirtualType.prototype._applyDefaultGetters = function() {\n  if (this.getters.length > 0 || this.setters.length > 0) {\n    return;\n  }\n\n  const path = this.path;\n  const internalProperty = '$' + path;\n  this.getters.push(function() {\n    return this.$locals[internalProperty];\n  });\n  this.setters.push(function(v) {\n    this.$locals[internalProperty] = v;\n  });\n};\n\n/*!\n * ignore\n */\n\nVirtualType.prototype.clone = function() {\n  const clone = new VirtualType(this.options, this.path);\n  clone.getters = [].concat(this.getters);\n  clone.setters = [].concat(this.setters);\n  return clone;\n};\n\n/**\n * Adds a custom getter to this virtual.\n *\n * Mongoose calls the getter function with the below 3 parameters.\n *\n * - `value`: the value returned by the previous getter. If there is only one getter, `value` will be `undefined`.\n * - `virtual`: the virtual object you called `.get()` on.\n * - `doc`: the document this virtual is attached to. Equivalent to `this`.\n *\n * #### Example:\n *\n *     const virtual = schema.virtual('fullname');\n *     virtual.get(function(value, virtual, doc) {\n *       return this.name.first + ' ' + this.name.last;\n *     });\n *\n * @param {Function} fn\n * @return {VirtualType} this\n * @api public\n */\n\nVirtualType.prototype.get = function(fn) {\n  this.getters.push(fn);\n  return this;\n};\n\n/**\n * Adds a custom setter to this virtual.\n *\n * Mongoose calls the setter function with the below 3 parameters.\n *\n * - `value`: the value being set.\n * - `virtual`: the virtual object you're calling `.set()` on.\n * - `doc`: the document this virtual is attached to. Equivalent to `this`.\n *\n * #### Example:\n *\n *     const virtual = schema.virtual('fullname');\n *     virtual.set(function(value, virtual, doc) {\n *       const parts = value.split(' ');\n *       this.name.first = parts[0];\n *       this.name.last = parts[1];\n *     });\n *\n *     const Model = mongoose.model('Test', schema);\n *     const doc = new Model();\n *     // Calls the setter with `value = 'Jean-Luc Picard'`\n *     doc.fullname = 'Jean-Luc Picard';\n *     doc.name.first; // 'Jean-Luc'\n *     doc.name.last; // 'Picard'\n *\n * @param {Function} fn\n * @return {VirtualType} this\n * @api public\n */\n\nVirtualType.prototype.set = function(fn) {\n  this.setters.push(fn);\n  return this;\n};\n\n/**\n * Applies getters to `value`.\n *\n * @param {Object} value\n * @param {Document} doc The document this virtual is attached to\n * @return {Any} the value after applying all getters\n * @api public\n */\n\nVirtualType.prototype.applyGetters = function(value, doc) {\n  if (utils.hasUserDefinedProperty(this.options, ['ref', 'refPath']) &&\n      doc.$$populatedVirtuals &&\n      doc.$$populatedVirtuals.hasOwnProperty(this.path)) {\n    value = doc.$$populatedVirtuals[this.path];\n  }\n\n  let v = value;\n  for (const getter of this.getters) {\n    v = getter.call(doc, v, this, doc);\n  }\n  return v;\n};\n\n/**\n * Applies setters to `value`.\n *\n * @param {Object} value\n * @param {Document} doc\n * @return {Any} the value after applying all setters\n * @api public\n */\n\nVirtualType.prototype.applySetters = function(value, doc) {\n  let v = value;\n  for (const setter of this.setters) {\n    v = setter.call(doc, v, this, doc);\n  }\n  return v;\n};\n\n/*!\n * exports\n */\n\nmodule.exports = VirtualType;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/lib/virtualType.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/node_modules/ms/index.js":
/*!********************************************************!*\
  !*** ./node_modules/mongoose/node_modules/ms/index.js ***!
  \********************************************************/
/***/ ((module) => {

eval("/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29vc2Uvbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUIsV0FBVyxRQUFRO0FBQ25CLFlBQVksT0FBTztBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWlyc29mdC8uL25vZGVfbW9kdWxlcy9tb25nb29zZS9ub2RlX21vZHVsZXMvbXMvaW5kZXguanM/MzE5YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHcgPSBkICogNztcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzRmluaXRlKHZhbCkpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5sb25nID8gZm10TG9uZyh2YWwpIDogZm10U2hvcnQodmFsKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3ZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9JyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICk7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBgc3RyYCBhbmQgcmV0dXJuIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChzdHIubGVuZ3RoID4gMTAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBtYXRjaCA9IC9eKC0/KD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx3ZWVrcz98d3x5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnd2Vla3MnOlxuICAgIGNhc2UgJ3dlZWsnOlxuICAgIGNhc2UgJ3cnOlxuICAgICAgcmV0dXJuIG4gKiB3O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBkLCAnZGF5Jyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgaCwgJ2hvdXInKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBtLCAnbWludXRlJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgcywgJ3NlY29uZCcpO1xuICB9XG4gIHJldHVybiBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbXNBYnMsIG4sIG5hbWUpIHtcbiAgdmFyIGlzUGx1cmFsID0gbXNBYnMgPj0gbiAqIDEuNTtcbiAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBuKSArICcgJyArIG5hbWUgKyAoaXNQbHVyYWwgPyAncycgOiAnJyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongoose/node_modules/ms/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongoose/package.json":
/*!********************************************!*\
  !*** ./node_modules/mongoose/package.json ***!
  \********************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"8.2.1","author":"Guillermo Rauch <guillermo@learnboost.com>","keywords":["mongodb","document","model","schema","database","odm","data","datastore","query","nosql","orm","db"],"license":"MIT","dependencies":{"bson":"^6.2.0","kareem":"2.5.1","mongodb":"6.3.0","mpath":"0.9.0","mquery":"5.0.0","ms":"2.1.3","sift":"16.0.1"},"devDependencies":{"@babel/core":"7.24.0","@babel/preset-env":"7.24.0","@typescript-eslint/eslint-plugin":"^6.2.1","@typescript-eslint/parser":"^6.2.1","acquit":"1.3.0","acquit-ignore":"0.2.1","acquit-require":"0.1.1","assert-browserify":"2.0.0","axios":"1.1.3","babel-loader":"8.2.5","benchmark":"2.1.4","broken-link-checker":"^0.7.8","buffer":"^5.6.0","cheerio":"1.0.0-rc.12","crypto-browserify":"3.12.0","dotenv":"16.4.5","dox":"1.0.0","eslint":"8.57.0","eslint-plugin-markdown":"^3.0.1","eslint-plugin-mocha-no-only":"1.1.1","express":"^4.18.1","fs-extra":"~11.2.0","highlight.js":"11.8.0","lodash.isequal":"4.5.0","lodash.isequalwith":"4.4.0","markdownlint-cli2":"^0.12.1","marked":"4.3.0","mkdirp":"^3.0.1","mocha":"10.3.0","moment":"2.x","mongodb-memory-server":"8.15.1","ncp":"^2.0.0","nyc":"15.1.0","pug":"3.0.2","q":"1.5.1","sinon":"17.0.1","stream-browserify":"3.0.0","tsd":"0.30.7","typescript":"5.3.3","uuid":"9.0.1","webpack":"5.90.3"},"directories":{"lib":"./lib/mongoose"},"scripts":{"docs:clean":"npm run docs:clean:stable","docs:clean:stable":"rimraf index.html && rimraf -rf ./docs/*.html  && rimraf -rf ./docs/api && rimraf -rf ./docs/tutorials/*.html && rimraf -rf ./docs/typescript/*.html && rimraf -rf ./docs/*.html && rimraf -rf ./docs/source/_docs && rimraf -rf ./tmp","docs:clean:5x":"rimraf index.html && rimraf -rf ./docs/5.x && rimraf -rf ./docs/source/_docs && rimraf -rf ./tmp","docs:clean:6x":"rimraf index.html && rimraf -rf ./docs/6.x && rimraf -rf ./docs/source/_docs && rimraf -rf ./tmp","docs:copy:tmp":"mkdirp ./tmp/docs/css && mkdirp ./tmp/docs/js && mkdirp ./tmp/docs/images && mkdirp ./tmp/docs/tutorials && mkdirp ./tmp/docs/typescript && mkdirp ./tmp/docs/api && ncp ./docs/css ./tmp/docs/css --filter=.css$ && ncp ./docs/js ./tmp/docs/js --filter=.js$ && ncp ./docs/images ./tmp/docs/images && ncp ./docs/tutorials ./tmp/docs/tutorials && ncp ./docs/typescript ./tmp/docs/typescript && ncp ./docs/api ./tmp/docs/api && cp index.html ./tmp && cp docs/*.html ./tmp/docs/","docs:copy:tmp:5x":"rimraf ./docs/5.x && ncp ./tmp ./docs/5.x","docs:move:6x:tmp":"mv ./docs/6.x ./tmp","docs:copy:tmp:6x":"rimraf ./docs/6.x && ncp ./tmp ./docs/6.x","docs:checkout:gh-pages":"git checkout gh-pages","docs:checkout:5x":"git checkout 5.x","docs:checkout:6x":"git checkout 6.x","docs:generate":"node ./scripts/website.js","docs:generate:search":"node ./scripts/generateSearch.js","docs:generate:sponsorData":"node ./scripts/loadSponsorData.js","docs:merge:stable":"git merge master","docs:merge:5x":"git merge 5.x","docs:merge:6x":"git merge 6.x","docs:test":"npm run docs:generate && npm run docs:generate:search","docs:view":"node ./scripts/static.js","docs:prepare:publish:stable":"npm run docs:checkout:gh-pages && npm run docs:merge:stable && npm run docs:generate && npm run docs:generate:search","docs:prepare:publish:5x":"npm run docs:checkout:5x && npm run docs:merge:5x && npm run docs:clean:stable && npm run docs:generate && npm run docs:copy:tmp && npm run docs:checkout:gh-pages && npm run docs:copy:tmp:5x","docs:prepare:publish:6x":"npm run docs:checkout:6x && npm run docs:merge:6x && npm run docs:clean:stable && env DOCS_DEPLOY=true npm run docs:generate && npm run docs:move:6x:tmp && npm run docs:checkout:gh-pages && npm run docs:copy:tmp:6x","docs:prepare:publish:7x":"env DOCS_DEPLOY=true npm run docs:generate && npm run docs:checkout:gh-pages && rimraf ./docs/7.x && mv ./tmp ./docs/7.x","docs:check-links":"blc http://127.0.0.1:8089 -ro","lint":"eslint .","lint-js":"eslint . --ext .js --ext .cjs","lint-ts":"eslint . --ext .ts","lint-md":"markdownlint-cli2 \\"**/*.md\\"","build-browser":"(rm ./dist/* || true) && node ./scripts/build-browser.js","prepublishOnly":"npm run build-browser","release":"git pull && git push origin master --tags && npm publish","release-5x":"git pull origin 5.x && git push origin 5.x && git push origin 5.x --tags && npm publish --tag 5x","release-6x":"git pull origin 6.x && git push origin 6.x && git push origin 6.x --tags && npm publish --tag 6x","mongo":"node ./tools/repl.js","publish-7x":"npm publish --tag 7x","test":"mocha --exit ./test/*.test.js","test-deno":"deno run --allow-env --allow-read --allow-net --allow-run --allow-sys --allow-write ./test/deno.js","test-rs":"START_REPLICA_SET=1 mocha --timeout 30000 --exit ./test/*.test.js","test-tsd":"node ./test/types/check-types-filename && tsd","tdd":"mocha ./test/*.test.js --inspect --watch --recursive --watch-files ./**/*.{js,ts}","test-coverage":"nyc --reporter=html --reporter=text npm test","ts-benchmark":"cd ./benchmarks/typescript/simple && npm install && npm run benchmark | node ../../../scripts/tsc-diagnostics-check"},"main":"./index.js","types":"./types/index.d.ts","engines":{"node":">=16.20.1"},"bugs":{"url":"https://github.com/Automattic/mongoose/issues/new"},"repository":{"type":"git","url":"git://github.com/Automattic/mongoose.git"},"homepage":"https://mongoosejs.com","browser":"./dist/browser.umd.js","config":{"mongodbMemoryServer":{"disablePostinstall":true}},"funding":{"type":"opencollective","url":"https://opencollective.com/mongoose"},"tsd":{"directory":"test/types","compilerOptions":{"esModuleInterop":false,"strict":true,"allowSyntheticDefaultImports":true,"strictPropertyInitialization":false,"noImplicitAny":false,"strictNullChecks":true,"module":"commonjs","target":"ES2017"}}}');

/***/ })

};
;